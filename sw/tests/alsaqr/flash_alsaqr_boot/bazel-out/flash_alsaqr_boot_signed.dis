
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot_prog_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot_prog_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xf0000480

Program Header:
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x00001fc4 flags rw-
    LOAD off    0x00001000 vaddr 0xf0000000 paddr 0xf0000000 align 2**12
         filesz 0x000036d8 memsz 0x000036d8 flags rwx
    LOAD off    0x00004fc4 vaddr 0xe0001fc4 paddr 0xf00036d8 align 2**12
         filesz 0x00000094 memsz 0x000001d0 flags rw-
    LOAD off    0x00000194 vaddr 0xe0002194 paddr 0xf000376c align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0xf0079000 paddr 0xf0079000 align 2**12
         filesz 0x00000000 memsz 0x00007000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                    Size      VMA       LMA       File off  Algn  Flags
  0 .manifest               00000400  f0000000  f0000000  00001000  2**3  CONTENTS, ALLOC, LOAD, DATA
  1 .vectors                00000080  f0000400  f0000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .crt                    000000c6  f0000480  f0000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array             00000000  f0000548  f0000548  00005058  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .text                   00002358  f0000548  f0000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .shutdown               00000000  f00028a0  f00028a0  00005058  2**2  CONTENTS
  6 .rodata                 00000e38  f00028a0  f00028a0  000038a0  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .static_critical        00001fc4  e0000000  e0000000  00001000  2**2  ALLOC
  8 .data                   00000094  e0001fc4  f00036d8  00004fc4  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss                    0000013c  e0002058  f000376c  00005058  2**2  ALLOC
 10 .freertos.heap          00008000  e0002194  f000376c  00005194  2**2  ALLOC
 11 .non_volatile_scratch   00005000  f007b000  f007b000  00006000  2**11  ALLOC
 12 .non_volatile_counter_0 00000800  f007a800  f007a800  00006000  2**11  ALLOC
 13 .non_volatile_counter_1 00000800  f007a000  f007a000  00006000  2**11  ALLOC
 14 .non_volatile_counter_2 00000800  f0079800  f0079800  00006000  2**11  ALLOC
 15 .non_volatile_counter_3 00000800  f0079000  f0079000  00006000  2**11  ALLOC
 16 .logs.fields            00000154  00010000  00010000  00005058  2**2  CONTENTS, READONLY
 17 .riscv.attributes       00000026  00000000  00000000  000051ac  2**0  CONTENTS, READONLY
 18 .debug_info             0000b080  00000000  00000000  000051d2  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev           00002c3c  00000000  00000000  00010252  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges          00000088  00000000  00000000  00012e8e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line             00008aef  00000000  00000000  00012f16  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc              00006f8b  00000000  00000000  0001ba05  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges           00000b00  00000000  00000000  00022990  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str              00006729  00000000  00000000  00023490  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame            000011f4  00000000  00000000  00029bbc  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
f0000000 l    d  .manifest      00000000 .manifest
f0000400 l    d  .vectors       00000000 .vectors
f0000480 l    d  .crt   00000000 .crt
f0000548 l    d  .init_array    00000000 .init_array
f0000548 l    d  .text  00000000 .text
f00028a0 l    d  .shutdown      00000000 .shutdown
f00028a0 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc4 l    d  .data  00000000 .data
e0002058 l    d  .bss   00000000 .bss
e0002194 l    d  .freertos.heap 00000000 .freertos.heap
f007b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
f007a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
f007a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
f0079800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
f0079000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
00010000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    df *ABS*  00000000 manifest_def.c
f0000000 l     O .manifest      00000380 kManifest_
00000000 l       .debug_str     00000000 
00003ace l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00003afb l       .debug_str     00000000 
00003cad l       .debug_str     00000000 
00003ca4 l       .debug_str     00000000 
00003b06 l       .debug_str     00000000 
00003bb4 l       .debug_str     00000000 
00003be3 l       .debug_str     00000000 
00003beb l       .debug_str     00000000 
00003bff l       .debug_str     00000000 
00003c0a l       .debug_str     00000000 
00003c11 l       .debug_str     00000000 
00003c1f l       .debug_str     00000000 
00003c2d l       .debug_str     00000000 
00003c3e l       .debug_str     00000000 
00003c4f l       .debug_str     00000000 
00003c74 l       .debug_str     00000000 
00003c84 l       .debug_str     00000000 
00003c8f l       .debug_str     00000000 
00003c98 l       .debug_str     00000000 
00003b25 l       .debug_str     00000000 
00003b10 l       .debug_str     00000000 
00004dd9 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00003bc6 l       .debug_str     00000000 
00003bab l       .debug_str     00000000 
00003b3c l       .debug_str     00000000 
00003b54 l       .debug_str     00000000 
00003b74 l       .debug_str     00000000 
00003b88 l       .debug_str     00000000 
00003b9a l       .debug_str     00000000 
00003b5e l       .debug_str     00000000 
00003b4a l       .debug_str     00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
00003c5d l       .debug_str     00000000 
00003c48 l       .debug_str     00000000 
00003cb8 l       .debug_str     00000000 
000004a8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
f0000400 l       .vectors       00000000 
f0000400 l       .vectors       00000000 
f0000480 l       .crt   00000000 
f0000480 l       .crt   00000000 
f00004e4 l       .crt   00000000 init_array_loop_end
f00004d8 l       .crt   00000000 init_array_loop
f00004d8 l       .crt   00000000 
f00004e4 l       .crt   00000000 
00002a9f l       .debug_info    00000000 
00000cf0 l       .debug_abbrev  00000000 
f0000480 l       .vectors       00000000 
f00004e8 l       .crt   00000000 
00000188 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
f00004e8 l       .crt   00000000 
f00004e8 l       .crt   00000000 
f000050a l       .crt   00000000 
f000050c l       .crt   00000000 
f000050c l       .crt   00000000 
00002fe5 l       .debug_info    00000000 
00000de6 l       .debug_abbrev  00000000 
f0000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
f0000548 l       .text  00000000 
f0000548 l       .text  00000000 
f0000598 l       .text  00000000 
f000059c l       .text  00000000 
f000059c l       .text  00000000 
00002029 l       .debug_info    00000000 
000009aa l       .debug_abbrev  00000000 
f00005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
f00005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
f00005c0 l       .text  00000000 
f00005c0 l       .text  00000000 
f00005e4 l       .text  00000000 
f00005e8 l     F .text  0000001e save_current_sp_to_tcb
f00005e8 l       .text  00000000 
f00005e8 l       .text  00000000 
f0000604 l       .text  00000000 
f0000608 l       .text  00000000 
f0000608 l       .text  00000000 
f000064a l       .text  00000000 
f000064c l       .text  00000000 
f000064e l       .text  00000000 
f0000650 l       .text  00000000 
f0000654 l       .text  00000000 
f0000658 l       .text  00000000 
f0000658 l       .text  00000000 
f00006a0 l       .text  00000000 
f00006a2 l       .text  00000000 
f00006a6 l       .text  00000000 
f00006ac l       .text  00000000 
f00006ac l       .text  00000000 
f00006f4 l       .text  00000000 
f00006f6 l       .text  00000000 
f00006fa l       .text  00000000 
f0000700 l       .text  00000000 
f0000700 l       .text  00000000 
f0000748 l       .text  00000000 
f000074a l       .text  00000000 
f000074e l       .text  00000000 
f0000754 l       .text  00000000 
f0000754 l       .text  00000000 
f000079c l       .text  00000000 
f000079e l       .text  00000000 
f00007a2 l       .text  00000000 
f00007a8 l       .text  00000000 
f00007a8 l       .text  00000000 
00002be4 l       .debug_info    00000000 
00000d0f l       .debug_abbrev  00000000 
f0000810 l       .text  00000000 
00000000 l    df *ABS*  00000000 flash_alsaqr_boot.c
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f0000818 l       .text  00000000 
f000081c l       .text  00000000 
f000081c l       .text  00000000 
f000081e l       .text  00000000 
f000081e l       .text  00000000 
f0000826 l       .text  00000000 
f0000826 l       .text  00000000 
f000082e l       .text  00000000 
f000082e l       .text  00000000 
f0000834 l       .text  00000000 
f0000840 l       .text  00000000 
f0000844 l       .text  00000000 
f0000844 l       .text  00000000 
f000084e l       .text  00000000 
f000084e l       .text  00000000 
f0000852 l       .text  00000000 
f0000856 l       .text  00000000 
f0000856 l       .text  00000000 
f0000858 l       .text  00000000 
f0000862 l       .text  00000000 
f0000862 l       .text  00000000 
f0000864 l       .text  00000000 
f0000864 l       .text  00000000 
f0000868 l       .text  00000000 
f000086a l       .text  00000000 
f000086a l       .text  00000000 
00000000 l       .debug_loc     00000000 
00000028 l       .debug_loc     00000000 
0000004e l       .debug_loc     00000000 
00000070 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000000b9 l       .debug_str     00000000 
00000109 l       .debug_str     00000000 
000000f8 l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000166 l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
0000012a l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00000143 l       .debug_str     00000000 
000057d7 l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
f000086a l       .text  00000000 
00000000 l    df *ABS*  00000000 uart.c
f000086a l       .text  00000000 
f000086a l       .text  00000000 
f000086a l       .text  00000000 
f000086e l       .text  00000000 
f0000872 l       .text  00000000 
f0000874 l       .text  00000000 
f0000878 l       .text  00000000 
f000087a l       .text  00000000 
f000087e l       .text  00000000 
f000087e l       .text  00000000 
f0000884 l       .text  00000000 
f0000888 l       .text  00000000 
f000088a l       .text  00000000 
f000088c l       .text  00000000 
f0000890 l       .text  00000000 
f0000894 l       .text  00000000 
f0000896 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f000089c l       .text  00000000 
f000089e l       .text  00000000 
f00008a2 l       .text  00000000 
f00008a4 l       .text  00000000 
f00008a8 l       .text  00000000 
f00008aa l       .text  00000000 
f00008ac l       .text  00000000 
f00008ac l       .text  00000000 
00000083 l       .debug_loc     00000000 
0000009e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000180 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00002a75 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00002e27 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
00005a8b l       .debug_str     00000000 
000001af l       .debug_str     00000000 
000001bc l       .debug_str     00000000 
00004ca7 l       .debug_str     00000000 
000001ca l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
000001e8 l       .debug_str     00000000 
00000143 l       .debug_str     00000000 
00000030 l       .debug_frame   00000000 
f0000898 l       .text  00000000 
f00008ac l       .text  00000000 
00000000 l    df *ABS*  00000000 string_lib.c
f00008ac l       .text  00000000 
f00008ac l       .text  00000000 
f00008ac l       .text  00000000 
f00008ae l       .text  00000000 
f00008c8 l       .text  00000000 
f00008ca l       .text  00000000 
f00008de l       .text  00000000 
f00008de l       .text  00000000 
f0000900 l       .text  00000000 
f0000900 l       .text  00000000 
f0000904 l       .text  00000000 
f000090c l       .text  00000000 
f0000910 l       .text  00000000 
f0000914 l       .text  00000000 
f0000914 l       .text  00000000 
f0000920 l       .text  00000000 
f0000926 l       .text  00000000 
f0000926 l       .text  00000000 
f0000928 l       .text  00000000 
f0000928 l       .text  00000000 
f000092a l       .text  00000000 
f000092c l       .text  00000000 
f000092c l       .text  00000000 
f0000930 l       .text  00000000 
f0000932 l       .text  00000000 
f0000936 l       .text  00000000 
f000093a l       .text  00000000 
f000093a l       .text  00000000 
f000093e l       .text  00000000 
f000093e l       .text  00000000 
f0000940 l       .text  00000000 
f0000944 l       .text  00000000 
f0000948 l       .text  00000000 
f000094e l       .text  00000000 
f0000956 l       .text  00000000 
f0000958 l       .text  00000000 
f0000958 l       .text  00000000 
f0000960 l       .text  00000000 
f0000964 l       .text  00000000 
f0000966 l       .text  00000000 
f000096a l       .text  00000000 
f000096a l       .text  00000000 
f0000972 l       .text  00000000 
f0000976 l       .text  00000000 
f0000978 l       .text  00000000 
f000097c l       .text  00000000 
f000097c l       .text  00000000 
f0000994 l       .text  00000000 
f000099a l       .text  00000000 
f00009a4 l       .text  00000000 
f00009b4 l       .text  00000000 
f00009b4 l       .text  00000000 
f00009b8 l       .text  00000000 
f00009b8 l       .text  00000000 
f00009ba l       .text  00000000 
f00009ba l       .text  00000000 
f00009c2 l       .text  00000000 
f00009c4 l       .text  00000000 
f00009c6 l       .text  00000000 
f00009c6 l       .text  00000000 
f00009cc l       .text  00000000 
f00009d4 l       .text  00000000 
f00009da l       .text  00000000 
f00009de l       .text  00000000 
f00009e2 l       .text  00000000 
f00009e6 l       .text  00000000 
f0000a2e l     F .text  000000cc qprints
f00009ec l       .text  00000000 
f00009ee l       .text  00000000 
f00009f4 l       .text  00000000 
f00009f8 l       .text  00000000 
f00009fe l       .text  00000000 
f0000a00 l       .text  00000000 
f0000afa l     F .text  00000138 qprinti
f0000a08 l       .text  00000000 
f0000a0a l       .text  00000000 
f0000a0a l       .text  00000000 
f0000a0c l       .text  00000000 
f0000a0e l       .text  00000000 
f0000a0e l       .text  00000000 
f0000a20 l       .text  00000000 
f0000a2e l       .text  00000000 
f0000a2e l       .text  00000000 
f0000a2e l       .text  00000000 
f0000a2e l       .text  00000000 
f0000a2e l       .text  00000000 
f0000a30 l       .text  00000000 
f0000a3e l       .text  00000000 
f0000a40 l       .text  00000000 
f0000a42 l       .text  00000000 
f0000a42 l       .text  00000000 
f0000a46 l       .text  00000000 
f0000a46 l       .text  00000000 
f0000a4a l       .text  00000000 
f0000a4c l       .text  00000000 
f0000a4e l       .text  00000000 
f0000a52 l       .text  00000000 
f0000a52 l       .text  00000000 
f0000a5a l       .text  00000000 
f0000a5e l       .text  00000000 
f0000a5e l       .text  00000000 
f0000a60 l       .text  00000000 
f0000a62 l       .text  00000000 
f0000a66 l       .text  00000000 
f0000a66 l       .text  00000000 
f0000a72 l       .text  00000000 
f0000a74 l       .text  00000000 
f0000a78 l       .text  00000000 
f0000a78 l       .text  00000000 
f0000a7c l       .text  00000000 
f0000a7c l       .text  00000000 
f0000a84 l       .text  00000000 
f0000a86 l       .text  00000000 
f0000a86 l       .text  00000000 
f0000a8a l       .text  00000000 
f0000a8a l       .text  00000000 
f0000a8c l       .text  00000000 
f0000a94 l       .text  00000000 
f0000a98 l       .text  00000000 
f0000a9a l       .text  00000000 
f0000aa0 l       .text  00000000 
f0000aa0 l       .text  00000000 
f0000aa4 l       .text  00000000 
f0000aa4 l       .text  00000000 
f0000aa6 l       .text  00000000 
f0000aae l       .text  00000000 
f0000ab2 l       .text  00000000 
f0000ab8 l       .text  00000000 
f0000ab8 l       .text  00000000 
f0000abc l       .text  00000000 
f0000abc l       .text  00000000 
f0000ac0 l       .text  00000000 
f0000ac6 l       .text  00000000 
f0000ac6 l       .text  00000000 
f0000aca l       .text  00000000 
f0000acc l       .text  00000000 
f0000acc l       .text  00000000 
f0000ad0 l       .text  00000000 
f0000ad2 l       .text  00000000 
f0000ad6 l       .text  00000000 
f0000adc l       .text  00000000 
f0000adc l       .text  00000000 
f0000ae0 l       .text  00000000 
f0000ae0 l       .text  00000000 
f0000ae2 l       .text  00000000 
f0000ae2 l       .text  00000000 
f0000ae6 l       .text  00000000 
f0000afa l       .text  00000000 
f0000afa l       .text  00000000 
f0000afa l       .text  00000000 
f0000afa l       .text  00000000 
f0000afa l       .text  00000000 
f0000afc l       .text  00000000 
f0000b06 l       .text  00000000 
f0000b08 l       .text  00000000 
f0000b0a l       .text  00000000 
f0000b0a l       .text  00000000 
f0000b0c l       .text  00000000 
f0000b10 l       .text  00000000 
f0000b10 l       .text  00000000 
f0000b18 l       .text  00000000 
f0000b26 l       .text  00000000 
f0000b2a l       .text  00000000 
f0000b2a l       .text  00000000 
f0000b2e l       .text  00000000 
f0000b2e l       .text  00000000 
f0000b30 l       .text  00000000 
f0000b34 l       .text  00000000 
f0000b38 l       .text  00000000 
f0000b3a l       .text  00000000 
f0000b42 l       .text  00000000 
f0000b44 l       .text  00000000 
f0000b44 l       .text  00000000 
f0000b46 l       .text  00000000 
f0000b46 l       .text  00000000 
f0000b48 l       .text  00000000 
f0000b4c l       .text  00000000 
f0000b4e l       .text  00000000 
f0000b50 l       .text  00000000 
f0000b50 l       .text  00000000 
f0000b54 l       .text  00000000 
f0000b58 l       .text  00000000 
f0000b58 l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b60 l       .text  00000000 
f0000b60 l       .text  00000000 
f0000b62 l       .text  00000000 
f0000b62 l       .text  00000000 
f0000b68 l       .text  00000000 
f0000b68 l       .text  00000000 
f0000b6c l       .text  00000000 
f0000b6c l       .text  00000000 
f0000b70 l       .text  00000000 
f0000b74 l       .text  00000000 
f0000b78 l       .text  00000000 
f0000b7a l       .text  00000000 
f0000b7c l       .text  00000000 
f0000b7c l       .text  00000000 
f0000b7e l       .text  00000000 
f0000b7e l       .text  00000000 
f0000b80 l       .text  00000000 
f0000b84 l       .text  00000000 
f0000b88 l       .text  00000000 
f0000b92 l       .text  00000000 
f0000b92 l       .text  00000000 
f0000b96 l       .text  00000000 
f0000b9a l       .text  00000000 
f0000b9c l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000ba2 l       .text  00000000 
f0000ba4 l       .text  00000000 
f0000ba4 l       .text  00000000 
f0000ba6 l       .text  00000000 
f0000baa l       .text  00000000 
f0000baa l       .text  00000000 
f0000bae l       .text  00000000 
f0000bae l       .text  00000000 
f0000bb2 l       .text  00000000 
f0000bb4 l       .text  00000000 
f0000bb4 l       .text  00000000 
f0000bb8 l       .text  00000000 
f0000bba l       .text  00000000 
f0000bbe l       .text  00000000 
f0000bc0 l       .text  00000000 
f0000bc4 l       .text  00000000 
f0000bc6 l       .text  00000000 
f0000bc8 l       .text  00000000 
f0000bcc l       .text  00000000 
f0000bce l       .text  00000000 
f0000bce l       .text  00000000 
f0000bd2 l       .text  00000000 
f0000bd2 l       .text  00000000 
f0000bd4 l       .text  00000000 
f0000bd6 l       .text  00000000 
f0000bd8 l       .text  00000000 
f0000bd8 l       .text  00000000 
f0000bde l       .text  00000000 
f0000be0 l       .text  00000000 
f0000be0 l       .text  00000000 
f0000be4 l       .text  00000000 
f0000be8 l       .text  00000000 
f0000be8 l       .text  00000000 
f0000bf0 l       .text  00000000 
f0000bf4 l       .text  00000000 
f0000bf6 l       .text  00000000 
f0000bfa l       .text  00000000 
f0000bfa l       .text  00000000 
f0000bfe l       .text  00000000 
f0000c04 l       .text  00000000 
f0000c04 l       .text  00000000 
f0000c06 l       .text  00000000 
f0000c08 l       .text  00000000 
f0000c08 l       .text  00000000 
f0000c0c l       .text  00000000 
f0000c0c l       .text  00000000 
f0000c10 l       .text  00000000 
f0000c10 l       .text  00000000 
f0000c16 l       .text  00000000 
f0000c16 l       .text  00000000 
f0000c18 l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c22 l       .text  00000000 
f0000c22 l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c26 l       .text  00000000 
f0000c28 l       .text  00000000 
f0000c32 l       .text  00000000 
f0000c32 l       .text  00000000 
000000b9 l       .debug_loc     00000000 
000000df l       .debug_loc     00000000 
00000105 l       .debug_loc     00000000 
0000012d l       .debug_loc     00000000 
00000153 l       .debug_loc     00000000 
000001b0 l       .debug_loc     00000000 
000001d8 l       .debug_loc     00000000 
000001fe l       .debug_loc     00000000 
00000233 l       .debug_loc     00000000 
00000273 l       .debug_loc     00000000 
0000028e l       .debug_loc     00000000 
000002a9 l       .debug_loc     00000000 
000002cf l       .debug_loc     00000000 
0000030f l       .debug_loc     00000000 
00000335 l       .debug_loc     00000000 
0000037c l       .debug_loc     00000000 
00000397 l       .debug_loc     00000000 
000003bf l       .debug_loc     00000000 
00000446 l       .debug_loc     00000000 
0000046c l       .debug_loc     00000000 
000004ac l       .debug_loc     00000000 
000004cd l       .debug_loc     00000000 
000004f2 l       .debug_loc     00000000 
00000518 l       .debug_loc     00000000 
00000554 l       .debug_loc     00000000 
0000057a l       .debug_loc     00000000 
000005ab l       .debug_loc     00000000 
000005dc l       .debug_loc     00000000 
00000618 l       .debug_loc     00000000 
0000065a l       .debug_loc     00000000 
00000684 l       .debug_loc     00000000 
000006e1 l       .debug_loc     00000000 
00000709 l       .debug_loc     00000000 
00000787 l       .debug_loc     00000000 
000007a2 l       .debug_loc     00000000 
000007c8 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000001f5 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000220 l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001bc l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
00006483 l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
0000024f l       .debug_str     00000000 
00000264 l       .debug_str     00000000 
00003a98 l       .debug_str     00000000 
000063fc l       .debug_str     00000000 
00000268 l       .debug_str     00000000 
00001788 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000252 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
00004ca7 l       .debug_str     00000000 
000057d7 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
000002a2 l       .debug_str     00000000 
000002a9 l       .debug_str     00000000 
000002b1 l       .debug_str     00000000 
00005a8b l       .debug_str     00000000 
0000029a l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
00002522 l       .debug_str     00000000 
000002bf l       .debug_str     00000000 
000002c2 l       .debug_str     00000000 
000002b5 l       .debug_str     00000000 
000002ca l       .debug_str     00000000 
000002ce l       .debug_str     00000000 
000064c8 l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
0000028d l       .debug_str     00000000 
0000027f l       .debug_str     00000000 
00000b63 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00000286 l       .debug_str     00000000 
000064b4 l       .debug_str     00000000 
00004b9a l       .debug_str     00000000 
00000094 l       .debug_frame   00000000 
f0000a2e l       .text  00000000 
f0000afa l       .text  00000000 
f0000c32 l       .text  00000000 
00000000 l    df *ABS*  00000000 pinmux.c
f0000c32 l       .text  00000000 
f0000c32 l       .text  00000000 
f0000c32 l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c36 l       .text  00000000 
f0000c3c l       .text  00000000 
f0000c3c l       .text  00000000 
f0000c3e l       .text  00000000 
f0000c3e l       .text  00000000 
f0000c42 l       .text  00000000 
f0000c42 l       .text  00000000 
f0000c46 l       .text  00000000 
f0000c46 l       .text  00000000 
f0000c56 l       .text  00000000 
f0000c56 l       .text  00000000 
f0000c58 l       .text  00000000 
f0000c58 l       .text  00000000 
f0000c5c l       .text  00000000 
f0000c5c l       .text  00000000 
f0000c60 l       .text  00000000 
f0000c60 l       .text  00000000 
f0000c66 l       .text  00000000 
f0000c66 l       .text  00000000 
f0000c6c l       .text  00000000 
f0000c6c l       .text  00000000 
f0000c76 l       .text  00000000 
f0000c76 l       .text  00000000 
f0000c78 l       .text  00000000 
f0000c78 l       .text  00000000 
f0000c7e l       .text  00000000 
f0000c7e l       .text  00000000 
f0000c86 l       .text  00000000 
f0000c86 l       .text  00000000 
f0000c8a l       .text  00000000 
f0000c8a l       .text  00000000 
f0000c90 l       .text  00000000 
f0000c90 l       .text  00000000 
000007e3 l       .debug_loc     00000000 
00000801 l       .debug_loc     00000000 
00000814 l       .debug_loc     00000000 
0000082e l       .debug_loc     00000000 
00000848 l       .debug_loc     00000000 
00000862 l       .debug_loc     00000000 
0000087d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000002ff l       .debug_str     00000000 
000017b1 l       .debug_str     00000000 
000017a4 l       .debug_str     00000000 
0000030e l       .debug_str     00000000 
00001266 l       .debug_str     00000000 
00000268 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000c7b l       .debug_str     00000000 
00000315 l       .debug_str     00000000 
0000033d l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
0000038d l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
000003dd l       .debug_str     00000000 
00000405 l       .debug_str     00000000 
0000042d l       .debug_str     00000000 
00000455 l       .debug_str     00000000 
0000047d l       .debug_str     00000000 
000004a5 l       .debug_str     00000000 
000004ce l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000520 l       .debug_str     00000000 
00000549 l       .debug_str     00000000 
00000572 l       .debug_str     00000000 
0000059b l       .debug_str     00000000 
000005c4 l       .debug_str     00000000 
000005ed l       .debug_str     00000000 
00000616 l       .debug_str     00000000 
0000063f l       .debug_str     00000000 
00000668 l       .debug_str     00000000 
00000691 l       .debug_str     00000000 
000006ba l       .debug_str     00000000 
000006e3 l       .debug_str     00000000 
0000070c l       .debug_str     00000000 
00000735 l       .debug_str     00000000 
0000075e l       .debug_str     00000000 
00000787 l       .debug_str     00000000 
000007b0 l       .debug_str     00000000 
000007d9 l       .debug_str     00000000 
00000802 l       .debug_str     00000000 
0000082b l       .debug_str     00000000 
00000851 l       .debug_str     00000000 
00000877 l       .debug_str     00000000 
0000089d l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
000008e9 l       .debug_str     00000000 
0000090f l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
00000963 l       .debug_str     00000000 
0000098d l       .debug_str     00000000 
000009b7 l       .debug_str     00000000 
000009dd l       .debug_str     00000000 
00000a03 l       .debug_str     00000000 
00000a29 l       .debug_str     00000000 
00000a4f l       .debug_str     00000000 
00000a7d l       .debug_str     00000000 
00000aa8 l       .debug_str     00000000 
00000ad3 l       .debug_str     00000000 
00000afe l       .debug_str     00000000 
00000b33 l       .debug_str     00000000 
00000b65 l       .debug_str     00000000 
00000b97 l       .debug_str     00000000 
00000bc9 l       .debug_str     00000000 
00000bfb l       .debug_str     00000000 
00000c2e l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000126c l       .debug_str     00000000 
00001252 l       .debug_str     00000000 
00000cc1 l       .debug_str     00000000 
00000ce5 l       .debug_str     00000000 
00000d08 l       .debug_str     00000000 
00000d24 l       .debug_str     00000000 
00000d40 l       .debug_str     00000000 
00000d5c l       .debug_str     00000000 
00000d78 l       .debug_str     00000000 
00000d94 l       .debug_str     00000000 
00000db0 l       .debug_str     00000000 
00000dcc l       .debug_str     00000000 
00000de8 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000e20 l       .debug_str     00000000 
00000e3c l       .debug_str     00000000 
00000e58 l       .debug_str     00000000 
00000e74 l       .debug_str     00000000 
00000e90 l       .debug_str     00000000 
00000eac l       .debug_str     00000000 
00000ec8 l       .debug_str     00000000 
00000ee4 l       .debug_str     00000000 
00000f00 l       .debug_str     00000000 
00000f1c l       .debug_str     00000000 
00000f39 l       .debug_str     00000000 
00000f56 l       .debug_str     00000000 
00000f73 l       .debug_str     00000000 
00000f8f l       .debug_str     00000000 
00000fab l       .debug_str     00000000 
00000fc7 l       .debug_str     00000000 
00000fe3 l       .debug_str     00000000 
00000fff l       .debug_str     00000000 
0000101b l       .debug_str     00000000 
00001037 l       .debug_str     00000000 
00001053 l       .debug_str     00000000 
0000106f l       .debug_str     00000000 
0000108b l       .debug_str     00000000 
000010a8 l       .debug_str     00000000 
000010c5 l       .debug_str     00000000 
000010e2 l       .debug_str     00000000 
000010fe l       .debug_str     00000000 
0000111a l       .debug_str     00000000 
00001136 l       .debug_str     00000000 
00001152 l       .debug_str     00000000 
0000116e l       .debug_str     00000000 
0000118a l       .debug_str     00000000 
000011a6 l       .debug_str     00000000 
000011c2 l       .debug_str     00000000 
000011df l       .debug_str     00000000 
000011fc l       .debug_str     00000000 
00001219 l       .debug_str     00000000 
00001236 l       .debug_str     00000000 
0000178a l       .debug_str     00000000 
00001772 l       .debug_str     00000000 
00001288 l       .debug_str     00000000 
000012a2 l       .debug_str     00000000 
000012bc l       .debug_str     00000000 
000012d6 l       .debug_str     00000000 
000012f0 l       .debug_str     00000000 
0000130a l       .debug_str     00000000 
00001324 l       .debug_str     00000000 
0000133e l       .debug_str     00000000 
00001358 l       .debug_str     00000000 
00001372 l       .debug_str     00000000 
0000138c l       .debug_str     00000000 
000013a6 l       .debug_str     00000000 
000013c0 l       .debug_str     00000000 
000013da l       .debug_str     00000000 
000013f4 l       .debug_str     00000000 
0000140e l       .debug_str     00000000 
00001428 l       .debug_str     00000000 
00001442 l       .debug_str     00000000 
0000145c l       .debug_str     00000000 
00001476 l       .debug_str     00000000 
00001491 l       .debug_str     00000000 
000014ac l       .debug_str     00000000 
000014c7 l       .debug_str     00000000 
000014e1 l       .debug_str     00000000 
000014fb l       .debug_str     00000000 
00001515 l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00001549 l       .debug_str     00000000 
00001563 l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00001597 l       .debug_str     00000000 
000015b1 l       .debug_str     00000000 
000015cb l       .debug_str     00000000 
000015e6 l       .debug_str     00000000 
00001601 l       .debug_str     00000000 
0000161c l       .debug_str     00000000 
00001636 l       .debug_str     00000000 
00001650 l       .debug_str     00000000 
0000166a l       .debug_str     00000000 
00001684 l       .debug_str     00000000 
0000169e l       .debug_str     00000000 
000016b8 l       .debug_str     00000000 
000016d2 l       .debug_str     00000000 
000016ec l       .debug_str     00000000 
00001707 l       .debug_str     00000000 
00001722 l       .debug_str     00000000 
0000173d l       .debug_str     00000000 
00001758 l       .debug_str     00000000 
000017c0 l       .debug_str     00000000 
000017cf l       .debug_str     00000000 
000017de l       .debug_str     00000000 
000017ea l       .debug_str     00000000 
0000295c l       .debug_str     00000000 
0000294e l       .debug_str     00000000 
000017f7 l       .debug_str     00000000 
0000292a l       .debug_str     00000000 
00001d91 l       .debug_str     00000000 
00001d75 l       .debug_str     00000000 
000017fb l       .debug_str     00000000 
00001818 l       .debug_str     00000000 
00001835 l       .debug_str     00000000 
00001852 l       .debug_str     00000000 
0000186f l       .debug_str     00000000 
0000188c l       .debug_str     00000000 
000018a9 l       .debug_str     00000000 
000018c6 l       .debug_str     00000000 
000018e3 l       .debug_str     00000000 
00001900 l       .debug_str     00000000 
0000191d l       .debug_str     00000000 
0000193a l       .debug_str     00000000 
00001957 l       .debug_str     00000000 
00001974 l       .debug_str     00000000 
00001991 l       .debug_str     00000000 
000019ae l       .debug_str     00000000 
000019cb l       .debug_str     00000000 
000019e8 l       .debug_str     00000000 
00001a05 l       .debug_str     00000000 
00001a22 l       .debug_str     00000000 
00001a40 l       .debug_str     00000000 
00001a5e l       .debug_str     00000000 
00001a7c l       .debug_str     00000000 
00001a99 l       .debug_str     00000000 
00001ab6 l       .debug_str     00000000 
00001ad3 l       .debug_str     00000000 
00001af0 l       .debug_str     00000000 
00001b0d l       .debug_str     00000000 
00001b2a l       .debug_str     00000000 
00001b47 l       .debug_str     00000000 
00001b64 l       .debug_str     00000000 
00001b81 l       .debug_str     00000000 
00001b9e l       .debug_str     00000000 
00001bbc l       .debug_str     00000000 
00001bda l       .debug_str     00000000 
00001bf8 l       .debug_str     00000000 
00001c15 l       .debug_str     00000000 
00001c32 l       .debug_str     00000000 
00001c4f l       .debug_str     00000000 
00001c6c l       .debug_str     00000000 
00001c89 l       .debug_str     00000000 
00001ca6 l       .debug_str     00000000 
00001cc3 l       .debug_str     00000000 
00001ce0 l       .debug_str     00000000 
00001cfe l       .debug_str     00000000 
00001d1c l       .debug_str     00000000 
00001d3a l       .debug_str     00000000 
00001d58 l       .debug_str     00000000 
00002931 l       .debug_str     00000000 
00002916 l       .debug_str     00000000 
00001daf l       .debug_str     00000000 
00001dd4 l       .debug_str     00000000 
00001df8 l       .debug_str     00000000 
00001e1e l       .debug_str     00000000 
00001e40 l       .debug_str     00000000 
00001e62 l       .debug_str     00000000 
00001e84 l       .debug_str     00000000 
00001ea6 l       .debug_str     00000000 
00001ec8 l       .debug_str     00000000 
00001eea l       .debug_str     00000000 
00001f0c l       .debug_str     00000000 
00001f2e l       .debug_str     00000000 
00001f50 l       .debug_str     00000000 
00001f72 l       .debug_str     00000000 
00001f95 l       .debug_str     00000000 
00001fb8 l       .debug_str     00000000 
00001fdb l       .debug_str     00000000 
00001ffe l       .debug_str     00000000 
00002021 l       .debug_str     00000000 
00002044 l       .debug_str     00000000 
00002067 l       .debug_str     00000000 
0000208a l       .debug_str     00000000 
000020ad l       .debug_str     00000000 
000020d0 l       .debug_str     00000000 
000020f3 l       .debug_str     00000000 
00002116 l       .debug_str     00000000 
00002139 l       .debug_str     00000000 
0000215c l       .debug_str     00000000 
0000217f l       .debug_str     00000000 
000021a2 l       .debug_str     00000000 
000021c5 l       .debug_str     00000000 
000021e8 l       .debug_str     00000000 
0000220b l       .debug_str     00000000 
0000222e l       .debug_str     00000000 
00002251 l       .debug_str     00000000 
00002274 l       .debug_str     00000000 
00002294 l       .debug_str     00000000 
000022b4 l       .debug_str     00000000 
000022d4 l       .debug_str     00000000 
000022f4 l       .debug_str     00000000 
00002314 l       .debug_str     00000000 
00002334 l       .debug_str     00000000 
00002358 l       .debug_str     00000000 
0000237c l       .debug_str     00000000 
000023a0 l       .debug_str     00000000 
000023c4 l       .debug_str     00000000 
000023e4 l       .debug_str     00000000 
00002404 l       .debug_str     00000000 
00002424 l       .debug_str     00000000 
00002444 l       .debug_str     00000000 
0000246a l       .debug_str     00000000 
00002490 l       .debug_str     00000000 
000024b6 l       .debug_str     00000000 
000024dc l       .debug_str     00000000 
00002500 l       .debug_str     00000000 
00002524 l       .debug_str     00000000 
00002549 l       .debug_str     00000000 
00002578 l       .debug_str     00000000 
000025a7 l       .debug_str     00000000 
000025d6 l       .debug_str     00000000 
00002605 l       .debug_str     00000000 
00002634 l       .debug_str     00000000 
00002663 l       .debug_str     00000000 
00002692 l       .debug_str     00000000 
000026c1 l       .debug_str     00000000 
000026f0 l       .debug_str     00000000 
00002713 l       .debug_str     00000000 
00002736 l       .debug_str     00000000 
00002759 l       .debug_str     00000000 
0000277c l       .debug_str     00000000 
0000279f l       .debug_str     00000000 
000027c2 l       .debug_str     00000000 
000027e7 l       .debug_str     00000000 
00002817 l       .debug_str     00000000 
00002844 l       .debug_str     00000000 
00002871 l       .debug_str     00000000 
0000289e l       .debug_str     00000000 
000028cb l       .debug_str     00000000 
000028f9 l       .debug_str     00000000 
00002991 l       .debug_str     00000000 
0000296c l       .debug_str     00000000 
0000297e l       .debug_str     00000000 
0000299f l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
000029ae l       .debug_str     00000000 
00003a9d l       .debug_str     00000000 
000029b8 l       .debug_str     00000000 
00005659 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
000029c9 l       .debug_str     00000000 
000060d3 l       .debug_str     00000000 
000029da l       .debug_str     00000000 
000029e4 l       .debug_str     00000000 
000029ea l       .debug_str     00000000 
000029f4 l       .debug_str     00000000 
0000012a l       .debug_str     00000000 
00002a06 l       .debug_str     00000000 
000029fb l       .debug_str     00000000 
00000150 l       .debug_frame   00000000 
f0000c90 l       .text  00000000 
00000000 l    df *ABS*  00000000 otp.c
f0000c90 l       .text  00000000 
f0000c90 l       .text  00000000 
f0000c90 l       .text  00000000 
f0000c94 l       .text  00000000 
f0000c96 l       .text  00000000 
f0000c96 l       .text  00000000 
f0000c9a l       .text  00000000 
f0000c9a l       .text  00000000 
f0000c9a l       .text  00000000 
00000898 l       .debug_loc     00000000 
000008b3 l       .debug_loc     00000000 
000008ce l       .debug_loc     00000000 
000008ec l       .debug_loc     00000000 
00000928 l       .debug_loc     00000000 
00000943 l       .debug_loc     00000000 
00000969 l       .debug_loc     00000000 
0000098f l       .debug_loc     00000000 
000009ad l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002a13 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000078 l       .debug_ranges  00000000 
0000299f l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
000029fb l       .debug_str     00000000 
00002ab0 l       .debug_str     00000000 
00002a3f l       .debug_str     00000000 
00002a60 l       .debug_str     00000000 
00003f6f l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00002a8b l       .debug_str     00000000 
00004dd9 l       .debug_str     00000000 
00002ab8 l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
00002a94 l       .debug_str     00000000 
00002a4f l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
0000017c l       .debug_frame   00000000 
f0000c9a l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
f0000c9a l       .text  00000000 
f0000c9a l       .text  00000000 
f0000c9a l       .text  00000000 
f0000c9c l       .text  00000000 
f0000c9c l       .text  00000000 
f0000c9e l       .text  00000000 
f0000ca8 l       .text  00000000 
f0000caa l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cbc l       .text  00000000 
00010000 l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
f0000cbe l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000ce6 l       .text  00000000 
f0000ce6 l       .text  00000000 
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
e0002058 l     O .bss   00000004 uart0
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
f0000cee l       .text  00000000 
f0000cf6 l       .text  00000000 
f0000cfc l       .text  00000000 
f0000d00 l       .text  00000000 
f0000d00 l       .text  00000000 
f0000d0a l       .text  00000000 
f0000d1a l       .text  00000000 
f0000e20 l     F .text  000000da init_uart
f0000d1c l       .text  00000000 
f0000d1e l       .text  00000000 
f0000d1e l       .text  00000000 
f0000d22 l       .text  00000000 
f0000d24 l       .text  00000000 
00010014 l     O .logs.fields   00000014 _ottf_main.kLogFields
f0000d26 l       .text  00000000 
f0000d36 l       .text  00000000 
f0000d36 l       .text  00000000 
f0000d38 l       .text  00000000 
f0000d38 l       .text  00000000 
f0000d50 l       .text  00000000 
f0000d50 l       .text  00000000 
f0000d5a l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d5e l       .text  00000000 
f0000d5e l       .text  00000000 
f0000d62 l       .text  00000000 
f0000d64 l       .text  00000000 
00010028 l     O .logs.fields   00000014 _ottf_main.kLogFields.3
f0000d64 l       .text  00000000 
f0000d74 l       .text  00000000 
f0000d74 l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d8e l       .text  00000000 
f0000d8e l       .text  00000000 
f0000d94 l       .text  00000000 
f0000d98 l       .text  00000000 
f0000d98 l       .text  00000000 
f0000da0 l       .text  00000000 
f0000db0 l       .text  00000000 
f0000db4 l       .text  00000000 
f0000db6 l       .text  00000000 
f0000efa l     F .text  00000092 test_wrapper
f0000db6 l       .text  00000000 
f0000dc6 l       .text  00000000 
f0000dd4 l       .text  00000000 
f0000dd4 l       .text  00000000 
f0000dd8 l       .text  00000000 
f0000dd8 l       .text  00000000 
f0000dda l       .text  00000000 
f0000dde l       .text  00000000 
f0000dde l       .text  00000000 
f0000de2 l       .text  00000000 
0001003c l     O .logs.fields   00000014 _ottf_main.kLogFields.7
f0000de4 l       .text  00000000 
f0000df2 l       .text  00000000 
f0000df2 l       .text  00000000 
f0000df4 l       .text  00000000 
f0000df4 l       .text  00000000 
f0000e0a l       .text  00000000 
f0000e0a l       .text  00000000 
f0000e10 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e22 l       .text  00000000 
f0000e22 l       .text  00000000 
f0000e22 l       .text  00000000 
f0000e28 l       .text  00000000 
f0000e38 l       .text  00000000 
f0000e38 l       .text  00000000 
f0000e40 l       .text  00000000 
f0000e42 l       .text  00000000 
f0000e42 l       .text  00000000 
f0000e44 l       .text  00000000 
f0000e44 l       .text  00000000 
f0000e46 l       .text  00000000 
f0000e48 l       .text  00000000 
00010050 l     O .logs.fields   00000014 init_uart.kLogFields
f0000e48 l       .text  00000000 
f0000e58 l       .text  00000000 
f0000e58 l       .text  00000000 
f0000e5a l       .text  00000000 
f0000e5a l       .text  00000000 
f0000e72 l       .text  00000000 
f0000e72 l       .text  00000000 
f0000e78 l       .text  00000000 
f0000e7c l       .text  00000000 
f0000e7c l       .text  00000000 
f0000ea8 l       .text  00000000 
f0000eaa l       .text  00000000 
f0000eac l       .text  00000000 
f0000eac l       .text  00000000 
f0000eae l       .text  00000000 
f0000eb0 l       .text  00000000 
00010064 l     O .logs.fields   00000014 init_uart.kLogFields.11
f0000eb0 l       .text  00000000 
f0000ec0 l       .text  00000000 
f0000ec0 l       .text  00000000 
f0000ec2 l       .text  00000000 
f0000ec2 l       .text  00000000 
f0000eda l       .text  00000000 
f0000eda l       .text  00000000 
f0000ee0 l       .text  00000000 
f0000ee4 l       .text  00000000 
f0000ee4 l       .text  00000000 
f0000ef0 l       .text  00000000 
f0000ef0 l       .text  00000000 
f0000efa l       .text  00000000 
f0000efa l       .text  00000000 
f0000efa l       .text  00000000 
f0000efa l       .text  00000000 
f0000efa l       .text  00000000 
f0000efc l       .text  00000000 
f0000f02 l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f08 l       .text  00000000 
f0000f0c l       .text  00000000 
f0000f0c l       .text  00000000 
f0000f0e l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f12 l       .text  00000000 
f0000f16 l       .text  00000000 
f0000f16 l       .text  00000000 
f0000f26 l       .text  00000000 
f0000f26 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f32 l       .text  00000000 
f0000f3a l       .text  00000000 
f0000f3e l       .text  00000000 
f0000f40 l       .text  00000000 
f0000f42 l       .text  00000000 
f0000f42 l       .text  00000000 
f0000f4c l       .text  00000000 
f0000f4e l       .text  00000000 
00010078 l     O .logs.fields   00000014 report_test_status.kLogFields
f0000f50 l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f62 l       .text  00000000 
f0000f7a l       .text  00000000 
f0000f7a l       .text  00000000 
f0000f7c l       .text  00000000 
f0000f7c l       .text  00000000 
f0000f82 l       .text  00000000 
f0000f82 l       .text  00000000 
f0000f8c l       .text  00000000 
f0000f8c l       .text  00000000 
000009c9 l       .debug_loc     00000000 
000009e4 l       .debug_loc     00000000 
000009ff l       .debug_loc     00000000 
00000a1a l       .debug_loc     00000000 
00000a35 l       .debug_loc     00000000 
00000a66 l       .debug_loc     00000000 
00000a81 l       .debug_loc     00000000 
00000ab2 l       .debug_loc     00000000 
00000ae3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002ac2 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000000a0 l       .debug_ranges  00000000 
00003040 l       .debug_str     00000000 
00002af3 l       .debug_str     00000000 
00002b70 l       .debug_str     00000000 
00002b7b l       .debug_str     00000000 
00002b48 l       .debug_str     00000000 
00002b60 l       .debug_str     00000000 
000058e0 l       .debug_str     00000000 
00002b6a l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
00002b51 l       .debug_str     00000000 
00002b44 l       .debug_str     00000000 
00002afe l       .debug_str     00000000 
00002b0f l       .debug_str     00000000 
00002b20 l       .debug_str     00000000 
00002b32 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
000030a6 l       .debug_str     00000000 
00002be1 l       .debug_str     00000000 
00002da4 l       .debug_str     00000000 
00002b88 l       .debug_str     00000000 
00002bbb l       .debug_str     00000000 
00002bb2 l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00002bc6 l       .debug_str     00000000 
00002c63 l       .debug_str     00000000 
00002c50 l       .debug_str     00000000 
00002c01 l       .debug_str     00000000 
00004db5 l       .debug_str     00000000 
00002c1c l       .debug_str     00000000 
00002c34 l       .debug_str     00000000 
00002c45 l       .debug_str     00000000 
00002bee l       .debug_str     00000000 
00002bdd l       .debug_str     00000000 
000030b1 l       .debug_str     00000000 
00002fe3 l       .debug_str     00000000 
00002c78 l       .debug_str     00000000 
00002c8d l       .debug_str     00000000 
00002ca6 l       .debug_str     00000000 
00002cb8 l       .debug_str     00000000 
00002cc9 l       .debug_str     00000000 
00002cdb l       .debug_str     00000000 
00002d35 l       .debug_str     00000000 
00002ced l       .debug_str     00000000 
00002cfa l       .debug_str     00000000 
00002d0e l       .debug_str     00000000 
00002d1f l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00002d52 l       .debug_str     00000000 
00002d5d l       .debug_str     00000000 
00002d68 l       .debug_str     00000000 
00002d78 l       .debug_str     00000000 
00002d87 l       .debug_str     00000000 
00002d96 l       .debug_str     00000000 
00002daf l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
00002dc9 l       .debug_str     00000000 
00002ddc l       .debug_str     00000000 
00002e1e l       .debug_str     00000000 
00002df9 l       .debug_str     00000000 
00002e0b l       .debug_str     00000000 
00002e2e l       .debug_str     00000000 
00002e2f l       .debug_str     00000000 
000029a6 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00002e3a l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00002e62 l       .debug_str     00000000 
00002e79 l       .debug_str     00000000 
00000143 l       .debug_str     00000000 
00002e85 l       .debug_str     00000000 
0000305b l       .debug_str     00000000 
0000306b l       .debug_str     00000000 
00002e99 l       .debug_str     00000000 
00003081 l       .debug_str     00000000 
00002ea5 l       .debug_str     00000000 
00003099 l       .debug_str     00000000 
00002eb3 l       .debug_str     00000000 
00002ec4 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00002eeb l       .debug_str     00000000 
00002efc l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00002ed2 l       .debug_str     00000000 
000001e8 l       .debug_str     00000000 
00002f0a l       .debug_str     00000000 
00002f1a l       .debug_str     00000000 
00002f30 l       .debug_str     00000000 
00002f44 l       .debug_str     00000000 
000030bb l       .debug_str     00000000 
000030d5 l       .debug_str     00000000 
00002da8 l       .debug_str     00000000 
00002f58 l       .debug_str     00000000 
00002f66 l       .debug_str     00000000 
00002fbb l       .debug_str     00000000 
00002f79 l       .debug_str     00000000 
00002f82 l       .debug_str     00000000 
00002f8e l       .debug_str     00000000 
00002e27 l       .debug_str     00000000 
00002f9c l       .debug_str     00000000 
00002fa9 l       .debug_str     00000000 
00002fcb l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fef l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
0000300a l       .debug_str     00000000 
00003026 l       .debug_str     00000000 
000030c8 l       .debug_str     00000000 
000001e8 l       .debug_frame   00000000 
f0000cec l       .text  00000000 
f0000e20 l       .text  00000000 
f0000efa l       .text  00000000 
f0000f8c l       .text  00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
f0000f8c l       .text  00000000 
f0000f8c l       .text  00000000 
f0000f8c l       .text  00000000 
f0000f8c l       .text  00000000 
f0000f8e l       .text  00000000 
f0000f8e l       .text  00000000 
00000000 l       .debug_str     00000000 
000030e5 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00003026 l       .debug_str     00000000 
000002c0 l       .debug_frame   00000000 
f0000f8e l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
f0000f8e l       .text  00000000 
f0000f8e l       .text  00000000 
f0000f8e l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f92 l       .text  00000000 
f0000f9c l       .text  00000000 
f0000f9e l       .text  00000000 
f0000f9e l       .text  00000000 
f0000fb4 l       .text  00000000 
f0000fb4 l       .text  00000000 
f0000fb6 l       .text  00000000 
0001008c l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
f0000fb6 l       .text  00000000 
f0000fc4 l       .text  00000000 
f0000fc4 l       .text  00000000 
f0000fc8 l       .text  00000000 
f0000fc8 l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fce l       .text  00000000 
f0000fce l       .text  00000000 
f0000fd0 l       .text  00000000 
f0000fd0 l       .text  00000000 
f0000fda l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fdc l       .text  00000000 
f0000ff2 l       .text  00000000 
f0000ff2 l       .text  00000000 
f0000ff4 l       .text  00000000 
000100a0 l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
f0000ff4 l       .text  00000000 
f0001002 l       .text  00000000 
f0001002 l       .text  00000000 
f0001006 l       .text  00000000 
f0001006 l       .text  00000000 
f000100a l       .text  00000000 
f000100a l       .text  00000000 
f000100a l       .text  00000000 
00000afe l       .debug_loc     00000000 
00000b19 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000311a l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000000f0 l       .debug_ranges  00000000 
00003166 l       .debug_str     00000000 
00002af3 l       .debug_str     00000000 
00002b70 l       .debug_str     00000000 
00002b7b l       .debug_str     00000000 
00002b48 l       .debug_str     00000000 
00002b60 l       .debug_str     00000000 
000058e0 l       .debug_str     00000000 
00002b6a l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
00002b51 l       .debug_str     00000000 
00002b44 l       .debug_str     00000000 
00002afe l       .debug_str     00000000 
00002b0f l       .debug_str     00000000 
00002b20 l       .debug_str     00000000 
00002b32 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00003183 l       .debug_str     00000000 
000031a1 l       .debug_str     00000000 
000031b4 l       .debug_str     00000000 
00002e62 l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00003150 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003160 l       .debug_str     00000000 
000031a7 l       .debug_str     00000000 
00002e85 l       .debug_str     00000000 
000002e4 l       .debug_frame   00000000 
f0000fcc l       .text  00000000 
f000100a l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
f000100a l       .text  00000000 
f000100a l       .text  00000000 
f000100a l       .text  00000000 
f000100c l       .text  00000000 
f000100c l       .text  00000000 
f000100e l       .text  00000000 
f0001012 l       .text  00000000 
f0001012 l       .text  00000000 
f0001016 l       .text  00000000 
f0001016 l       .text  00000000 
f000101a l       .text  00000000 
f000101a l       .text  00000000 
f000101e l       .text  00000000 
f000101e l       .text  00000000 
f0001026 l       .text  00000000 
f0001026 l       .text  00000000 
00000000 l       .debug_str     00000000 
000031bf l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000031f4 l       .debug_str     00000000 
00003209 l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00002e2f l       .debug_str     00000000 
000029a6 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00003258 l       .debug_str     00000000 
00003211 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003220 l       .debug_str     00000000 
00003232 l       .debug_str     00000000 
00003244 l       .debug_str     00000000 
00000328 l       .debug_frame   00000000 
f0001026 l       .text  00000000 
00000000 l    df *ABS*  00000000 irq.c
f0001026 l       .text  00000000 
f0001026 l       .text  00000000 
f0001026 l       .text  00000000 
f0001026 l       .text  00000000 
f0001028 l       .text  00000000 
f000102a l       .text  00000000 
f000102a l       .text  00000000 
f000102e l       .text  00000000 
f0001030 l       .text  00000000 
f0001030 l       .text  00000000 
f0001032 l       .text  00000000 
f0001032 l       .text  00000000 
f0001036 l       .text  00000000 
f0001038 l       .text  00000000 
f0001038 l       .text  00000000 
f0001038 l       .text  00000000 
f0001038 l       .text  00000000 
f0001038 l       .text  00000000 
f0001038 l       .text  00000000 
f000103a l       .text  00000000 
f000103c l       .text  00000000 
f0001040 l       .text  00000000 
f0001044 l       .text  00000000 
f0001046 l       .text  00000000 
f0001046 l       .text  00000000 
f0001048 l       .text  00000000 
f000104c l       .text  00000000 
f0001050 l       .text  00000000 
f0001052 l       .text  00000000 
f0001052 l       .text  00000000 
f0001052 l       .text  00000000 
f0001052 l       .text  00000000 
f0001052 l       .text  00000000 
f0001052 l       .text  00000000 
f0001054 l       .text  00000000 
f0001058 l       .text  00000000 
f0001058 l       .text  00000000 
f000105c l       .text  00000000 
f000105e l       .text  00000000 
f000105e l       .text  00000000 
f0001062 l       .text  00000000 
f0001062 l       .text  00000000 
f0001066 l       .text  00000000 
f0001068 l       .text  00000000 
f0001068 l       .text  00000000 
f0001068 l       .text  00000000 
f0001068 l       .text  00000000 
f0001068 l       .text  00000000 
f0001068 l       .text  00000000 
f000106a l       .text  00000000 
f000106c l       .text  00000000 
f000106c l       .text  00000000 
f0001070 l       .text  00000000 
f0001072 l       .text  00000000 
f0001072 l       .text  00000000 
f0001074 l       .text  00000000 
f0001074 l       .text  00000000 
f0001078 l       .text  00000000 
f000107a l       .text  00000000 
f000107a l       .text  00000000 
00000b34 l       .debug_loc     00000000 
00000b64 l       .debug_loc     00000000 
00000b94 l       .debug_loc     00000000 
00000bc4 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000326c l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000108 l       .debug_ranges  00000000 
00003288 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000329e l       .debug_str     00000000 
000032b6 l       .debug_str     00000000 
000032cb l       .debug_str     00000000 
00002ab0 l       .debug_str     00000000 
00003150 l       .debug_str     00000000 
00002a10 l       .debug_str     00000000 
00003220 l       .debug_str     00000000 
000032eb l       .debug_str     00000000 
00003211 l       .debug_str     00000000 
00003232 l       .debug_str     00000000 
000032e1 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00000354 l       .debug_frame   00000000 
f0001038 l       .text  00000000 
f0001052 l       .text  00000000 
f0001068 l       .text  00000000 
f000107a l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
f000107a l       .text  00000000 
f000107a l       .text  00000000 
f000107a l       .text  00000000 
f000107c l       .text  00000000 
f0001086 l       .text  00000000 
f0001088 l       .text  00000000 
f000108a l       .text  00000000 
f000108a l       .text  00000000 
f000108e l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001094 l       .text  00000000 
f0001094 l       .text  00000000 
f000109e l       .text  00000000 
f00010a0 l       .text  00000000 
f00010a0 l       .text  00000000 
f00010a2 l       .text  00000000 
000100b4 l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
f00010a2 l       .text  00000000 
f00010c4 l       .text  00000000 
f00010c4 l       .text  00000000 
f00010e2 l       .text  00000000 
f00010e2 l       .text  00000000 
f00010f0 l       .text  00000000 
f00010f0 l       .text  00000000 
f00010f0 l       .text  00000000 
f00010f0 l       .text  00000000 
f00010f0 l       .text  00000000 
f00010f2 l       .text  00000000 
f00010f2 l       .text  00000000 
f00010f4 l       .text  00000000 
f00010f8 l       .text  00000000 
f00010f8 l       .text  00000000 
f00010fa l       .text  00000000 
f00010fa l       .text  00000000 
f00010fc l       .text  00000000 
f0001100 l       .text  00000000 
f0001116 l       .text  00000000 
f000111c l       .text  00000000 
f0001122 l       .text  00000000 
f0001128 l       .text  00000000 
f000112e l       .text  00000000 
f0001134 l       .text  00000000 
f000113c l     F .text  00000020 generic_fault_handler
f000113a l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000113e l       .text  00000000 
f000113e l       .text  00000000 
f0001140 l       .text  00000000 
f0001144 l       .text  00000000 
f0001146 l       .text  00000000 
f0001146 l       .text  00000000 
f0001148 l       .text  00000000 
f000114a l       .text  00000000 
f0002f94 l     O .rodata        00000080 exception_reason
f0001156 l       .text  00000000 
f0001158 l       .text  00000000 
f0001158 l       .text  00000000 
f000115c l       .text  00000000 
f000115c l       .text  00000000 
f000115c l       .text  00000000 
f000115c l       .text  00000000 
f000115c l       .text  00000000 
f000115c l       .text  00000000 
f000115e l       .text  00000000 
f000115e l       .text  00000000 
f0001160 l       .text  00000000 
f0001164 l       .text  00000000 
f0001166 l       .text  00000000 
f0001170 l       .text  00000000 
f0001170 l       .text  00000000 
f0001174 l       .text  00000000 
f0001174 l       .text  00000000 
f0001174 l       .text  00000000 
f0001174 l       .text  00000000 
f0001174 l       .text  00000000 
f0001174 l       .text  00000000 
f0001176 l       .text  00000000 
f0001176 l       .text  00000000 
f0001178 l       .text  00000000 
f000117c l       .text  00000000 
f000117e l       .text  00000000 
f0001188 l       .text  00000000 
f0001188 l       .text  00000000 
f000118c l       .text  00000000 
f000118c l       .text  00000000 
f000118c l       .text  00000000 
f000118c l       .text  00000000 
f000118c l       .text  00000000 
f000118c l       .text  00000000 
f000118c l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001192 l       .text  00000000 
f0001192 l       .text  00000000 
f0001198 l       .text  00000000 
f0001198 l       .text  00000000 
f0001198 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011ae l       .text  00000000 
f00011b0 l       .text  00000000 
f00011b0 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b4 l       .text  00000000 
f00011b6 l       .text  00000000 
000100c8 l     O .logs.fields   00000014 ottf_external_isr.kLogFields
f00011b6 l       .text  00000000 
f00011c6 l       .text  00000000 
f00011c6 l       .text  00000000 
f00011c8 l       .text  00000000 
f00011c8 l       .text  00000000 
f00011e0 l       .text  00000000 
f00011e0 l       .text  00000000 
f00011e6 l       .text  00000000 
f00011ea l       .text  00000000 
f00011ea l       .text  00000000 
f00011ec l       .text  00000000 
f00011ec l       .text  00000000 
f00011ee l       .text  00000000 
f00011fa l       .text  00000000 
f00011fa l       .text  00000000 
f00011fc l       .text  00000000 
f0001200 l       .text  00000000 
f0001200 l       .text  00000000 
f0001202 l       .text  00000000 
f0001202 l       .text  00000000 
f0001204 l       .text  00000000 
f0001204 l       .text  00000000 
f0001206 l       .text  00000000 
f0001212 l       .text  00000000 
f0001214 l       .text  00000000 
f0001214 l       .text  00000000 
f0001216 l       .text  00000000 
f0001216 l       .text  00000000 
f0001218 l       .text  00000000 
f000121a l       .text  00000000 
000100dc l     O .logs.fields   00000014 ottf_external_isr.kLogFields.5
f000121a l       .text  00000000 
f000122a l       .text  00000000 
f000122a l       .text  00000000 
f000122c l       .text  00000000 
f000122c l       .text  00000000 
f0001244 l       .text  00000000 
f0001244 l       .text  00000000 
f000124a l       .text  00000000 
f000124e l       .text  00000000 
f000124e l       .text  00000000 
f0001258 l       .text  00000000 
f000125c l       .text  00000000 
f000125e l       .text  00000000 
f000125e l       .text  00000000 
f0001268 l       .text  00000000 
f0001268 l       .text  00000000 
f000126c l       .text  00000000 
f000126c l       .text  00000000 
f000126c l       .text  00000000 
f000126c l     F .text  00000018 generic_internal_irq_handler
f000126c l       .text  00000000 
f000126c l       .text  00000000 
f000126c l       .text  00000000 
f000126e l       .text  00000000 
f000126e l       .text  00000000 
f0001270 l       .text  00000000 
f0001274 l       .text  00000000 
f0001276 l       .text  00000000 
f0001280 l       .text  00000000 
f0001280 l       .text  00000000 
f0001284 l       .text  00000000 
f0001284 l       .text  00000000 
f0001284 l       .text  00000000 
f0001284 l       .text  00000000 
f0001284 l       .text  00000000 
f0001284 l       .text  00000000 
f0001286 l       .text  00000000 
f0001286 l       .text  00000000 
f0001288 l       .text  00000000 
f000128c l       .text  00000000 
f000128c l       .text  00000000 
f0001292 l       .text  00000000 
f0001292 l       .text  00000000 
f0001296 l       .text  00000000 
f0001298 l       .text  00000000 
f000129c l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a8 l       .text  00000000 
f00012a8 l       .text  00000000 
f00012ac l       .text  00000000 
f00012ae l       .text  00000000 
f00012b8 l       .text  00000000 
f00012b8 l       .text  00000000 
f00012bc l       .text  00000000 
f00012bc l       .text  00000000 
f00012bc l       .text  00000000 
00000bf4 l       .debug_loc     00000000 
00000c1a l       .debug_loc     00000000 
00000c40 l       .debug_loc     00000000 
00000c5b l       .debug_loc     00000000 
00000c76 l       .debug_loc     00000000 
00000c91 l       .debug_loc     00000000 
00000cac l       .debug_loc     00000000 
00000cf8 l       .debug_loc     00000000 
00000d2b l       .debug_loc     00000000 
00000d5c l       .debug_loc     00000000 
00000d77 l       .debug_loc     00000000 
00000da8 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000032f0 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000138 l       .debug_ranges  00000000 
000039ee l       .debug_str     00000000 
00002af3 l       .debug_str     00000000 
0000335c l       .debug_str     00000000 
00003a8f l       .debug_str     00000000 
00003a96 l       .debug_str     00000000 
00003a9b l       .debug_str     00000000 
00002b70 l       .debug_str     00000000 
00002b7b l       .debug_str     00000000 
00002b48 l       .debug_str     00000000 
00002b60 l       .debug_str     00000000 
000058e0 l       .debug_str     00000000 
00002b6a l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
00002b51 l       .debug_str     00000000 
00002b44 l       .debug_str     00000000 
00002afe l       .debug_str     00000000 
00002b0f l       .debug_str     00000000 
00002b20 l       .debug_str     00000000 
00002b32 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00003321 l       .debug_str     00000000 
00003a6b l       .debug_str     00000000 
00003aa1 l       .debug_str     00000000 
00003aad l       .debug_str     00000000 
000038e9 l       .debug_str     00000000 
00002da4 l       .debug_str     00000000 
0000332e l       .debug_str     00000000 
00003344 l       .debug_str     00000000 
00003338 l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00003352 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00003425 l       .debug_str     00000000 
00003363 l       .debug_str     00000000 
0000337b l       .debug_str     00000000 
00003394 l       .debug_str     00000000 
000033ae l       .debug_str     00000000 
000033c1 l       .debug_str     00000000 
000033d9 l       .debug_str     00000000 
000033f2 l       .debug_str     00000000 
00003404 l       .debug_str     00000000 
00003419 l       .debug_str     00000000 
00003465 l       .debug_str     00000000 
0000342e l       .debug_str     00000000 
0000344a l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00002d52 l       .debug_str     00000000 
00002d5d l       .debug_str     00000000 
00002d68 l       .debug_str     00000000 
00002d78 l       .debug_str     00000000 
00002d87 l       .debug_str     00000000 
00002d96 l       .debug_str     00000000 
00002fe3 l       .debug_str     00000000 
00002c78 l       .debug_str     00000000 
00002c8d l       .debug_str     00000000 
00002ca6 l       .debug_str     00000000 
00002cb8 l       .debug_str     00000000 
00002cc9 l       .debug_str     00000000 
00002cdb l       .debug_str     00000000 
000038d7 l       .debug_str     00000000 
0000347e l       .debug_str     00000000 
000034a0 l       .debug_str     00000000 
000034c0 l       .debug_str     00000000 
000034e0 l       .debug_str     00000000 
00003500 l       .debug_str     00000000 
00003520 l       .debug_str     00000000 
0000353f l       .debug_str     00000000 
00003563 l       .debug_str     00000000 
00003582 l       .debug_str     00000000 
000035a1 l       .debug_str     00000000 
000035c0 l       .debug_str     00000000 
000035e2 l       .debug_str     00000000 
00003604 l       .debug_str     00000000 
00003626 l       .debug_str     00000000 
0000364d l       .debug_str     00000000 
00003670 l       .debug_str     00000000 
00003693 l       .debug_str     00000000 
000036b4 l       .debug_str     00000000 
000036d8 l       .debug_str     00000000 
00003700 l       .debug_str     00000000 
00003725 l       .debug_str     00000000 
0000374b l       .debug_str     00000000 
00003770 l       .debug_str     00000000 
00003793 l       .debug_str     00000000 
000037b7 l       .debug_str     00000000 
000037d6 l       .debug_str     00000000 
000037f5 l       .debug_str     00000000 
00003814 l       .debug_str     00000000 
00003835 l       .debug_str     00000000 
00003855 l       .debug_str     00000000 
0000387a l       .debug_str     00000000 
00003899 l       .debug_str     00000000 
000038b8 l       .debug_str     00000000 
00003922 l       .debug_str     00000000 
000038f4 l       .debug_str     00000000 
0000390e l       .debug_str     00000000 
00003934 l       .debug_str     00000000 
0000393f l       .debug_str     00000000 
0000395e l       .debug_str     00000000 
00003972 l       .debug_str     00000000 
00003981 l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00002e62 l       .debug_str     00000000 
00003a07 l       .debug_str     00000000 
00003991 l       .debug_str     00000000 
00003a1e l       .debug_str     00000000 
00003160 l       .debug_str     00000000 
00003a34 l       .debug_str     00000000 
00003a46 l       .debug_str     00000000 
00003a55 l       .debug_str     00000000 
000039a2 l       .debug_str     00000000 
00002f0a l       .debug_str     00000000 
000039b8 l       .debug_str     00000000 
000039d1 l       .debug_str     00000000 
00003a7d l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003ab9 l       .debug_str     00000000 
000030c8 l       .debug_str     00000000 
000003b8 l       .debug_frame   00000000 
f00010f0 l       .text  00000000 
f000113c l       .text  00000000 
f000115c l       .text  00000000 
f0001174 l       .text  00000000 
f000118c l       .text  00000000 
f0001190 l       .text  00000000 
f000126c l       .text  00000000 
f0001284 l       .text  00000000 
f00012bc l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
f00012bc l       .text  00000000 
f00012bc l       .text  00000000 
f00012bc l       .text  00000000 
f00012bc l       .text  00000000 
f00012c4 l       .text  00000000 
f00012c4 l       .text  00000000 
f00012d0 l       .text  00000000 
f00012d0 l       .text  00000000 
f00012d2 l       .text  00000000 
f00012d2 l       .text  00000000 
f00012d8 l       .text  00000000 
f00012d8 l       .text  00000000 
f00012da l       .text  00000000 
f00012de l       .text  00000000 
f00012de l       .text  00000000 
f00012e0 l       .text  00000000 
f00012e0 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012ec l       .text  00000000 
f00012ec l       .text  00000000 
f00012f2 l       .text  00000000 
f00012f2 l       .text  00000000 
f00012f4 l       .text  00000000 
f00012f4 l       .text  00000000 
f00012fc l       .text  00000000 
f00012fc l       .text  00000000 
f00012fe l       .text  00000000 
f00012fe l       .text  00000000 
f0001300 l       .text  00000000 
f0001300 l       .text  00000000 
f0001304 l       .text  00000000 
f0001304 l       .text  00000000 
00000dc3 l       .debug_loc     00000000 
00000de9 l       .debug_loc     00000000 
00000e1c l       .debug_loc     00000000 
00000e3e l       .debug_loc     00000000 
00000e59 l       .debug_loc     00000000 
00000e7b l       .debug_loc     00000000 
00000eae l       .debug_loc     00000000 
00000ed6 l       .debug_loc     00000000 
00000efe l       .debug_loc     00000000 
00000f19 l       .debug_loc     00000000 
00000f49 l       .debug_loc     00000000 
00000f64 l       .debug_loc     00000000 
00000f7f l       .debug_loc     00000000 
00000f9a l       .debug_loc     00000000 
00000fb5 l       .debug_loc     00000000 
00000fd0 l       .debug_loc     00000000 
00000feb l       .debug_loc     00000000 
00001006 l       .debug_loc     00000000 
00001021 l       .debug_loc     00000000 
0000103c l       .debug_loc     00000000 
00001057 l       .debug_loc     00000000 
00001073 l       .debug_loc     00000000 
0000108e l       .debug_loc     00000000 
000010ac l       .debug_loc     00000000 
000010d2 l       .debug_loc     00000000 
00001103 l       .debug_loc     00000000 
0000111e l       .debug_loc     00000000 
00001139 l       .debug_loc     00000000 
00001158 l       .debug_loc     00000000 
00001177 l       .debug_loc     00000000 
00001192 l       .debug_loc     00000000 
000011ad l       .debug_loc     00000000 
000011c8 l       .debug_loc     00000000 
000011e8 l       .debug_loc     00000000 
00001203 l       .debug_loc     00000000 
0000121e l       .debug_loc     00000000 
00001239 l       .debug_loc     00000000 
00001256 l       .debug_loc     00000000 
00001271 l       .debug_loc     00000000 
0000128c l       .debug_loc     00000000 
000012a7 l       .debug_loc     00000000 
000012c2 l       .debug_loc     00000000 
000012dd l       .debug_loc     00000000 
000012fd l       .debug_loc     00000000 
00001318 l       .debug_loc     00000000 
00001333 l       .debug_loc     00000000 
0000134e l       .debug_loc     00000000 
0000136e l       .debug_loc     00000000 
00001389 l       .debug_loc     00000000 
000013a4 l       .debug_loc     00000000 
000013bf l       .debug_loc     00000000 
000013df l       .debug_loc     00000000 
000013fa l       .debug_loc     00000000 
00001415 l       .debug_loc     00000000 
00001430 l       .debug_loc     00000000 
00001450 l       .debug_loc     00000000 
0000146b l       .debug_loc     00000000 
00001486 l       .debug_loc     00000000 
000014a1 l       .debug_loc     00000000 
000014c1 l       .debug_loc     00000000 
000014dc l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003cc9 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000240 l       .debug_ranges  00000000 
00003ce9 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00003cff l       .debug_str     00000000 
00002da4 l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00002d52 l       .debug_str     00000000 
00002d5d l       .debug_str     00000000 
00002d68 l       .debug_str     00000000 
00002d78 l       .debug_str     00000000 
00002d87 l       .debug_str     00000000 
00002d96 l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
00002dc9 l       .debug_str     00000000 
00002ddc l       .debug_str     00000000 
00003d15 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00003f94 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00003e5f l       .debug_str     00000000 
00003333 l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
000001c8 l       .debug_ranges  00000000 
000001b0 l       .debug_ranges  00000000 
00003477 l       .debug_str     00000000 
000001f8 l       .debug_ranges  00000000 
00003f6a l       .debug_str     00000000 
000001e0 l       .debug_ranges  00000000 
00003d33 l       .debug_str     00000000 
00003930 l       .debug_str     00000000 
00003d7b l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00003d4c l       .debug_str     00000000 
00003d56 l       .debug_str     00000000 
00003ab9 l       .debug_str     00000000 
00003d8b l       .debug_str     00000000 
00003da0 l       .debug_str     00000000 
00003db6 l       .debug_str     00000000 
00003209 l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
00003dc5 l       .debug_str     00000000 
00003e71 l       .debug_str     00000000 
00003ba5 l       .debug_str     00000000 
000060d3 l       .debug_str     00000000 
00003d72 l       .debug_str     00000000 
00003f7a l       .debug_str     00000000 
00000210 l       .debug_ranges  00000000 
00003dd8 l       .debug_str     00000000 
00003def l       .debug_str     00000000 
00003df2 l       .debug_str     00000000 
00003e09 l       .debug_str     00000000 
00003df8 l       .debug_str     00000000 
000032eb l       .debug_str     00000000 
00003dbf l       .debug_str     00000000 
00003e1c l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003e8d l       .debug_str     00000000 
00003f85 l       .debug_str     00000000 
00000228 l       .debug_ranges  00000000 
00003ea9 l       .debug_str     00000000 
00002f01 l       .debug_str     00000000 
00003ec6 l       .debug_str     00000000 
00003edd l       .debug_str     00000000 
00003f8a l       .debug_str     00000000 
00003e31 l       .debug_str     00000000 
00003e4b l       .debug_str     00000000 
00003ee7 l       .debug_str     00000000 
00003ef7 l       .debug_str     00000000 
000039a2 l       .debug_str     00000000 
00003f9b l       .debug_str     00000000 
00003fa6 l       .debug_str     00000000 
000039b8 l       .debug_str     00000000 
00003fb9 l       .debug_str     00000000 
00003f02 l       .debug_str     00000000 
00003fc7 l       .debug_str     00000000 
00003f21 l       .debug_str     00000000 
00003f46 l       .debug_str     00000000 
00003fd3 l       .debug_str     00000000 
000030c8 l       .debug_str     00000000 
00003344 l       .debug_str     00000000 
00003338 l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002f9c l       .debug_str     00000000 
000004cc l       .debug_frame   00000000 
f00012e4 l       .text  00000000 
f0001304 l       .text  00000000 
00000000 l    df *ABS*  00000000 sec_mmio.c
f0001304 l       .text  00000000 
f0001304 l       .text  00000000 
f0001304 l       .text  00000000 
f0001304 l       .text  00000000 
f0001306 l       .text  00000000 
f0001306 l       .text  00000000 
f0001308 l       .text  00000000 
f0001308 l       .text  00000000 
f000130a l       .text  00000000 
f000130a l       .text  00000000 
f000130c l       .text  00000000 
f000130c l       .text  00000000 
f000130c l       .text  00000000 
f000130c l       .text  00000000 
f0001314 l       .text  00000000 
f0001316 l       .text  00000000 
f0001316 l       .text  00000000 
f0001316 l       .text  00000000 
f0001316 l       .text  00000000 
f0001318 l       .text  00000000 
f0001318 l       .text  00000000 
f0001318 l       .text  00000000 
f0001318 l       .text  00000000 
f000131a l       .text  00000000 
f000131a l       .text  00000000 
f000131a l       .text  00000000 
f000131a l       .text  00000000 
f0001322 l       .text  00000000 
f0001322 l       .text  00000000 
f000132a l       .text  00000000 
f000132c l       .text  00000000 
f000132c l       .text  00000000 
f000132e l       .text  00000000 
f0001330 l       .text  00000000 
f0001332 l       .text  00000000 
f0001332 l       .text  00000000 
f000133a l       .text  00000000 
f000133c l       .text  00000000 
f000133c l       .text  00000000 
f000133e l       .text  00000000 
f000133e l       .text  00000000 
f0001340 l       .text  00000000 
f0001342 l       .text  00000000 
f0001350 l       .text  00000000 
f0001350 l       .text  00000000 
f000135c l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f0001360 l       .text  00000000 
f000136a l       .text  00000000 
f000136c l       .text  00000000 
f000136c l       .text  00000000 
f0001370 l       .text  00000000 
f0001370 l       .text  00000000 
f0001378 l       .text  00000000 
f0001378 l       .text  00000000 
f000137c l       .text  00000000 
f000137c l       .text  00000000 
f000137c l       .text  00000000 
f000137c l       .text  00000000 
f00013a4 l     F .text  0000006e upsert_register
f0001382 l       .text  00000000 
f0001382 l       .text  00000000 
f0001384 l       .text  00000000 
f0001384 l       .text  00000000 
f0001394 l       .text  00000000 
f000139a l       .text  00000000 
f000139c l       .text  00000000 
f000139e l       .text  00000000 
f00013a4 l       .text  00000000 
f00013a4 l       .text  00000000 
f00013a4 l       .text  00000000 
f00013a4 l       .text  00000000 
f00013a4 l       .text  00000000 
f00013a4 l       .text  00000000 
f00013b0 l       .text  00000000 
f00013b0 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b4 l       .text  00000000 
f00013b4 l       .text  00000000 
f00013b8 l       .text  00000000 
f00013b8 l       .text  00000000 
f00013bc l       .text  00000000 
f00013bc l       .text  00000000 
f00013c4 l       .text  00000000 
f00013c8 l       .text  00000000 
f00013ca l       .text  00000000 
f00013ca l       .text  00000000 
f00013cc l       .text  00000000 
f00013cc l       .text  00000000 
f00013d4 l       .text  00000000 
f00013d4 l       .text  00000000 
f00013d6 l       .text  00000000 
f00013d6 l       .text  00000000 
f00013d8 l       .text  00000000 
f00013d8 l       .text  00000000 
f00013dc l       .text  00000000 
f00013dc l       .text  00000000 
f00013de l       .text  00000000 
f00013de l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013f0 l       .text  00000000 
f00013f4 l       .text  00000000 
f00013f6 l       .text  00000000 
f00013fa l       .text  00000000 
f0001400 l       .text  00000000 
f0001404 l       .text  00000000 
f0001410 l       .text  00000000 
f0001412 l       .text  00000000 
f0001412 l       .text  00000000 
000014f7 l       .debug_loc     00000000 
0000151e l       .debug_loc     00000000 
00001545 l       .debug_loc     00000000 
0000156c l       .debug_loc     00000000 
000015a7 l       .debug_loc     00000000 
000015d6 l       .debug_loc     00000000 
000015f1 l       .debug_loc     00000000 
00001617 l       .debug_loc     00000000 
00001632 l       .debug_loc     00000000 
0000164d l       .debug_loc     00000000 
00001668 l       .debug_loc     00000000 
000016a5 l       .debug_loc     00000000 
000016cc l       .debug_loc     00000000 
000016e7 l       .debug_loc     00000000 
0000170d l       .debug_loc     00000000 
00001733 l       .debug_loc     00000000 
00001759 l       .debug_loc     00000000 
00001774 l       .debug_loc     00000000 
0000178f l       .debug_loc     00000000 
000017b5 l       .debug_loc     00000000 
000017d0 l       .debug_loc     00000000 
000017eb l       .debug_loc     00000000 
00001806 l       .debug_loc     00000000 
00001843 l       .debug_loc     00000000 
0000186a l       .debug_loc     00000000 
00001885 l       .debug_loc     00000000 
000018a0 l       .debug_loc     00000000 
000018bb l       .debug_loc     00000000 
000018d6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004146 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000360 l       .debug_ranges  00000000 
00004104 l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00004111 l       .debug_str     00000000 
00004125 l       .debug_str     00000000 
0000411c l       .debug_str     00000000 
00004274 l       .debug_str     00000000 
00004229 l       .debug_str     00000000 
00004131 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00004174 l       .debug_str     00000000 
00004184 l       .debug_str     00000000 
00004194 l       .debug_str     00000000 
0000421a l       .debug_str     00000000 
000041a3 l       .debug_str     00000000 
00004255 l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
00003f94 l       .debug_str     00000000 
00000330 l       .debug_ranges  00000000 
00000348 l       .debug_ranges  00000000 
00004260 l       .debug_str     00000000 
000041a9 l       .debug_str     00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
000029ae l       .debug_str     00000000 
00003a9d l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
00005766 l       .debug_str     00000000 
000002a0 l       .debug_ranges  00000000 
000002b8 l       .debug_ranges  00000000 
000002d0 l       .debug_ranges  00000000 
000002e8 l       .debug_ranges  00000000 
000041d7 l       .debug_str     00000000 
00000300 l       .debug_ranges  00000000 
000041bd l       .debug_str     00000000 
00005659 l       .debug_str     00000000 
000041cd l       .debug_str     00000000 
00002a3f l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00004248 l       .debug_str     00000000 
000041f0 l       .debug_str     00000000 
00000318 l       .debug_ranges  00000000 
000029b8 l       .debug_str     00000000 
00002a4f l       .debug_str     00000000 
00004200 l       .debug_str     00000000 
00004230 l       .debug_str     00000000 
0000426b l       .debug_str     00000000 
00002da8 l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
00000590 l       .debug_frame   00000000 
f000135e l       .text  00000000 
f00013a4 l       .text  00000000 
f0001412 l       .text  00000000 
00000000 l    df *ABS*  00000000 tasks.c
f0001412 l       .text  00000000 
f0001412 l       .text  00000000 
f0001412 l       .text  00000000 
f0001414 l       .text  00000000 
f000142a l       .text  00000000 
f000142c l       .text  00000000 
f000142e l       .text  00000000 
f0001430 l       .text  00000000 
f0001432 l       .text  00000000 
f0001434 l       .text  00000000 
f0001434 l       .text  00000000 
f0001438 l       .text  00000000 
f000143c l       .text  00000000 
f000143c l       .text  00000000 
f000143e l       .text  00000000 
f0001442 l       .text  00000000 
f0001444 l       .text  00000000 
f0001444 l       .text  00000000 
f000144a l       .text  00000000 
f000144a l       .text  00000000 
f000144c l       .text  00000000 
f000144c l       .text  00000000 
f000144e l       .text  00000000 
f000144e l       .text  00000000 
f0001450 l       .text  00000000 
f0001450 l       .text  00000000 
f0001456 l       .text  00000000 
f0001458 l       .text  00000000 
f0001458 l       .text  00000000 
f000145a l       .text  00000000 
f000145e l       .text  00000000 
f000145e l       .text  00000000 
f0001466 l       .text  00000000 
f000146e l       .text  00000000 
f0001472 l       .text  00000000 
f0001476 l       .text  00000000 
f0001476 l       .text  00000000 
f000147c l       .text  00000000 
f0001480 l       .text  00000000 
f0001484 l       .text  00000000 
f000148a l       .text  00000000 
f000148a l       .text  00000000 
f000148c l       .text  00000000 
f000148e l       .text  00000000 
f000148e l       .text  00000000 
f0001490 l       .text  00000000 
f0001490 l       .text  00000000 
f0001494 l       .text  00000000 
f000149a l       .text  00000000 
f000149a l       .text  00000000 
f000149e l       .text  00000000 
f00014a0 l       .text  00000000 
f00014a0 l       .text  00000000 
f00014a4 l       .text  00000000 
f00014a8 l       .text  00000000 
f00014ac l       .text  00000000 
f00014ac l       .text  00000000 
f00014b0 l       .text  00000000 
f00014b2 l       .text  00000000 
f00014b2 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014c0 l       .text  00000000 
f00014c4 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014cc l       .text  00000000 
f00014d6 l       .text  00000000 
f00014d6 l       .text  00000000 
f00014da l       .text  00000000 
f00014de l       .text  00000000 
f00014e2 l       .text  00000000 
f00014e2 l       .text  00000000 
f00014e6 l       .text  00000000 
e0002078 l     O .bss   00000004 xSchedulerRunning
f00014e6 l       .text  00000000 
f00014f2 l       .text  00000000 
f00014fa l       .text  00000000 
f00014fc l       .text  00000000 
f00014fc l       .text  00000000 
f0001500 l       .text  00000000 
f0001506 l       .text  00000000 
f000150a l       .text  00000000 
e0002074 l     O .bss   00000004 uxCurrentNumberOfTasks
f000150a l       .text  00000000 
f0001518 l       .text  00000000 
e00020cc l     O .bss   00000064 pxReadyTasksLists
f000151c l       .text  00000000 
f0001524 l       .text  00000000 
f0001526 l       .text  00000000 
f0001526 l       .text  00000000 
f000152a l       .text  00000000 
f000152c l       .text  00000000 
f0001530 l       .text  00000000 
f0001532 l       .text  00000000 
f0001536 l       .text  00000000 
f000153a l       .text  00000000 
f0001540 l       .text  00000000 
f0001544 l       .text  00000000 
f0001548 l       .text  00000000 
f000154c l       .text  00000000 
f0001552 l       .text  00000000 
f0001552 l       .text  00000000 
f0001558 l       .text  00000000 
f0001558 l       .text  00000000 
f000155a l       .text  00000000 
f000155a l       .text  00000000 
f000155e l       .text  00000000 
e000216c l     O .bss   00000014 xDelayedTaskList1
f000155e l       .text  00000000 
f000156a l       .text  00000000 
e0002180 l     O .bss   00000014 xDelayedTaskList2
f000156a l       .text  00000000 
f0001576 l       .text  00000000 
e0002158 l     O .bss   00000014 xPendingReadyList
f0001576 l       .text  00000000 
f0001580 l       .text  00000000 
e0002130 l     O .bss   00000014 xTasksWaitingTermination
f0001580 l       .text  00000000 
f000158a l       .text  00000000 
e0002144 l     O .bss   00000014 xSuspendedTaskList
f000158a l       .text  00000000 
f0001594 l       .text  00000000 
e000207c l     O .bss   00000004 pxDelayedTaskList
f0001594 l       .text  00000000 
e0002080 l     O .bss   00000004 pxOverflowDelayedTaskList
f00015a0 l       .text  00000000 
f00015ac l       .text  00000000 
e000206c l     O .bss   00000004 uxTaskNumber
f00015ac l       .text  00000000 
f00015ba l       .text  00000000 
e0002068 l     O .bss   00000004 uxTopReadyPriority
f00015d4 l       .text  00000000 
f00015d4 l       .text  00000000 
f00015dc l       .text  00000000 
f00015f6 l       .text  00000000 
f00015fa l       .text  00000000 
f00015fa l       .text  00000000 
f00015fc l       .text  00000000 
f00015fc l       .text  00000000 
f0001600 l       .text  00000000 
f0001602 l       .text  00000000 
f0001602 l       .text  00000000 
f0001606 l       .text  00000000 
f0001606 l       .text  00000000 
f000160e l       .text  00000000 
f0001622 l       .text  00000000 
f0001622 l       .text  00000000 
e0002070 l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
e0002090 l     O .bss   00000004 xNextTaskUnblockTime
f0001622 l       .text  00000000 
f0001622 l       .text  00000000 
f0001622 l       .text  00000000 
f0001622 l       .text  00000000 
f000162c l       .text  00000000 
f000162e l       .text  00000000 
f0001638 l       .text  00000000 
f000163a l       .text  00000000 
f000163c l       .text  00000000 
f000163e l       .text  00000000 
f0001644 l       .text  00000000 
f0001646 l       .text  00000000 
f0001648 l       .text  00000000 
f000164a l       .text  00000000 
f000164c l       .text  00000000 
f0001650 l       .text  00000000 
f0001652 l       .text  00000000 
f0001652 l       .text  00000000 
f0001652 l       .text  00000000 
f0001652 l       .text  00000000 
f0001652 l       .text  00000000 
f0001654 l       .text  00000000 
f0001654 l       .text  00000000 
f0001658 l       .text  00000000 
e0002084 l     O .bss   00000004 uxSchedulerSuspended
f0001662 l       .text  00000000 
e0002088 l     O .bss   00000004 xYieldPending
f0001664 l       .text  00000000 
f0001672 l       .text  00000000 
f000167e l       .text  00000000 
f000168e l       .text  00000000 
f0001692 l       .text  00000000 
f000169e l       .text  00000000 
f000169e l       .text  00000000 
f000170e l       .text  00000000 
f000170e l       .text  00000000 
f0001710 l       .text  00000000 
f0001710 l       .text  00000000 
f0001714 l       .text  00000000 
f0001714 l       .text  00000000 
f000171e l       .text  00000000 
f0001722 l       .text  00000000 
f0001726 l       .text  00000000 
f000172c l       .text  00000000 
f000172e l       .text  00000000 
f0001730 l       .text  00000000 
f0001732 l       .text  00000000 
f0001736 l       .text  00000000 
f0001736 l       .text  00000000 
f000173e l       .text  00000000 
f000173e l       .text  00000000 
f000173e l       .text  00000000 
f000173e l       .text  00000000 
f000173e l       .text  00000000 
f0001740 l       .text  00000000 
f0001740 l       .text  00000000 
f0001742 l       .text  00000000 
f00017a4 l     F .text  00000082 prvIdleTask
e000208c l     O .bss   00000004 xIdleTaskHandle
f0001764 l       .text  00000000 
f0001764 l       .text  00000000 
f0001766 l       .text  00000000 
f0001766 l       .text  00000000 
f000176a l       .text  00000000 
f000176e l       .text  00000000 
f000176e l       .text  00000000 
f000177a l       .text  00000000 
e0002094 l     O .bss   00000004 xTickCount
f0001784 l       .text  00000000 
f0001790 l       .text  00000000 
f0001794 l       .text  00000000 
f0001794 l       .text  00000000 
f000179e l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a6 l       .text  00000000 
f00017b4 l       .text  00000000 
f00017b4 l       .text  00000000 
f00017dc l       .text  00000000 
f00017dc l       .text  00000000 
f00017de l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e4 l       .text  00000000 
f00017e8 l       .text  00000000 
f00017ea l       .text  00000000 
f00017ee l       .text  00000000 
f00017f4 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017fe l       .text  00000000 
f00017fe l       .text  00000000 
f0001802 l       .text  00000000 
f0001804 l       .text  00000000 
f0001804 l       .text  00000000 
f000180e l       .text  00000000 
f0001814 l       .text  00000000 
f0001816 l       .text  00000000 
f0001816 l       .text  00000000 
f0001818 l       .text  00000000 
f000181a l       .text  00000000 
f000181a l       .text  00000000 
f000181e l       .text  00000000 
f000181e l       .text  00000000 
f0001820 l       .text  00000000 
f0001820 l       .text  00000000 
f0001826 l       .text  00000000 
f0001826 l       .text  00000000 
f0001826 l       .text  00000000 
f0001826 l       .text  00000000 
f0001826 l       .text  00000000 
f0001826 l       .text  00000000 
f0001834 l       .text  00000000 
f0001834 l       .text  00000000 
f0001836 l       .text  00000000 
f0001836 l       .text  00000000 
f0001836 l       .text  00000000 
f0001836 l       .text  00000000 
f0001836 l       .text  00000000 
f0001838 l       .text  00000000 
f0001838 l       .text  00000000 
f0001840 l       .text  00000000 
f0001840 l       .text  00000000 
f0001840 l       .text  00000000 
f0001844 l       .text  00000000 
f0001844 l       .text  00000000 
f000184e l       .text  00000000 
f0001850 l       .text  00000000 
f000185a l       .text  00000000 
f0001860 l       .text  00000000 
f0001862 l       .text  00000000 
f0001862 l       .text  00000000 
f0001870 l       .text  00000000 
f0001872 l       .text  00000000 
f0001874 l       .text  00000000 
f000187e l       .text  00000000 
f0001880 l       .text  00000000 
f000188a l       .text  00000000 
f0001892 l       .text  00000000 
f0001894 l       .text  00000000 
f0001894 l       .text  00000000 
f0001896 l       .text  00000000 
f00018b0 l       .text  00000000 
f00018b0 l       .text  00000000 
f00018b4 l       .text  00000000 
f00018b4 l       .text  00000000 
f00018ba l       .text  00000000 
f00018c0 l       .text  00000000 
f00018c2 l       .text  00000000 
f00018ca l       .text  00000000 
f00018cc l       .text  00000000 
f00018d6 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018dc l       .text  00000000 
f00018e2 l       .text  00000000 
f00018e4 l       .text  00000000 
f00018e8 l       .text  00000000 
f00018ec l       .text  00000000 
f00018ee l       .text  00000000 
f00018f4 l       .text  00000000 
f00018f4 l       .text  00000000 
f00018f8 l       .text  00000000 
f0001900 l       .text  00000000 
f0001900 l       .text  00000000 
f0001908 l       .text  00000000 
f0001918 l       .text  00000000 
f000191c l       .text  00000000 
f000191c l       .text  00000000 
f0001920 l       .text  00000000 
f0001922 l       .text  00000000 
f0001926 l       .text  00000000 
f000192a l       .text  00000000 
f000192a l       .text  00000000 
f000192c l       .text  00000000 
f000192e l       .text  00000000 
f000192e l       .text  00000000 
f000193a l       .text  00000000 
f000193c l       .text  00000000 
f000193c l       .text  00000000 
f0001944 l       .text  00000000 
f0001946 l       .text  00000000 
f0001950 l       .text  00000000 
e0002098 l     O .bss   00000004 xPendedTicks
f0001950 l       .text  00000000 
f000195a l       .text  00000000 
f000195a l       .text  00000000 
f000195c l       .text  00000000 
f000195c l       .text  00000000 
f000195e l       .text  00000000 
f000195e l       .text  00000000 
f0001960 l       .text  00000000 
f0001962 l       .text  00000000 
f0001966 l       .text  00000000 
f0001966 l       .text  00000000 
f000196a l       .text  00000000 
f000196c l       .text  00000000 
f000196c l       .text  00000000 
f000197a l       .text  00000000 
f000197a l       .text  00000000 
f000197a l       .text  00000000 
f000197a l       .text  00000000 
f000197a l       .text  00000000 
f000197a l       .text  00000000 
f0001984 l       .text  00000000 
f0001986 l       .text  00000000 
f0001996 l       .text  00000000 
f0001996 l       .text  00000000 
f00019a0 l       .text  00000000 
f00019a4 l       .text  00000000 
f00019a4 l       .text  00000000 
f00019a8 l       .text  00000000 
f00019a8 l       .text  00000000 
f00019b8 l       .text  00000000 
f00019bc l       .text  00000000 
f00019bc l       .text  00000000 
f00019c0 l       .text  00000000 
e000209c l     O .bss   00000004 xNumOfOverflows
f00019de l       .text  00000000 
f00019de l       .text  00000000 
f00019e4 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019f0 l       .text  00000000 
f00019f6 l       .text  00000000 
f00019f6 l       .text  00000000 
f00019fa l       .text  00000000 
f00019fe l       .text  00000000 
f0001a04 l       .text  00000000 
f0001a06 l       .text  00000000 
f0001a08 l       .text  00000000 
f0001a1a l       .text  00000000 
f0001a1a l       .text  00000000 
f0001a22 l       .text  00000000 
f0001a22 l       .text  00000000 
f0001a24 l       .text  00000000 
f0001a24 l       .text  00000000 
f0001a28 l       .text  00000000 
f0001a28 l       .text  00000000 
f0001a2e l       .text  00000000 
f0001a34 l       .text  00000000 
f0001a36 l       .text  00000000 
f0001a36 l       .text  00000000 
f0001a3a l       .text  00000000 
f0001a3a l       .text  00000000 
f0001a3e l       .text  00000000 
f0001a40 l       .text  00000000 
f0001a46 l       .text  00000000 
f0001a46 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a54 l       .text  00000000 
f0001a56 l       .text  00000000 
f0001a56 l       .text  00000000 
f0001a5a l       .text  00000000 
f0001a5a l       .text  00000000 
f0001a5e l       .text  00000000 
f0001a60 l       .text  00000000 
f0001a6a l       .text  00000000 
f0001a6a l       .text  00000000 
f0001a7a l       .text  00000000 
f0001a7a l       .text  00000000 
f0001a82 l       .text  00000000 
f0001a92 l       .text  00000000 
f0001a96 l       .text  00000000 
f0001a96 l       .text  00000000 
f0001a9c l       .text  00000000 
f0001a9e l       .text  00000000 
f0001a9e l       .text  00000000 
f0001aa4 l       .text  00000000 
f0001aa4 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aa8 l       .text  00000000 
000018fc l       .debug_loc     00000000 
00001938 l       .debug_loc     00000000 
0000195e l       .debug_loc     00000000 
00001979 l       .debug_loc     00000000 
000019b5 l       .debug_loc     00000000 
000019db l       .debug_loc     00000000 
00001a01 l       .debug_loc     00000000 
00001a32 l       .debug_loc     00000000 
00001a8f l       .debug_loc     00000000 
00001ab5 l       .debug_loc     00000000 
00001adb l       .debug_loc     00000000 
00001b01 l       .debug_loc     00000000 
00001b27 l       .debug_loc     00000000 
00001b4d l       .debug_loc     00000000 
00001b73 l       .debug_loc     00000000 
00001b8e l       .debug_loc     00000000 
00001bb6 l       .debug_loc     00000000 
00001bf2 l       .debug_loc     00000000 
00001c25 l       .debug_loc     00000000 
00001c40 l       .debug_loc     00000000 
00001c5b l       .debug_loc     00000000 
00001c81 l       .debug_loc     00000000 
00001cc8 l       .debug_loc     00000000 
00001d25 l       .debug_loc     00000000 
00001d77 l       .debug_loc     00000000 
00001d9d l       .debug_loc     00000000 
00001dc3 l       .debug_loc     00000000 
00001df4 l       .debug_loc     00000000 
00001e0f l       .debug_loc     00000000 
00001e35 l       .debug_loc     00000000 
00001e50 l       .debug_loc     00000000 
00001e6b l       .debug_loc     00000000 
00001e86 l       .debug_loc     00000000 
00001eae l       .debug_loc     00000000 
00001ec9 l       .debug_loc     00000000 
00001ee4 l       .debug_loc     00000000 
00001f15 l       .debug_loc     00000000 
00001f3b l       .debug_loc     00000000 
00001f7b l       .debug_loc     00000000 
00001fac l       .debug_loc     00000000 
00001fdd l       .debug_loc     00000000 
0000200e l       .debug_loc     00000000 
00002029 l       .debug_loc     00000000 
0000204f l       .debug_loc     00000000 
000020ac l       .debug_loc     00000000 
000020c7 l       .debug_loc     00000000 
00002119 l       .debug_loc     00000000 
00002160 l       .debug_loc     00000000 
00002186 l       .debug_loc     00000000 
000021ae l       .debug_loc     00000000 
000021d4 l       .debug_loc     00000000 
000021ef l       .debug_loc     00000000 
0000224c l       .debug_loc     00000000 
00002272 l       .debug_loc     00000000 
000022cf l       .debug_loc     00000000 
000022f5 l       .debug_loc     00000000 
0000231d l       .debug_loc     00000000 
00002375 l       .debug_loc     00000000 
000023d7 l       .debug_loc     00000000 
000023f2 l       .debug_loc     00000000 
0000240d l       .debug_loc     00000000 
00002428 l       .debug_loc     00000000 
00002443 l       .debug_loc     00000000 
00002476 l       .debug_loc     00000000 
000024c2 l       .debug_loc     00000000 
000024dd l       .debug_loc     00000000 
000024f8 l       .debug_loc     00000000 
00002513 l       .debug_loc     00000000 
0000252e l       .debug_loc     00000000 
00002562 l       .debug_loc     00000000 
0000259e l       .debug_loc     00000000 
000025b9 l       .debug_loc     00000000 
000025d4 l       .debug_loc     00000000 
000025ef l       .debug_loc     00000000 
0000260a l       .debug_loc     00000000 
00002625 l       .debug_loc     00000000 
00002640 l       .debug_loc     00000000 
0000265b l       .debug_loc     00000000 
00002676 l       .debug_loc     00000000 
00002691 l       .debug_loc     00000000 
000026cd l       .debug_loc     00000000 
00002703 l       .debug_loc     00000000 
0000274a l       .debug_loc     00000000 
00002765 l       .debug_loc     00000000 
000027c3 l       .debug_loc     00000000 
000027de l       .debug_loc     00000000 
00002810 l       .debug_loc     00000000 
00002838 l       .debug_loc     00000000 
00002853 l       .debug_loc     00000000 
00002879 l       .debug_loc     00000000 
00002894 l       .debug_loc     00000000 
000028b0 l       .debug_loc     00000000 
000028ec l       .debug_loc     00000000 
0000291d l       .debug_loc     00000000 
00002950 l       .debug_loc     00000000 
0000296b l       .debug_loc     00000000 
00002986 l       .debug_loc     00000000 
000029b7 l       .debug_loc     00000000 
000029e8 l       .debug_loc     00000000 
00002a19 l       .debug_loc     00000000 
00002a4d l       .debug_loc     00000000 
00002a73 l       .debug_loc     00000000 
00002a8e l       .debug_loc     00000000 
00002aa9 l       .debug_loc     00000000 
00002ac4 l       .debug_loc     00000000 
00002aea l       .debug_loc     00000000 
00002b05 l       .debug_loc     00000000 
00002b20 l       .debug_loc     00000000 
00002b3b l       .debug_loc     00000000 
00002b56 l       .debug_loc     00000000 
00002b7c l       .debug_loc     00000000 
00002b97 l       .debug_loc     00000000 
00002bb2 l       .debug_loc     00000000 
00002bd8 l       .debug_loc     00000000 
00002bf3 l       .debug_loc     00000000 
00002c0e l       .debug_loc     00000000 
00002c29 l       .debug_loc     00000000 
00002c44 l       .debug_loc     00000000 
00002c96 l       .debug_loc     00000000 
00002ce8 l       .debug_loc     00000000 
00002d0e l       .debug_loc     00000000 
00002d29 l       .debug_loc     00000000 
00002d50 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004280 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000440 l       .debug_ranges  00000000 
00003321 l       .debug_str     00000000 
0000438a l       .debug_str     00000000 
00004383 l       .debug_str     00000000 
00002e85 l       .debug_str     00000000 
0000429a l       .debug_str     00000000 
000042b3 l       .debug_str     00000000 
00004bf9 l       .debug_str     00000000 
0000434f l       .debug_str     00000000 
0000435a l       .debug_str     00000000 
000031b4 l       .debug_str     00000000 
00004362 l       .debug_str     00000000 
00004374 l       .debug_str     00000000 
000042a7 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00004333 l       .debug_str     00000000 
00004344 l       .debug_str     00000000 
000042c2 l       .debug_str     00000000 
000042d8 l       .debug_str     00000000 
000042df l       .debug_str     00000000 
000042ea l       .debug_str     00000000 
000042f2 l       .debug_str     00000000 
000042cd l       .debug_str     00000000 
0000433e l       .debug_str     00000000 
000042fe l       .debug_str     00000000 
0000430e l       .debug_str     00000000 
00004316 l       .debug_str     00000000 
00002e2e l       .debug_str     00000000 
0000432f l       .debug_str     00000000 
0000431f l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00003209 l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
00004390 l       .debug_str     00000000 
000043a2 l       .debug_str     00000000 
000043b4 l       .debug_str     00000000 
000043bb l       .debug_str     00000000 
000043cd l       .debug_str     00000000 
000043e7 l       .debug_str     00000000 
000043f9 l       .debug_str     00000000 
00004412 l       .debug_str     00000000 
00004425 l       .debug_str     00000000 
00004437 l       .debug_str     00000000 
00004449 l       .debug_str     00000000 
0000445c l       .debug_str     00000000 
00004469 l       .debug_str     00000000 
00004486 l       .debug_str     00000000 
0000449d l       .debug_str     00000000 
00002e2f l       .debug_str     00000000 
000029a6 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
000044af l       .debug_str     00000000 
000044c4 l       .debug_str     00000000 
000044d2 l       .debug_str     00000000 
000031a7 l       .debug_str     00000000 
000044e2 l       .debug_str     00000000 
000044f7 l       .debug_str     00000000 
00004502 l       .debug_str     00000000 
0000450f l       .debug_str     00000000 
0000451f l       .debug_str     00000000 
00004528 l       .debug_str     00000000 
0000452f l       .debug_str     00000000 
00004538 l       .debug_str     00000000 
00004543 l       .debug_str     00000000 
0000454c l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
00004555 l       .debug_str     00000000 
0000456a l       .debug_str     00000000 
00004575 l       .debug_str     00000000 
0000457c l       .debug_str     00000000 
00004589 l       .debug_str     00000000 
00004596 l       .debug_str     00000000 
000045a4 l       .debug_str     00000000 
000045ad l       .debug_str     00000000 
000009db l       .debug_str     00000000 
00002ed2 l       .debug_str     00000000 
000045f0 l       .debug_str     00000000 
000045e1 l       .debug_str     00000000 
000045b6 l       .debug_str     00000000 
000045c4 l       .debug_str     00000000 
000045d4 l       .debug_str     00000000 
000045ff l       .debug_str     00000000 
00004612 l       .debug_str     00000000 
0000462b l       .debug_str     00000000 
00002e79 l       .debug_str     00000000 
000049e8 l       .debug_str     00000000 
00004b6a l       .debug_str     00000000 
000003a8 l       .debug_ranges  00000000 
000003c8 l       .debug_ranges  00000000 
00004642 l       .debug_str     00000000 
0000464f l       .debug_str     00000000 
00004659 l       .debug_str     00000000 
0000466d l       .debug_str     00000000 
00004683 l       .debug_str     00000000 
0000479d l       .debug_str     00000000 
00004693 l       .debug_str     00000000 
000046a0 l       .debug_str     00000000 
000046a6 l       .debug_str     00000000 
00002e99 l       .debug_str     00000000 
000049f5 l       .debug_str     00000000 
000003e0 l       .debug_ranges  00000000 
000046c2 l       .debug_str     00000000 
000046cf l       .debug_str     00000000 
000047af l       .debug_str     00000000 
000031a1 l       .debug_str     00000000 
00004a03 l       .debug_str     00000000 
00004a0f l       .debug_str     00000000 
00004a1d l       .debug_str     00000000 
00004a35 l       .debug_str     00000000 
000047c8 l       .debug_str     00000000 
00004a3d l       .debug_str     00000000 
000047da l       .debug_str     00000000 
00004a46 l       .debug_str     00000000 
000047f3 l       .debug_str     00000000 
00004a5c l       .debug_str     00000000 
00004a6a l       .debug_str     00000000 
00004a79 l       .debug_str     00000000 
00004a8f l       .debug_str     00000000 
00004804 l       .debug_str     00000000 
00004aa5 l       .debug_str     00000000 
00002e3a l       .debug_str     00000000 
00004ab4 l       .debug_str     00000000 
00004ac2 l       .debug_str     00000000 
00003183 l       .debug_str     00000000 
000046de l       .debug_str     00000000 
00004811 l       .debug_str     00000000 
00004ace l       .debug_str     00000000 
0000481d l       .debug_str     00000000 
00004adc l       .debug_str     00000000 
00002f44 l       .debug_str     00000000 
00003258 l       .debug_str     00000000 
000046f5 l       .debug_str     00000000 
00004830 l       .debug_str     00000000 
0000483c l       .debug_str     00000000 
00004715 l       .debug_str     00000000 
0000484e l       .debug_str     00000000 
00004af3 l       .debug_str     00000000 
00004b03 l       .debug_str     00000000 
00004b0a l       .debug_str     00000000 
0000485d l       .debug_str     00000000 
00004b18 l       .debug_str     00000000 
00004b28 l       .debug_str     00000000 
00004b38 l       .debug_str     00000000 
000003f8 l       .debug_ranges  00000000 
00000410 l       .debug_ranges  00000000 
00004870 l       .debug_str     00000000 
00004b3f l       .debug_str     00000000 
00004882 l       .debug_str     00000000 
0000489b l       .debug_str     00000000 
00002ea5 l       .debug_str     00000000 
00004b46 l       .debug_str     00000000 
00004727 l       .debug_str     00000000 
000048b2 l       .debug_str     00000000 
00004b53 l       .debug_str     00000000 
00004b61 l       .debug_str     00000000 
000048c1 l       .debug_str     00000000 
00004b69 l       .debug_str     00000000 
00004b72 l       .debug_str     00000000 
00004b7d l       .debug_str     00000000 
00004b88 l       .debug_str     00000000 
00004b92 l       .debug_str     00000000 
000048e2 l       .debug_str     00000000 
00004b9c l       .debug_str     00000000 
00004bac l       .debug_str     00000000 
000048f4 l       .debug_str     00000000 
00004904 l       .debug_str     00000000 
00004bbb l       .debug_str     00000000 
00004c09 l       .debug_str     00000000 
00004737 l       .debug_str     00000000 
0000491a l       .debug_str     00000000 
00004bc7 l       .debug_str     00000000 
00004bdd l       .debug_str     00000000 
00004939 l       .debug_str     00000000 
00004958 l       .debug_str     00000000 
00004be9 l       .debug_str     00000000 
00004971 l       .debug_str     00000000 
00004bf8 l       .debug_str     00000000 
00000428 l       .debug_ranges  00000000 
00004993 l       .debug_str     00000000 
00004760 l       .debug_str     00000000 
00004743 l       .debug_str     00000000 
00004793 l       .debug_str     00000000 
00004789 l       .debug_str     00000000 
0000476a l       .debug_str     00000000 
00004779 l       .debug_str     00000000 
000049a8 l       .debug_str     00000000 
00004c08 l       .debug_str     00000000 
00004c16 l       .debug_str     00000000 
000049bd l       .debug_str     00000000 
000049ce l       .debug_str     00000000 
000047bd l       .debug_str     00000000 
000001e8 l       .debug_str     00000000 
00000143 l       .debug_str     00000000 
0000064c l       .debug_frame   00000000 
f0001622 l       .text  00000000 
f0001652 l       .text  00000000 
f000173e l       .text  00000000 
f00017a4 l       .text  00000000 
f0001826 l       .text  00000000 
f0001836 l       .text  00000000 
f000197a l       .text  00000000 
f0001aa8 l       .text  00000000 
00000000 l    df *ABS*  00000000 list.c
f0001aa8 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aac l       .text  00000000 
f0001ab0 l       .text  00000000 
f0001ab2 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001ab6 l       .text  00000000 
f0001aba l       .text  00000000 
f0001abc l       .text  00000000 
f0001abc l       .text  00000000 
f0001abc l       .text  00000000 
f0001abc l       .text  00000000 
f0001abc l       .text  00000000 
f0001abc l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac4 l       .text  00000000 
f0001ac6 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001aca l       .text  00000000 
f0001acc l       .text  00000000 
f0001ace l       .text  00000000 
f0001ad0 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad6 l       .text  00000000 
f0001ada l       .text  00000000 
f0001adc l       .text  00000000 
f0001ae0 l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001ae4 l       .text  00000000 
f0001ae4 l       .text  00000000 
00002d6b l       .debug_loc     00000000 
00002d86 l       .debug_loc     00000000 
00002da1 l       .debug_loc     00000000 
00002dbc l       .debug_loc     00000000 
00002dd7 l       .debug_loc     00000000 
00002dfd l       .debug_loc     00000000 
00002e18 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004c23 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000568 l       .debug_ranges  00000000 
00004333 l       .debug_str     00000000 
00004344 l       .debug_str     00000000 
000042c2 l       .debug_str     00000000 
000042d8 l       .debug_str     00000000 
000042df l       .debug_str     00000000 
000042ea l       .debug_str     00000000 
000042f2 l       .debug_str     00000000 
000042cd l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000433e l       .debug_str     00000000 
000042fe l       .debug_str     00000000 
0000430e l       .debug_str     00000000 
00004316 l       .debug_str     00000000 
00002e2e l       .debug_str     00000000 
0000432f l       .debug_str     00000000 
0000431f l       .debug_str     00000000 
00004683 l       .debug_str     00000000 
00004b03 l       .debug_str     00000000 
00004659 l       .debug_str     00000000 
00004c3c l       .debug_str     00000000 
000046cf l       .debug_str     00000000 
00004c43 l       .debug_str     00000000 
00004737 l       .debug_str     00000000 
00004c51 l       .debug_str     00000000 
00004c63 l       .debug_str     00000000 
000046c2 l       .debug_str     00000000 
00004c6e l       .debug_str     00000000 
000043b4 l       .debug_str     00000000 
0000098c l       .debug_frame   00000000 
f0001abc l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ae4 l       .text  00000000 
00000000 l    df *ABS*  00000000 heap_1.c
f0001ae4 l       .text  00000000 
f0001ae4 l       .text  00000000 
f0001ae4 l       .text  00000000 
f0001ae6 l       .text  00000000 
f0001aee l       .text  00000000 
f0001af0 l       .text  00000000 
f0001af0 l       .text  00000000 
f0001af4 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001afc l       .text  00000000 
f0001afe l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b02 l       .text  00000000 
f0001b04 l       .text  00000000 
e00020a0 l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
f0001b04 l       .text  00000000 
f0001b0e l       .text  00000000 
f0001b10 l       .text  00000000 
f0001b10 l       .text  00000000 
f0001b14 l       .text  00000000 
f0001b14 l       .text  00000000 
f0001b1e l       .text  00000000 
f0001b24 l       .text  00000000 
e00020a4 l     O .bss   00000004 xNextFreeByte
f0001b26 l       .text  00000000 
f0001b32 l       .text  00000000 
f0001b36 l       .text  00000000 
f0001b42 l       .text  00000000 
f0001b46 l       .text  00000000 
f0001b46 l       .text  00000000 
f0001b48 l       .text  00000000 
f0001b4a l       .text  00000000 
f0001b4a l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b50 l       .text  00000000 
f0001b52 l       .text  00000000 
f0001b52 l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b5a l       .text  00000000 
f0001b60 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b68 l       .text  00000000 
f0001b68 l       .text  00000000 
00002e33 l       .debug_loc     00000000 
00002e6f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004c7d l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000598 l       .debug_ranges  00000000 
00004642 l       .debug_str     00000000 
00004ca9 l       .debug_str     00000000 
00004cf1 l       .debug_str     00000000 
00004cfd l       .debug_str     00000000 
00003209 l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
00004cb8 l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00004727 l       .debug_str     00000000 
0000484e l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00003166 l       .debug_str     00000000 
0000464f l       .debug_str     00000000 
00004d06 l       .debug_str     00000000 
00004cc6 l       .debug_str     00000000 
00004cdc l       .debug_str     00000000 
000009f0 l       .debug_frame   00000000 
f0001b66 l       .text  00000000 
f0001b68 l       .text  00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
f0001b68 l       .text  00000000 
f0001b68 l       .text  00000000 
f0001b68 l       .text  00000000 
f0001b68 l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b70 l       .text  00000000 
f0001b70 l       .text  00000000 
00000000 l       .debug_str     00000000 
00004d09 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000005c0 l       .debug_ranges  00000000 
00002fef l       .debug_str     00000000 
0000300a l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00000a50 l       .debug_frame   00000000 
f0001b6c l       .text  00000000 
f0001b70 l       .text  00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
f0001b70 l       .text  00000000 
f0001b70 l       .text  00000000 
f0001b70 l       .text  00000000 
f0001b72 l       .text  00000000 
f0001b78 l       .text  00000000 
f0001b7a l       .text  00000000 
f0001b7c l       .text  00000000 
f0001b7e l       .text  00000000 
f0001b7e l       .text  00000000 
f0001b88 l       .text  00000000 
000100f0 l     O .logs.fields   00000014 rand_testutils_init.kLogFields
f0001b8a l       .text  00000000 
f0001b96 l       .text  00000000 
f0001b96 l       .text  00000000 
f0001b98 l       .text  00000000 
f0001b98 l       .text  00000000 
f0001bac l       .text  00000000 
f0001bac l       .text  00000000 
f0001bb2 l       .text  00000000 
f0001bb4 l       .text  00000000 
f0001bb4 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001be0 l       .text  00000000 
f0001be8 l       .text  00000000 
f0001bec l       .text  00000000 
f0001bec l       .text  00000000 
f0001bf0 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bfa l       .text  00000000 
f0001bfa l       .text  00000000 
00010104 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
00010118 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
00002eae l       .debug_loc     00000000 
00002eea l       .debug_loc     00000000 
00002f1b l       .debug_loc     00000000 
00002f57 l       .debug_loc     00000000 
00002f7d l       .debug_loc     00000000 
00002fa3 l       .debug_loc     00000000 
00002fd4 l       .debug_loc     00000000 
00003005 l       .debug_loc     00000000 
0000302b l       .debug_loc     00000000 
00003053 l       .debug_loc     00000000 
0000306e l       .debug_loc     00000000 
00003089 l       .debug_loc     00000000 
000030a4 l       .debug_loc     00000000 
000030bf l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004d3f l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000005f0 l       .debug_ranges  00000000 
00002f30 l       .debug_str     00000000 
00002af3 l       .debug_str     00000000 
00002be1 l       .debug_str     00000000 
00002bd9 l       .debug_str     00000000 
00002b70 l       .debug_str     00000000 
00002b7b l       .debug_str     00000000 
00002b48 l       .debug_str     00000000 
00002b60 l       .debug_str     00000000 
000058e0 l       .debug_str     00000000 
00002b6a l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
00002b51 l       .debug_str     00000000 
00002b44 l       .debug_str     00000000 
00002afe l       .debug_str     00000000 
00002b0f l       .debug_str     00000000 
00002b20 l       .debug_str     00000000 
00002b32 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00004d66 l       .debug_str     00000000 
00004d81 l       .debug_str     00000000 
00004e10 l       .debug_str     00000000 
00004e42 l       .debug_str     00000000 
00004e46 l       .debug_str     00000000 
00004e25 l       .debug_str     00000000 
00002da8 l       .debug_str     00000000 
00002fe3 l       .debug_str     00000000 
00002c78 l       .debug_str     00000000 
00002c8d l       .debug_str     00000000 
00002ca6 l       .debug_str     00000000 
00002cb8 l       .debug_str     00000000 
00002cc9 l       .debug_str     00000000 
00002cdb l       .debug_str     00000000 
00002d35 l       .debug_str     00000000 
00002ced l       .debug_str     00000000 
00002cfa l       .debug_str     00000000 
00002d0e l       .debug_str     00000000 
00002d1f l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00002e62 l       .debug_str     00000000 
00002f0a l       .debug_str     00000000 
00004de5 l       .debug_str     00000000 
00004d9d l       .debug_str     00000000 
00004daa l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00004dae l       .debug_str     00000000 
00004dfb l       .debug_str     00000000 
00004dba l       .debug_str     00000000 
00002bdd l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00004e2b l       .debug_str     00000000 
00004e4a l       .debug_str     00000000 
00004e50 l       .debug_str     00000000 
00003c0a l       .debug_str     00000000 
00004e61 l       .debug_str     00000000 
00004e55 l       .debug_str     00000000 
00004e5a l       .debug_str     00000000 
00002c34 l       .debug_str     00000000 
000005d8 l       .debug_ranges  00000000 
00000afc l       .debug_str     00000000 
00004e6d l       .debug_str     00000000 
00004dde l       .debug_str     00000000 
00002c63 l       .debug_str     00000000 
00002c50 l       .debug_str     00000000 
00002c01 l       .debug_str     00000000 
00004db5 l       .debug_str     00000000 
00002c1c l       .debug_str     00000000 
00002c45 l       .debug_str     00000000 
00002bee l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00000a84 l       .debug_frame   00000000 
f0001bfa l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
f0001bfa l       .text  00000000 
f0001bfa l       .text  00000000 
f0001bfa l       .text  00000000 
f0001bfa l       .text  00000000 
f0001bfc l       .text  00000000 
f0001bfe l       .text  00000000 
f0001c02 l       .text  00000000 
f0001c04 l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c08 l       .text  00000000 
000030da l       .debug_loc     00000000 
000030f5 l       .debug_loc     00000000 
00003110 l       .debug_loc     00000000 
0000312b l       .debug_loc     00000000 
00003146 l       .debug_loc     00000000 
00003175 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004e6f l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000620 l       .debug_ranges  00000000 
00002da4 l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00002d52 l       .debug_str     00000000 
00002d5d l       .debug_str     00000000 
00002d68 l       .debug_str     00000000 
00002d78 l       .debug_str     00000000 
00002d87 l       .debug_str     00000000 
00002d96 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00004f1c l       .debug_str     00000000 
00004ea4 l       .debug_str     00000000 
00004ec2 l       .debug_str     00000000 
00004ee0 l       .debug_str     00000000 
00004efe l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002f1a l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002be1 l       .debug_str     00000000 
00003dd8 l       .debug_str     00000000 
00003def l       .debug_str     00000000 
00003df2 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00003e09 l       .debug_str     00000000 
00003df8 l       .debug_str     00000000 
000032eb l       .debug_str     00000000 
00003dbf l       .debug_str     00000000 
00003e1c l       .debug_str     00000000 
00003d4c l       .debug_str     00000000 
00003d56 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003d15 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00003f94 l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00004f33 l       .debug_str     00000000 
00005e9a l       .debug_str     00000000 
00004f69 l       .debug_str     00000000 
00004f73 l       .debug_str     00000000 
000030c8 l       .debug_str     00000000 
00002bee l       .debug_str     00000000 
00002bdd l       .debug_str     00000000 
00004f50 l       .debug_str     00000000 
00000b2c l       .debug_frame   00000000 
f0001c08 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f0001c08 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c0a l       .text  00000000 
f0001c0c l       .text  00000000 
f0001c12 l       .text  00000000 
f0001c16 l       .text  00000000 
f0001c1a l       .text  00000000 
f0001c1e l       .text  00000000 
f0001c1e l       .text  00000000 
f0001c28 l       .text  00000000 
f0001c2a l       .text  00000000 
f0001c2a l       .text  00000000 
f0001c2c l       .text  00000000 
f0001c2c l       .text  00000000 
f0001c32 l       .text  00000000 
f0001c32 l       .text  00000000 
f0001c3c l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c5e l       .text  00000000 
f0001c60 l       .text  00000000 
f0001c60 l       .text  00000000 
f0001c74 l       .text  00000000 
f0001c74 l       .text  00000000 
f0001c76 l       .text  00000000 
00010140 l     O .logs.fields   00000014 test_status_set.kLogFields.2
f0001c76 l       .text  00000000 
f0001c82 l       .text  00000000 
f0001c82 l       .text  00000000 
f0001c8c l       .text  00000000 
f0001c8e l       .text  00000000 
f0001c8e l       .text  00000000 
0001012c l     O .logs.fields   00000014 test_status_set.kLogFields
f0001c96 l       .text  00000000 
f0001ca2 l       .text  00000000 
f0001ca2 l       .text  00000000 
f0001cac l       .text  00000000 
f0001cae l       .text  00000000 
f0001cae l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cb6 l       .text  00000000 
00003190 l       .debug_loc     00000000 
000031ae l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000055f1 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00002f0a l       .debug_str     00000000 
00002af3 l       .debug_str     00000000 
00002fe3 l       .debug_str     00000000 
00002b70 l       .debug_str     00000000 
00002b7b l       .debug_str     00000000 
00002b48 l       .debug_str     00000000 
00002b60 l       .debug_str     00000000 
000058e0 l       .debug_str     00000000 
00002b6a l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
00002b51 l       .debug_str     00000000 
00002b44 l       .debug_str     00000000 
00002afe l       .debug_str     00000000 
00002b0f l       .debug_str     00000000 
00002b20 l       .debug_str     00000000 
00002b32 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002c78 l       .debug_str     00000000 
00002c8d l       .debug_str     00000000 
00002ca6 l       .debug_str     00000000 
00002cb8 l       .debug_str     00000000 
00002cc9 l       .debug_str     00000000 
00002cdb l       .debug_str     00000000 
0000561f l       .debug_str     00000000 
00005646 l       .debug_str     00000000 
00005638 l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00003d15 l       .debug_str     00000000 
00003f94 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00002e62 l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00003160 l       .debug_str     00000000 
00000b60 l       .debug_frame   00000000 
f0001cb6 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
f0001cb6 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cba l       .text  00000000 
f0001cba l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cbc l       .text  00000000 
000031c1 l       .debug_loc     00000000 
000031dc l       .debug_loc     00000000 
00003203 l       .debug_loc     00000000 
0000322a l       .debug_loc     00000000 
00003246 l       .debug_loc     00000000 
00003273 l       .debug_loc     00000000 
0000329a l       .debug_loc     00000000 
000032c1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000565e l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000638 l       .debug_ranges  00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
0000567b l       .debug_str     00000000 
0000568c l       .debug_str     00000000 
00005696 l       .debug_str     00000000 
000056a1 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
000056cf l       .debug_str     00000000 
00002c17 l       .debug_str     00000000 
00003c89 l       .debug_str     00000000 
000056b5 l       .debug_str     00000000 
000056ae l       .debug_str     00000000 
000056bc l       .debug_str     00000000 
00003160 l       .debug_str     00000000 
000056e0 l       .debug_str     00000000 
00000b8c l       .debug_frame   00000000 
f0001cbc l       .text  00000000 
00000000 l    df *ABS*  00000000 ibex.c
f0001cbc l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cc0 l       .text  00000000 
f0001cc0 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cc8 l       .text  00000000 
f0001cc8 l       .text  00000000 
f0001cc8 l       .text  00000000 
f0001cc8 l       .text  00000000 
f0001cc8 l       .text  00000000 
f0001cc8 l       .text  00000000 
f0001ccc l       .text  00000000 
f0001ccc l       .text  00000000 
f0001cce l       .text  00000000 
f0001cce l       .text  00000000 
000032dd l       .debug_loc     00000000 
000032f8 l       .debug_loc     00000000 
00003313 l       .debug_loc     00000000 
0000332e l       .debug_loc     00000000 
00003355 l       .debug_loc     00000000 
0000337c l       .debug_loc     00000000 
00003398 l       .debug_loc     00000000 
000033b3 l       .debug_loc     00000000 
000033cf l       .debug_loc     00000000 
000033f6 l       .debug_loc     00000000 
0000341d l       .debug_loc     00000000 
00003443 l       .debug_loc     00000000 
0000346a l       .debug_loc     00000000 
00003491 l       .debug_loc     00000000 
000034ad l       .debug_loc     00000000 
000034c8 l       .debug_loc     00000000 
000034ef l       .debug_loc     00000000 
00003516 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000056f2 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000690 l       .debug_ranges  00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
00003991 l       .debug_str     00000000 
00003a9b l       .debug_str     00000000 
00003981 l       .debug_str     00000000 
00003972 l       .debug_str     00000000 
00003a96 l       .debug_str     00000000 
0000571b l       .debug_str     00000000 
0000567b l       .debug_str     00000000 
000056a1 l       .debug_str     00000000 
00005696 l       .debug_str     00000000 
0000568c l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000572b l       .debug_str     00000000 
00002c0f l       .debug_str     00000000 
0000570f l       .debug_str     00000000 
00005759 l       .debug_str     00000000 
00005742 l       .debug_str     00000000 
00000660 l       .debug_ranges  00000000 
0000576c l       .debug_str     00000000 
00000678 l       .debug_ranges  00000000 
0000574a l       .debug_str     00000000 
0000573d l       .debug_str     00000000 
000056b5 l       .debug_str     00000000 
00003c89 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00000bec l       .debug_frame   00000000 
f0001cc2 l       .text  00000000 
f0001cc8 l       .text  00000000 
f0001cce l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
f0001cce l       .text  00000000 
f0001cce l       .text  00000000 
f0001cce l       .text  00000000 
f0001cd0 l       .text  00000000 
f0001cd6 l       .text  00000000 
f0001cd8 l       .text  00000000 
f0001ce6 l       .text  00000000 
f0001cf0 l       .text  00000000 
f0001cf6 l       .text  00000000 
f0001cf6 l       .text  00000000 
f0001cf8 l       .text  00000000 
f0001cfc l       .text  00000000 
f0001cfc l       .text  00000000 
f0001d06 l       .text  00000000 
f0001d06 l       .text  00000000 
f0001d08 l       .text  00000000 
f0001d0c l       .text  00000000 
f0001d0c l       .text  00000000 
f0001d0e l       .text  00000000 
f0001d0e l       .text  00000000 
f0001d10 l       .text  00000000 
f0001d10 l       .text  00000000 
f0001d14 l       .text  00000000 
f0001d14 l       .text  00000000 
f0001d1a l       .text  00000000 
f0001d28 l       .text  00000000 
f0001d28 l       .text  00000000 
e00020a8 l     O .bss   00000002 base_log_internal_core.global_log_counter
f0001d30 l       .text  00000000 
f0001d3c l       .text  00000000 
f0001d3e l       .text  00000000 
f0001d48 l       .text  00000000 
f0001d48 l       .text  00000000 
f0001d54 l       .text  00000000 
f0001d54 l       .text  00000000 
f0001d56 l       .text  00000000 
f0001d58 l       .text  00000000 
f0001d5c l       .text  00000000 
f0001d5c l       .text  00000000 
f0001d66 l       .text  00000000 
f0001d66 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d72 l       .text  00000000 
f0001d78 l       .text  00000000 
f0001d78 l       .text  00000000 
f0001d82 l       .text  00000000 
f0001d82 l       .text  00000000 
f0001d88 l       .text  00000000 
f0001d88 l       .text  00000000 
f0001d8c l       .text  00000000 
f0001d8c l       .text  00000000 
f0001d8e l       .text  00000000 
f0001d8e l       .text  00000000 
f0001d90 l       .text  00000000 
f0001d90 l       .text  00000000 
f0001d92 l       .text  00000000 
f0001d96 l       .text  00000000 
f0001d9a l       .text  00000000 
f0001d9c l       .text  00000000 
f0001d9c l       .text  00000000 
f0001d9e l       .text  00000000 
f0001d9e l       .text  00000000 
f0001da0 l       .text  00000000 
f0001da0 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001da4 l       .text  00000000 
00003532 l       .debug_loc     00000000 
0000355a l       .debug_loc     00000000 
00003575 l       .debug_loc     00000000 
000035b1 l       .debug_loc     00000000 
000035cd l       .debug_loc     00000000 
000035e8 l       .debug_loc     00000000 
00003603 l       .debug_loc     00000000 
0000361e l       .debug_loc     00000000 
0000365c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005781 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000006d8 l       .debug_ranges  00000000 
00002e62 l       .debug_str     00000000 
0000579d l       .debug_str     00000000 
000057eb l       .debug_str     00000000 
000057ef l       .debug_str     00000000 
000057fd l       .debug_str     00000000 
00002b6b l       .debug_str     00000000 
000001e8 l       .debug_str     00000000 
00000143 l       .debug_str     00000000 
00002b44 l       .debug_str     00000000 
00002afe l       .debug_str     00000000 
00002b0f l       .debug_str     00000000 
00002b20 l       .debug_str     00000000 
00002b32 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
000032e1 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
000057b0 l       .debug_str     00000000 
00002b48 l       .debug_str     00000000 
00002b51 l       .debug_str     00000000 
000057c3 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
000057ca l       .debug_str     00000000 
000057d2 l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
000057de l       .debug_str     00000000 
00003d15 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00003f94 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00002b6a l       .debug_str     00000000 
00005807 l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
00002b7b l       .debug_str     00000000 
00002b70 l       .debug_str     00000000 
00002b60 l       .debug_str     00000000 
000058e0 l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000252 l       .debug_str     00000000 
00000c88 l       .debug_frame   00000000 
f0001d70 l       .text  00000000 
f0001da4 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
f0001da4 l     F .text  00000004 base_dev_null
e00020ac l     O .bss   00000008 base_stdout
f0001da4 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001da6 l       .text  00000000 
f0001da6 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001db0 l       .text  00000000 
f0001db0 l       .text  00000000 
f0001db2 l       .text  00000000 
f0001dbe l     F .text  00000040 base_dev_uart
f0001dba l       .text  00000000 
f0001dbc l       .text  00000000 
f0001dbc l       .text  00000000 
f0001dbe l       .text  00000000 
f0001dbe l       .text  00000000 
f0001dbe l       .text  00000000 
f0001dbe l       .text  00000000 
f0001dbe l       .text  00000000 
f0001dc0 l       .text  00000000 
f0001dc0 l       .text  00000000 
f0001dca l       .text  00000000 
f0001dca l       .text  00000000 
f0001dca l       .text  00000000 
f0001dcc l       .text  00000000 
f0001dce l       .text  00000000 
f0001dd0 l       .text  00000000 
f0001dd2 l       .text  00000000 
f0001dd4 l       .text  00000000 
f0001dd4 l       .text  00000000 
f0001ddc l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de2 l       .text  00000000 
f0001de4 l       .text  00000000 
f0001de8 l       .text  00000000 
f0001de8 l       .text  00000000 
f0001dea l       .text  00000000 
f0001dec l       .text  00000000 
f0001dee l       .text  00000000 
f0001dee l       .text  00000000 
f0001dfe l       .text  00000000 
f0001dfe l       .text  00000000 
f0001dfe l       .text  00000000 
f0001dfe l       .text  00000000 
f0001dfe l       .text  00000000 
f0001e00 l       .text  00000000 
f0001e02 l       .text  00000000 
f0001e10 l       .text  00000000 
f0001e18 l       .text  00000000 
f0001e18 l       .text  00000000 
f0001e1e l       .text  00000000 
f0001e1e l       .text  00000000 
f0001e20 l       .text  00000000 
f0001e20 l       .text  00000000 
f0001e22 l       .text  00000000 
f0001e22 l       .text  00000000 
f0001e26 l       .text  00000000 
f0001e28 l       .text  00000000 
f0001e2a l       .text  00000000 
f0001e2a l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e38 l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e40 l       .text  00000000 
f0001e40 l       .text  00000000 
f0001e46 l       .text  00000000 
f0001e48 l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4c l       .text  00000000 
f0001e66 l       .text  00000000 
f0001e68 l       .text  00000000 
f0001e6a l       .text  00000000 
f0001e6c l       .text  00000000 
f0001e6e l       .text  00000000 
f0001e70 l       .text  00000000 
f0001e72 l       .text  00000000 
f0001e7a l       .text  00000000 
f0001e7a l       .text  00000000 
f0001e7c l       .text  00000000 
f0001e7c l       .text  00000000 
f0001e80 l       .text  00000000 
f0001e84 l       .text  00000000 
f0001e98 l       .text  00000000 
f0001e98 l       .text  00000000 
f0001ea2 l       .text  00000000 
f0001ea6 l       .text  00000000 
f0001eaa l       .text  00000000 
f0001eac l       .text  00000000 
f0001eae l       .text  00000000 
f0001eae l       .text  00000000 
f0001eb0 l       .text  00000000 
f0001eb2 l       .text  00000000 
f0001eb8 l       .text  00000000 
f0001eb8 l       .text  00000000 
f0001eba l       .text  00000000 
f0001eba l       .text  00000000 
f0001ebe l       .text  00000000 
f0001ebe l       .text  00000000 
f0001eca l       .text  00000000 
f0001ece l       .text  00000000 
f0001ece l       .text  00000000 
f0001eda l       .text  00000000 
f0001eda l       .text  00000000 
f0001ee2 l       .text  00000000 
f0001ee2 l       .text  00000000 
f0001ee6 l       .text  00000000 
f0001ee6 l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001ef8 l       .text  00000000 
f0001f00 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f08 l       .text  00000000 
f0001f0e l       .text  00000000 
f0001f12 l       .text  00000000 
f0001f14 l       .text  00000000 
f0001f18 l       .text  00000000 
f0001f18 l       .text  00000000 
f0001f1c l       .text  00000000 
f0001f22 l       .text  00000000 
f0001f22 l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f3a l       .text  00000000 
f0001f3a l       .text  00000000 
f0001f3c l       .text  00000000 
f0001f42 l       .text  00000000 
f0001f46 l       .text  00000000 
f0001f4a l       .text  00000000 
f0001f4a l       .text  00000000 
f0001f52 l       .text  00000000 
f0001f54 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f66 l       .text  00000000 
f0001f72 l       .text  00000000 
f0001f72 l       .text  00000000 
f0001f76 l       .text  00000000 
f0001f76 l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f86 l       .text  00000000 
f0001f8a l       .text  00000000 
f0001f8a l       .text  00000000 
f0001f8e l       .text  00000000 
f00034da l     O .rodata        00000010 kDigitsLow
f0001fa0 l       .text  00000000 
f0001fa0 l       .text  00000000 
f0001fa8 l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fba l       .text  00000000 
f0001fba l       .text  00000000 
f0001fbe l       .text  00000000 
f0001fbe l       .text  00000000 
f0001fc8 l       .text  00000000 
f0001fc8 l       .text  00000000 
f0001fd0 l       .text  00000000 
f0001fd0 l       .text  00000000 
f0001fd4 l       .text  00000000 
f0003507 l     O .rodata        00000010 kDigitsHigh
f0001fde l       .text  00000000 
f0001fde l       .text  00000000 
f0001fe8 l       .text  00000000 
f0001fe8 l       .text  00000000 
f0001fec l       .text  00000000 
f0001ff6 l       .text  00000000 
f0001ff6 l       .text  00000000 
f0001ffa l       .text  00000000 
f0002004 l       .text  00000000 
f0002004 l       .text  00000000 
f000200c l       .text  00000000 
f000200c l       .text  00000000 
f0002010 l       .text  00000000 
f000201a l       .text  00000000 
f000201a l       .text  00000000 
f0002024 l       .text  00000000 
f0002028 l       .text  00000000 
f000202c l       .text  00000000 
f000202c l       .text  00000000 
f0002038 l       .text  00000000 
f0002038 l       .text  00000000 
f000203c l       .text  00000000 
f0002046 l       .text  00000000 
f000204a l       .text  00000000 
f000204a l       .text  00000000 
f000204c l       .text  00000000 
f000204c l       .text  00000000 
f0002050 l       .text  00000000 
f0002050 l       .text  00000000 
f0002054 l       .text  00000000 
f000205e l       .text  00000000 
f000205e l       .text  00000000 
f0002062 l       .text  00000000 
f000206e l       .text  00000000 
f000206e l       .text  00000000 
f0002072 l       .text  00000000 
f0002072 l       .text  00000000 
f0002080 l       .text  00000000 
f0002080 l       .text  00000000 
f000208a l       .text  00000000 
f000208a l       .text  00000000 
f000208e l       .text  00000000 
f000208e l       .text  00000000 
f00023bc l     F .text  0000007e write_digits
f00020a4 l       .text  00000000 
f00020a4 l       .text  00000000 
f00020aa l       .text  00000000 
f00020aa l       .text  00000000 
f00020b4 l       .text  00000000 
f00020b4 l       .text  00000000 
f00020b6 l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c0 l       .text  00000000 
f00020ca l       .text  00000000 
f00020ca l       .text  00000000 
f00020cc l       .text  00000000 
f00020cc l       .text  00000000 
f00020ce l       .text  00000000 
f00020ce l       .text  00000000 
f00020d2 l       .text  00000000 
f00020d2 l       .text  00000000 
f00020d6 l       .text  00000000 
f00020d8 l       .text  00000000 
f00020dc l       .text  00000000 
f00020dc l       .text  00000000 
f00020e0 l       .text  00000000 
f00020e0 l       .text  00000000 
f00020ec l       .text  00000000 
f00020ec l       .text  00000000 
f00020ee l       .text  00000000 
f00020ee l       .text  00000000 
f00020f0 l       .text  00000000 
f00020f0 l       .text  00000000 
f00020f8 l       .text  00000000 
f00020f8 l       .text  00000000 
f00020fc l       .text  00000000 
f00020fc l       .text  00000000 
f000210a l       .text  00000000 
f000210a l       .text  00000000 
f000210c l       .text  00000000 
f000211a l       .text  00000000 
f000211a l       .text  00000000 
f000211e l       .text  00000000 
f000211e l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f0002130 l       .text  00000000 
f0002130 l       .text  00000000 
f0002134 l       .text  00000000 
f0002134 l       .text  00000000 
f000213c l       .text  00000000 
f000213c l       .text  00000000 
f000213e l       .text  00000000 
f000213e l       .text  00000000 
f0002140 l       .text  00000000 
f0002140 l       .text  00000000 
f0002154 l       .text  00000000 
f0002154 l       .text  00000000 
f0002156 l       .text  00000000 
f0002164 l       .text  00000000 
f0002164 l       .text  00000000 
f0002166 l       .text  00000000 
f0002166 l       .text  00000000 
f0002168 l       .text  00000000 
f0002170 l       .text  00000000 
f0002174 l       .text  00000000 
f0002176 l       .text  00000000 
f0002180 l       .text  00000000 
f0002180 l       .text  00000000 
f0002184 l       .text  00000000 
f000218e l       .text  00000000 
f000218e l       .text  00000000 
f0002192 l       .text  00000000 
f000219e l       .text  00000000 
f000219e l       .text  00000000 
f00021a2 l       .text  00000000 
f00021a2 l       .text  00000000 
f00021ac l       .text  00000000 
f00021ac l       .text  00000000 
f00021b4 l       .text  00000000 
f00021b4 l       .text  00000000 
f00021b8 l       .text  00000000 
f00021c0 l       .text  00000000 
f00021c0 l       .text  00000000 
f00021ca l       .text  00000000 
f00021ca l       .text  00000000 
f00021d4 l       .text  00000000 
f00021d4 l       .text  00000000 
f00021d8 l       .text  00000000 
f00021e0 l       .text  00000000 
f00021e0 l       .text  00000000 
f00021ea l       .text  00000000 
f00021ec l       .text  00000000 
f00021ec l       .text  00000000 
f00021f0 l       .text  00000000 
f00021fa l       .text  00000000 
f00021fa l       .text  00000000 
f0002202 l       .text  00000000 
f0002202 l       .text  00000000 
f0002206 l       .text  00000000 
f000220e l       .text  00000000 
f000220e l       .text  00000000 
f00022d8 l     F .text  000000e4 hex_dump
f0002218 l       .text  00000000 
f000221a l       .text  00000000 
f0003517 l     O .rodata        0000000f kUnknownSpec
f000221a l       .text  00000000 
f0002224 l       .text  00000000 
f0002224 l       .text  00000000 
f0002228 l       .text  00000000 
f000222a l       .text  00000000 
f000222a l       .text  00000000 
f000222e l       .text  00000000 
f0002234 l       .text  00000000 
f0002234 l       .text  00000000 
f0002238 l       .text  00000000 
f0002244 l       .text  00000000 
f0002244 l       .text  00000000 
f0002246 l       .text  00000000 
f0002246 l       .text  00000000 
f000225a l       .text  00000000 
f000225a l       .text  00000000 
f000225e l       .text  00000000 
f000226c l       .text  00000000 
f000226c l       .text  00000000 
f0002270 l       .text  00000000 
f0002270 l       .text  00000000 
f0002276 l       .text  00000000 
f0002276 l       .text  00000000 
f0002278 l       .text  00000000 
f0002278 l       .text  00000000 
f000227a l       .text  00000000 
f000227a l       .text  00000000 
f0002282 l       .text  00000000 
f0002284 l       .text  00000000 
f0002286 l       .text  00000000 
f000228c l       .text  00000000 
f000228c l       .text  00000000 
f0002298 l       .text  00000000 
f00034ea l     O .rodata        00000011 kErrorNul
f0002298 l       .text  00000000 
f00022a2 l       .text  00000000 
f00022a2 l       .text  00000000 
f00022a6 l       .text  00000000 
f00022aa l       .text  00000000 
f00022ac l       .text  00000000 
f00022ac l       .text  00000000 
f00022bc l       .text  00000000 
f00022c0 l       .text  00000000 
f00022cc l       .text  00000000 
f00034fb l     O .rodata        0000000c kErrorTooWide
f00022cc l       .text  00000000 
f00022d8 l       .text  00000000 
f00022d8 l       .text  00000000 
f00022d8 l       .text  00000000 
f00022d8 l       .text  00000000 
f00022d8 l       .text  00000000 
f00022d8 l       .text  00000000 
f00022da l       .text  00000000 
f00022f2 l       .text  00000000 
f00022f4 l       .text  00000000 
f00022f6 l       .text  00000000 
f00022f8 l       .text  00000000 
f00022fa l       .text  00000000 
f00022fe l       .text  00000000 
f00022fe l       .text  00000000 
f0002302 l       .text  00000000 
f0002306 l       .text  00000000 
f0002306 l       .text  00000000 
f0002310 l       .text  00000000 
f0002310 l       .text  00000000 
f0002312 l       .text  00000000 
f0002314 l       .text  00000000 
f000231a l       .text  00000000 
f000231a l       .text  00000000 
f000231e l       .text  00000000 
f0002322 l       .text  00000000 
f0002322 l       .text  00000000 
f000232a l       .text  00000000 
f000232a l       .text  00000000 
f000232c l       .text  00000000 
f000232e l       .text  00000000 
f000232e l       .text  00000000 
f0002330 l       .text  00000000 
f0002330 l       .text  00000000 
f0002336 l       .text  00000000 
f0002336 l       .text  00000000 
f0002338 l       .text  00000000 
f0002338 l       .text  00000000 
f000233c l       .text  00000000 
f0002340 l       .text  00000000 
f0002346 l       .text  00000000 
f0002346 l       .text  00000000 
f000234c l       .text  00000000 
f0002354 l       .text  00000000 
f0002354 l       .text  00000000 
f0002356 l       .text  00000000 
f000235a l       .text  00000000 
f000235e l       .text  00000000 
f0002364 l       .text  00000000 
f0002368 l       .text  00000000 
f000236c l       .text  00000000 
f000236e l       .text  00000000 
f0002374 l       .text  00000000 
f0002376 l       .text  00000000 
f000237e l       .text  00000000 
f0002384 l       .text  00000000 
f0002388 l       .text  00000000 
f0002388 l       .text  00000000 
f000238a l       .text  00000000 
f000238c l       .text  00000000 
f000238c l       .text  00000000 
f000238e l       .text  00000000 
f0002390 l       .text  00000000 
f0002394 l       .text  00000000 
f0002394 l       .text  00000000 
f0002396 l       .text  00000000 
f000239c l       .text  00000000 
f000239c l       .text  00000000 
f000239e l       .text  00000000 
f00023a6 l       .text  00000000 
f00023a8 l       .text  00000000 
f00023ac l       .text  00000000 
f00023ae l       .text  00000000 
f00023b0 l       .text  00000000 
f00023b2 l       .text  00000000 
f00023bc l       .text  00000000 
f00023bc l       .text  00000000 
f00023bc l       .text  00000000 
f00023bc l       .text  00000000 
f00023bc l       .text  00000000 
f00023be l       .text  00000000 
f00023c0 l       .text  00000000 
f00023c2 l       .text  00000000 
f00023c2 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c6 l       .text  00000000 
f00023ca l       .text  00000000 
f00023ca l       .text  00000000 
f00023cc l       .text  00000000 
f00023cc l       .text  00000000 
f00023d8 l       .text  00000000 
f00023d8 l       .text  00000000 
f00023da l       .text  00000000 
f00023de l       .text  00000000 
f00023e6 l       .text  00000000 
f00023e6 l       .text  00000000 
f00023e8 l       .text  00000000 
f00023ec l       .text  00000000 
f00023f0 l       .text  00000000 
f00023f0 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f6 l       .text  00000000 
f00023fc l       .text  00000000 
f00023fc l       .text  00000000 
f00023fe l       .text  00000000 
f0002400 l       .text  00000000 
f0002402 l       .text  00000000 
f0002406 l       .text  00000000 
f000240a l       .text  00000000 
f000240e l       .text  00000000 
f000240e l       .text  00000000 
f0002418 l       .text  00000000 
f000241c l       .text  00000000 
f000241e l       .text  00000000 
f0002422 l       .text  00000000 
f0002426 l       .text  00000000 
f0002428 l       .text  00000000 
f000242a l       .text  00000000 
f000242c l       .text  00000000 
f000242c l       .text  00000000 
f0002432 l       .text  00000000 
f0002434 l       .text  00000000 
f0002434 l       .text  00000000 
f000243a l       .text  00000000 
f000243a l       .text  00000000 
00003679 l       .debug_loc     00000000 
000036a5 l       .debug_loc     00000000 
000036c0 l       .debug_loc     00000000 
000036e6 l       .debug_loc     00000000 
00003712 l       .debug_loc     00000000 
00003743 l       .debug_loc     00000000 
00003774 l       .debug_loc     00000000 
000037b0 l       .debug_loc     00000000 
000037e1 l       .debug_loc     00000000 
00003808 l       .debug_loc     00000000 
00003839 l       .debug_loc     00000000 
00003854 l       .debug_loc     00000000 
00003870 l       .debug_loc     00000000 
0000388b l       .debug_loc     00000000 
000038b1 l       .debug_loc     00000000 
000038d7 l       .debug_loc     00000000 
00003913 l       .debug_loc     00000000 
00003a1e l       .debug_loc     00000000 
00003b78 l       .debug_loc     00000000 
00003c78 l       .debug_loc     00000000 
00003d83 l       .debug_loc     00000000 
00003da3 l       .debug_loc     00000000 
00003dc9 l       .debug_loc     00000000 
00003df9 l       .debug_loc     00000000 
00004031 l       .debug_loc     00000000 
0000404d l       .debug_loc     00000000 
00004068 l       .debug_loc     00000000 
000041dd l       .debug_loc     00000000 
0000432d l       .debug_loc     00000000 
00004441 l       .debug_loc     00000000 
00004467 l       .debug_loc     00000000 
00004482 l       .debug_loc     00000000 
0000449d l       .debug_loc     00000000 
000044b8 l       .debug_loc     00000000 
000044d3 l       .debug_loc     00000000 
000044ee l       .debug_loc     00000000 
0000450a l       .debug_loc     00000000 
00004525 l       .debug_loc     00000000 
00004540 l       .debug_loc     00000000 
0000455b l       .debug_loc     00000000 
00004576 l       .debug_loc     00000000 
000045a8 l       .debug_loc     00000000 
000045db l       .debug_loc     00000000 
000045f6 l       .debug_loc     00000000 
00004649 l       .debug_loc     00000000 
0000467c l       .debug_loc     00000000 
00004697 l       .debug_loc     00000000 
000046b2 l       .debug_loc     00000000 
000046cd l       .debug_loc     00000000 
000046e8 l       .debug_loc     00000000 
00004703 l       .debug_loc     00000000 
0000471e l       .debug_loc     00000000 
00004739 l       .debug_loc     00000000 
00004754 l       .debug_loc     00000000 
0000476f l       .debug_loc     00000000 
0000478a l       .debug_loc     00000000 
000047a5 l       .debug_loc     00000000 
000047c1 l       .debug_loc     00000000 
000047e0 l       .debug_loc     00000000 
000047fb l       .debug_loc     00000000 
0000482c l       .debug_loc     00000000 
00004852 l       .debug_loc     00000000 
00004883 l       .debug_loc     00000000 
000048b4 l       .debug_loc     00000000 
000048cf l       .debug_loc     00000000 
000048ea l       .debug_loc     00000000 
00004905 l       .debug_loc     00000000 
00004936 l       .debug_loc     00000000 
00004951 l       .debug_loc     00000000 
0000496c l       .debug_loc     00000000 
00004988 l       .debug_loc     00000000 
000049ae l       .debug_loc     00000000 
000049df l       .debug_loc     00000000 
000049fa l       .debug_loc     00000000 
00004a15 l       .debug_loc     00000000 
00004a3b l       .debug_loc     00000000 
00004a61 l       .debug_loc     00000000 
00004a7c l       .debug_loc     00000000 
00004a97 l       .debug_loc     00000000 
00004ab2 l       .debug_loc     00000000 
00004acd l       .debug_loc     00000000 
00004aec l       .debug_loc     00000000 
00004b07 l       .debug_loc     00000000 
00004b22 l       .debug_loc     00000000 
00004b3e l       .debug_loc     00000000 
00004b59 l       .debug_loc     00000000 
00004b74 l       .debug_loc     00000000 
00004b93 l       .debug_loc     00000000 
00004bb9 l       .debug_loc     00000000 
00004bea l       .debug_loc     00000000 
00004c42 l       .debug_loc     00000000 
00004c8c l       .debug_loc     00000000 
00004cde l       .debug_loc     00000000 
00004d1b l       .debug_loc     00000000 
00004d57 l       .debug_loc     00000000 
00004dc1 l       .debug_loc     00000000 
00004e0a l       .debug_loc     00000000 
00004e74 l       .debug_loc     00000000 
00004e9a l       .debug_loc     00000000 
00004eb5 l       .debug_loc     00000000 
00004ed0 l       .debug_loc     00000000 
00004ef7 l       .debug_loc     00000000 
00004f3f l       .debug_loc     00000000 
00004f65 l       .debug_loc     00000000 
00004f8b l       .debug_loc     00000000 
00004fb1 l       .debug_loc     00000000 
00004fcc l       .debug_loc     00000000 
00004ffc l       .debug_loc     00000000 
00005022 l       .debug_loc     00000000 
00005054 l       .debug_loc     00000000 
00005092 l       .debug_loc     00000000 
000050c1 l       .debug_loc     00000000 
000050dc l       .debug_loc     00000000 
0000510f l       .debug_loc     00000000 
0000512a l       .debug_loc     00000000 
00005166 l       .debug_loc     00000000 
0000518c l       .debug_loc     00000000 
000051a7 l       .debug_loc     00000000 
000051c2 l       .debug_loc     00000000 
000051dd l       .debug_loc     00000000 
00005233 l       .debug_loc     00000000 
00005262 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005812 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000828 l       .debug_ranges  00000000 
00005830 l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
0000584f l       .debug_str     00000000 
00005867 l       .debug_str     00000000 
0000585b l       .debug_str     00000000 
00004dd9 l       .debug_str     00000000 
00005b4c l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00005875 l       .debug_str     00000000 
0000587f l       .debug_str     00000000 
00005ba4 l       .debug_str     00000000 
0000588d l       .debug_str     00000000 
00006483 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
000063fc l       .debug_str     00000000 
00005a61 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00005c2b l       .debug_str     00000000 
00003b1e l       .debug_str     00000000 
00005a8b l       .debug_str     00000000 
00005c3b l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00005897 l       .debug_str     00000000 
000058a3 l       .debug_str     00000000 
000058b0 l       .debug_str     00000000 
000058ff l       .debug_str     00000000 
000058ee l       .debug_str     00000000 
000058c7 l       .debug_str     00000000 
000058d6 l       .debug_str     00000000 
000058e5 l       .debug_str     00000000 
00005912 l       .debug_str     00000000 
00002da4 l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00002d52 l       .debug_str     00000000 
00002d5d l       .debug_str     00000000 
00002d68 l       .debug_str     00000000 
00002d78 l       .debug_str     00000000 
00002d87 l       .debug_str     00000000 
00002d96 l       .debug_str     00000000 
0000591d l       .debug_str     00000000 
00005926 l       .debug_str     00000000 
00005931 l       .debug_str     00000000 
00005939 l       .debug_str     00000000 
00005945 l       .debug_str     00000000 
00005951 l       .debug_str     00000000 
0000595e l       .debug_str     00000000 
0000596e l       .debug_str     00000000 
0000597f l       .debug_str     00000000 
0000598c l       .debug_str     00000000 
00005995 l       .debug_str     00000000 
0000599f l       .debug_str     00000000 
000059a9 l       .debug_str     00000000 
000059b4 l       .debug_str     00000000 
000059be l       .debug_str     00000000 
000059c9 l       .debug_str     00000000 
000059d7 l       .debug_str     00000000 
00003209 l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
00002bbb l       .debug_str     00000000 
00002bb2 l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
000059eb l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000059e0 l       .debug_str     00000000 
000029a6 l       .debug_str     00000000 
00005b0b l       .debug_str     00000000 
000059ff l       .debug_str     00000000 
00002fcb l       .debug_str     00000000 
00002bb6 l       .debug_str     00000000 
00005b19 l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
00005a0f l       .debug_str     00000000 
000057de l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
00002b6b l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000252 l       .debug_str     00000000 
000057d2 l       .debug_str     00000000 
000006f0 l       .debug_ranges  00000000 
00005b27 l       .debug_str     00000000 
00005bb1 l       .debug_str     00000000 
00005bec l       .debug_str     00000000 
000007d0 l       .debug_ranges  00000000 
00005aa5 l       .debug_str     00000000 
00000708 l       .debug_ranges  00000000 
00000730 l       .debug_ranges  00000000 
00000750 l       .debug_ranges  00000000 
00000768 l       .debug_ranges  00000000 
000007a0 l       .debug_ranges  00000000 
00000788 l       .debug_ranges  00000000 
000007b8 l       .debug_ranges  00000000 
00005a29 l       .debug_str     00000000 
00005a3f l       .debug_str     00000000 
00004ca7 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00005a48 l       .debug_str     00000000 
00005a86 l       .debug_str     00000000 
00005a73 l       .debug_str     00000000 
00005a50 l       .debug_str     00000000 
00002d3c l       .debug_str     00000000 
00005a69 l       .debug_str     00000000 
00005a8f l       .debug_str     00000000 
00005aa1 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
000032e1 l       .debug_str     00000000 
00005db1 l       .debug_str     00000000 
00005ab0 l       .debug_str     00000000 
00005aaa l       .debug_str     00000000 
00005ab7 l       .debug_str     00000000 
00005abf l       .debug_str     00000000 
00003c89 l       .debug_str     00000000 
00005ac3 l       .debug_str     00000000 
00003c94 l       .debug_str     00000000 
00005dca l       .debug_str     00000000 
00005ac7 l       .debug_str     00000000 
00005b9b l       .debug_str     00000000 
000064de l       .debug_str     00000000 
00005c20 l       .debug_str     00000000 
00005c17 l       .debug_str     00000000 
00005c32 l       .debug_str     00000000 
00004f6f l       .debug_str     00000000 
00005b35 l       .debug_str     00000000 
00005b43 l       .debug_str     00000000 
00005bbb l       .debug_str     00000000 
00004dde l       .debug_str     00000000 
00005b51 l       .debug_str     00000000 
00005ad6 l       .debug_str     00000000 
000058fb l       .debug_str     00000000 
00005b5e l       .debug_str     00000000 
00005b88 l       .debug_str     00000000 
00005bd8 l       .debug_str     00000000 
000058e0 l       .debug_str     00000000 
00000810 l       .debug_ranges  00000000 
00005bcb l       .debug_str     00000000 
00005be7 l       .debug_str     00000000 
00005bfa l       .debug_str     00000000 
000058d1 l       .debug_str     00000000 
000007f0 l       .debug_ranges  00000000 
00005bc4 l       .debug_str     00000000 
00005c09 l       .debug_str     00000000 
00005c12 l       .debug_str     00000000 
00005ae8 l       .debug_str     00000000 
00005afc l       .debug_str     00000000 
00005b6b l       .debug_str     00000000 
00005b7a l       .debug_str     00000000 
00005b04 l       .debug_str     00000000 
00000ccc l       .debug_frame   00000000 
f0001da8 l       .text  00000000 
f0001dbe l       .text  00000000 
f0001dfe l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e4a l       .text  00000000 
f00022d8 l       .text  00000000 
f00023bc l       .text  00000000 
f000243a l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f000243a l       .text  00000000 
f000243a l       .text  00000000 
f000243a l       .text  00000000 
f000243a l       .text  00000000 
f000243e l       .text  00000000 
f0002446 l       .text  00000000 
f0002446 l       .text  00000000 
f000244a l       .text  00000000 
f000244a l       .text  00000000 
f0002456 l       .text  00000000 
f0002458 l       .text  00000000 
f0002458 l       .text  00000000 
f000245c l       .text  00000000 
f0002468 l       .text  00000000 
f000246a l       .text  00000000 
f000246e l       .text  00000000 
f0002470 l       .text  00000000 
f0002470 l       .text  00000000 
f0002474 l       .text  00000000 
f0002474 l       .text  00000000 
f0002478 l       .text  00000000 
f0002478 l       .text  00000000 
f000247a l       .text  00000000 
f000247a l       .text  00000000 
f000247e l       .text  00000000 
f000247e l       .text  00000000 
f0002480 l       .text  00000000 
f0002484 l       .text  00000000 
f0002484 l       .text  00000000 
f0002488 l       .text  00000000 
f000248c l       .text  00000000 
f0002492 l       .text  00000000 
f0002492 l       .text  00000000 
f0002496 l       .text  00000000 
f0002498 l       .text  00000000 
f0002498 l       .text  00000000 
f000249e l       .text  00000000 
f000249e l       .text  00000000 
f00024a4 l       .text  00000000 
f00024a4 l       .text  00000000 
f00024a6 l       .text  00000000 
f00024a6 l       .text  00000000 
f00024ac l       .text  00000000 
f00024ac l       .text  00000000 
0000527d l       .debug_loc     00000000 
00005298 l       .debug_loc     00000000 
000052c9 l       .debug_loc     00000000 
000052ef l       .debug_loc     00000000 
00005315 l       .debug_loc     00000000 
00005330 l       .debug_loc     00000000 
00005352 l       .debug_loc     00000000 
00005379 l       .debug_loc     00000000 
000053a0 l       .debug_loc     00000000 
000053c4 l       .debug_loc     00000000 
000053f5 l       .debug_loc     00000000 
00005410 l       .debug_loc     00000000 
00005441 l       .debug_loc     00000000 
0000549b l       .debug_loc     00000000 
000054d7 l       .debug_loc     00000000 
000054fb l       .debug_loc     00000000 
00005520 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005c41 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000008d8 l       .debug_ranges  00000000 
00005c5d l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00005c6d l       .debug_str     00000000 
00003204 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00005d9b l       .debug_str     00000000 
00005c7a l       .debug_str     00000000 
00005c7e l       .debug_str     00000000 
00005c89 l       .debug_str     00000000 
00005c92 l       .debug_str     00000000 
00005ca3 l       .debug_str     00000000 
00005cb5 l       .debug_str     00000000 
00005cbf l       .debug_str     00000000 
00005cce l       .debug_str     00000000 
00005ce0 l       .debug_str     00000000 
00005cf3 l       .debug_str     00000000 
00005d07 l       .debug_str     00000000 
00005d10 l       .debug_str     00000000 
00005d1c l       .debug_str     00000000 
00005d2b l       .debug_str     00000000 
00005d35 l       .debug_str     00000000 
00005d42 l       .debug_str     00000000 
00005d4c l       .debug_str     00000000 
00005d5d l       .debug_str     00000000 
000029a6 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
000059d7 l       .debug_str     00000000 
00005dac l       .debug_str     00000000 
00005dba l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
0000307f l       .debug_str     00000000 
00003dd8 l       .debug_str     00000000 
00003def l       .debug_str     00000000 
00003df2 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00003e09 l       .debug_str     00000000 
00003df8 l       .debug_str     00000000 
000032eb l       .debug_str     00000000 
00003dbf l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00005da7 l       .debug_str     00000000 
00005df2 l       .debug_str     00000000 
00005ac3 l       .debug_str     00000000 
000008c0 l       .debug_ranges  00000000 
00005dc3 l       .debug_str     00000000 
00001788 l       .debug_str     00000000 
00005db1 l       .debug_str     00000000 
00005ab0 l       .debug_str     00000000 
00005dce l       .debug_str     00000000 
00005ac7 l       .debug_str     00000000 
00005dfc l       .debug_str     00000000 
00005dca l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00000ec0 l       .debug_frame   00000000 
f00024ac l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
f00024ac l       .text  00000000 
f00024ac l       .text  00000000 
f00024ac l       .text  00000000 
f00024ac l       .text  00000000 
f00024ae l       .text  00000000 
f00024b0 l       .text  00000000 
f00024b4 l       .text  00000000 
f00024b6 l       .text  00000000 
f00024b8 l       .text  00000000 
f00024ba l       .text  00000000 
f00024ba l       .text  00000000 
00005542 l       .debug_loc     00000000 
0000555d l       .debug_loc     00000000 
00005578 l       .debug_loc     00000000 
00005593 l       .debug_loc     00000000 
000055af l       .debug_loc     00000000 
000055cb l       .debug_loc     00000000 
000055e6 l       .debug_loc     00000000 
00005601 l       .debug_loc     00000000 
0000561c l       .debug_loc     00000000 
00005637 l       .debug_loc     00000000 
00005652 l       .debug_loc     00000000 
0000566d l       .debug_loc     00000000 
00005688 l       .debug_loc     00000000 
000056a3 l       .debug_loc     00000000 
000056c9 l       .debug_loc     00000000 
000056e4 l       .debug_loc     00000000 
000056ff l       .debug_loc     00000000 
0000571d l       .debug_loc     00000000 
00005744 l       .debug_loc     00000000 
0000575f l       .debug_loc     00000000 
0000577a l       .debug_loc     00000000 
00005795 l       .debug_loc     00000000 
000057b3 l       .debug_loc     00000000 
000057da l       .debug_loc     00000000 
000057f5 l       .debug_loc     00000000 
00005810 l       .debug_loc     00000000 
0000582b l       .debug_loc     00000000 
00005846 l       .debug_loc     00000000 
0000586c l       .debug_loc     00000000 
00005887 l       .debug_loc     00000000 
000058a2 l       .debug_loc     00000000 
000058c8 l       .debug_loc     00000000 
000058e8 l       .debug_loc     00000000 
0000590e l       .debug_loc     00000000 
0000592c l       .debug_loc     00000000 
00005947 l       .debug_loc     00000000 
0000596d l       .debug_loc     00000000 
00005993 l       .debug_loc     00000000 
000059ae l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005e03 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000008f0 l       .debug_ranges  00000000 
00005e30 l       .debug_str     00000000 
00005e6a l       .debug_str     00000000 
00005e5d l       .debug_str     00000000 
00005e3a l       .debug_str     00000000 
00005e4b l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00002da4 l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00002d52 l       .debug_str     00000000 
00002d5d l       .debug_str     00000000 
00002d68 l       .debug_str     00000000 
00002d78 l       .debug_str     00000000 
00002d87 l       .debug_str     00000000 
00002d96 l       .debug_str     00000000 
00005e91 l       .debug_str     00000000 
00005e79 l       .debug_str     00000000 
00005f4f l       .debug_str     00000000 
00005ea0 l       .debug_str     00000000 
00005eb7 l       .debug_str     00000000 
00005ece l       .debug_str     00000000 
00005ee1 l       .debug_str     00000000 
00005ef7 l       .debug_str     00000000 
00005f0d l       .debug_str     00000000 
00005f23 l       .debug_str     00000000 
00005f38 l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
00002dc9 l       .debug_str     00000000 
00002ddc l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002f58 l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002bb6 l       .debug_str     00000000 
00003d15 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00003f94 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00005f5c l       .debug_str     00000000 
00005e9a l       .debug_str     00000000 
00004f69 l       .debug_str     00000000 
00004f73 l       .debug_str     00000000 
00005f71 l       .debug_str     00000000 
00003930 l       .debug_str     00000000 
00002d3c l       .debug_str     00000000 
00003dc5 l       .debug_str     00000000 
00005f87 l       .debug_str     00000000 
00006083 l       .debug_str     00000000 
00003e4b l       .debug_str     00000000 
00003def l       .debug_str     00000000 
00003d4c l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003d56 l       .debug_str     00000000 
00005f9e l       .debug_str     00000000 
00003ef7 l       .debug_str     00000000 
000060aa l       .debug_str     00000000 
00003dbf l       .debug_str     00000000 
00005fb6 l       .debug_str     00000000 
00003dd8 l       .debug_str     00000000 
00003df2 l       .debug_str     00000000 
00003e09 l       .debug_str     00000000 
00003df8 l       .debug_str     00000000 
000032eb l       .debug_str     00000000 
00003e1c l       .debug_str     00000000 
00005fd3 l       .debug_str     00000000 
00005fec l       .debug_str     00000000 
00003a9d l       .debug_str     00000000 
000060b9 l       .debug_str     00000000 
00005fff l       .debug_str     00000000 
00003ba5 l       .debug_str     00000000 
000060c7 l       .debug_str     00000000 
00003f7a l       .debug_str     00000000 
00006018 l       .debug_str     00000000 
000060d7 l       .debug_str     00000000 
00006031 l       .debug_str     00000000 
0000604a l       .debug_str     00000000 
000030c8 l       .debug_str     00000000 
00002bbb l       .debug_str     00000000 
00002bb2 l       .debug_str     00000000 
00006063 l       .debug_str     00000000 
00006074 l       .debug_str     00000000 
0000608c l       .debug_str     00000000 
00002f9c l       .debug_str     00000000 
000060e2 l       .debug_str     00000000 
00000ef4 l       .debug_frame   00000000 
f00024ba l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
f00024ba l       .text  00000000 
f00024ba l       .text  00000000 
f00024ba l       .text  00000000 
f00024bc l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c8 l       .text  00000000 
f00024ca l       .text  00000000 
f00024cc l       .text  00000000 
f00024cc l       .text  00000000 
f00024ce l       .text  00000000 
f00024d0 l       .text  00000000 
f00024d4 l       .text  00000000 
f00024d6 l       .text  00000000 
f00024d8 l       .text  00000000 
f00024e0 l       .text  00000000 
f00024ec l       .text  00000000 
f00024fc l       .text  00000000 
f0002504 l       .text  00000000 
f000250a l       .text  00000000 
f000250a l       .text  00000000 
f000250e l       .text  00000000 
f000250e l       .text  00000000 
f0002510 l       .text  00000000 
f0002512 l       .text  00000000 
f0002514 l       .text  00000000 
f0002514 l       .text  00000000 
f0002516 l       .text  00000000 
f0002516 l       .text  00000000 
f000251a l       .text  00000000 
f000251a l       .text  00000000 
f000251c l       .text  00000000 
f000251e l       .text  00000000 
f000251e l       .text  00000000 
f0002520 l       .text  00000000 
f0002520 l       .text  00000000 
f0002522 l       .text  00000000 
f0002522 l       .text  00000000 
f0002526 l       .text  00000000 
f0002526 l       .text  00000000 
f0002528 l       .text  00000000 
f0002528 l       .text  00000000 
f000252c l       .text  00000000 
f000252c l       .text  00000000 
f000252e l       .text  00000000 
f000252e l       .text  00000000 
f0002532 l       .text  00000000 
f0002532 l       .text  00000000 
f0002534 l       .text  00000000 
f0002536 l       .text  00000000 
f0002536 l       .text  00000000 
f0002538 l       .text  00000000 
f0002538 l       .text  00000000 
f000253c l       .text  00000000 
f000253c l       .text  00000000 
f0002540 l       .text  00000000 
f0002540 l       .text  00000000 
f0002542 l       .text  00000000 
f0002546 l       .text  00000000 
f0002546 l       .text  00000000 
f000254a l       .text  00000000 
f000254a l       .text  00000000 
f000254c l       .text  00000000 
f0002550 l       .text  00000000 
f0002552 l       .text  00000000 
f0002552 l       .text  00000000 
f0002554 l       .text  00000000 
f0002558 l       .text  00000000 
f000255a l       .text  00000000 
f000255a l       .text  00000000 
f000255c l       .text  00000000 
f000255c l       .text  00000000 
f000255e l       .text  00000000 
f000255e l       .text  00000000 
f0002560 l       .text  00000000 
f0002560 l       .text  00000000 
f0002564 l       .text  00000000 
f0002564 l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f0002576 l       .text  00000000 
f0002578 l       .text  00000000 
f0002578 l       .text  00000000 
f000257a l       .text  00000000 
f000257a l       .text  00000000 
f000257c l       .text  00000000 
f000257c l       .text  00000000 
f000257e l       .text  00000000 
f000257e l       .text  00000000 
f0002580 l       .text  00000000 
f0002580 l       .text  00000000 
f0002582 l       .text  00000000 
f0002582 l       .text  00000000 
f0002584 l       .text  00000000 
f0002584 l       .text  00000000 
f0002586 l       .text  00000000 
f0002588 l       .text  00000000 
f0002588 l       .text  00000000 
f000258a l       .text  00000000 
f000258a l       .text  00000000 
f000258c l       .text  00000000 
f000258c l       .text  00000000 
f000258e l       .text  00000000 
f0002590 l       .text  00000000 
f0002592 l       .text  00000000 
f0002592 l       .text  00000000 
f0002594 l       .text  00000000 
f0002594 l       .text  00000000 
f0002596 l       .text  00000000 
f0002596 l       .text  00000000 
000059c9 l       .debug_loc     00000000 
000059ef l       .debug_loc     00000000 
00005a17 l       .debug_loc     00000000 
00005a46 l       .debug_loc     00000000 
00005a61 l       .debug_loc     00000000 
00005a7d l       .debug_loc     00000000 
00005ab3 l       .debug_loc     00000000 
00005ace l       .debug_loc     00000000 
00005af5 l       .debug_loc     00000000 
00005b1a l       .debug_loc     00000000 
00005b40 l       .debug_loc     00000000 
00005b66 l       .debug_loc     00000000 
00005b8c l       .debug_loc     00000000 
00005ba7 l       .debug_loc     00000000 
00005bc9 l       .debug_loc     00000000 
00005bef l       .debug_loc     00000000 
00005c15 l       .debug_loc     00000000 
00005c3b l       .debug_loc     00000000 
00005c61 l       .debug_loc     00000000 
00005c7c l       .debug_loc     00000000 
00005c9e l       .debug_loc     00000000 
00005cc4 l       .debug_loc     00000000 
00005cdf l       .debug_loc     00000000 
00005d06 l       .debug_loc     00000000 
00005d21 l       .debug_loc     00000000 
00005d3c l       .debug_loc     00000000 
00005d57 l       .debug_loc     00000000 
00005d7e l       .debug_loc     00000000 
00005d99 l       .debug_loc     00000000 
00005db4 l       .debug_loc     00000000 
00005dda l       .debug_loc     00000000 
00005df5 l       .debug_loc     00000000 
00005e10 l       .debug_loc     00000000 
00005e2b l       .debug_loc     00000000 
00005e51 l       .debug_loc     00000000 
00005e6c l       .debug_loc     00000000 
00005e87 l       .debug_loc     00000000 
00005ea2 l       .debug_loc     00000000 
00005ebd l       .debug_loc     00000000 
00005ed8 l       .debug_loc     00000000 
00005ef3 l       .debug_loc     00000000 
00005f0e l       .debug_loc     00000000 
00005f31 l       .debug_loc     00000000 
00005f4c l       .debug_loc     00000000 
00005f67 l       .debug_loc     00000000 
00005f82 l       .debug_loc     00000000 
00005f9d l       .debug_loc     00000000 
00005fc0 l       .debug_loc     00000000 
00005fdb l       .debug_loc     00000000 
00005ff6 l       .debug_loc     00000000 
0000601c l       .debug_loc     00000000 
00006042 l       .debug_loc     00000000 
00006068 l       .debug_loc     00000000 
0000608e l       .debug_loc     00000000 
000060b4 l       .debug_loc     00000000 
000060da l       .debug_loc     00000000 
000060f5 l       .debug_loc     00000000 
0000611b l       .debug_loc     00000000 
0000614a l       .debug_loc     00000000 
00006170 l       .debug_loc     00000000 
0000618b l       .debug_loc     00000000 
000061a6 l       .debug_loc     00000000 
000061c6 l       .debug_loc     00000000 
000061e1 l       .debug_loc     00000000 
000061fc l       .debug_loc     00000000 
0000622d l       .debug_loc     00000000 
0000625e l       .debug_loc     00000000 
00006284 l       .debug_loc     00000000 
000062aa l       .debug_loc     00000000 
000062c6 l       .debug_loc     00000000 
000062e1 l       .debug_loc     00000000 
000062fc l       .debug_loc     00000000 
00006317 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006101 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000988 l       .debug_ranges  00000000 
0000611e l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
00002da4 l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00002d52 l       .debug_str     00000000 
00002d5d l       .debug_str     00000000 
00002d68 l       .debug_str     00000000 
00002d78 l       .debug_str     00000000 
00002d87 l       .debug_str     00000000 
00002d96 l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
00002dc9 l       .debug_str     00000000 
00002ddc l       .debug_str     00000000 
00002e1e l       .debug_str     00000000 
00002df9 l       .debug_str     00000000 
00002e0b l       .debug_str     00000000 
000061a9 l       .debug_str     00000000 
00006134 l       .debug_str     00000000 
0000614b l       .debug_str     00000000 
00006162 l       .debug_str     00000000 
00006179 l       .debug_str     00000000 
00006191 l       .debug_str     00000000 
000061f9 l       .debug_str     00000000 
000061bc l       .debug_str     00000000 
000061d0 l       .debug_str     00000000 
000061e4 l       .debug_str     00000000 
00006239 l       .debug_str     00000000 
0000620d l       .debug_str     00000000 
00006224 l       .debug_str     00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
0000624b l       .debug_str     00000000 
00002bb6 l       .debug_str     00000000 
000060d3 l       .debug_str     00000000 
00002bbb l       .debug_str     00000000 
00002bb2 l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002b98 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00003d15 l       .debug_str     00000000 
00003f94 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
00003dd8 l       .debug_str     00000000 
00003def l       .debug_str     00000000 
00003df2 l       .debug_str     00000000 
00003e09 l       .debug_str     00000000 
00003df8 l       .debug_str     00000000 
000032eb l       .debug_str     00000000 
00003dbf l       .debug_str     00000000 
00002f66 l       .debug_str     00000000 
00002fc4 l       .debug_str     00000000 
000063e9 l       .debug_str     00000000 
000063ed l       .debug_str     00000000 
000063f8 l       .debug_str     00000000 
0000570f l       .debug_str     00000000 
00003dc5 l       .debug_str     00000000 
000062be l       .debug_str     00000000 
000061b2 l       .debug_str     00000000 
000062d8 l       .debug_str     00000000 
000062f6 l       .debug_str     00000000 
00004dd9 l       .debug_str     00000000 
00006256 l       .debug_str     00000000 
00005bec l       .debug_str     00000000 
00003209 l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
00006266 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003e4b l       .debug_str     00000000 
00003d4c l       .debug_str     00000000 
00003d56 l       .debug_str     00000000 
00006273 l       .debug_str     00000000 
00005c12 l       .debug_str     00000000 
000062f2 l       .debug_str     00000000 
00005bc0 l       .debug_str     00000000 
0000630a l       .debug_str     00000000 
00006286 l       .debug_str     00000000 
00006291 l       .debug_str     00000000 
0000629f l       .debug_str     00000000 
00006306 l       .debug_str     00000000 
000062b1 l       .debug_str     00000000 
00005a0f l       .debug_str     00000000 
0000631d l       .debug_str     00000000 
00005dce l       .debug_str     00000000 
0000633a l       .debug_str     00000000 
00006417 l       .debug_str     00000000 
00006356 l       .debug_str     00000000 
00006421 l       .debug_str     00000000 
00003e6b l       .debug_str     00000000 
00003e1c l       .debug_str     00000000 
00006372 l       .debug_str     00000000 
00006242 l       .debug_str     00000000 
00002f95 l       .debug_str     00000000 
00000958 l       .debug_ranges  00000000 
00000970 l       .debug_ranges  00000000 
00006388 l       .debug_str     00000000 
00006456 l       .debug_str     00000000 
000063a3 l       .debug_str     00000000 
000063bf l       .debug_str     00000000 
00005ab0 l       .debug_str     00000000 
000030c8 l       .debug_str     00000000 
000063d7 l       .debug_str     00000000 
00002fbb l       .debug_str     00000000 
00002f79 l       .debug_str     00000000 
00002f82 l       .debug_str     00000000 
00002f8e l       .debug_str     00000000 
00002e27 l       .debug_str     00000000 
00002f9c l       .debug_str     00000000 
00002fa9 l       .debug_str     00000000 
00006402 l       .debug_str     00000000 
0000642c l       .debug_str     00000000 
00006442 l       .debug_str     00000000 
00000fc8 l       .debug_frame   00000000 
f0002574 l       .text  00000000 
f0002596 l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
f0002596 l       .text  00000000 
f0002596 l       .text  00000000 
f0002596 l       .text  00000000 
f0002598 l       .text  00000000 
f000259e l       .text  00000000 
f00025aa l       .text  00000000 
f00025b2 l       .text  00000000 
f00025b2 l       .text  00000000 
f00025ba l       .text  00000000 
f00025dc l       .text  00000000 
f00025e0 l       .text  00000000 
f00025e0 l       .text  00000000 
f00025e4 l       .text  00000000 
f00025e8 l       .text  00000000 
f00025e8 l       .text  00000000 
f00025ec l       .text  00000000 
f00025fe l       .text  00000000 
f0002602 l       .text  00000000 
f0002612 l       .text  00000000 
f0002614 l       .text  00000000 
f0002614 l       .text  00000000 
f0002624 l       .text  00000000 
f0002626 l       .text  00000000 
f0002626 l       .text  00000000 
f000262a l       .text  00000000 
f000262a l       .text  00000000 
f000262e l       .text  00000000 
f000262e l       .text  00000000 
f0002630 l       .text  00000000 
f0002638 l       .text  00000000 
f000263a l       .text  00000000 
f000263c l       .text  00000000 
f0002646 l       .text  00000000 
f0002646 l       .text  00000000 
0000633d l       .debug_loc     00000000 
00006355 l       .debug_loc     00000000 
0000637c l       .debug_loc     00000000 
000063ad l       .debug_loc     00000000 
00006400 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006465 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
0000570f l       .debug_str     00000000 
00002292 l       .debug_str     00000000 
00002522 l       .debug_str     00000000 
0000647f l       .debug_str     00000000 
00003b45 l       .debug_str     00000000 
00006487 l       .debug_str     00000000 
0000648b l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
000010cc l       .debug_frame   00000000 
f0002646 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
f0002646 l       .text  00000000 
f0002646 l       .text  00000000 
f0002646 l       .text  00000000 
f0002646 l       .text  00000000 
f000264e l       .text  00000000 
f0002652 l       .text  00000000 
f0002652 l       .text  00000000 
f0002656 l       .text  00000000 
f0002656 l       .text  00000000 
f000265a l       .text  00000000 
f000265a l       .text  00000000 
f0002666 l       .text  00000000 
f0002668 l       .text  00000000 
f0002668 l       .text  00000000 
f000266e l       .text  00000000 
f000266e l       .text  00000000 
f0002672 l       .text  00000000 
f0002674 l       .text  00000000 
f0002678 l       .text  00000000 
f0002678 l       .text  00000000 
f000267a l       .text  00000000 
f000267a l       .text  00000000 
f000267c l       .text  00000000 
f000267c l       .text  00000000 
f0002684 l       .text  00000000 
f0002688 l       .text  00000000 
f000268a l       .text  00000000 
f000268e l       .text  00000000 
f0002692 l       .text  00000000 
f0002692 l       .text  00000000 
f0002696 l       .text  00000000 
f0002696 l       .text  00000000 
f000269a l       .text  00000000 
f000269c l       .text  00000000 
f000269c l       .text  00000000 
f00026a0 l       .text  00000000 
f00026a0 l       .text  00000000 
f00026a2 l       .text  00000000 
f00026a2 l       .text  00000000 
f00026a4 l       .text  00000000 
f00026a4 l       .text  00000000 
f00026a8 l       .text  00000000 
f00026a8 l       .text  00000000 
f00026ac l       .text  00000000 
f00026ae l       .text  00000000 
f00026b4 l       .text  00000000 
f00026b4 l       .text  00000000 
f00026b8 l       .text  00000000 
f00026bc l       .text  00000000 
f00026c4 l       .text  00000000 
f00026c4 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026c8 l       .text  00000000 
f00026c8 l       .text  00000000 
f00026ce l       .text  00000000 
f00026ce l       .text  00000000 
f00026ce l       .text  00000000 
f00026ce l       .text  00000000 
f00026ce l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d6 l       .text  00000000 
f00026d6 l       .text  00000000 
f00026de l       .text  00000000 
f00026de l       .text  00000000 
f00026e2 l       .text  00000000 
f00026e6 l       .text  00000000 
f00026e6 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026ec l       .text  00000000 
f00026ec l       .text  00000000 
f00026f0 l       .text  00000000 
f00026f0 l       .text  00000000 
f00026f2 l       .text  00000000 
f00026f4 l       .text  00000000 
f00026f6 l       .text  00000000 
f00026f6 l       .text  00000000 
f00026fa l       .text  00000000 
f00026fe l       .text  00000000 
f000270e l       .text  00000000 
f000270e l       .text  00000000 
f0002712 l       .text  00000000 
f0002712 l       .text  00000000 
f0002714 l       .text  00000000 
f0002714 l       .text  00000000 
f0002716 l       .text  00000000 
f0002716 l       .text  00000000 
f000271a l       .text  00000000 
f000271a l       .text  00000000 
f0002720 l       .text  00000000 
f0002724 l       .text  00000000 
f0002724 l       .text  00000000 
f0002728 l       .text  00000000 
f000272c l       .text  00000000 
f000272e l       .text  00000000 
f0002730 l       .text  00000000 
f0002730 l       .text  00000000 
f0002730 l       .text  00000000 
f0002730 l       .text  00000000 
f0002730 l       .text  00000000 
f0002734 l       .text  00000000 
f0002734 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f0002740 l       .text  00000000 
f0002744 l       .text  00000000 
f0002748 l       .text  00000000 
f000274a l       .text  00000000 
f000274c l       .text  00000000 
f000274c l       .text  00000000 
f0002750 l       .text  00000000 
f0002754 l       .text  00000000 
f0002754 l       .text  00000000 
f0002756 l       .text  00000000 
f0002758 l       .text  00000000 
f000275a l       .text  00000000 
f0002760 l       .text  00000000 
f0002760 l       .text  00000000 
f0002762 l       .text  00000000 
f0002766 l       .text  00000000 
f0002772 l       .text  00000000 
f0002780 l       .text  00000000 
f0002780 l       .text  00000000 
f0002784 l       .text  00000000 
f0002786 l       .text  00000000 
f0002786 l       .text  00000000 
f000278a l       .text  00000000 
f000278e l       .text  00000000 
f000278e l       .text  00000000 
f0002792 l       .text  00000000 
f0002796 l       .text  00000000 
f000279a l       .text  00000000 
f000279e l       .text  00000000 
f00027a2 l       .text  00000000 
f00027a2 l       .text  00000000 
f00027a6 l       .text  00000000 
f00027aa l       .text  00000000 
f00027ac l       .text  00000000 
f00027ac l       .text  00000000 
f00027ae l       .text  00000000 
f00027b2 l       .text  00000000 
f00027b2 l       .text  00000000 
f00027ba l       .text  00000000 
f00027be l       .text  00000000 
f00027be l       .text  00000000 
f00027c2 l       .text  00000000 
f00027c6 l       .text  00000000 
f00027ca l       .text  00000000 
f00027cc l       .text  00000000 
f00027d0 l       .text  00000000 
f00027d0 l       .text  00000000 
f00027d4 l       .text  00000000 
f00027d4 l       .text  00000000 
f00027d8 l       .text  00000000 
f00027da l       .text  00000000 
f00027da l       .text  00000000 
f00027de l       .text  00000000 
f00027de l       .text  00000000 
f00027de l       .text  00000000 
f00027de l       .text  00000000 
f00027de l       .text  00000000 
f00027e2 l       .text  00000000 
f00027e2 l       .text  00000000 
f00027e6 l       .text  00000000 
f00027e6 l       .text  00000000 
f00027ee l       .text  00000000 
f00027ee l       .text  00000000 
f00027f2 l       .text  00000000 
f00027f4 l       .text  00000000 
f00027f8 l       .text  00000000 
f00027f8 l       .text  00000000 
f00027fa l       .text  00000000 
f00027fa l       .text  00000000 
f00027fe l       .text  00000000 
f00027fe l       .text  00000000 
f0002804 l       .text  00000000 
f0002804 l       .text  00000000 
f0002808 l       .text  00000000 
f0002808 l       .text  00000000 
f0002810 l       .text  00000000 
f0002814 l       .text  00000000 
f0002814 l       .text  00000000 
f0002816 l       .text  00000000 
f000281a l       .text  00000000 
f000281a l       .text  00000000 
f000281c l       .text  00000000 
f000281e l       .text  00000000 
f000281e l       .text  00000000 
f0002826 l       .text  00000000 
f0002826 l       .text  00000000 
f000282a l       .text  00000000 
f000282a l       .text  00000000 
f0002834 l       .text  00000000 
f0002838 l       .text  00000000 
f0002838 l       .text  00000000 
f000283c l       .text  00000000 
f000283c l       .text  00000000 
f0002840 l       .text  00000000 
f0002844 l       .text  00000000 
f0002844 l       .text  00000000 
f0002848 l       .text  00000000 
f000284c l       .text  00000000 
f000284c l       .text  00000000 
f000284e l       .text  00000000 
f0002852 l       .text  00000000 
f0002852 l       .text  00000000 
f0002856 l       .text  00000000 
f000285a l       .text  00000000 
f000285e l       .text  00000000 
f0002862 l       .text  00000000 
f0002866 l       .text  00000000 
f0002868 l       .text  00000000 
f0002868 l       .text  00000000 
f000286c l       .text  00000000 
f000286c l       .text  00000000 
f000286e l       .text  00000000 
f0002870 l       .text  00000000 
f0002870 l       .text  00000000 
f0002878 l       .text  00000000 
f000287c l       .text  00000000 
f000287c l       .text  00000000 
f000287e l       .text  00000000 
f0002882 l       .text  00000000 
f0002882 l       .text  00000000 
f0002884 l       .text  00000000 
f0002886 l       .text  00000000 
f0002886 l       .text  00000000 
f0002888 l       .text  00000000 
f0002888 l       .text  00000000 
f000288c l       .text  00000000 
f000288c l       .text  00000000 
f000288e l       .text  00000000 
f000288e l       .text  00000000 
f0002892 l       .text  00000000 
f0002892 l       .text  00000000 
f0002894 l       .text  00000000 
f0002894 l       .text  00000000 
f0002898 l       .text  00000000 
f0002898 l       .text  00000000 
f000289a l       .text  00000000 
f000289a l       .text  00000000 
f000289c l       .text  00000000 
f000289c l       .text  00000000 
f000289e l       .text  00000000 
f000289e l       .text  00000000 
00006433 l       .debug_loc     00000000 
00006459 l       .debug_loc     00000000 
0000647f l       .debug_loc     00000000 
000064a5 l       .debug_loc     00000000 
000064cb l       .debug_loc     00000000 
000064ea l       .debug_loc     00000000 
00006509 l       .debug_loc     00000000 
0000652f l       .debug_loc     00000000 
0000654a l       .debug_loc     00000000 
00006593 l       .debug_loc     00000000 
000065b9 l       .debug_loc     00000000 
000065db l       .debug_loc     00000000 
000065f6 l       .debug_loc     00000000 
00006611 l       .debug_loc     00000000 
0000662c l       .debug_loc     00000000 
00006647 l       .debug_loc     00000000 
00006662 l       .debug_loc     00000000 
0000667d l       .debug_loc     00000000 
000066cd l       .debug_loc     00000000 
000066e8 l       .debug_loc     00000000 
00006703 l       .debug_loc     00000000 
00006725 l       .debug_loc     00000000 
00006740 l       .debug_loc     00000000 
0000675b l       .debug_loc     00000000 
00006776 l       .debug_loc     00000000 
00006791 l       .debug_loc     00000000 
000067ac l       .debug_loc     00000000 
000067cb l       .debug_loc     00000000 
000067ea l       .debug_loc     00000000 
00006810 l       .debug_loc     00000000 
0000682b l       .debug_loc     00000000 
00006874 l       .debug_loc     00000000 
0000689a l       .debug_loc     00000000 
000068b5 l       .debug_loc     00000000 
000068d0 l       .debug_loc     00000000 
000068eb l       .debug_loc     00000000 
00006906 l       .debug_loc     00000000 
00006921 l       .debug_loc     00000000 
0000693c l       .debug_loc     00000000 
00006957 l       .debug_loc     00000000 
00006976 l       .debug_loc     00000000 
00006995 l       .debug_loc     00000000 
000069b0 l       .debug_loc     00000000 
000069f7 l       .debug_loc     00000000 
00006a12 l       .debug_loc     00000000 
00006a2d l       .debug_loc     00000000 
00006a53 l       .debug_loc     00000000 
00006a6e l       .debug_loc     00000000 
00006a89 l       .debug_loc     00000000 
00006aa4 l       .debug_loc     00000000 
00006abf l       .debug_loc     00000000 
00006ada l       .debug_loc     00000000 
00006b00 l       .debug_loc     00000000 
00006b1b l       .debug_loc     00000000 
00006b41 l       .debug_loc     00000000 
00006b67 l       .debug_loc     00000000 
00006b84 l       .debug_loc     00000000 
00006bdf l       .debug_loc     00000000 
00006bfa l       .debug_loc     00000000 
00006c20 l       .debug_loc     00000000 
00006c46 l       .debug_loc     00000000 
00006c61 l       .debug_loc     00000000 
00006c87 l       .debug_loc     00000000 
00006ce4 l       .debug_loc     00000000 
00006cff l       .debug_loc     00000000 
00006d1a l       .debug_loc     00000000 
00006d77 l       .debug_loc     00000000 
00006d94 l       .debug_loc     00000000 
00006daf l       .debug_loc     00000000 
00006df6 l       .debug_loc     00000000 
00006e11 l       .debug_loc     00000000 
00006e2c l       .debug_loc     00000000 
00006e47 l       .debug_loc     00000000 
00006e62 l       .debug_loc     00000000 
00006e7d l       .debug_loc     00000000 
00006ea3 l       .debug_loc     00000000 
00006ebe l       .debug_loc     00000000 
00006ed9 l       .debug_loc     00000000 
00006ef4 l       .debug_loc     00000000 
00006f0f l       .debug_loc     00000000 
00006f3c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006490 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000a88 l       .debug_ranges  00000000 
000064ac l       .debug_str     00000000 
000064b6 l       .debug_str     00000000 
000064c0 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
00003209 l       .debug_str     00000000 
000032e1 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
000064ca l       .debug_str     00000000 
000065bd l       .debug_str     00000000 
000065c7 l       .debug_str     00000000 
00005a8b l       .debug_str     00000000 
000064e4 l       .debug_str     00000000 
000064ef l       .debug_str     00000000 
000059d9 l       .debug_str     00000000 
000059d7 l       .debug_str     00000000 
000064fb l       .debug_str     00000000 
0000650d l       .debug_str     00000000 
0000651d l       .debug_str     00000000 
000064d2 l       .debug_str     00000000 
00002ab8 l       .debug_str     00000000 
0000652d l       .debug_str     00000000 
000002b1 l       .debug_str     00000000 
00003a9d l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00006535 l       .debug_str     00000000 
00004265 l       .debug_str     00000000 
00004dde l       .debug_str     00000000 
00006583 l       .debug_str     00000000 
00006588 l       .debug_str     00000000 
0000658c l       .debug_str     00000000 
00006592 l       .debug_str     00000000 
00006511 l       .debug_str     00000000 
00000afc l       .debug_str     00000000 
00006521 l       .debug_str     00000000 
00000a18 l       .debug_ranges  00000000 
000058d1 l       .debug_str     00000000 
00000a00 l       .debug_ranges  00000000 
00005b04 l       .debug_str     00000000 
00006597 l       .debug_str     00000000 
0000659e l       .debug_str     00000000 
00000a30 l       .debug_ranges  00000000 
00006551 l       .debug_str     00000000 
000065a6 l       .debug_str     00000000 
000065aa l       .debug_str     00000000 
000065ae l       .debug_str     00000000 
000065b3 l       .debug_str     00000000 
000065b8 l       .debug_str     00000000 
000065c2 l       .debug_str     00000000 
00006558 l       .debug_str     00000000 
00003c94 l       .debug_str     00000000 
000057c3 l       .debug_str     00000000 
000065cd l       .debug_str     00000000 
00000a48 l       .debug_ranges  00000000 
000065d2 l       .debug_str     00000000 
0000653e l       .debug_str     00000000 
00005c12 l       .debug_str     00000000 
000057ca l       .debug_str     00000000 
00000a60 l       .debug_ranges  00000000 
00006560 l       .debug_str     00000000 
00005659 l       .debug_str     00000000 
00006572 l       .debug_str     00000000 
0000657a l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
000010fc l       .debug_frame   00000000 
f00026ce l       .text  00000000 
f0002730 l       .text  00000000 
f00027de l       .text  00000000 
f000289e l       .text  00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
00004f82 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00004fac l       .debug_str     00000000 
0000393f l       .debug_str     00000000 
000038d7 l       .debug_str     00000000 
0000347e l       .debug_str     00000000 
000034a0 l       .debug_str     00000000 
000034c0 l       .debug_str     00000000 
000034e0 l       .debug_str     00000000 
00003500 l       .debug_str     00000000 
00003520 l       .debug_str     00000000 
0000353f l       .debug_str     00000000 
00003563 l       .debug_str     00000000 
00003582 l       .debug_str     00000000 
000035a1 l       .debug_str     00000000 
000035c0 l       .debug_str     00000000 
000035e2 l       .debug_str     00000000 
00003604 l       .debug_str     00000000 
00003626 l       .debug_str     00000000 
0000364d l       .debug_str     00000000 
00003670 l       .debug_str     00000000 
00003693 l       .debug_str     00000000 
000036b4 l       .debug_str     00000000 
000036d8 l       .debug_str     00000000 
00003700 l       .debug_str     00000000 
00003725 l       .debug_str     00000000 
0000374b l       .debug_str     00000000 
00003770 l       .debug_str     00000000 
00003793 l       .debug_str     00000000 
000037b7 l       .debug_str     00000000 
000037d6 l       .debug_str     00000000 
000037f5 l       .debug_str     00000000 
00003814 l       .debug_str     00000000 
00003835 l       .debug_str     00000000 
00003855 l       .debug_str     00000000 
0000387a l       .debug_str     00000000 
00003899 l       .debug_str     00000000 
000038b8 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00004fd7 l       .debug_str     00000000 
000055d1 l       .debug_str     00000000 
000055b3 l       .debug_str     00000000 
00004ff9 l       .debug_str     00000000 
0000501a l       .debug_str     00000000 
0000503b l       .debug_str     00000000 
0000505c l       .debug_str     00000000 
0000507d l       .debug_str     00000000 
0000509d l       .debug_str     00000000 
000050c2 l       .debug_str     00000000 
000050e2 l       .debug_str     00000000 
00005102 l       .debug_str     00000000 
00005122 l       .debug_str     00000000 
00005145 l       .debug_str     00000000 
00005168 l       .debug_str     00000000 
0000518b l       .debug_str     00000000 
000051ad l       .debug_str     00000000 
000051d1 l       .debug_str     00000000 
000051f5 l       .debug_str     00000000 
00005217 l       .debug_str     00000000 
0000523c l       .debug_str     00000000 
00005261 l       .debug_str     00000000 
00005286 l       .debug_str     00000000 
000052af l       .debug_str     00000000 
000052d5 l       .debug_str     00000000 
000052f7 l       .debug_str     00000000 
0000531c l       .debug_str     00000000 
00005343 l       .debug_str     00000000 
00005369 l       .debug_str     00000000 
00005393 l       .debug_str     00000000 
000053b8 l       .debug_str     00000000 
000053d8 l       .debug_str     00000000 
000053fa l       .debug_str     00000000 
00005419 l       .debug_str     00000000 
00005439 l       .debug_str     00000000 
00005459 l       .debug_str     00000000 
00005479 l       .debug_str     00000000 
0000549b l       .debug_str     00000000 
000054bc l       .debug_str     00000000 
000054e2 l       .debug_str     00000000 
00005502 l       .debug_str     00000000 
00005522 l       .debug_str     00000000 
0000554a l       .debug_str     00000000 
0000556d l       .debug_str     00000000 
00005593 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00006f5c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000065da l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000ae8 l       .debug_ranges  00000000 
00006604 l       .debug_str     00000000 
00006610 l       .debug_str     00000000 
00002d35 l       .debug_str     00000000 
00002ced l       .debug_str     00000000 
00002cfa l       .debug_str     00000000 
00002d0e l       .debug_str     00000000 
00002d1f l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000661e l       .debug_str     00000000 
00002a82 l       .debug_str     00000000 
00002a6b l       .debug_str     00000000 
0000662e l       .debug_str     00000000 
0000664c l       .debug_str     00000000 
00006663 l       .debug_str     00000000 
00006673 l       .debug_str     00000000 
00006683 l       .debug_str     00000000 
00006691 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
0000669f l       .debug_str     00000000 
000066b4 l       .debug_str     00000000 
000066cb l       .debug_str     00000000 
000032e1 l       .debug_str     00000000 
000066e4 l       .debug_str     00000000 
00006700 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000056ae l       .debug_str     00000000 
00002c17 l       .debug_str     00000000 
0000670f l       .debug_str     00000000 
000011c0 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
00003fe2 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00004029 l       .debug_str     00000000 
00004043 l       .debug_str     00000000 
0000403b l       .debug_str     00000000 
00003c5d l       .debug_str     00000000 
00003c48 l       .debug_str     00000000 
00004dd9 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00004057 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00004097 l       .debug_str     00000000 
000040b9 l       .debug_str     00000000 
000040a2 l       .debug_str     00000000 
000040a9 l       .debug_str     00000000 
000040b1 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
000040c6 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00004104 l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00004111 l       .debug_str     00000000 
00004125 l       .debug_str     00000000 
0000411c l       .debug_str     00000000 
00004274 l       .debug_str     00000000 
00004229 l       .debug_str     00000000 
00004131 l       .debug_str     00000000 
000029a5 l       .debug_str     00000000 
00002a75 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
f0001b70 g     F .text  0000008a rand_testutils_init
f000135e g     F .text  00000046 sec_mmio_read32
f007b000 g       *ABS*  00000000 _non_volatile_scratch_start
f0079800 g       *ABS*  00000000 _non_volatile_counter_3_end
f0079000 g       *ABS*  00000000 _non_volatile_counter_3_start
f000113c  w    F .text  00000020 ottf_instr_misaligned_fault_handler
f000126c  w    F .text  00000018 ottf_external_nmi_handler
f00008ac g     F .text  00000182 printf
e00027c4 g       .data  00000000 __global_pointer$
e0002060 g     O .bss   00000004 ottf_plic
e0000000 g     O .static_critical       00000020 boot_measurements
f000113c  w    F .text  00000020 ottf_instr_access_fault_handler
f00027de g     F .text  000000c0 memrchr
f0002574 g     F .text  00000022 dif_uart_byte_send_polled
f000113c  w    F .text  00000020 ottf_user_ecall_handler
f00028a0 g       .shutdown      00000000 _text_end
f0001038 g     F .text  0000001a irq_external_ctrl
f000107a g     F .text  00000076 ottf_generic_fault_print
d0010000 g       .manifest      00000000 _chip_info_end
e0002064 g     O .bss   00000004 pxCurrentTCB
f0001284  w    F .text  00000038 ottf_internal_isr
f0001bfa g     F .text  0000000e dif_rv_core_ibex_init
f00030bc g     O .rodata        000002e8 top_earlgrey_plic_interrupt_for_peripheral
f0000898 g     F .text  00000014 uart_sendchar
f00036c0 g     O .rodata        00000008 kClockFreqPeripheralHz
f00012e4 g     F .text  00000020 dif_rv_plic_irq_complete
f000100a g     F .text  0000001c xPortStartScheduler
f0002646 g     F .text  00000088 memcpy
f0001190  w    F .text  000000dc ottf_external_isr
f000113c  w    F .text  00000020 ottf_illegal_instr_fault_handler
f0001b66 g     F .text  00000002 vPortFree
f0001b6c  w    F .text  00000004 manufacturer_post_test_hook
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
e0002058 g       .bss   00000000 _bss_start
f0001052 g     F .text  00000016 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
00000000 g       *ABS*  00000000 __DYNAMIC
f0001cc8 g     F .text  00000006 ibex_mepc_read
f007b000 g       *ABS*  00000000 _non_volatile_counter_0_end
f0000400 g       .vectors       00000000 _text_start
f000113c  w    F .text  00000020 ottf_load_store_fault_handler
f0001abc g     F .text  00000006 vListInitialiseItem
e0002194 g     O .freertos.heap 00008000 ucHeap
000028a0 g       *ABS*  00000000 _manifest_code_end
f0000400 g     F .vectors       00000080 _ottf_interrupt_vector
f0000548 g       .init_array    00000000 _init_array_end
f0001d70 g     F .text  00000034 base_log_internal_dv
f000376c g       *ABS*  00000000 _data_init_end
f00024ba g     F .text  000000ba dif_uart_configure
f0001cb6 g     F .text  00000006 abort
e0000020 g     O .static_critical       00000054 epmp_state
f0001ae4 g     F .text  00000082 pvPortMalloc
f0001aa8 g     F .text  00000014 vListInitialise
e0002194 g       .bss   00000000 _bss_end
f0001b68  w    F .text  00000004 manufacturer_pre_test_hook
f0000c9a g     F .text  00000052 ottf_machine_ecall_handler
f00036d8 g       *ABS*  00000000 _data_init_start
f0001026 g     F .text  00000012 irq_global_ctrl
f0000f8e g     F .text  0000003e vApplicationMallocFailedHook
f0000480 g     F .crt   00000068 _ottf_start
f0000c90 g     F .text  0000000a otp_read32
e0001fd4 g     O .data  00000084 status_codes
00001fc4 g       *ABS*  00000000 _static_critical_size
f0001068 g     F .text  00000012 irq_software_ctrl
f000086a g     F .text  0000002e uart_set_cfg
f000050c g     F .crt   0000003a crt_section_copy
f00036c8 g     O .rodata        00000008 kUartBaudrate
f0001304 g     F .text  0000005a sec_mmio_init
f0002730 g     F .text  000000ae memchr
f0000f8c g     F .text  00000002 test_coverage_send_buffer
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00080000 g       *ABS*  00000000 _ottf_size
f0001174  w    F .text  00000018 ottf_timer_isr
f0001826 g     F .text  00000010 vTaskSuspendAll
e0001fc4 g       .data  00000000 _data_start
f007a800 g       *ABS*  00000000 _non_volatile_counter_0_start
f0001ac2 g     F .text  00000022 uxListRemove
f0080000 g       .freertos.heap 00000000 _non_volatile_scratch_end
f007a000 g       *ABS*  00000000 _non_volatile_counter_2_end
f000126c  w    F .text  00000018 ottf_load_integrity_error_handler
f0079800 g       *ABS*  00000000 _non_volatile_counter_2_start
f0001652 g     F .text  000000ec vTaskSwitchContext
f000113c  w    F .text  00000020 ottf_breakpoint_handler
00004000 g       *ABS*  00000000 _stack_size
f0000608 g     F .text  00000050 handler_exception
f0001e4a g     F .text  0000048e base_vfprintf
e0002058 g       .data  00000000 _data_end
f0000fcc g     F .text  0000003e vApplicationStackOverflowHook
f0001da8 g     F .text  00000016 base_uart_stdout
e0001fc4 g     O .data  00000010 remu10_table
f0000754 g     F .text  00000052 handler_irq_internal
f0001e30 g     F .text  0000001a base_vprintf
f000115c  w    F .text  00000018 ottf_software_isr
e0000074 g     O .static_critical       00001f50 sec_mmio_ctx
f00026ce g     F .text  00000062 memset
f0001cbc g     F .text  00000006 ibex_mcause_read
f00006ac g     F .text  00000052 handler_irq_timer
e0020000 g       .manifest      00000000 _stack_end
e00020b4 g     O .bss   00000018 rand_testutils_rng_ctx
e0002194 g       .freertos.heap 00000000 _freertos_heap_start
f000118c  w    F .text  00000004 ottf_flow_control_isr
e001c000 g       *ABS*  00000000 _stack_start
f00004e8 g     F .crt   00000024 crt_section_clear
f0001836 g     F .text  00000144 xTaskResumeAll
f0000658 g     F .text  00000052 handler_irq_software
f0003014 g     O .rodata        00000004 uxTopUsedPriority
f000173e g     F .text  00000066 vTaskStartScheduler
00010000 g       *ABS*  00000000 _dv_log_offset
f0000548 g     F .text  00000052 xPortStartFirstTask
f00010f0  w    F .text  0000004c ottf_exception_handler
d000ff80 g       *ABS*  00000000 _chip_info_start
f0000810 g     F .text  0000005a test_main
f000197a g     F .text  0000012e xTaskIncrementTick
f00036d0 g     O .rodata        00000004 kDeviceTestStatusAddress
f0002914 g     O .rodata        00000008 kOttfTestConfig
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
f0002596 g     F .text  000000b0 udiv64_slow
f0001dfe g     F .text  00000032 base_printf
f00012bc g     F .text  00000028 dif_rv_plic_irq_claim
f00036d4 g     O .rodata        00000004 kDeviceLogBypassUartAddress
f0001412 g     F .text  00000210 xTaskCreate
f00036b8 g     O .rodata        00000004 kDeviceType
f0001cc2 g     F .text  00000006 ibex_mtval_read
f007a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
f0000cec g     F .text  00000134 _ottf_main
00000080 g       *ABS*  00000000 _chip_info_size
f0001622 g     F .text  00000030 vTaskExitCritical
f000059c g     F .text  00000024 pxPortInitialiseStack
f000243a g     F .text  00000072 status_extract
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
f00024ac g     F .text  0000000e dif_uart_init
f007a000 g       *ABS*  00000000 _non_volatile_counter_1_start
f0000000 g       .manifest      00000000 _ottf_start_address
f0000548 g       .init_array    00000000 _init_array_start
f0001c08 g     F .text  000000ae test_status_set
f0000c32 g     F .text  0000005e pinmux_init
f0001cce g     F .text  000000a2 base_log_internal_core
f00007a8 g     F .text  00000068 ottf_isr_exit
f0000700 g     F .text  00000052 handler_irq_external



Disassembly of section .vectors:

f0000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
f0000400:       2080006f                j       f0000608 <handler_exception>
f0000404:       c0001073                unimp
f0000408:       c0001073                unimp
f000040c:       24c0006f                j       f0000658 <handler_irq_software>
f0000410:       c0001073                unimp
f0000414:       c0001073                unimp
f0000418:       c0001073                unimp
f000041c:       2900006f                j       f00006ac <handler_irq_timer>
f0000420:       c0001073                unimp
f0000424:       c0001073                unimp
f0000428:       c0001073                unimp
f000042c:       2d40006f                j       f0000700 <handler_irq_external>
f0000430:       c0001073                unimp
f0000434:       c0001073                unimp
f0000438:       c0001073                unimp
f000043c:       c0001073                unimp
f0000440:       c0001073                unimp
f0000444:       c0001073                unimp
f0000448:       c0001073                unimp
f000044c:       c0001073                unimp
f0000450:       c0001073                unimp
f0000454:       c0001073                unimp
f0000458:       c0001073                unimp
f000045c:       c0001073                unimp
f0000460:       c0001073                unimp
f0000464:       c0001073                unimp
f0000468:       c0001073                unimp
f000046c:       c0001073                unimp
f0000470:       c0001073                unimp
f0000474:       c0001073                unimp
f0000478:       c0001073                unimp
f000047c:       2d80006f                j       f0000754 <handler_irq_internal>

Disassembly of section .crt:

f0000480 <_ottf_start>:
_ottf_start():
f0000480:       f0002197                auipc   gp,0xf0002
f0000484:       34418193                addi    gp,gp,836 # e00027c4 <__global_pointer$>
f0000488:       f0020117                auipc   sp,0xf0020
f000048c:       b6810113                addi    sp,sp,-1176 # e001fff0 <_stack_start+0x3ff0>
f0000490:       00000297                auipc   t0,0x0
f0000494:       f7128293                addi    t0,t0,-143 # f0000401 <_ottf_interrupt_vector+0x1>
f0000498:       30529073                csrw    mtvec,t0
f000049c:       f0002517                auipc   a0,0xf0002
f00004a0:       b2850513                addi    a0,a0,-1240 # e0001fc4 <remu10_table>
f00004a4:       89418593                addi    a1,gp,-1900 # e0002058 <uart0>
f00004a8:       00003617                auipc   a2,0x3
f00004ac:       23060613                addi    a2,a2,560 # f00036d8 <_data_init_start>
f00004b0:       28b1                    jal     f000050c <crt_section_copy>
f00004b2:       f0002517                auipc   a0,0xf0002
f00004b6:       ba650513                addi    a0,a0,-1114 # e0002058 <uart0>
f00004ba:       f0002597                auipc   a1,0xf0002
f00004be:       cda58593                addi    a1,a1,-806 # e0002194 <ucHeap>
f00004c2:       201d                    jal     f00004e8 <crt_section_clear>
f00004c4:       00000417                auipc   s0,0x0
f00004c8:       08440413                addi    s0,s0,132 # f0000548 <xPortStartFirstTask>
f00004cc:       00000497                auipc   s1,0x0
f00004d0:       07c48493                addi    s1,s1,124 # f0000548 <xPortStartFirstTask>
f00004d4:       00947863                bgeu    s0,s1,f00004e4 <init_array_loop_end>

f00004d8 <init_array_loop>:
f00004d8:       /-> 00042283            lw      t0,0(s0)
f00004dc:       |   9282                        jalr    t0
f00004de:       |   0411                        addi    s0,s0,4
f00004e0:       \-- fe946ce3            bltu    s0,s1,f00004d8 <init_array_loop>

f00004e4 <init_array_loop_end>:
f00004e4:       0090006f                j       f0000cec <_ottf_main>

f00004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
f00004e8:       /-------- 00b57e63              bgeu    a0,a1,f0000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
f00004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
f00004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
f00004f4:       |  /----- 00029b63              bnez    t0,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
f00004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
f00004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
f00004fe:       |  |  \-- feb56de3              bltu    a0,a1,f00004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
f0000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
f0000504:       \--+----X 00b51363              bne     a0,a1,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
f0000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
f000050a:          \----> 0000                  unimp

f000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
f000050c:       /-------- 02b57963              bgeu    a0,a1,f000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
f0000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
f0000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
f0000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
f000051c:       |  /----- 02029463              bnez    t0,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
f0000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
f0000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
f0000528:       |  +----- 0062ee63              bltu    t0,t1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
f000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
f0000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
f0000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
f0000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
f0000538:       |  |  \-- feb56ae3              bltu    a0,a1,f000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
f000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
f000053e:       \--+----X 00b51363              bne     a0,a1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
f0000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
f0000544:          \----> 0000                  unimp

Disassembly of section .text:

f0000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
f0000548:       f0002117                auipc   sp,0xf0002
f000054c:       b1c12103                lw      sp,-1252(sp) # e0002064 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
f0000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
f0000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
f000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
f0000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
f000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
f000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
f0000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
f0000598:       8082                    ret
f000059a:       0001                    nop

f000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
f000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
f00005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
f00005a4:       6309                    lui     t1,0x2
f00005a6:       88030313                addi    t1,t1,-1920 # 1880 <_epmp_reset_rx_size+0x1080>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
f00005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
f00005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
f00005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
f00005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
f00005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
f00005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
f00005be:       8082                    ret

f00005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
f00005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
f00005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
f00005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
f00005ca:       /-- 00731363            bne     t1,t2,f00005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
f00005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
f00005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
f00005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
f00005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
f00005da:       /-- 006e0463            beq     t3,t1,f00005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
f00005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
f00005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
f00005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
f00005e4:           8082                        ret
f00005e6:           0001                        nop

f00005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
f00005e8:           00002297            auipc   t0,0x2
f00005ec:           32c28293            addi    t0,t0,812 # f0002914 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
f00005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
f00005f4:       /-- 00030863            beqz    t1,f0000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
f00005f8:       |   f0002397            auipc   t2,0xf0002
f00005fc:       |   a6c3a383            lw      t2,-1428(t2) # e0002064 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
f0000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
f0000604:       \-> 8082                        ret
f0000606:           0001                        nop

f0000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
f000064a:       3f9d                    jal     f00005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
f000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000064e:       3f69                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  jal ottf_exception_handler
f0000650:       2a1000ef                jal     ra,f00010f0 <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:127

  // Return from ISR.
  j ottf_isr_exit
f0000654:       1540006f                j       f00007a8 <ottf_isr_exit>

f0000658 <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:140
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000658:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000065c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000065e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000660:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000662:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000664:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000666:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000668:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000066a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000066c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000066e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000670:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000672:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000674:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000676:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000678:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000067a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000067c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000067e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000680:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000682:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000684:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000686:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000688:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000068a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000068c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000068e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000690:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000692:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:171

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000694:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000698:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:176

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000069a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177
  sw t0, 0(sp)
f000069e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:181

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006a0:       37a1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:184

  // Jump to the software ISR.
  jal ottf_software_isr
f00006a2:       2bb000ef                jal     ra,f000115c <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:187

  // Return from ISR.
  j ottf_isr_exit
f00006a6:       1020006f                j       f00007a8 <ottf_isr_exit>
f00006aa:       0001                    nop

f00006ac <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:200
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f00006ac:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:201
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f00006b0:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f00006b2:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f00006b4:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f00006b6:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f00006b8:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f00006ba:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f00006bc:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f00006be:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f00006c0:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f00006c2:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f00006c4:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f00006c6:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f00006c8:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f00006ca:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f00006cc:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f00006ce:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f00006d0:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f00006d2:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f00006d4:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f00006d6:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f00006d8:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f00006da:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f00006dc:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f00006de:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f00006e0:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f00006e2:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f00006e4:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f00006e6:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:231

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f00006e8:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:232
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f00006ec:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:236

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f00006ee:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:237
  sw t0, 0(sp)
f00006f2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:241

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006f4:       3dd5                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:244

  // Jump to timer ISR.
  jal ottf_timer_isr
f00006f6:       27f000ef                jal     ra,f0001174 <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247

  // Return from ISR.
  j ottf_isr_exit
f00006fa:       0ae0006f                j       f00007a8 <ottf_isr_exit>
f00006fe:       0001                    nop

f0000700 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:260
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000700:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:261
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000704:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:262
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f0000706:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000708:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000070a:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f000070c:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f000070e:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000710:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000712:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000714:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000716:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000718:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000071a:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f000071c:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f000071e:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000720:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000722:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000724:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000726:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000728:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000072a:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f000072c:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f000072e:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000730:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000732:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000734:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000736:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000738:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000073a:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f000073c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:292
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000740:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:296

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000742:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:297
  sw t0, 0(sp)
f0000746:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:301

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f0000748:       3545                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Jump to external ISR.
  jal ottf_external_isr
f000074a:       247000ef                jal     ra,f0001190 <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Return from ISR.
  j ottf_isr_exit
f000074e:       05a0006f                j       f00007a8 <ottf_isr_exit>
f0000752:       0001                    nop

f0000754 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:320
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000754:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:321
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000758:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:322
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000075a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:323
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f000075c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000075e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000760:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000762:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000764:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000766:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000768:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000076a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f000076c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000076e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000770:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000772:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000774:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000776:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000778:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000077a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f000077c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000077e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000780:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000782:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000784:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000786:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000788:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000078a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f000078c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000078e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000790:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000794:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000796:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:357
  sw t0, 0(sp)
f000079a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000079c:       35b1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:364

  // Jump to the internal ISR.
  jal ottf_internal_isr
f000079e:       2e7000ef                jal     ra,f0001284 <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:367

  // Return from ISR.
  j ottf_isr_exit
f00007a2:       0060006f                j       f00007a8 <ottf_isr_exit>
f00007a6:       0001                    nop

f00007a8 <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:384
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
f00007a8:           00002297            auipc   t0,0x2
f00007ac:           16c28293            addi    t0,t0,364 # f0002914 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:385
  lb t1, 0(t0)
f00007b0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:386
  beqz t1, .L_skip_sp_restore
f00007b4:       /-- 00030863            beqz    t1,f00007c4 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:387
  lw  t2, pxCurrentTCB
f00007b8:       |   f0002397            auipc   t2,0xf0002
f00007bc:       |   8ac3a383            lw      t2,-1876(t2) # e0002064 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:388
  lw  sp, 0(t2)
f00007c0:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
f00007c4:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  csrw mepc, t0
f00007c6:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:396

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
f00007ca:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
  csrw mstatus, t0
f00007cc:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:400

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
f00007d0:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
f00007d2:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f00007d4:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:403
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f00007d6:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:404
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f00007d8:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f00007da:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
f00007dc:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f00007de:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f00007e0:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f00007e2:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f00007e4:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f00007e6:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f00007e8:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f00007ea:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f00007ec:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f00007ee:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f00007f0:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f00007f2:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f00007f4:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f00007f6:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f00007f8:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f00007fa:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f00007fc:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f00007fe:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000800:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000802:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000804:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000806:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000808:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
f000080c:           30200073            mret

f0000810 <test_main>:
test_main():
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:24
#include "sw/device/lib/testing/test_framework/ottf_main.h"
#include "sw/device/silicon_creator/rom/string_lib.h"

OTTF_DEFINE_TEST_CONFIG();

bool test_main(void) {
f0000810:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:26

  sec_mmio_init();
f0000812:           c606                        sw      ra,12(sp)
f0000814:           c422                        sw      s0,8(sp)
f0000816:           c226                        sw      s1,4(sp)
f0000818:           2ed000ef            jal     ra,f0001304 <sec_mmio_init>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:27
  pinmux_init();
f000081c:           2919                        jal     f0000c32 <pinmux_init>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:37
  #else
  //set_flls();
  int baud_rate = 115200;
  int test_freq = 100000000;
  #endif
  uart_set_cfg(0,(test_freq/baud_rate)>>4);
f000081e:           03600593            li      a1,54
f0000822:           4501                        li      a0,0
f0000824:           2099                        jal     f000086a <uart_set_cfg>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:49

  int * pointer;
  int mbox_id = 10;

  // Initialazing the uart
  uart_set_cfg(0,(test_freq/baud_rate)>>4);
f0000826:           03600593            li      a1,54
f000082a:           4501                        li      a0,0
f000082c:           283d                        jal     f000086a <uart_set_cfg>
f000082e:           0c000537            lui     a0,0xc000
f0000832:           4405                        li      s0,1
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:53

  // Init CVA6 Plic
  pointer = (int *) PLIC_BASE+mbox_id*4;
  *pointer = 0x1;
f0000834:           0a852023            sw      s0,160(a0) # c0000a0 <_ottf_size+0xbf800a0>
f0000838:           0c008537            lui     a0,0xc008
f000083c:           40000593            li      a1,1024
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:56

  pointer = (int *) PLIC_EN_BITS+((int)(mbox_id/32))*4;
  *pointer =  1<<(mbox_id%32);
f0000840:           24b52023            sw      a1,576(a0) # c008240 <_ottf_size+0xbf88240>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:58

  printf("[SECD] Writing CVA6 boot PC into mbox\r\n");
f0000844:           00002517            auipc   a0,0x2
f0000848:           09250513            addi    a0,a0,146 # f00028d6 <_text_end+0x36>
f000084c:           2085                        jal     f00008ac <printf>
f000084e:           104044b7            lui     s1,0x10404
f0000852:           80000537            lui     a0,0x80000
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:61
  // Write CVA6 boot PC to mbox
  pointer = (int *) 0x10404000;
  *pointer = 0x80000000;
f0000856:           c088                        sw      a0,0(s1)
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:63

  printf("[SECD] Booting CVA6\r\n");
f0000858:           00002517            auipc   a0,0x2
f000085c:           0a650513            addi    a0,a0,166 # f00028fe <_text_end+0x5e>
f0000860:           20b1                        jal     f00008ac <printf>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:67

  // Send IRQ and boot
  pointer = (int *) 0x10404024;
  *pointer = 0x1;
f0000862:           d0c0                        sw      s0,36(s1)
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:70

  while(1)
    asm volatile ("wfi");
f0000864:       /-> 10500073            wfi
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:69
  while(1)
f0000868:       \-- bff5                        j       f0000864 <test_main+0x54>

f000086a <uart_set_cfg>:
uart_set_cfg():
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:25
 *              There is a prescaler in place that already divides the SoC
 *              clock by 16.  Since this is a counter, a value of 1 means that
 *              the SoC clock divided by 16*2 = 32 is used. A value of 31 would mean
 *              that we use the SoC clock divided by 16*32 = 512.
 */
void uart_set_cfg(int parity, uint16_t clk_counter) {
f000086a:       40000537                lui     a0,0x40000
f000086e:       08300613                li      a2,131
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:27
  unsigned int i;
  *(volatile unsigned int*)(UART_REG_LCR) = 0x83; //sets 8N1 and set DLAB to 1
f0000872:       c550                    sw      a2,12(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:28
  *(volatile unsigned int*)(UART_REG_DLM) = (clk_counter >> 8) & 0xFF;
f0000874:       0085d613                srli    a2,a1,0x8
f0000878:       c150                    sw      a2,4(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:29
  *(volatile unsigned int*)(UART_REG_DLL) =  clk_counter       & 0xFF;
f000087a:       0ff5f593                andi    a1,a1,255
f000087e:       c10c                    sw      a1,0(a0)
f0000880:       0a700593                li      a1,167
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:30
  *(volatile unsigned int*)(UART_REG_FCR) = 0xA7; //enables 16byte FIFO and clear FIFOs
f0000884:       c50c                    sw      a1,8(a0)
f0000886:       458d                    li      a1,3
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:31
  *(volatile unsigned int*)(UART_REG_LCR) = 0x03; //sets 8N1 and set DLAB to 0
f0000888:       c54c                    sw      a1,12(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:33

  *(volatile unsigned int*)(UART_REG_IER) = ((*(volatile unsigned int*)(UART_REG_IER)) & 0xF0) | 0x02; // set IER (interrupt enable register) on UART
f000088a:       414c                    lw      a1,4(a0)
f000088c:       0f05f593                andi    a1,a1,240
f0000890:       0025e593                ori     a1,a1,2
f0000894:       c14c                    sw      a1,4(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:34
}
f0000896:       8082                    ret

f0000898 <uart_sendchar>:
uart_sendchar():
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:60
  while((*((volatile int*)UART_REG_LSR) & 0x1) != 0x1);

  return *(volatile int*)UART_REG_RBR;
}

void uart_sendchar(const char c) {
f0000898:           400005b7            lui     a1,0x40000
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:62
  // wait until there is space in the fifo
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
f000089c:       /-> 49d0                        lw      a2,20(a1)
f000089e:       |   02067613            andi    a2,a2,32
f00008a2:       \-- de6d                        beqz    a2,f000089c <uart_sendchar+0x4>
f00008a4:           400005b7            lui     a1,0x40000
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:65

  // load FIFO
  *(volatile unsigned int*)(UART_REG_THR) = c;
f00008a8:           c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:66
}
f00008aa:           8082                        ret

f00008ac <printf>:
printf():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:236

  return pc;
}

int printf(const char *format, ...)
{
f00008ac:                                      711d                     addi    sp,sp,-96
f00008ae:                                      de06                     sw      ra,60(sp)
f00008b0:                                      dc22                     sw      s0,56(sp)
f00008b2:                                      da26                     sw      s1,52(sp)
f00008b4:                                      d84a                     sw      s2,48(sp)
f00008b6:                                      d64e                     sw      s3,44(sp)
f00008b8:                                      d452                     sw      s4,40(sp)
f00008ba:                                      d256                     sw      s5,36(sp)
f00008bc:                                      d05a                     sw      s6,32(sp)
f00008be:                                      ce5e                     sw      s7,28(sp)
f00008c0:                                      cc62                     sw      s8,24(sp)
f00008c2:                                      ca66                     sw      s9,20(sp)
f00008c4:                                      c86a                     sw      s10,16(sp)
f00008c6:                                      c66e                     sw      s11,12(sp)
f00008c8:                                      84aa                     mv      s1,a0
f00008ca:                                      4a01                     li      s4,0
f00008cc:                                      cec6                     sw      a7,92(sp)
f00008ce:                                      ccc2                     sw      a6,88(sp)
f00008d0:                                      cabe                     sw      a5,84(sp)
f00008d2:                                      c8ba                     sw      a4,80(sp)
f00008d4:                                      c6b6                     sw      a3,76(sp)
f00008d6:                                      c4b2                     sw      a2,72(sp)
f00008d8:                                      c2ae                     sw      a1,68(sp)
f00008da:                                      04410c93                 addi    s9,sp,68
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:240
  int pc;
  va_list va;

  va_start(va, format);
f00008de:                                      c266                     sw      s9,4(sp)
f00008e0:                                      02500913                 li      s2,37
f00008e4:                                      02d00993                 li      s3,45
f00008e8:                                      03000b13                 li      s6,48
f00008ec:                                      4aa5                     li      s5,9
f00008ee:                                      4429                     li      s0,10
f00008f0:                                      07200b93                 li      s7,114
f00008f4:                                      05800c13                 li      s8,88
f00008f8:                                      07800d93                 li      s11,120
f00008fc:                                      07500d13                 li      s10,117
qprint():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:173
  for (; *format != 0; ++format)
f0000900:       /----------------------------> 0004c503                 lbu     a0,0(s1)
f0000904:       |                          /-- 01250463                 beq     a0,s2,f000090c <printf+0x60>
f0000908:       |                 /--------|-- ed19                     bnez    a0,f0000926 <printf+0x7a>
f000090a:       |  /--------------|--------|-- a211                     j       f0000a0e <printf+0x162>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:179
      if (*format == '\0') break;
f000090c:       |  |              |        \-> 0014c603                 lbu     a2,1(s1)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:177
      ++format;
f0000910:       |  |              |            00148593                 addi    a1,s1,1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:179
      if (*format == '\0') break;
f0000914:       |  |              |        /-- 01260863                 beq     a2,s2,f0000924 <printf+0x78>
f0000918:       |  |              |  /-----|-- 01360a63                 beq     a2,s3,f000092c <printf+0x80>
f000091c:       |  +--------------|--|-----|-- 0e060963                 beqz    a2,f0000a0e <printf+0x162>
f0000920:       |  |              |  |     |   4601                     li      a2,0
f0000922:       |  |              |  |  /--|-- a801                     j       f0000932 <printf+0x86>
f0000924:       |  |              |  |  |  \-> 84ae                     mv      s1,a1
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000926:       |  |              \--|--|----> 3f8d                     jal     f0000898 <uart_sendchar>
qprint():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:227
      ++pc;
f0000928:       |  |                 |  |      0a05                     addi    s4,s4,1
f000092a:       |  |  /--------------|--|----- a0c5                     j       f0000a0a <printf+0x15e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:183
        ++format;
f000092c:       |  |  |              \--|----> 00248593                 addi    a1,s1,2
f0000930:       |  |  |                 |      4605                     li      a2,1
f0000932:       |  |  |                 \----> 00266693                 ori     a3,a2,2
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:186
      while (*format == '0')
f0000936:       |  |  |                        fff58493                 addi    s1,a1,-1
f000093a:       |  |  |                    /-> 0014c503                 lbu     a0,1(s1)
f000093e:       |  |  |                    |   8732                     mv      a4,a2
f0000940:       |  |  |                    |   0485                     addi    s1,s1,1
f0000942:       |  |  |                    |   8636                     mv      a2,a3
f0000944:       |  |  |                    \-- ff650be3                 beq     a0,s6,f000093a <printf+0x8e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:191
      for ( ; *format >= '0' && *format <= '9'; ++format) {
f0000948:       |  |  |                        fd050593                 addi    a1,a0,-48
f000094c:       |  |  |                        4681                     li      a3,0
f000094e:       |  |  |                        0ff5f593                 andi    a1,a1,255
f0000952:       |  |  |                 /----- 02bae563                 bltu    s5,a1,f000097c <printf+0xd0>
f0000956:       |  |  |                 |      85a6                     mv      a1,s1
f0000958:       |  |  |                 |  /-> 0ff57613                 andi    a2,a0,255
f000095c:       |  |  |                 |  |   0015c503                 lbu     a0,1(a1)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:192
        width *= 10;
f0000960:       |  |  |                 |  |   028686b3                 mul     a3,a3,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:193
        width += *format - '0';
f0000964:       |  |  |                 |  |   9636                     add     a2,a2,a3
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:191
      for ( ; *format >= '0' && *format <= '9'; ++format) {
f0000966:       |  |  |                 |  |   00158493                 addi    s1,a1,1
f000096a:       |  |  |                 |  |   fd050593                 addi    a1,a0,-48
f000096e:       |  |  |                 |  |   0ff5f793                 andi    a5,a1,255
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:193
        width += *format - '0';
f0000972:       |  |  |                 |  |   fd060693                 addi    a3,a2,-48
f0000976:       |  |  |                 |  |   85a6                     mv      a1,s1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:191
      for ( ; *format >= '0' && *format <= '9'; ++format) {
f0000978:       |  |  |                 |  \-- fe87e0e3                 bltu    a5,s0,f0000958 <printf+0xac>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:195
      if( *format == 's' ) {
f000097c:       |  |  |                 \--/-X 02abc463                 blt     s7,a0,f00009a4 <printf+0xf8>
f0000980:       |  |  |                 /--|-- 05850363                 beq     a0,s8,f00009c6 <printf+0x11a>
f0000984:       |  |  |                 |  |   06300593                 li      a1,99
f0000988:       |  |  |        /--------|--|-- 04b50663                 beq     a0,a1,f00009d4 <printf+0x128>
f000098c:       |  |  |        |        |  |   06400593                 li      a1,100
f0000990:       |  |  +--------|--------|--|-- 06b51d63                 bne     a0,a1,f0000a0a <printf+0x15e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:201
        pc += qprinti (out, va_arg(va, int), 10, 1, width, pad, 'a');
f0000994:       |  |  |        |        |  |   000ca503                 lw      a0,0(s9)
f0000998:       |  |  |        |        |  |   0c91                     addi    s9,s9,4
f000099a:       |  |  |        |        |  |   45a9                     li      a1,10
f000099c:       |  |  |        |        |  |   4605                     li      a2,1
f000099e:       |  |  |        |        |  |   06100793                 li      a5,97
f00009a2:       |  |  |  /-----|--------|--|-- a095                     j       f0000a06 <printf+0x15a>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:195
      if( *format == 's' ) {
f00009a4:       |  |  |  |     |  /-----|--\-X 05b50563                 beq     a0,s11,f00009ee <printf+0x142>
f00009a8:       |  |  |  |  /--|--|-----|----- 05a50863                 beq     a0,s10,f00009f8 <printf+0x14c>
f00009ac:       |  |  |  |  |  |  |     |      07300593                 li      a1,115
f00009b0:       |  |  +--|--|--|--|-----|----- 04b51d63                 bne     a0,a1,f0000a0a <printf+0x15e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:196
        register char *s = va_arg(va, char*);
f00009b4:       |  |  |  |  |  |  |     |      000ca503                 lw      a0,0(s9)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:197
        pc += qprints (out, s?s:"(null)", width, pad);
f00009b8:       |  |  |  |  |  |  |     |  /-- e509                     bnez    a0,f00009c2 <printf+0x116>
f00009ba:       |  |  |  |  |  |  |     |  |   00002517                 auipc   a0,0x2
f00009be:       |  |  |  |  |  |  |     |  |   f6250513                 addi    a0,a0,-158 # f000291c <kOttfTestConfig+0x8>
f00009c2:       |  |  |  |  |  |  |     |  \-> 0c91                     addi    s9,s9,4
f00009c4:       |  |  |  |  |  |  |     |  /-- a00d                     j       f00009e6 <printf+0x13a>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:213
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'A');
f00009c6:       |  |  |  |  |  |  |     \--|-> 000ca503                 lw      a0,0(s9)
f00009ca:       |  |  |  |  |  |  |        |   0c91                     addi    s9,s9,4
f00009cc:       |  |  |  |  |  |  |        |   45c1                     li      a1,16
f00009ce:       |  |  |  |  |  |  |        |   04100793                 li      a5,65
f00009d2:       |  |  |  |  |  |  |  /-----|-- a80d                     j       f0000a04 <printf+0x158>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:217
        scr[0] = va_arg(va, int);
f00009d4:       |  |  |  |  |  \--|--|-----|-> 000ca503                 lw      a0,0(s9)
f00009d8:       |  |  |  |  |     |  |     |   0c91                     addi    s9,s9,4
f00009da:       |  |  |  |  |     |  |     |   00a10523                 sb      a0,10(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:218
        scr[1] = '\0';
f00009de:       |  |  |  |  |     |  |     |   000105a3                 sb      zero,11(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:219
        pc += qprints (out, scr, width, pad);
f00009e2:       |  |  |  |  |     |  |     |   00a10513                 addi    a0,sp,10
f00009e6:       |  |  |  |  |     |  |     \-> 85b6                     mv      a1,a3
f00009e8:       |  |  |  |  |     |  |         863a                     mv      a2,a4
f00009ea:       |  |  |  |  |     |  |         2091                     jal     f0000a2e <qprints>
f00009ec:       |  |  |  |  |     |  |  /----- a831                     j       f0000a08 <printf+0x15c>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:209
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'a');
f00009ee:       |  |  |  |  |     \--|--|----> 000ca503                 lw      a0,0(s9)
f00009f2:       |  |  |  |  |        |  |      0c91                     addi    s9,s9,4
f00009f4:       |  |  |  |  |        |  |      45c1                     li      a1,16
f00009f6:       |  |  |  |  |        |  |  /-- a029                     j       f0000a00 <printf+0x154>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:205
        pc += qprinti (out, va_arg(va, unsigned int), 10, 0, width, pad, 'a');
f00009f8:       |  |  |  |  \--------|--|--|-> 000ca503                 lw      a0,0(s9)
f00009fc:       |  |  |  |           |  |  |   0c91                     addi    s9,s9,4
f00009fe:       |  |  |  |           |  |  |   45a9                     li      a1,10
f0000a00:       |  |  |  |           |  |  \-> 06100793                 li      a5,97
f0000a04:       |  |  |  |           \--|----> 4601                     li      a2,0
f0000a06:       |  |  |  \--------------|----> 28d5                     jal     f0000afa <qprinti>
f0000a08:       |  |  |                 \----> 9a2a                     add     s4,s4,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:173
  for (; *format != 0; ++format)
f0000a0a:       |  |  \----------------------> 0485                     addi    s1,s1,1
f0000a0c:       \--|-------------------------- bdd5                     j       f0000900 <printf+0x54>
printf():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:246

  pc = qprint(0, format, va);

  va_end(va);

  return pc;
f0000a0e:          \-------------------------> 8552                     mv      a0,s4
f0000a10:                                      4db2                     lw      s11,12(sp)
f0000a12:                                      4d42                     lw      s10,16(sp)
f0000a14:                                      4cd2                     lw      s9,20(sp)
f0000a16:                                      4c62                     lw      s8,24(sp)
f0000a18:                                      4bf2                     lw      s7,28(sp)
f0000a1a:                                      5b02                     lw      s6,32(sp)
f0000a1c:                                      5a92                     lw      s5,36(sp)
f0000a1e:                                      5a22                     lw      s4,40(sp)
f0000a20:                                      59b2                     lw      s3,44(sp)
f0000a22:                                      5942                     lw      s2,48(sp)
f0000a24:                                      54d2                     lw      s1,52(sp)
f0000a26:                                      5462                     lw      s0,56(sp)
f0000a28:                                      50f2                     lw      ra,60(sp)
f0000a2a:                                      6125                     addi    sp,sp,96
f0000a2c:                                      8082                     ret

f0000a2e <qprints>:
qprints():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:80
{
f0000a2e:                       1101                    addi    sp,sp,-32
f0000a30:                       ce06                    sw      ra,28(sp)
f0000a32:                       cc22                    sw      s0,24(sp)
f0000a34:                       ca26                    sw      s1,20(sp)
f0000a36:                       c84a                    sw      s2,16(sp)
f0000a38:                       c64e                    sw      s3,12(sp)
f0000a3a:                       c452                    sw      s4,8(sp)
f0000a3c:                       c256                    sw      s5,4(sp)
f0000a3e:                       8a2e                    mv      s4,a1
f0000a40:                       892a                    mv      s2,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:83
  if (width > 0) {
f0000a42:          /----------- 02b05463                blez    a1,f0000a6a <qprints+0x3c>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:86
    for (ptr = string; *ptr; ++ptr) ++len;
f0000a46:          |            00094503                lbu     a0,0(s2)
f0000a4a:       /--|----------- c505                    beqz    a0,f0000a72 <qprints+0x44>
f0000a4c:       |  |            4681                    li      a3,0
f0000a4e:       |  |            00190593                addi    a1,s2,1
f0000a52:       |  |        /-> 00d58533                add     a0,a1,a3
f0000a56:       |  |        |   00054703                lbu     a4,0(a0)
f0000a5a:       |  |        |   00168513                addi    a0,a3,1
f0000a5e:       |  |        |   86aa                    mv      a3,a0
f0000a60:       |  |        \-- fb6d                    bnez    a4,f0000a52 <qprints+0x24>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:87
    if (len >= width) width = 0;
f0000a62:       |  |  /-------- 01454b63                blt     a0,s4,f0000a78 <qprints+0x4a>
f0000a66:       |  |  |     /-> 4581                    li      a1,0
f0000a68:       |  |  |  /--|-- a811                    j       f0000a7c <qprints+0x4e>
f0000a6a:       |  \--|--|--|-> 4481                    li      s1,0
f0000a6c:       |     |  |  |   02000993                li      s3,32
f0000a70:       |  /--|--|--|-- a0b1                    j       f0000abc <qprints+0x8e>
f0000a72:       \--|--|--|--|-> 4501                    li      a0,0
f0000a74:          |  |  |  \-- ff4559e3                bge     a0,s4,f0000a66 <qprints+0x38>
f0000a78:          |  \--|----> 40aa05b3                sub     a1,s4,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:89
    if (pad & PAD_ZERO) padchar = '0';
f0000a7c:          |     \----> 00267693                andi    a3,a2,2
f0000a80:          |            02000993                li      s3,32
f0000a84:          |        /-- c299                    beqz    a3,f0000a8a <qprints+0x5c>
f0000a86:          |        |   03000993                li      s3,48
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:91
  if (!(pad & PAD_RIGHT)) {
f0000a8a:          |        \-> 8a05                    andi    a2,a2,1
f0000a8c:          |            00163613                seqz    a2,a2
f0000a90:          |            00b026b3                sgtz    a3,a1
f0000a94:          |            8e75                    and     a2,a2,a3
f0000a96:          |     /----- c20d                    beqz    a2,f0000ab8 <qprints+0x8a>
f0000a98:          |     |      4401                    li      s0,0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:92
    for ( ; width > 0; --width) {
f0000a9a:          |     |      40aa04b3                sub     s1,s4,a0
f0000a9e:          |     |      4a85                    li      s5,1
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000aa0:          |     |  /-> 854e                    mv      a0,s3
f0000aa2:          |     |  |   3bdd                    jal     f0000898 <uart_sendchar>
qprints():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:92
    for ( ; width > 0; --width) {
f0000aa4:          |     |  |   147d                    addi    s0,s0,-1
f0000aa6:          |     |  |   00848a33                add     s4,s1,s0
f0000aaa:          |     |  |   001a0513                addi    a0,s4,1
f0000aae:          |     |  \-- feaac9e3                blt     s5,a0,f0000aa0 <qprints+0x72>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:97
  for ( ; *string ; ++string) {
f0000ab2:          |     |      408004b3                neg     s1,s0
f0000ab6:          +-----|----- a019                    j       f0000abc <qprints+0x8e>
f0000ab8:          |     \----> 4481                    li      s1,0
f0000aba:          |            8a2e                    mv      s4,a1
f0000abc:          \----------> 00094503                lbu     a0,0(s2)
f0000ac0:             /-------- c919                    beqz    a0,f0000ad6 <qprints+0xa8>
f0000ac2:             |         00190413                addi    s0,s2,1
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000ac6:             |     /-> 0ff57513                andi    a0,a0,255
f0000aca:             |     |   33f9                    jal     f0000898 <uart_sendchar>
qprints():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:97
  for ( ; *string ; ++string) {
f0000acc:             |     |   00044503                lbu     a0,0(s0)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:99
    ++pc;
f0000ad0:             |     |   0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:97
  for ( ; *string ; ++string) {
f0000ad2:             |     |   0405                    addi    s0,s0,1
f0000ad4:             |     \-- f96d                    bnez    a0,f0000ac6 <qprints+0x98>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:101
  for ( ; width > 0; --width) {
f0000ad6:             \--/----X 01405863                blez    s4,f0000ae6 <qprints+0xb8>
f0000ada:                |      94d2                    add     s1,s1,s4
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000adc:                |  /-> 854e                    mv      a0,s3
f0000ade:                |  |   3b6d                    jal     f0000898 <uart_sendchar>
qprints():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:101
  for ( ; width > 0; --width) {
f0000ae0:                |  |   1a7d                    addi    s4,s4,-1
f0000ae2:                |  \-- fe0a1de3                bnez    s4,f0000adc <qprints+0xae>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:106
  return pc;
f0000ae6:                \----> 8526                    mv      a0,s1
f0000ae8:                       4a92                    lw      s5,4(sp)
f0000aea:                       4a22                    lw      s4,8(sp)
f0000aec:                       49b2                    lw      s3,12(sp)
f0000aee:                       4942                    lw      s2,16(sp)
f0000af0:                       44d2                    lw      s1,20(sp)
f0000af2:                       4462                    lw      s0,24(sp)
f0000af4:                       40f2                    lw      ra,28(sp)
f0000af6:                       6105                    addi    sp,sp,32
f0000af8:                       8082                    ret

f0000afa <qprinti>:
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:110
{
f0000afa:                          7139                 addi    sp,sp,-64
f0000afc:                          de06                 sw      ra,60(sp)
f0000afe:                          dc22                 sw      s0,56(sp)
f0000b00:                          da26                 sw      s1,52(sp)
f0000b02:                          d84a                 sw      s2,48(sp)
f0000b04:                          d64e                 sw      s3,44(sp)
f0000b06:                          893a                 mv      s2,a4
f0000b08:                          89b6                 mv      s3,a3
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:116
  if (i == 0)
f0000b0a:             /----------- cd39                 beqz    a0,f0000b68 <qprinti+0x6e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:123
  if (sg && b == 10 && i < 0)
f0000b0c:             |            00c03633             snez    a2,a2
f0000b10:             |            ff658693             addi    a3,a1,-10
f0000b14:             |            0016b693             seqz    a3,a3
f0000b18:             |            8e75                 and     a2,a2,a3
f0000b1a:             |            00052693             slti    a3,a0,0
f0000b1e:             |            00d67833             and     a6,a2,a3
f0000b22:             |        /-- 00080463             beqz    a6,f0000b2a <qprinti+0x30>
f0000b26:             |        |   40a00533             neg     a0,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:129
  s = print_buf + PRINT_BUF_LEN-1;
f0000b2a:             |        \-> 02b10693             addi    a3,sp,43
f0000b2e:             |            4641                 li      a2,16
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:130
  *s = '\0';
f0000b30:             |            020105a3             sb      zero,43(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:133
  if(b == 16) {
f0000b34:             |  /-------- 04c59563             bne     a1,a2,f0000b7e <qprinti+0x84>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:135
    while (u) {
f0000b38:       /-----|--|-------- c579                 beqz    a0,f0000c06 <qprinti+0x10c>
f0000b3a:       |     |  |         0c678613             addi    a2,a5,198
f0000b3e:       |     |  |         4725                 li      a4,9
f0000b40:       |     |  |         47c1                 li      a5,16
f0000b42:       |     |  |  /----> 84aa                 mv      s1,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:136
      int t = u & 0xF;
f0000b44:       |     |  |  |      893d                 andi    a0,a0,15
f0000b46:       |     |  |  |      85b2                 mv      a1,a2
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:138
      if (t >= 10)
f0000b48:       |     |  |  |  /-- 00a76363             bltu    a4,a0,f0000b4e <qprinti+0x54>
f0000b4c:       |     |  |  |  |   4581                 li      a1,0
f0000b4e:       |     |  |  |  \-> 952e                 add     a0,a0,a1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:141
      *--s = t + '0';
f0000b50:       |     |  |  |      03050513             addi    a0,a0,48
f0000b54:       |     |  |  |      fff68413             addi    s0,a3,-1
f0000b58:       |     |  |  |      fea68fa3             sb      a0,-1(a3)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:142
      u >>= 4;
f0000b5c:       |     |  |  |      0044d513             srli    a0,s1,0x4
f0000b60:       |     |  |  |      86a2                 mv      a3,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:135
    while (u) {
f0000b62:       |     |  |  \----- fef4f0e3             bgeu    s1,a5,f0000b42 <qprinti+0x48>
f0000b66:       |     |  |  /----- a8ad                 j       f0000be0 <qprinti+0xe6>
f0000b68:       |     \--|--|----> 03000513             li      a0,48
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:118
    print_buf[0] = '0';
f0000b6c:       |        |  |      00a10623             sb      a0,12(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:119
    print_buf[1] = '\0';
f0000b70:       |        |  |      000106a3             sb      zero,13(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:120
    return qprints (out, print_buf, width, pad);
f0000b74:       |        |  |      0068                 addi    a0,sp,12
f0000b76:       |        |  |      85ce                 mv      a1,s3
f0000b78:       |        |  |      864a                 mv      a2,s2
f0000b7a:       |        |  |      3d55                 jal     f0000a2e <qprints>
f0000b7c:       |  /-----|--|----- a065                 j       f0000c24 <qprinti+0x12a>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:146
    while (u) {
f0000b7e:       +--|-----\--|----X c541                 beqz    a0,f0000c06 <qprinti+0x10c>
f0000b80:       |  |        |      1999a5b7             lui     a1,0x1999a
f0000b84:       |  |        |      99958593             addi    a1,a1,-1639 # 19999999 <_ottf_size+0x19919999>
f0000b88:       |  |        |      f0001717             auipc   a4,0xf0001
f0000b8c:       |  |        |      43c70713             addi    a4,a4,1084 # e0001fc4 <remu10_table>
f0000b90:       |  |        |      57d9                 li      a5,-10
remu10():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:58
  n = (0x19999999 * n + (n >> 1) + (n >> 3)) >> 28;
f0000b92:       |  |        |  /-> 02b50633             mul     a2,a0,a1
f0000b96:       |  |        |  |   00155493             srli    s1,a0,0x1
f0000b9a:       |  |        |  |   9626                 add     a2,a2,s1
f0000b9c:       |  |        |  |   00355413             srli    s0,a0,0x3
f0000ba0:       |  |        |  |   9622                 add     a2,a2,s0
f0000ba2:       |  |        |  |   8271                 srli    a2,a2,0x1c
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:59
  return remu10_table[n];
f0000ba4:       |  |        |  |   963a                 add     a2,a2,a4
f0000ba6:       |  |        |  |   00060603             lb      a2,0(a2)
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:147
      *--s = remu10(u) + '0';
f0000baa:       |  |        |  |   03060613             addi    a2,a2,48
divu10():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:42
  q = (n >> 1) + (n >> 2);
f0000bae:       |  |        |  |   00255413             srli    s0,a0,0x2
f0000bb2:       |  |        |  |   94a2                 add     s1,s1,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:43
  q = q + (q >> 4);
f0000bb4:       |  |        |  |   0044d413             srli    s0,s1,0x4
f0000bb8:       |  |        |  |   94a2                 add     s1,s1,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:44
  q = q + (q >> 8);
f0000bba:       |  |        |  |   0084d413             srli    s0,s1,0x8
f0000bbe:       |  |        |  |   94a2                 add     s1,s1,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:45
  q = q + (q >> 16);
f0000bc0:       |  |        |  |   0104d413             srli    s0,s1,0x10
f0000bc4:       |  |        |  |   94a2                 add     s1,s1,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:46
  q = q >> 3;
f0000bc6:       |  |        |  |   808d                 srli    s1,s1,0x3
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:47
  r = n - q * 10;
f0000bc8:       |  |        |  |   02f48433             mul     s0,s1,a5
f0000bcc:       |  |        |  |   9522                 add     a0,a0,s0
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:147
      *--s = remu10(u) + '0';
f0000bce:       |  |        |  |   fff68413             addi    s0,a3,-1
divu10():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:49
  return q + ((r + 6) >> 4);
f0000bd2:       |  |        |  |   0519                 addi    a0,a0,6
f0000bd4:       |  |        |  |   8111                 srli    a0,a0,0x4
f0000bd6:       |  |        |  |   9526                 add     a0,a0,s1
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:147
      *--s = remu10(u) + '0';
f0000bd8:       |  |        |  |   fec68fa3             sb      a2,-1(a3)
f0000bdc:       |  |        |  |   86a2                 mv      a3,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:146
    while (u) {
f0000bde:       |  |        |  \-- f955                 bnez    a0,f0000b92 <qprinti+0x98>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:152
  if (neg) {
f0000be0:       |  |  /-----\----X 02080663             beqz    a6,f0000c0c <qprinti+0x112>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:153
    if( width && (pad & PAD_ZERO) )
f0000be4:       |  |  |  /-------> 0019b513             seqz    a0,s3
f0000be8:       |  |  |  |         00297593             andi    a1,s2,2
f0000bec:       |  |  |  |         0015b593             seqz    a1,a1
f0000bf0:       |  |  |  |         8d4d                 or      a0,a0,a1
f0000bf2:       |  |  |  |  /----- cd19                 beqz    a0,f0000c10 <qprinti+0x116>
f0000bf4:       |  |  |  |  |      4481                 li      s1,0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:161
      *--s = '-';
f0000bf6:       |  |  |  |  |      fff40513             addi    a0,s0,-1
f0000bfa:       |  |  |  |  |      02d00593             li      a1,45
f0000bfe:       |  |  |  |  |      feb40fa3             sb      a1,-1(s0)
f0000c02:       |  |  |  |  |      842a                 mv      s0,a0
f0000c04:       |  |  |  |  |  /-- a819                 j       f0000c1a <qprinti+0x120>
f0000c06:       \--|--|--|--|--|-> 8436                 mv      s0,a3
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:152
  if (neg) {
f0000c08:          |  |  \--|--|-- fc081ee3             bnez    a6,f0000be4 <qprinti+0xea>
f0000c0c:          |  \-----|--|-> 4481                 li      s1,0
f0000c0e:          |        |  +-- a031                 j       f0000c1a <qprinti+0x120>
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000c10:          |        \--|-> 02d00513             li      a0,45
f0000c14:          |           |   3151                 jal     f0000898 <uart_sendchar>
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:157
      --width;
f0000c16:          |           |   19fd                 addi    s3,s3,-1
f0000c18:          |           |   4485                 li      s1,1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:164
  return pc + qprints (out, s, width, pad);
f0000c1a:          |           \-> 8522                 mv      a0,s0
f0000c1c:          |               85ce                 mv      a1,s3
f0000c1e:          |               864a                 mv      a2,s2
f0000c20:          |               3539                 jal     f0000a2e <qprints>
f0000c22:          |               9526                 add     a0,a0,s1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:165
}
f0000c24:          \-------------> 59b2                 lw      s3,44(sp)
f0000c26:                          5942                 lw      s2,48(sp)
f0000c28:                          54d2                 lw      s1,52(sp)
f0000c2a:                          5462                 lw      s0,56(sp)
f0000c2c:                          50f2                 lw      ra,60(sp)
f0000c2e:                          6121                 addi    sp,sp,64
f0000c30:                          8082                 ret

f0000c32 <pinmux_init>:
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:127
  abs_mmio_write32(
      kBase + PINMUX_MIO_OUTSEL_0_REG_OFFSET + output.mio * sizeof(uint32_t),
      output.outsel);
}

void pinmux_init(void) {
f0000c32:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:129
  uint32_t bootstrap_en =
      otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_BOOTSTRAP_EN_OFFSET);
f0000c34:              c606                     sw      ra,12(sp)
f0000c36:              36400513                 li      a0,868
f0000c3a:              2899                     jal     f0000c90 <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
  // > of statements.

  // The +r constraint tells the compiler that this is an "inout" parameter: it
  // means that not only does the black box depend on `val`, but it also mutates
  // it in an unspecified way.
  asm volatile("" : "+r"(val));
f0000c3c:              862a                     mv      a2,a0
f0000c3e:              73900593                 li      a1,1849
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:130
  if (launder32(bootstrap_en) == kHardenedBoolTrue) {
f0000c42:       /----- 02b61b63                 bne     a2,a1,f0000c78 <pinmux_init+0x46>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:131
    HARDENED_CHECK_EQ(bootstrap_en, kHardenedBoolTrue);
f0000c46:       |  /-- 00b50663                 beq     a0,a1,f0000c52 <pinmux_init+0x20>
f0000c4a:       |  |   0000                     unimp
f0000c4c:       |  |   0000                     unimp
f0000c4e:       |  |   0000                     unimp
f0000c50:       |  |   0000                     unimp
f0000c52:       |  \-> c0460537                 lui     a0,0xc0460
f0000c56:       |      4591                     li      a1,4
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
 *
 * @param addr the address to write to.
 * @param value the value to write.
 */
inline void abs_mmio_write32(uint32_t addr, uint32_t value) {
  *((volatile uint32_t *)addr) = value;
f0000c58:       |      44b52c23                 sw      a1,1112(a0) # c0460458 <_non_volatile_scratch_end+0xd03e0458>
f0000c5c:       |      44b52e23                 sw      a1,1116(a0)
f0000c60:       |      46b52023                 sw      a1,1120(a0)
f0000c64:       |      45e1                     li      a1,24
f0000c66:       |      14b52023                 sw      a1,320(a0)
f0000c6a:       |      45e5                     li      a1,25
f0000c6c:       |      14b52223                 sw      a1,324(a0)
f0000c70:       |      14850513                 addi    a0,a0,328
f0000c74:       |      45e9                     li      a1,26
f0000c76:       |      c10c                     sw      a1,0(a0)
f0000c78:       \----> c0460537                 lui     a0,0xc0460
f0000c7c:              45ed                     li      a1,27
f0000c7e:              18b52823                 sw      a1,400(a0) # c0460190 <_non_volatile_scratch_end+0xd03e0190>
f0000c82:              02d00593                 li      a1,45
f0000c86:              2eb52823                 sw      a1,752(a0)
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:144
    configure_input(kInputSwStrap2);
  }

  configure_input(kInputUart0);
  configure_output(kOutputUart0);
}
f0000c8a:              40b2                     lw      ra,12(sp)
f0000c8c:              0141                     addi    sp,sp,16
f0000c8e:              8082                     ret

f0000c90 <otp_read32>:
otp_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:18
#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"
#include "otp_ctrl_regs.h"  // Generated.

enum { kBase = TOP_EARLGREY_OTP_CTRL_CORE_BASE_ADDR };

uint32_t otp_read32(uint32_t address) {
f0000c90:       c01315b7                lui     a1,0xc0131
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:19
  return sec_mmio_read32(kBase + OTP_CTRL_SW_CFG_WINDOW_REG_OFFSET + address);
f0000c94:       952e                    add     a0,a0,a1
f0000c96:       6c80006f                j       f000135e <sec_mmio_read32>

f0000c9a <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:49
// A global random number generator testutil handle.
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(void) {
f0000c9a:           1101                        addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:50
  if (pxCurrentTCB != NULL) {
f0000c9c:           ce06                        sw      ra,28(sp)
f0000c9e:           f0001517            auipc   a0,0xf0001
f0000ca2:           3c650513            addi    a0,a0,966 # e0002064 <pxCurrentTCB>
f0000ca6:           4108                        lw      a0,0(a0)
f0000ca8:       /-- c509                        beqz    a0,f0000cb2 <ottf_machine_ecall_handler+0x18>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:54
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
f0000caa:       |   40f2                        lw      ra,28(sp)
f0000cac:       |   6105                        addi    sp,sp,32
f0000cae:       |   1a50006f            j       f0001652 <vTaskSwitchContext>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:57
    return;
  }
  LOG_ERROR(
f0000cb2:       \-> 00003517            auipc   a0,0x3
f0000cb6:           a2250513            addi    a0,a0,-1502 # f00036d4 <kDeviceLogBypassUartAddress>
f0000cba:           4108                        lw      a0,0(a0)
f0000cbc:       /-- c911                        beqz    a0,f0000cd0 <ottf_machine_ecall_handler+0x36>
f0000cbe:       |   1000f517            auipc   a0,0x1000f
f0000cc2:       |   34250513            addi    a0,a0,834 # 10000 <_non_volatile_scratch_end+0xff90000>
f0000cc6:       |   4581                        li      a1,0
f0000cc8:       |   40f2                        lw      ra,28(sp)
f0000cca:       |   6105                        addi    sp,sp,32
f0000ccc:       |   0a40106f            j       f0001d70 <base_log_internal_dv>
f0000cd0:       \-> 00002597            auipc   a1,0x2
f0000cd4:           eb858593            addi    a1,a1,-328 # f0002b88 <kOttfTestConfig+0x274>
f0000cd8:           0028                        addi    a0,sp,8
f0000cda:           4651                        li      a2,20
f0000cdc:           16b010ef            jal     ra,f0002646 <memcpy>
f0000ce0:           0028                        addi    a0,sp,8
f0000ce2:           7ed000ef            jal     ra,f0001cce <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:60
      "OTTF currently only supports use of machine-mode ecall for FreeRTOS "
      "context switching.");
}
f0000ce6:           40f2                        lw      ra,28(sp)
f0000ce8:           6105                        addi    sp,sp,32
f0000cea:           8082                        ret

f0000cec <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:120
  report_test_status(result);
}

dif_uart_t *ottf_console(void) { return &uart0; }

void _ottf_main(void) {
f0000cec:                 7179                  addi    sp,sp,-48
f0000cee:                 d606                  sw      ra,44(sp)
f0000cf0:                 d422                  sw      s0,40(sp)
f0000cf2:                 d226                  sw      s1,36(sp)
f0000cf4:                 d04a                  sw      s2,32(sp)
f0000cf6:                 6511                  lui     a0,0x4
f0000cf8:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x354>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:121
  test_status_set(kTestStatusInTest);
f0000cfc:                 70d000ef              jal     ra,f0001c08 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:124

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
f0000d00:                 00003517              auipc   a0,0x3
f0000d04:                 9b850513              addi    a0,a0,-1608 # f00036b8 <kDeviceType>
f0000d08:                 4108                  lw      a0,0(a0)
f0000d0a:                 00003917              auipc   s2,0x3
f0000d0e:                 9ca90913              addi    s2,s2,-1590 # f00036d4 <kDeviceLogBypassUartAddress>
f0000d12:                 00002497              auipc   s1,0x2
f0000d16:                 c0248493              addi    s1,s1,-1022 # f0002914 <kOttfTestConfig>
f0000d1a:          /----- c91d                  beqz    a0,f0000d50 <_ottf_main+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    init_uart();
f0000d1c:          |      2211                  jal     f0000e20 <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:126
    LOG_INFO("Running %s", kOttfTestConfig.file);
f0000d1e:          |      00092503              lw      a0,0(s2)
f0000d22:          |      40c0                  lw      s0,4(s1)
f0000d24:          |  /-- c911                  beqz    a0,f0000d38 <_ottf_main+0x4c>
f0000d26:          |  |   1000f517              auipc   a0,0x1000f
f0000d2a:          |  |   2ee50513              addi    a0,a0,750 # 10014 <_non_volatile_scratch_end+0xff90014>
f0000d2e:          |  |   4585                  li      a1,1
f0000d30:          |  |   8622                  mv      a2,s0
f0000d32:          |  |   03e010ef              jal     ra,f0001d70 <base_log_internal_dv>
f0000d36:          +--|-- a829                  j       f0000d50 <_ottf_main+0x64>
f0000d38:          |  \-> 00002597              auipc   a1,0x2
f0000d3c:          |      e6458593              addi    a1,a1,-412 # f0002b9c <kOttfTestConfig+0x288>
f0000d40:          |      850a                  mv      a0,sp
f0000d42:          |      4651                  li      a2,20
f0000d44:          |      103010ef              jal     ra,f0002646 <memcpy>
f0000d48:          |      850a                  mv      a0,sp
f0000d4a:          |      85a2                  mv      a1,s0
f0000d4c:          |      783000ef              jal     ra,f0001cce <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:132
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
f0000d50:          \----> c11f0537              lui     a0,0xc11f0
f0000d54:                 082c                  addi    a1,sp,24
f0000d56:                 6a5000ef              jal     ra,f0001bfa <dif_rv_core_ibex_init>
f0000d5a:       /-------- cd1d                  beqz    a0,f0000d98 <_ottf_main+0xac>
f0000d5c:       |         842a                  mv      s0,a0
f0000d5e:       |         00092503              lw      a0,0(s2)
f0000d62:       |     /-- c911                  beqz    a0,f0000d76 <_ottf_main+0x8a>
f0000d64:       |     |   1000f517              auipc   a0,0x1000f
f0000d68:       |     |   2c450513              addi    a0,a0,708 # 10028 <_non_volatile_scratch_end+0xff90028>
f0000d6c:       |     |   4585                  li      a1,1
f0000d6e:       |     |   8622                  mv      a2,s0
f0000d70:       |     |   000010ef              jal     ra,f0001d70 <base_log_internal_dv>
f0000d74:       |  /--|-- a829                  j       f0000d8e <_ottf_main+0xa2>
f0000d76:       |  |  \-> 00002597              auipc   a1,0x2
f0000d7a:       |  |      e3a58593              addi    a1,a1,-454 # f0002bb0 <kOttfTestConfig+0x29c>
f0000d7e:       |  |      850a                  mv      a0,sp
f0000d80:       |  |      4651                  li      a2,20
f0000d82:       |  |      0c5010ef              jal     ra,f0002646 <memcpy>
f0000d86:       |  |      850a                  mv      a0,sp
f0000d88:       |  |      85a2                  mv      a1,s0
f0000d8a:       |  |      745000ef              jal     ra,f0001cce <base_log_internal_core>
f0000d8e:       |  \----> 6531                  lui     a0,0xc
f0000d90:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000d94:       |         675000ef              jal     ra,f0001c08 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:135
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
f0000d98:       \-------> 850a                  mv      a0,sp
f0000d9a:                 082c                  addi    a1,sp,24
f0000d9c:                 5d5000ef              jal     ra,f0001b70 <rand_testutils_init>
f0000da0:                 f0001517              auipc   a0,0xf0001
f0000da4:                 31450513              addi    a0,a0,788 # e00020b4 <rand_testutils_rng_ctx>
f0000da8:                 858a                  mv      a1,sp
f0000daa:                 4661                  li      a2,24
f0000dac:                 09b010ef              jal     ra,f0002646 <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:138

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
f0000db0:                 0004c503              lbu     a0,0(s1)
f0000db4:          /----- c11d                  beqz    a0,f0000dda <_ottf_main+0xee>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:65
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
f0000db6:          |      00000517              auipc   a0,0x0
f0000dba:          |      14450513              addi    a0,a0,324 # f0000efa <test_wrapper>
f0000dbe:          |      00002597              auipc   a1,0x2
f0000dc2:          |      c7358593              addi    a1,a1,-909 # f0002a31 <kOttfTestConfig+0x11d>
f0000dc6:          |      10000613              li      a2,256
f0000dca:          |      4705                  li      a4,1
f0000dcc:          |      4681                  li      a3,0
f0000dce:          |      4781                  li      a5,0
f0000dd0:          |      642000ef              jal     ra,f0001412 <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", kOttfFreeRtosMinStackSize, 0);
    vTaskStartScheduler();
f0000dd4:          |      16b000ef              jal     ra,f000173e <vTaskStartScheduler>
f0000dd8:          |  /-- a019                  j       f0000dde <_ottf_main+0xf2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:146
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
f0000dda:          \--|-> 4501                  li      a0,0
f0000ddc:             |   2a39                  jal     f0000efa <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:150
  }

  // Unreachable.
  CHECK(false);
f0000dde:             \-> 00092503              lw      a0,0(s2)
f0000de2:             /-- c909                  beqz    a0,f0000df4 <_ottf_main+0x108>
f0000de4:             |   1000f517              auipc   a0,0x1000f
f0000de8:             |   25850513              addi    a0,a0,600 # 1003c <_non_volatile_scratch_end+0xff9003c>
f0000dec:             |   4581                  li      a1,0
f0000dee:             |   783000ef              jal     ra,f0001d70 <base_log_internal_dv>
f0000df2:          /--|-- a821                  j       f0000e0a <_ottf_main+0x11e>
f0000df4:          |  \-> 00002597              auipc   a1,0x2
f0000df8:          |      dd058593              addi    a1,a1,-560 # f0002bc4 <kOttfTestConfig+0x2b0>
f0000dfc:          |      850a                  mv      a0,sp
f0000dfe:          |      4651                  li      a2,20
f0000e00:          |      047010ef              jal     ra,f0002646 <memcpy>
f0000e04:          |      850a                  mv      a0,sp
f0000e06:          |      6c9000ef              jal     ra,f0001cce <base_log_internal_core>
f0000e0a:          \----> 6531                  lui     a0,0xc
f0000e0c:                 aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000e10:                 5f9000ef              jal     ra,f0001c08 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:151
}
f0000e14:                 5902                  lw      s2,32(sp)
f0000e16:                 5492                  lw      s1,36(sp)
f0000e18:                 5422                  lw      s0,40(sp)
f0000e1a:                 50b2                  lw      ra,44(sp)
f0000e1c:                 6145                  addi    sp,sp,48
f0000e1e:                 8082                  ret

f0000e20 <init_uart>:
init_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:81
static void init_uart(void) {
f0000e20:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:82
  CHECK_DIF_OK(dif_uart_init(
f0000e22:                 ce06                  sw      ra,28(sp)
f0000e24:                 cc22                  sw      s0,24(sp)
f0000e26:                 ca26                  sw      s1,20(sp)
f0000e28:                 f0001597              auipc   a1,0xf0001
f0000e2c:                 23058593              addi    a1,a1,560 # e0002058 <uart0>
f0000e30:                 c0000537              lui     a0,0xc0000
f0000e34:                 678010ef              jal     ra,f00024ac <dif_uart_init>
f0000e38:                 00003497              auipc   s1,0x3
f0000e3c:                 89c48493              addi    s1,s1,-1892 # f00036d4 <kDeviceLogBypassUartAddress>
f0000e40:       /-------- cd15                  beqz    a0,f0000e7c <init_uart+0x5c>
f0000e42:       |         842a                  mv      s0,a0
f0000e44:       |         4088                  lw      a0,0(s1)
f0000e46:       |     /-- c911                  beqz    a0,f0000e5a <init_uart+0x3a>
f0000e48:       |     |   1000f517              auipc   a0,0x1000f
f0000e4c:       |     |   20850513              addi    a0,a0,520 # 10050 <_non_volatile_scratch_end+0xff90050>
f0000e50:       |     |   4585                  li      a1,1
f0000e52:       |     |   8622                  mv      a2,s0
f0000e54:       |     |   71d000ef              jal     ra,f0001d70 <base_log_internal_dv>
f0000e58:       |  /--|-- a829                  j       f0000e72 <init_uart+0x52>
f0000e5a:       |  |  \-> 00002597              auipc   a1,0x2
f0000e5e:       |  |      d7e58593              addi    a1,a1,-642 # f0002bd8 <kOttfTestConfig+0x2c4>
f0000e62:       |  |      850a                  mv      a0,sp
f0000e64:       |  |      4651                  li      a2,20
f0000e66:       |  |      7e0010ef              jal     ra,f0002646 <memcpy>
f0000e6a:       |  |      850a                  mv      a0,sp
f0000e6c:       |  |      85a2                  mv      a1,s0
f0000e6e:       |  |      661000ef              jal     ra,f0001cce <base_log_internal_core>
f0000e72:       |  \----> 6531                  lui     a0,0xc
f0000e74:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000e78:       |         591000ef              jal     ra,f0001c08 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:84
  CHECK_DIF_OK(
f0000e7c:       \-------> 00003517              auipc   a0,0x3
f0000e80:                 84c50513              addi    a0,a0,-1972 # f00036c8 <kUartBaudrate>
f0000e84:                 4108                  lw      a0,0(a0)
f0000e86:                 00003597              auipc   a1,0x3
f0000e8a:                 83a58593              addi    a1,a1,-1990 # f00036c0 <kClockFreqPeripheralHz>
f0000e8e:                 418c                  lw      a1,0(a1)
f0000e90:                 c02a                  sw      a0,0(sp)
f0000e92:                 c22e                  sw      a1,4(sp)
f0000e94:                 c402                  sw      zero,8(sp)
f0000e96:                 4505                  li      a0,1
f0000e98:                 c62a                  sw      a0,12(sp)
f0000e9a:                 f0001517              auipc   a0,0xf0001
f0000e9e:                 1be50513              addi    a0,a0,446 # e0002058 <uart0>
f0000ea2:                 858a                  mv      a1,sp
f0000ea4:                 616010ef              jal     ra,f00024ba <dif_uart_configure>
f0000ea8:       /-------- cd15                  beqz    a0,f0000ee4 <init_uart+0xc4>
f0000eaa:       |         842a                  mv      s0,a0
f0000eac:       |         4088                  lw      a0,0(s1)
f0000eae:       |     /-- c911                  beqz    a0,f0000ec2 <init_uart+0xa2>
f0000eb0:       |     |   1000f517              auipc   a0,0x1000f
f0000eb4:       |     |   1b450513              addi    a0,a0,436 # 10064 <_non_volatile_scratch_end+0xff90064>
f0000eb8:       |     |   4585                  li      a1,1
f0000eba:       |     |   8622                  mv      a2,s0
f0000ebc:       |     |   6b5000ef              jal     ra,f0001d70 <base_log_internal_dv>
f0000ec0:       |  /--|-- a829                  j       f0000eda <init_uart+0xba>
f0000ec2:       |  |  \-> 00002597              auipc   a1,0x2
f0000ec6:       |  |      d2a58593              addi    a1,a1,-726 # f0002bec <kOttfTestConfig+0x2d8>
f0000eca:       |  |      850a                  mv      a0,sp
f0000ecc:       |  |      4651                  li      a2,20
f0000ece:       |  |      778010ef              jal     ra,f0002646 <memcpy>
f0000ed2:       |  |      850a                  mv      a0,sp
f0000ed4:       |  |      85a2                  mv      a1,s0
f0000ed6:       |  |      5f9000ef              jal     ra,f0001cce <base_log_internal_core>
f0000eda:       |  \----> 6531                  lui     a0,0xc
f0000edc:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000ee0:       |         529000ef              jal     ra,f0001c08 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:91
  base_uart_stdout(&uart0);
f0000ee4:       \-------> f0001517              auipc   a0,0xf0001
f0000ee8:                 17450513              addi    a0,a0,372 # e0002058 <uart0>
f0000eec:                 6bd000ef              jal     ra,f0001da8 <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:92
}
f0000ef0:                 44d2                  lw      s1,20(sp)
f0000ef2:                 4462                  lw      s0,24(sp)
f0000ef4:                 40f2                  lw      ra,28(sp)
f0000ef6:                 6105                  addi    sp,sp,32
f0000ef8:                 8082                  ret

f0000efa <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:110
static void test_wrapper(void *task_parameters) {
f0000efa:                 1101                  addi    sp,sp,-32
f0000efc:                 ce06                  sw      ra,28(sp)
f0000efe:                 cc22                  sw      s0,24(sp)
f0000f00:                 ca26                  sw      s1,20(sp)
f0000f02:                 6531                  lui     a0,0xc
f0000f04:                 aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:112
  bool result = manufacturer_pre_test_hook();
f0000f08:                 461000ef              jal     ra,f0001b68 <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:113
  result = result && test_main();
f0000f0c:          /----- cd09                  beqz    a0,f0000f26 <test_wrapper+0x2c>
f0000f0e:          |      3209                  jal     f0000810 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  result = result && manufacturer_post_test_hook();
f0000f10:          +----- c919                  beqz    a0,f0000f26 <test_wrapper+0x2c>
f0000f12:          |      45b000ef              jal     ra,f0001b6c <manufacturer_post_test_hook>
f0000f16:          |  /-- e509                  bnez    a0,f0000f20 <test_wrapper+0x26>
f0000f18:          |  |   6531                  lui     a0,0xc
f0000f1a:          |  |   aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000f1e:          +--|-- a021                  j       f0000f26 <test_wrapper+0x2c>
f0000f20:          |  \-> 6525                  lui     a0,0x9
f0000f22:          |      00d50413              addi    s0,a0,13 # 900d <_non_volatile_scratch_size+0x400d>
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:96
  if (kDeviceType != kDeviceSimDV) {
f0000f26:          \----> 00002517              auipc   a0,0x2
f0000f2a:                 79250513              addi    a0,a0,1938 # f00036b8 <kDeviceType>
f0000f2e:                 4108                  lw      a0,0(a0)
f0000f30:       /-------- c531                  beqz    a0,f0000f7c <test_wrapper+0x82>
f0000f32:       |         00002497              auipc   s1,0x2
f0000f36:       |         9e248493              addi    s1,s1,-1566 # f0002914 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:97
    if (kOttfTestConfig.can_clobber_uart) {
f0000f3a:       |         0014c503              lbu     a0,1(s1)
f0000f3e:       |     /-- c111                  beqz    a0,f0000f42 <test_wrapper+0x48>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:98
      init_uart();
f0000f40:       |     |   35c5                  jal     f0000e20 <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f0000f42:       |     \-> 00002517              auipc   a0,0x2
f0000f46:       |         79250513              addi    a0,a0,1938 # f00036d4 <kDeviceLogBypassUartAddress>
f0000f4a:       |         4108                  lw      a0,0(a0)
f0000f4c:       |         40c4                  lw      s1,4(s1)
f0000f4e:       |     /-- c911                  beqz    a0,f0000f62 <test_wrapper+0x68>
f0000f50:       |     |   1000f517              auipc   a0,0x1000f
f0000f54:       |     |   12850513              addi    a0,a0,296 # 10078 <_non_volatile_scratch_end+0xff90078>
f0000f58:       |     |   4585                  li      a1,1
f0000f5a:       |     |   8626                  mv      a2,s1
f0000f5c:       |     |   615000ef              jal     ra,f0001d70 <base_log_internal_dv>
f0000f60:       |  /--|-- a829                  j       f0000f7a <test_wrapper+0x80>
f0000f62:       |  |  \-> 00002597              auipc   a1,0x2
f0000f66:       |  |      c9e58593              addi    a1,a1,-866 # f0002c00 <kOttfTestConfig+0x2ec>
f0000f6a:       |  |      850a                  mv      a0,sp
f0000f6c:       |  |      4651                  li      a2,20
f0000f6e:       |  |      6d8010ef              jal     ra,f0002646 <memcpy>
f0000f72:       |  |      850a                  mv      a0,sp
f0000f74:       |  |      85a6                  mv      a1,s1
f0000f76:       |  |      559000ef              jal     ra,f0001cce <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
    test_coverage_send_buffer();
f0000f7a:       |  \----> 2809                  jal     f0000f8c <test_coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:104
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
f0000f7c:       \-------> 8522                  mv      a0,s0
f0000f7e:                 48b000ef              jal     ra,f0001c08 <test_status_set>
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:116
}
f0000f82:                 44d2                  lw      s1,20(sp)
f0000f84:                 4462                  lw      s0,24(sp)
f0000f86:                 40f2                  lw      ra,28(sp)
f0000f88:                 6105                  addi    sp,sp,32
f0000f8a:                 8082                  ret

f0000f8c <test_coverage_send_buffer>:
test_coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
f0000f8c:       8082                    ret

f0000f8e <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
f0000f8e:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
f0000f90:              ce06                     sw      ra,28(sp)
f0000f92:              00002517                 auipc   a0,0x2
f0000f96:              74250513                 addi    a0,a0,1858 # f00036d4 <kDeviceLogBypassUartAddress>
f0000f9a:              4108                     lw      a0,0(a0)
f0000f9c:       /----- ed09                     bnez    a0,f0000fb6 <vApplicationMallocFailedHook+0x28>
f0000f9e:       |      00002597                 auipc   a1,0x2
f0000fa2:       |      d2658593                 addi    a1,a1,-730 # f0002cc4 <kOttfTestConfig+0x3b0>
f0000fa6:       |      0028                     addi    a0,sp,8
f0000fa8:       |      4651                     li      a2,20
f0000faa:       |      69c010ef                 jal     ra,f0002646 <memcpy>
f0000fae:       |      0028                     addi    a0,sp,8
f0000fb0:       |      51f000ef                 jal     ra,f0001cce <base_log_internal_core>
f0000fb4:       |  /-- a801                     j       f0000fc4 <vApplicationMallocFailedHook+0x36>
f0000fb6:       \--|-> 1000f517                 auipc   a0,0x1000f
f0000fba:          |   0d650513                 addi    a0,a0,214 # 1008c <_non_volatile_scratch_end+0xff9008c>
f0000fbe:          |   4581                     li      a1,0
f0000fc0:          |   5b1000ef                 jal     ra,f0001d70 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:20
  irq_global_ctrl(false);
f0000fc4:          \-> 4501                     li      a0,0
f0000fc6:              2085                     jal     f0001026 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
  abort();
f0000fc8:              4ef000ef                 jal     ra,f0001cb6 <abort>

f0000fcc <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:28

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
f0000fcc:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s");
f0000fce:              ce06                     sw      ra,28(sp)
f0000fd0:              00002517                 auipc   a0,0x2
f0000fd4:              70450513                 addi    a0,a0,1796 # f00036d4 <kDeviceLogBypassUartAddress>
f0000fd8:              4108                     lw      a0,0(a0)
f0000fda:       /----- ed09                     bnez    a0,f0000ff4 <vApplicationStackOverflowHook+0x28>
f0000fdc:       |      00002597                 auipc   a1,0x2
f0000fe0:       |      cfc58593                 addi    a1,a1,-772 # f0002cd8 <kOttfTestConfig+0x3c4>
f0000fe4:       |      0028                     addi    a0,sp,8
f0000fe6:       |      4651                     li      a2,20
f0000fe8:       |      65e010ef                 jal     ra,f0002646 <memcpy>
f0000fec:       |      0028                     addi    a0,sp,8
f0000fee:       |      4e1000ef                 jal     ra,f0001cce <base_log_internal_core>
f0000ff2:       |  /-- a801                     j       f0001002 <vApplicationStackOverflowHook+0x36>
f0000ff4:       \--|-> 1000f517                 auipc   a0,0x1000f
f0000ff8:          |   0ac50513                 addi    a0,a0,172 # 100a0 <_non_volatile_scratch_end+0xff900a0>
f0000ffc:          |   4581                     li      a1,0
f0000ffe:          |   573000ef                 jal     ra,f0001d70 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  irq_global_ctrl(false);
f0001002:          \-> 4501                     li      a0,0
f0001004:              200d                     jal     f0001026 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:31
  abort();
f0001006:              4b1000ef                 jal     ra,f0001cb6 <abort>

f000100a <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
f000100a:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
f000100c:       c606                    sw      ra,12(sp)
f000100e:       4505                    li      a0,1
f0001010:       2089                    jal     f0001052 <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
f0001012:       4505                    li      a0,1
f0001014:       2015                    jal     f0001038 <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
f0001016:       4505                    li      a0,1
f0001018:       2881                    jal     f0001068 <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
f000101a:       d2eff0ef                jal     ra,f0000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
f000101e:       4501                    li      a0,0
f0001020:       40b2                    lw      ra,12(sp)
f0001022:       0141                    addi    sp,sp,16
f0001024:       8082                    ret

f0001026 <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
f0001026:       /-- c509                        beqz    a0,f0001030 <irq_global_ctrl+0xa>
f0001028:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
f000102a:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
f000102e:       |   8082                        ret
f0001030:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
f0001032:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
f0001036:           8082                        ret

f0001038 <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
f0001038:       /-- c519                        beqz    a0,f0001046 <irq_external_ctrl+0xe>
f000103a:       |   6505                        lui     a0,0x1
f000103c:       |   80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0001040:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001044:       |   8082                        ret
f0001046:       \-> 6505                        lui     a0,0x1
f0001048:           80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f000104c:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
f0001050:           8082                        ret

f0001052 <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
f0001052:       /-- c511                        beqz    a0,f000105e <irq_timer_ctrl+0xc>
f0001054:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0001058:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f000105c:       |   8082                        ret
f000105e:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001062:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
f0001066:           8082                        ret

f0001068 <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
f0001068:       /-- c509                        beqz    a0,f0001072 <irq_software_ctrl+0xa>
f000106a:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
f000106c:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001070:       |   8082                        ret
f0001072:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001074:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
f0001078:           8082                        ret

f000107a <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:56
    "Reserved",
    "Reserved",
    "Reserved",
};

void ottf_generic_fault_print(const char *reason, uint32_t mcause) {
f000107a:           7179                        addi    sp,sp,-48
f000107c:           d606                        sw      ra,44(sp)
f000107e:           d422                        sw      s0,40(sp)
f0001080:           d226                        sw      s1,36(sp)
f0001082:           d04a                        sw      s2,32(sp)
f0001084:           ce4e                        sw      s3,28(sp)
f0001086:           892e                        mv      s2,a1
f0001088:           89aa                        mv      s3,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:57
  uint32_t mepc = ibex_mepc_read();
f000108a:           43f000ef            jal     ra,f0001cc8 <ibex_mepc_read>
f000108e:           84aa                        mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f0001090:           433000ef            jal     ra,f0001cc2 <ibex_mtval_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f0001094:           00002597            auipc   a1,0x2
f0001098:           64058593            addi    a1,a1,1600 # f00036d4 <kDeviceLogBypassUartAddress>
f000109c:           418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f000109e:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f00010a0:       /-- c195                        beqz    a1,f00010c4 <ottf_generic_fault_print+0x4a>
f00010a2:       |   1000f517            auipc   a0,0x1000f
f00010a6:       |   01250513            addi    a0,a0,18 # 100b4 <_non_volatile_scratch_end+0xff900b4>
f00010aa:       |   4591                        li      a1,4
f00010ac:       |   864e                        mv      a2,s3
f00010ae:       |   86ca                        mv      a3,s2
f00010b0:       |   8726                        mv      a4,s1
f00010b2:       |   87a2                        mv      a5,s0
f00010b4:       |   49f2                        lw      s3,28(sp)
f00010b6:       |   5902                        lw      s2,32(sp)
f00010b8:       |   5492                        lw      s1,36(sp)
f00010ba:       |   5422                        lw      s0,40(sp)
f00010bc:       |   50b2                        lw      ra,44(sp)
f00010be:       |   6145                        addi    sp,sp,48
f00010c0:       |   4b10006f            j       f0001d70 <base_log_internal_dv>
f00010c4:       \-> 00002597            auipc   a1,0x2
f00010c8:           e9458593            addi    a1,a1,-364 # f0002f58 <kOttfTestConfig+0x644>
f00010cc:           0028                        addi    a0,sp,8
f00010ce:           4651                        li      a2,20
f00010d0:           576010ef            jal     ra,f0002646 <memcpy>
f00010d4:           0028                        addi    a0,sp,8
f00010d6:           85ce                        mv      a1,s3
f00010d8:           864a                        mv      a2,s2
f00010da:           86a6                        mv      a3,s1
f00010dc:           8722                        mv      a4,s0
f00010de:           3f1000ef            jal     ra,f0001cce <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:61
            mtval);
}
f00010e2:           49f2                        lw      s3,28(sp)
f00010e4:           5902                        lw      s2,32(sp)
f00010e6:           5492                        lw      s1,36(sp)
f00010e8:           5422                        lw      s0,40(sp)
f00010ea:           50b2                        lw      ra,44(sp)
f00010ec:           6145                        addi    sp,sp,48
f00010ee:           8082                        ret

f00010f0 <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:79
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(void) {
f00010f0:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
  uint32_t mcause = ibex_mcause_read();
f00010f2:           c606                        sw      ra,12(sp)
f00010f4:           3c9000ef            jal     ra,f0001cbc <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:82

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
f00010f8:           897d                        andi    a0,a0,31
f00010fa:           45ad                        li      a1,11
f00010fc:       /-- 02a5ef63            bltu    a1,a0,f000113a <ottf_exception_handler+0x4a>
f0001100:       |   050a                        slli    a0,a0,0x2
f0001102:       |   00002597            auipc   a1,0x2
f0001106:       |   bea58593            addi    a1,a1,-1046 # f0002cec <kOttfTestConfig+0x3d8>
f000110a:       |   952e                        add     a0,a0,a1
f000110c:       |   4108                        lw      a0,0(a0)
f000110e:       |   8502                        jr      a0
f0001110:       |   40b2                        lw      ra,12(sp)
f0001112:       |   0141                        addi    sp,sp,16
f0001114:       |   a025                        j       f000113c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:84
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler();
f0001116:       |   40b2                        lw      ra,12(sp)
f0001118:       |   0141                        addi    sp,sp,16
f000111a:       |   a00d                        j       f000113c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:87
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler();
f000111c:       |   40b2                        lw      ra,12(sp)
f000111e:       |   0141                        addi    sp,sp,16
f0001120:       |   a831                        j       f000113c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler();
f0001122:       |   40b2                        lw      ra,12(sp)
f0001124:       |   0141                        addi    sp,sp,16
f0001126:       |   a819                        j       f000113c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler();
f0001128:       |   40b2                        lw      ra,12(sp)
f000112a:       |   0141                        addi    sp,sp,16
f000112c:       |   a801                        j       f000113c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:105
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler();
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler();
f000112e:       |   40b2                        lw      ra,12(sp)
f0001130:       |   0141                        addi    sp,sp,16
f0001132:       |   a029                        j       f000113c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
      ottf_machine_ecall_handler();
f0001134:       |   40b2                        lw      ra,12(sp)
f0001136:       |   0141                        addi    sp,sp,16
f0001138:       |   b68d                        j       f0000c9a <ottf_machine_ecall_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:108
      break;
    default:
      generic_fault_handler();
f000113a:       \-> 2009                        jal     f000113c <ottf_breakpoint_handler>

f000113c <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:63
static void generic_fault_handler(void) {
f000113c:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:64
  uint32_t mcause = ibex_mcause_read();
f000113e:       c606                    sw      ra,12(sp)
f0001140:       37d000ef                jal     ra,f0001cbc <ibex_mcause_read>
f0001144:       85aa                    mv      a1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
  ottf_generic_fault_print(exception_reason[mcause & kIbexExcMax], mcause);
f0001146:       897d                    andi    a0,a0,31
f0001148:       050a                    slli    a0,a0,0x2
f000114a:       00002617                auipc   a2,0x2
f000114e:       e4a60613                addi    a2,a2,-438 # f0002f94 <exception_reason>
f0001152:       9532                    add     a0,a0,a2
f0001154:       4108                    lw      a0,0(a0)
f0001156:       3715                    jal     f000107a <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:66
  abort();
f0001158:       35f000ef                jal     ra,f0001cb6 <abort>

f000115c <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:141
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(void);

OT_WEAK
void ottf_software_isr(void) {
f000115c:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
  ottf_generic_fault_print("Software IRQ", ibex_mcause_read());
f000115e:       c606                    sw      ra,12(sp)
f0001160:       35d000ef                jal     ra,f0001cbc <ibex_mcause_read>
f0001164:       85aa                    mv      a1,a0
f0001166:       00002517                auipc   a0,0x2
f000116a:       c1350513                addi    a0,a0,-1005 # f0002d79 <kOttfTestConfig+0x465>
f000116e:       3731                    jal     f000107a <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:143
  abort();
f0001170:       347000ef                jal     ra,f0001cb6 <abort>

f0001174 <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:147
}

OT_WEAK
void ottf_timer_isr(void) {
f0001174:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
  ottf_generic_fault_print("Timer IRQ", ibex_mcause_read());
f0001176:       c606                    sw      ra,12(sp)
f0001178:       345000ef                jal     ra,f0001cbc <ibex_mcause_read>
f000117c:       85aa                    mv      a1,a0
f000117e:       00002517                auipc   a0,0x2
f0001182:       c0850513                addi    a0,a0,-1016 # f0002d86 <kOttfTestConfig+0x472>
f0001186:       3dd5                    jal     f000107a <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:149
  abort();
f0001188:       32f000ef                jal     ra,f0001cb6 <abort>

f000118c <ottf_flow_control_isr>:
ottf_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:153
}

OT_WEAK
bool ottf_flow_control_isr(void) { return false; }
f000118c:       4501                    li      a0,0
f000118e:       8082                    ret

f0001190 <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:156

OT_WEAK
void ottf_external_isr(void) {
f0001190:                    7179                       addi    sp,sp,-48
f0001192:                    d606                       sw      ra,44(sp)
f0001194:                    d422                       sw      s0,40(sp)
f0001196:                    d226                       sw      s1,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:159
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
f0001198:                    f0001517           auipc   a0,0xf0001
f000119c:                    ec850513           addi    a0,a0,-312 # e0002060 <ottf_plic>
f00011a0:                    1010                       addi    a2,sp,32
f00011a2:                    4581                       li      a1,0
f00011a4:                    2a21                       jal     f00012bc <dif_rv_plic_irq_claim>
f00011a6:                    00002497           auipc   s1,0x2
f00011aa:                    52e48493           addi    s1,s1,1326 # f00036d4 <kDeviceLogBypassUartAddress>
f00011ae:          /-------- cd15                       beqz    a0,f00011ea <ottf_external_isr+0x5a>
f00011b0:          |         842a                       mv      s0,a0
f00011b2:          |         4088                       lw      a0,0(s1)
f00011b4:          |     /-- c911                       beqz    a0,f00011c8 <ottf_external_isr+0x38>
f00011b6:          |     |   1000f517           auipc   a0,0x1000f
f00011ba:          |     |   f1250513           addi    a0,a0,-238 # 100c8 <_non_volatile_scratch_end+0xff900c8>
f00011be:          |     |   4585                       li      a1,1
f00011c0:          |     |   8622                       mv      a2,s0
f00011c2:          |     |   3af000ef           jal     ra,f0001d70 <base_log_internal_dv>
f00011c6:          |  /--|-- a829                       j       f00011e0 <ottf_external_isr+0x50>
f00011c8:          |  |  \-> 00002597           auipc   a1,0x2
f00011cc:          |  |      da458593           addi    a1,a1,-604 # f0002f6c <kOttfTestConfig+0x658>
f00011d0:          |  |      0028                       addi    a0,sp,8
f00011d2:          |  |      4651                       li      a2,20
f00011d4:          |  |      472010ef           jal     ra,f0002646 <memcpy>
f00011d8:          |  |      0028                       addi    a0,sp,8
f00011da:          |  |      85a2                       mv      a1,s0
f00011dc:          |  |      2f3000ef           jal     ra,f0001cce <base_log_internal_core>
f00011e0:          |  \----> 6531                       lui     a0,0xc
f00011e2:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00011e6:          |         223000ef           jal     ra,f0001c08 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:162

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
f00011ea:          \-------> 5502                       lw      a0,32(sp)
f00011ec:                    050a                       slli    a0,a0,0x2
f00011ee:                    00002597           auipc   a1,0x2
f00011f2:                    ece58593           addi    a1,a1,-306 # f00030bc <top_earlgrey_plic_interrupt_for_peripheral>
f00011f6:                    952e                       add     a0,a0,a1
f00011f8:                    4108                       lw      a0,0(a0)
f00011fa:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f00011fc:       /----------- 04b51e63           bne     a0,a1,f0001258 <ottf_external_isr+0xc8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:165
      ottf_flow_control_isr()) {
f0001200:       |            3771                       jal     f000118c <ottf_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f0001202:       +----------- c939                       beqz    a0,f0001258 <ottf_external_isr+0xc8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:167
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
f0001204:       |            5602                       lw      a2,32(sp)
f0001206:       |            f0001517           auipc   a0,0xf0001
f000120a:       |            e5a50513           addi    a0,a0,-422 # e0002060 <ottf_plic>
f000120e:       |            4581                       li      a1,0
f0001210:       |            28d1                       jal     f00012e4 <dif_rv_plic_irq_complete>
f0001212:       |  /-------- cd15                       beqz    a0,f000124e <ottf_external_isr+0xbe>
f0001214:       |  |         842a                       mv      s0,a0
f0001216:       |  |         4088                       lw      a0,0(s1)
f0001218:       |  |     /-- c911                       beqz    a0,f000122c <ottf_external_isr+0x9c>
f000121a:       |  |     |   1000f517           auipc   a0,0x1000f
f000121e:       |  |     |   ec250513           addi    a0,a0,-318 # 100dc <_non_volatile_scratch_end+0xff900dc>
f0001222:       |  |     |   4585                       li      a1,1
f0001224:       |  |     |   8622                       mv      a2,s0
f0001226:       |  |     |   34b000ef           jal     ra,f0001d70 <base_log_internal_dv>
f000122a:       |  |  /--|-- a829                       j       f0001244 <ottf_external_isr+0xb4>
f000122c:       |  |  |  \-> 00002597           auipc   a1,0x2
f0001230:       |  |  |      d5458593           addi    a1,a1,-684 # f0002f80 <kOttfTestConfig+0x66c>
f0001234:       |  |  |      0028                       addi    a0,sp,8
f0001236:       |  |  |      4651                       li      a2,20
f0001238:       |  |  |      40e010ef           jal     ra,f0002646 <memcpy>
f000123c:       |  |  |      0028                       addi    a0,sp,8
f000123e:       |  |  |      85a2                       mv      a1,s0
f0001240:       |  |  |      28f000ef           jal     ra,f0001cce <base_log_internal_core>
f0001244:       |  |  \----> 6531                       lui     a0,0xc
f0001246:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000124a:       |  |         1bf000ef           jal     ra,f0001c08 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:174
    return;
  }

  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
  abort();
}
f000124e:       |  \-------> 5492                       lw      s1,36(sp)
f0001250:       |            5422                       lw      s0,40(sp)
f0001252:       |            50b2                       lw      ra,44(sp)
f0001254:       |            6145                       addi    sp,sp,48
f0001256:       |            8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:172
  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
f0001258:       \----------> 265000ef           jal     ra,f0001cbc <ibex_mcause_read>
f000125c:                    85aa                       mv      a1,a0
f000125e:                    00002517           auipc   a0,0x2
f0001262:                    bd850513           addi    a0,a0,-1064 # f0002e36 <kOttfTestConfig+0x522>
f0001266:                    3d11                       jal     f000107a <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:173
  abort();
f0001268:                    24f000ef           jal     ra,f0001cb6 <abort>

f000126c <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:176

static void generic_internal_irq_handler(void) {
f000126c:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f000126e:       c606                    sw      ra,12(sp)
f0001270:       24d000ef                jal     ra,f0001cbc <ibex_mcause_read>
f0001274:       85aa                    mv      a1,a0
f0001276:       00002517                auipc   a0,0x2
f000127a:       cd450513                addi    a0,a0,-812 # f0002f4a <kOttfTestConfig+0x636>
f000127e:       3bf5                    jal     f000107a <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f0001280:       237000ef                jal     ra,f0001cb6 <abort>

f0001284 <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:190
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(void);

OT_WEAK
void ottf_internal_isr(void) {
f0001284:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:191
  uint32_t mcause = ibex_mcause_read();
f0001286:              c606                     sw      ra,12(sp)
f0001288:              235000ef                 jal     ra,f0001cbc <ibex_mcause_read>
f000128c:              800005b7                 lui     a1,0x80000
f0001290:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:192
  switch ((ibex_internal_irq_t)(mcause)) {
f0001292:          /-- 00b50863                 beq     a0,a1,f00012a2 <ottf_internal_isr+0x1e>
f0001296:          |   5581                     li      a1,-32
f0001298:       /--|-- 00b51863                 bne     a0,a1,f00012a8 <ottf_internal_isr+0x24>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:194
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler();
f000129c:       |  |   40b2                     lw      ra,12(sp)
f000129e:       |  |   0141                     addi    sp,sp,16
f00012a0:       |  |   b7f1                     j       f000126c <ottf_external_nmi_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:197
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler();
f00012a2:       |  \-> 40b2                     lw      ra,12(sp)
f00012a4:       |      0141                     addi    sp,sp,16
f00012a6:       |      b7d9                     j       f000126c <ottf_external_nmi_handler>
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f00012a8:       \----> 215000ef                 jal     ra,f0001cbc <ibex_mcause_read>
f00012ac:              85aa                     mv      a1,a0
f00012ae:              00002517                 auipc   a0,0x2
f00012b2:              c9c50513                 addi    a0,a0,-868 # f0002f4a <kOttfTestConfig+0x636>
f00012b6:              33d1                     jal     f000107a <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f00012b8:              1ff000ef                 jal     ra,f0001cb6 <abort>

f00012bc <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f00012bc:           00153693            seqz    a3,a0
f00012c0:           00b035b3            snez    a1,a1
f00012c4:           8dd5                        or      a1,a1,a3
f00012c6:           00163693            seqz    a3,a2
f00012ca:           8ecd                        or      a3,a3,a1
f00012cc:           458d                        li      a1,3
f00012ce:       /-- ea89                        bnez    a3,f00012e0 <dif_rv_plic_irq_claim+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
f00012d0:       |   4108                        lw      a0,0(a0)
f00012d2:       |   002005b7            lui     a1,0x200
f00012d6:       |   0591                        addi    a1,a1,4
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00012d8:       |   952e                        add     a0,a0,a1
f00012da:       |   4108                        lw      a0,0(a0)
f00012dc:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
f00012de:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
f00012e0:       \-> 852e                        mv      a0,a1
f00012e2:           8082                        ret

f00012e4 <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
f00012e4:           00153693            seqz    a3,a0
f00012e8:           00b035b3            snez    a1,a1
f00012ec:           8ecd                        or      a3,a3,a1
f00012ee:           458d                        li      a1,3
f00012f0:       /-- ea81                        bnez    a3,f0001300 <dif_rv_plic_irq_complete+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
f00012f2:       |   4108                        lw      a0,0(a0)
f00012f4:       |   4581                        li      a1,0
f00012f6:       |   002006b7            lui     a3,0x200
f00012fa:       |   0691                        addi    a3,a3,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00012fc:       |   9536                        add     a0,a0,a3
f00012fe:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
f0001300:       \-> 852e                        mv      a0,a1
f0001302:           8082                        ret

f0001304 <sec_mmio_init>:
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f0001304:           4601                        li      a2,0
f0001306:           4681                        li      a3,0
f0001308:           4701                        li      a4,0
f000130a:           4501                        li      a0,0
f000130c:           effff597            auipc   a1,0xeffff
f0001310:           d6858593            addi    a1,a1,-664 # e0000074 <sec_mmio_ctx>
sec_mmio_init():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:53
  // mechanism.
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
}

void sec_mmio_init(void) {
  sec_mmio_ctx.last_index = launder32(0);
f0001314:           c190                        sw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:54
  sec_mmio_ctx.write_count = launder32(0);
f0001316:           c1d4                        sw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:55
  sec_mmio_ctx.check_count = launder32(0);
f0001318:           c5d8                        sw      a4,12(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:56
  sec_mmio_ctx.expected_write_count = launder32(0);
f000131a:           c588                        sw      a0,8(a1)
f000131c:           3e800613            li      a2,1000
f0001320:           56fd                        li      a3,-1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:58
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
    sec_mmio_ctx.addrs[i] = UINT32_MAX;
f0001322:       /-> 7d858713            addi    a4,a1,2008
f0001326:       |   7cd72c23            sw      a3,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:59
    sec_mmio_ctx.values[i] = UINT32_MAX;
f000132a:       |   c994                        sw      a3,16(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:57
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
f000132c:       |   167d                        addi    a2,a2,-1
f000132e:       |   0591                        addi    a1,a1,4
f0001330:       \-- fa6d                        bnez    a2,f0001322 <sec_mmio_init+0x1e>
f0001332:           effff597            auipc   a1,0xeffff
f0001336:           d4258593            addi    a1,a1,-702 # e0000074 <sec_mmio_ctx>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:61
  }
  uint32_t check = kSecMmioValZero ^ sec_mmio_ctx.last_index;
f000133a:           4190                        lw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:62
  check ^= sec_mmio_ctx.write_count;
f000133c:           41d4                        lw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:63
  check ^= sec_mmio_ctx.check_count;
f000133e:           45cc                        lw      a1,12(a1)
f0001340:           8e35                        xor     a2,a2,a3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:64
  check ^= sec_mmio_ctx.expected_write_count;
f0001342:           8db1                        xor     a1,a1,a2
f0001344:           8d2d                        xor     a0,a0,a1
f0001346:           3ca595b7            lui     a1,0x3ca59
f000134a:           65a58593            addi    a1,a1,1626 # 3ca5965a <_ottf_size+0x3c9d965a>
f000134e:           8d2d                        xor     a0,a0,a1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:65
  HARDENED_CHECK_EQ(check, kSecMmioValZero);
f0001350:       /-- 00b50663            beq     a0,a1,f000135c <sec_mmio_init+0x58>
f0001354:       |   0000                        unimp
f0001356:       |   0000                        unimp
f0001358:       |   0000                        unimp
f000135a:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:66
}
f000135c:       \-> 8082                        ret

f000135e <sec_mmio_read32>:
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:78
    sec_mmio_ctx.values[i] = UINT32_MAX;
  }
  HARDENED_CHECK_EQ(sec_mmio_ctx.check_count, 0);
}

uint32_t sec_mmio_read32(uint32_t addr) {
f000135e:           1101                        addi    sp,sp,-32
f0001360:           ce06                        sw      ra,28(sp)
f0001362:           cc22                        sw      s0,24(sp)
f0001364:           ca26                        sw      s1,20(sp)
f0001366:           c84a                        sw      s2,16(sp)
f0001368:           c64e                        sw      s3,12(sp)
f000136a:           842a                        mv      s0,a0
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
f000136c:           00052903            lw      s2,0(a0)
f0001370:           21692537            lui     a0,0x21692
f0001374:           43650993            addi    s3,a0,1078 # 21692436 <_ottf_size+0x21612436>
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:80
  uint32_t value = abs_mmio_read32(addr);
  uint32_t masked_value = value ^ kSecMmioMaskVal;
f0001378:           013944b3            xor     s1,s2,s3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:82
  barrier32(masked_value);
  upsert_register(addr, masked_value);
f000137c:           8522                        mv      a0,s0
f000137e:           85a6                        mv      a1,s1
f0001380:           2015                        jal     f00013a4 <upsert_register>
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
f0001382:           4008                        lw      a0,0(s0)
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:83
  HARDENED_CHECK_EQ((abs_mmio_read32(addr) ^ kSecMmioMaskVal), masked_value);
f0001384:           01354533            xor     a0,a0,s3
f0001388:       /-- 00950663            beq     a0,s1,f0001394 <sec_mmio_read32+0x36>
f000138c:       |   0000                        unimp
f000138e:       |   0000                        unimp
f0001390:       |   0000                        unimp
f0001392:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:85

  return value;
f0001394:       \-> 854a                        mv      a0,s2
f0001396:           49b2                        lw      s3,12(sp)
f0001398:           4942                        lw      s2,16(sp)
f000139a:           44d2                        lw      s1,20(sp)
f000139c:           4462                        lw      s0,24(sp)
f000139e:           40f2                        lw      ra,28(sp)
f00013a0:           6105                        addi    sp,sp,32
f00013a2:           8082                        ret

f00013a4 <upsert_register>:
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:34
  const size_t last_index = sec_mmio_ctx.last_index;
f00013a4:                 effff817              auipc   a6,0xeffff
f00013a8:                 cd080813              addi    a6,a6,-816 # e0000074 <sec_mmio_ctx>
f00013ac:                 00082703              lw      a4,0(a6)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f00013b0:                 4781                  li      a5,0
f00013b2:                 4681                  li      a3,0
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
f00013b4:       /-------- 02e7f163              bgeu    a5,a4,f00013d6 <upsert_register+0x32>
f00013b8:       |         4681                  li      a3,0
f00013ba:       |         87c2                  mv      a5,a6
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:37
    if (sec_mmio_ctx.addrs[i] == addr) {
f00013bc:       |  /----> 7d878613              addi    a2,a5,2008
f00013c0:       |  |      7d862603              lw      a2,2008(a2)
f00013c4:       |  |  /-- 00a60863              beq     a2,a0,f00013d4 <upsert_register+0x30>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
f00013c8:       |  |  |   0685                  addi    a3,a3,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f00013ca:       |  |  |   8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
f00013cc:       |  |  |   0791                  addi    a5,a5,4
f00013ce:       |  \--|-- fee667e3              bltu    a2,a4,f00013bc <upsert_register+0x18>
f00013d2:       +-----|-- a011                  j       f00013d6 <upsert_register+0x32>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:38
      sec_mmio_ctx.values[i] = value;
f00013d4:       |     \-> cb8c                  sw      a1,16(a5)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f00013d6:       \-------> 8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
  if (launder32(i) == last_index && launder32(i) < kSecMmioRegFileSize) {
f00013d8:             /-- 02e61463              bne     a2,a4,f0001400 <upsert_register+0x5c>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f00013dc:             |   8636                  mv      a2,a3
f00013de:             |   3e700713              li      a4,999
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
f00013e2:             +-- 00c76f63              bltu    a4,a2,f0001400 <upsert_register+0x5c>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:43
    sec_mmio_ctx.addrs[i] = addr;
f00013e6:             |   00269613              slli    a2,a3,0x2
f00013ea:             |   9642                  add     a2,a2,a6
f00013ec:             |   7d860713              addi    a4,a2,2008
f00013f0:             |   7ca72c23              sw      a0,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:44
    sec_mmio_ctx.values[i] = value;
f00013f4:             |   ca0c                  sw      a1,16(a2)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:45
    ++sec_mmio_ctx.last_index;
f00013f6:             |   00082503              lw      a0,0(a6)
f00013fa:             |   0505                  addi    a0,a0,1
f00013fc:             |   00a82023              sw      a0,0(a6)
f0001400:             \-> 3e800513              li      a0,1000
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:49
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
f0001404:             /-- 00a6e663              bltu    a3,a0,f0001410 <upsert_register+0x6c>
f0001408:             |   0000                  unimp
f000140a:             |   0000                  unimp
f000140c:             |   0000                  unimp
f000140e:             |   0000                  unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:50
}
f0001410:             \-> 8082                  ret

f0001412 <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
f0001412:                    7179                       addi    sp,sp,-48
f0001414:                    d606                       sw      ra,44(sp)
f0001416:                    d422                       sw      s0,40(sp)
f0001418:                    d226                       sw      s1,36(sp)
f000141a:                    d04a                       sw      s2,32(sp)
f000141c:                    ce4e                       sw      s3,28(sp)
f000141e:                    cc52                       sw      s4,24(sp)
f0001420:                    ca56                       sw      s5,20(sp)
f0001422:                    c85a                       sw      s6,16(sp)
f0001424:                    c65e                       sw      s7,12(sp)
f0001426:                    c462                       sw      s8,8(sp)
f0001428:                    c266                       sw      s9,4(sp)
f000142a:                    8abe                       mv      s5,a5
f000142c:                    8b3a                       mv      s6,a4
f000142e:                    89b6                       mv      s3,a3
f0001430:                    84ae                       mv      s1,a1
f0001432:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
f0001434:                    00261913           slli    s2,a2,0x2
f0001438:                    854a                       mv      a0,s2
f000143a:                    256d                       jal     f0001ae4 <pvPortMalloc>
f000143c:                    5bfd                       li      s7,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
f000143e:       /----------- 1c050463           beqz    a0,f0001606 <xTaskCreate+0x1f4>
f0001442:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
f0001444:       |            04c00513           li      a0,76
f0001448:       |            2d71                       jal     f0001ae4 <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
f000144a:       |  /-------- c121                       beqz    a0,f000148a <xTaskCreate+0x78>
f000144c:       |  |         8c2a                       mv      s8,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
f000144e:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
f0001450:       |  |         00890533           add     a0,s2,s0
f0001454:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
f0001456:       |  |  /----- cc8d                       beqz    s1,f0001490 <xTaskCreate+0x7e>
f0001458:       |  |  |      4601                       li      a2,0
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
f000145a:       |  |  |      034c0593           addi    a1,s8,52
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
f000145e:       |  |  |  /-> 00c486b3           add     a3,s1,a2
f0001462:       |  |  |  |   00068703           lb      a4,0(a3)
f0001466:       |  |  |  |   00c587b3           add     a5,a1,a2
f000146a:       |  |  |  |   00e78023           sb      a4,0(a5)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
f000146e:       |  |  |  |   0006c683           lbu     a3,0(a3)
f0001472:       |  |  |  |   0016b693           seqz    a3,a3
f0001476:       |  |  |  |   ff160713           addi    a4,a2,-15
f000147a:       |  |  |  |   0605                       addi    a2,a2,1
f000147c:       |  |  |  |   00173713           seqz    a4,a4
f0001480:       |  |  |  |   8ed9                       or      a3,a3,a4
f0001482:       |  |  |  \-- def1                       beqz    a3,f000145e <xTaskCreate+0x4c>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
f0001484:       |  |  |      040c01a3           sb      zero,67(s8)
f0001488:       |  |  |  /-- a031                       j       f0001494 <xTaskCreate+0x82>
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
f000148a:       |  \--|--|-> 8522                       mv      a0,s0
f000148c:       |     |  |   2de9                       jal     f0001b66 <vPortFree>
f000148e:       +-----|--|-- aaa5                       j       f0001606 <xTaskCreate+0x1f4>
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
f0001490:       |     \--|-> 020c0a23           sb      zero,52(s8)
f0001494:       |        \-> 4591                       li      a1,4
f0001496:       |            ff057493           andi    s1,a0,-16
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
f000149a:       |        /-- 00bb6363           bltu    s6,a1,f00014a0 <xTaskCreate+0x8e>
f000149e:       |        |   4b11                       li      s6,4
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
f00014a0:       |        \-> 036c2623           sw      s6,44(s8)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
f00014a4:       |            004c0913           addi    s2,s8,4
f00014a8:       |            854a                       mv      a0,s2
f00014aa:       |            2d09                       jal     f0001abc <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
f00014ac:       |            018c0513           addi    a0,s8,24
f00014b0:       |            2531                       jal     f0001abc <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
f00014b2:       |            018c2823           sw      s8,16(s8)
f00014b6:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f00014b8:       |            41650533           sub     a0,a0,s6
f00014bc:       |            00ac2c23           sw      a0,24(s8)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
f00014c0:       |            038c2223           sw      s8,36(s8)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
f00014c4:       |            040c2223           sw      zero,68(s8)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
f00014c8:       |            040c0423           sb      zero,72(s8)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
f00014cc:       |            8526                       mv      a0,s1
f00014ce:       |            85d2                       mv      a1,s4
f00014d0:       |            864e                       mv      a2,s3
f00014d2:       |            8caff0ef           jal     ra,f000059c <pxPortInitialiseStack>
f00014d6:       |            00ac2023           sw      a0,0(s8)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
f00014da:       |        /-- 000a8463           beqz    s5,f00014e2 <xTaskCreate+0xd0>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
f00014de:       |        |   018aa023           sw      s8,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
f00014e2:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
f00014e6:       |            f0001a97           auipc   s5,0xf0001
f00014ea:       |            b92a8a93           addi    s5,s5,-1134 # e0002078 <xSchedulerRunning>
f00014ee:       |            000aa503           lw      a0,0(s5)
f00014f2:       |            f0001b17           auipc   s6,0xf0001
f00014f6:       |            b72b0b13           addi    s6,s6,-1166 # e0002064 <pxCurrentTCB>
f00014fa:       |        /-- c901                       beqz    a0,f000150a <xTaskCreate+0xf8>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
f00014fc:       |        |   000b2503           lw      a0,0(s6)
f0001500:       |        |   416c                       lw      a1,68(a0)
f0001502:       |        |   0585                       addi    a1,a1,1
f0001504:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0001506:       |        |   000b2503           lw      a0,0(s6)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
f000150a:       |        \-> f0001517           auipc   a0,0xf0001
f000150e:       |            b6a50513           addi    a0,a0,-1174 # e0002074 <uxCurrentNumberOfTasks>
f0001512:       |            410c                       lw      a1,0(a0)
f0001514:       |            0585                       addi    a1,a1,1
f0001516:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
f0001518:       |            000b2583           lw      a1,0(s6)
f000151c:       |            f0001c97           auipc   s9,0xf0001
f0001520:       |            bb0c8c93           addi    s9,s9,-1104 # e00020cc <pxReadyTasksLists>
f0001524:       |        /-- cd91                       beqz    a1,f0001540 <xTaskCreate+0x12e>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
f0001526:       |        |   000aa503           lw      a0,0(s5)
f000152a:       |     /--|-- e149                       bnez    a0,f00015ac <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
f000152c:       |     |  |   000b2503           lw      a0,0(s6)
f0001530:       |     |  |   5548                       lw      a0,44(a0)
f0001532:       |     |  |   02cc2583           lw      a1,44(s8)
f0001536:       |     +--|-- 06a5eb63           bltu    a1,a0,f00015ac <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
f000153a:       |     |  |   018b2023           sw      s8,0(s6)
f000153e:       |     +--|-- a0bd                       j       f00015ac <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
f0001540:       |     |  \-> 018b2023           sw      s8,0(s6)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
f0001544:       |     |      4108                       lw      a0,0(a0)
f0001546:       |     |      4585                       li      a1,1
f0001548:       |     +----- 06b51263           bne     a0,a1,f00015ac <xTaskCreate+0x19a>
f000154c:       |     |      4401                       li      s0,0
f000154e:       |     |      06400493           li      s1,100
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
f0001552:       |     |  /-> 01940533           add     a0,s0,s9
f0001556:       |     |  |   2b89                       jal     f0001aa8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
f0001558:       |     |  |   0451                       addi    s0,s0,20
f000155a:       |     |  \-- fe941ce3           bne     s0,s1,f0001552 <xTaskCreate+0x140>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
f000155e:       |     |      f0001997           auipc   s3,0xf0001
f0001562:       |     |      c0e98993           addi    s3,s3,-1010 # e000216c <xDelayedTaskList1>
f0001566:       |     |      854e                       mv      a0,s3
f0001568:       |     |      2381                       jal     f0001aa8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
f000156a:       |     |      f0001a17           auipc   s4,0xf0001
f000156e:       |     |      c16a0a13           addi    s4,s4,-1002 # e0002180 <xDelayedTaskList2>
f0001572:       |     |      8552                       mv      a0,s4
f0001574:       |     |      2b15                       jal     f0001aa8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
f0001576:       |     |      f0001517           auipc   a0,0xf0001
f000157a:       |     |      be250513           addi    a0,a0,-1054 # e0002158 <xPendingReadyList>
f000157e:       |     |      232d                       jal     f0001aa8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
f0001580:       |     |      f0001517           auipc   a0,0xf0001
f0001584:       |     |      bb050513           addi    a0,a0,-1104 # e0002130 <xTasksWaitingTermination>
f0001588:       |     |      2305                       jal     f0001aa8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
f000158a:       |     |      f0001517           auipc   a0,0xf0001
f000158e:       |     |      bba50513           addi    a0,a0,-1094 # e0002144 <xSuspendedTaskList>
f0001592:       |     |      2b19                       jal     f0001aa8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
f0001594:       |     |      f0001517           auipc   a0,0xf0001
f0001598:       |     |      ae850513           addi    a0,a0,-1304 # e000207c <pxDelayedTaskList>
f000159c:       |     |      01352023           sw      s3,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
f00015a0:       |     |      f0001517           auipc   a0,0xf0001
f00015a4:       |     |      ae050513           addi    a0,a0,-1312 # e0002080 <pxOverflowDelayedTaskList>
f00015a8:       |     |      01452023           sw      s4,0(a0)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
f00015ac:       |     \----> f0001517           auipc   a0,0xf0001
f00015b0:       |            ac050513           addi    a0,a0,-1344 # e000206c <uxTaskNumber>
f00015b4:       |            410c                       lw      a1,0(a0)
f00015b6:       |            0585                       addi    a1,a1,1
f00015b8:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
f00015ba:       |            02cc2503           lw      a0,44(s8)
f00015be:       |            f0001597           auipc   a1,0xf0001
f00015c2:       |            aaa58593           addi    a1,a1,-1366 # e0002068 <uxTopReadyPriority>
f00015c6:       |            4190                       lw      a2,0(a1)
f00015c8:       |            4b85                       li      s7,1
f00015ca:       |            00ab96b3           sll     a3,s7,a0
f00015ce:       |            8e55                       or      a2,a2,a3
f00015d0:       |            c190                       sw      a2,0(a1)
f00015d2:       |            45d1                       li      a1,20
f00015d4:       |            02b50533           mul     a0,a0,a1
f00015d8:       |            9566                       add     a0,a0,s9
f00015da:       |            414c                       lw      a1,4(a0)
f00015dc:       |            00bc2423           sw      a1,8(s8)
f00015e0:       |            4590                       lw      a2,8(a1)
f00015e2:       |            00cc2623           sw      a2,12(s8)
f00015e6:       |            4590                       lw      a2,8(a1)
f00015e8:       |            01262223           sw      s2,4(a2)
f00015ec:       |            0125a423           sw      s2,8(a1)
f00015f0:       |            00ac2a23           sw      a0,20(s8)
f00015f4:       |            410c                       lw      a1,0(a0)
f00015f6:       |            0585                       addi    a1,a1,1
f00015f8:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
f00015fa:       |            2025                       jal     f0001622 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
f00015fc:       |            000aa503           lw      a0,0(s5)
f0001600:       +----------- c119                       beqz    a0,f0001606 <xTaskCreate+0x1f4>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
f0001602:       |            000b2503           lw      a0,0(s6)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
f0001606:       \----------> 855e                       mv      a0,s7
f0001608:                    4c92                       lw      s9,4(sp)
f000160a:                    4c22                       lw      s8,8(sp)
f000160c:                    4bb2                       lw      s7,12(sp)
f000160e:                    4b42                       lw      s6,16(sp)
f0001610:                    4ad2                       lw      s5,20(sp)
f0001612:                    4a62                       lw      s4,24(sp)
f0001614:                    49f2                       lw      s3,28(sp)
f0001616:                    5902                       lw      s2,32(sp)
f0001618:                    5492                       lw      s1,36(sp)
f000161a:                    5422                       lw      s0,40(sp)
f000161c:                    50b2                       lw      ra,44(sp)
f000161e:                    6145                       addi    sp,sp,48
f0001620:                    8082                       ret

f0001622 <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
f0001622:              f0001517                 auipc   a0,0xf0001
f0001626:              a5650513                 addi    a0,a0,-1450 # e0002078 <xSchedulerRunning>
f000162a:              4108                     lw      a0,0(a0)
f000162c:       /----- cd19                     beqz    a0,f000164a <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
f000162e:       |      f0001517                 auipc   a0,0xf0001
f0001632:       |      a3650513                 addi    a0,a0,-1482 # e0002064 <pxCurrentTCB>
f0001636:       |      410c                     lw      a1,0(a0)
f0001638:       |      41ec                     lw      a1,68(a1)
f000163a:       +----- c981                     beqz    a1,f000164a <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
f000163c:       |      410c                     lw      a1,0(a0)
f000163e:       |      41f0                     lw      a2,68(a1)
f0001640:       |      167d                     addi    a2,a2,-1
f0001642:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
f0001644:       |      4108                     lw      a0,0(a0)
f0001646:       |      4168                     lw      a0,68(a0)
f0001648:       |  /-- c111                     beqz    a0,f000164c <vTaskExitCritical+0x2a>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
f000164a:       \--|-> 8082                     ret
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
f000164c:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
f0001650:              8082                     ret

f0001652 <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
f0001652:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
f0001654:              c606                     sw      ra,12(sp)
f0001656:              c422                     sw      s0,8(sp)
f0001658:              f0001517                 auipc   a0,0xf0001
f000165c:              a2c50513                 addi    a0,a0,-1492 # e0002084 <uxSchedulerSuspended>
f0001660:              4108                     lw      a0,0(a0)
f0001662:          /-- c901                     beqz    a0,f0001672 <vTaskSwitchContext+0x20>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
f0001664:          |   f0001517                 auipc   a0,0xf0001
f0001668:          |   a2450513                 addi    a0,a0,-1500 # e0002088 <xYieldPending>
f000166c:          |   4585                     li      a1,1
f000166e:          |   c10c                     sw      a1,0(a0)
f0001670:       /--|-- a0d9                     j       f0001736 <vTaskSwitchContext+0xe4>
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
f0001672:       |  \-> f0001517                 auipc   a0,0xf0001
f0001676:       |      a1650513                 addi    a0,a0,-1514 # e0002088 <xYieldPending>
f000167a:       |      00052023                 sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
f000167e:       |      f0001417                 auipc   s0,0xf0001
f0001682:       |      9e640413                 addi    s0,s0,-1562 # e0002064 <pxCurrentTCB>
f0001686:       |      4008                     lw      a0,0(s0)
f0001688:       |      4108                     lw      a0,0(a0)
f000168a:       |      400c                     lw      a1,0(s0)
f000168c:       |      598c                     lw      a1,48(a1)
f000168e:       |  /-- 00a5e863                 bltu    a1,a0,f000169e <vTaskSwitchContext+0x4c>
f0001692:       |  |   4008                     lw      a0,0(s0)
f0001694:       |  |   400c                     lw      a1,0(s0)
f0001696:       |  |   03458593                 addi    a1,a1,52
f000169a:       |  |   933ff0ef                 jal     ra,f0000fcc <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f000169e:       |  \-> f0001517                 auipc   a0,0xf0001
f00016a2:       |      9ca50513                 addi    a0,a0,-1590 # e0002068 <uxTopReadyPriority>
f00016a6:       |      4108                     lw      a0,0(a0)
f00016a8:       |      00155593                 srli    a1,a0,0x1
f00016ac:       |      8d4d                     or      a0,a0,a1
f00016ae:       |      00255593                 srli    a1,a0,0x2
f00016b2:       |      8d4d                     or      a0,a0,a1
f00016b4:       |      00455593                 srli    a1,a0,0x4
f00016b8:       |      8d4d                     or      a0,a0,a1
f00016ba:       |      00855593                 srli    a1,a0,0x8
f00016be:       |      8d4d                     or      a0,a0,a1
f00016c0:       |      01055593                 srli    a1,a0,0x10
f00016c4:       |      8d4d                     or      a0,a0,a1
f00016c6:       |      fff54513                 not     a0,a0
f00016ca:       |      00155593                 srli    a1,a0,0x1
f00016ce:       |      55555637                 lui     a2,0x55555
f00016d2:       |      55560613                 addi    a2,a2,1365 # 55555555 <_ottf_size+0x554d5555>
f00016d6:       |      8df1                     and     a1,a1,a2
f00016d8:       |      8d0d                     sub     a0,a0,a1
f00016da:       |      333335b7                 lui     a1,0x33333
f00016de:       |      33358593                 addi    a1,a1,819 # 33333333 <_ottf_size+0x332b3333>
f00016e2:       |      00b57633                 and     a2,a0,a1
f00016e6:       |      8109                     srli    a0,a0,0x2
f00016e8:       |      8d6d                     and     a0,a0,a1
f00016ea:       |      9532                     add     a0,a0,a2
f00016ec:       |      00455593                 srli    a1,a0,0x4
f00016f0:       |      952e                     add     a0,a0,a1
f00016f2:       |      0f0f15b7                 lui     a1,0xf0f1
f00016f6:       |      f0f58593                 addi    a1,a1,-241 # f0f0f0f <_ottf_size+0xf070f0f>
f00016fa:       |      8d6d                     and     a0,a0,a1
f00016fc:       |      010105b7                 lui     a1,0x1010
f0001700:       |      10158593                 addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f0001704:       |      02b50533                 mul     a0,a0,a1
f0001708:       |      8161                     srli    a0,a0,0x18
f000170a:       |      01f54513                 xori    a0,a0,31
f000170e:       |      45d1                     li      a1,20
f0001710:       |      02b50533                 mul     a0,a0,a1
f0001714:       |      f0001597                 auipc   a1,0xf0001
f0001718:       |      9b858593                 addi    a1,a1,-1608 # e00020cc <pxReadyTasksLists>
f000171c:       |      95aa                     add     a1,a1,a0
f000171e:       |      41c8                     lw      a0,4(a1)
f0001720:       |      4148                     lw      a0,4(a0)
f0001722:       |      00858613                 addi    a2,a1,8
f0001726:       |      c1c8                     sw      a0,4(a1)
f0001728:       |  /-- 00c51563                 bne     a0,a2,f0001732 <vTaskSwitchContext+0xe0>
f000172c:       |  |   4148                     lw      a0,4(a0)
f000172e:       |  |   0591                     addi    a1,a1,4
f0001730:       |  |   c188                     sw      a0,0(a1)
f0001732:       |  \-> 4548                     lw      a0,12(a0)
f0001734:       |      c008                     sw      a0,0(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
f0001736:       \----> 4422                     lw      s0,8(sp)
f0001738:              40b2                     lw      ra,12(sp)
f000173a:              0141                     addi    sp,sp,16
f000173c:              8082                     ret

f000173e <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
f000173e:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
f0001740:           c606                        sw      ra,12(sp)
f0001742:           00000517            auipc   a0,0x0
f0001746:           06250513            addi    a0,a0,98 # f00017a4 <prvIdleTask>
f000174a:           00002597            auipc   a1,0x2
f000174e:           8ce58593            addi    a1,a1,-1842 # f0003018 <uxTopUsedPriority+0x4>
f0001752:           f0001797            auipc   a5,0xf0001
f0001756:           93a78793            addi    a5,a5,-1734 # e000208c <xIdleTaskHandle>
f000175a:           10000613            li      a2,256
f000175e:           4681                        li      a3,0
f0001760:           4701                        li      a4,0
f0001762:           3945                        jal     f0001412 <xTaskCreate>
f0001764:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
f0001766:       /-- 02b51763            bne     a0,a1,f0001794 <vTaskStartScheduler+0x56>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
f000176a:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
f000176e:       |   f0001517            auipc   a0,0xf0001
f0001772:       |   92250513            addi    a0,a0,-1758 # e0002090 <xNextTaskUnblockTime>
f0001776:       |   567d                        li      a2,-1
f0001778:       |   c110                        sw      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
f000177a:       |   f0001517            auipc   a0,0xf0001
f000177e:       |   8fe50513            addi    a0,a0,-1794 # e0002078 <xSchedulerRunning>
f0001782:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
f0001784:       |   f0001517            auipc   a0,0xf0001
f0001788:       |   91050513            addi    a0,a0,-1776 # e0002094 <xTickCount>
f000178c:       |   00052023            sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
f0001790:       |   87bff0ef            jal     ra,f000100a <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
f0001794:       \-> 00002517            auipc   a0,0x2
f0001798:           88050513            addi    a0,a0,-1920 # f0003014 <uxTopUsedPriority>
f000179c:           4108                        lw      a0,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2115
}
f000179e:           40b2                        lw      ra,12(sp)
f00017a0:           0141                        addi    sp,sp,16
f00017a2:           8082                        ret

f00017a4 <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
f00017a4:                 1101                  addi    sp,sp,-32
f00017a6:                 ce06                  sw      ra,28(sp)
f00017a8:                 cc22                  sw      s0,24(sp)
f00017aa:                 ca26                  sw      s1,20(sp)
f00017ac:                 c84a                  sw      s2,16(sp)
f00017ae:                 c64e                  sw      s3,12(sp)
f00017b0:                 c452                  sw      s4,8(sp)
f00017b2:                 c256                  sw      s5,4(sp)
f00017b4:                 f0001497              auipc   s1,0xf0001
f00017b8:                 8bc48493              addi    s1,s1,-1860 # e0002070 <uxDeletedTasksWaitingCleanUp>
f00017bc:                 f0001917              auipc   s2,0xf0001
f00017c0:                 8bc90913              addi    s2,s2,-1860 # e0002078 <xSchedulerRunning>
f00017c4:                 f0001997              auipc   s3,0xf0001
f00017c8:                 96c98993              addi    s3,s3,-1684 # e0002130 <xTasksWaitingTermination>
f00017cc:                 f0001a17              auipc   s4,0xf0001
f00017d0:                 8a8a0a13              addi    s4,s4,-1880 # e0002074 <uxCurrentNumberOfTasks>
f00017d4:                 f0001a97              auipc   s5,0xf0001
f00017d8:                 890a8a93              addi    s5,s5,-1904 # e0002064 <pxCurrentTCB>
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
f00017dc:       /-------> 4088                  lw      a0,0(s1)
f00017de:       |  /----- c129                  beqz    a0,f0001820 <prvIdleTask+0x7c>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f00017e0:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f00017e4:       |  |      00092503              lw      a0,0(s2)
f00017e8:       |  |  /-- c901                  beqz    a0,f00017f8 <prvIdleTask+0x54>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f00017ea:       |  |  |   000aa503              lw      a0,0(s5)
f00017ee:       |  |  |   416c                  lw      a1,68(a0)
f00017f0:       |  |  |   0585                  addi    a1,a1,1
f00017f2:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f00017f4:       |  |  |   000aa503              lw      a0,0(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00017f8:       |  |  \-> 00c9a503              lw      a0,12(s3)
f00017fc:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
f00017fe:       |  |      00440513              addi    a0,s0,4
f0001802:       |  |      24c1                  jal     f0001ac2 <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
f0001804:       |  |      000a2503              lw      a0,0(s4)
f0001808:       |  |      157d                  addi    a0,a0,-1
f000180a:       |  |      00aa2023              sw      a0,0(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
f000180e:       |  |      4088                  lw      a0,0(s1)
f0001810:       |  |      157d                  addi    a0,a0,-1
f0001812:       |  |      c088                  sw      a0,0(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
f0001814:       |  |      3539                  jal     f0001622 <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
f0001816:       |  |      5808                  lw      a0,48(s0)
f0001818:       |  |      26b9                  jal     f0001b66 <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
f000181a:       |  |      8522                  mv      a0,s0
f000181c:       |  |      26a9                  jal     f0001b66 <vPortFree>
f000181e:       +--|----- bf7d                  j       f00017dc <prvIdleTask+0x38>
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
f0001820:       |  \----> 00000073              ecall
f0001824:       \-------- bf65                  j       f00017dc <prvIdleTask+0x38>

f0001826 <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
f0001826:       f0001517                auipc   a0,0xf0001
f000182a:       85e50513                addi    a0,a0,-1954 # e0002084 <uxSchedulerSuspended>
f000182e:       410c                    lw      a1,0(a0)
f0001830:       0585                    addi    a1,a1,1
f0001832:       c10c                    sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
f0001834:       8082                    ret

f0001836 <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
f0001836:                    1141                       addi    sp,sp,-16
f0001838:                    c606                       sw      ra,12(sp)
f000183a:                    c422                       sw      s0,8(sp)
f000183c:                    c226                       sw      s1,4(sp)
f000183e:                    c04a                       sw      s2,0(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0001840:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f0001844:                    f0001517           auipc   a0,0xf0001
f0001848:                    83450513           addi    a0,a0,-1996 # e0002078 <xSchedulerRunning>
f000184c:                    4108                       lw      a0,0(a0)
f000184e:                /-- c911                       beqz    a0,f0001862 <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0001850:                |   f0001517           auipc   a0,0xf0001
f0001854:                |   81450513           addi    a0,a0,-2028 # e0002064 <pxCurrentTCB>
f0001858:                |   410c                       lw      a1,0(a0)
f000185a:                |   41f0                       lw      a2,68(a1)
f000185c:                |   0605                       addi    a2,a2,1
f000185e:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0001860:                |   4108                       lw      a0,0(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
f0001862:                \-> f0001517           auipc   a0,0xf0001
f0001866:                    82250513           addi    a0,a0,-2014 # e0002084 <uxSchedulerSuspended>
f000186a:                    410c                       lw      a1,0(a0)
f000186c:                    15fd                       addi    a1,a1,-1
f000186e:                    c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f0001870:                    4108                       lw      a0,0(a0)
f0001872:       /----------- ed65                       bnez    a0,f000196a <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
f0001874:       |            f0001517           auipc   a0,0xf0001
f0001878:       |            80050513           addi    a0,a0,-2048 # e0002074 <uxCurrentNumberOfTasks>
f000187c:       |            4108                       lw      a0,0(a0)
f000187e:       +----------- c575                       beqz    a0,f000196a <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f0001880:       |            f0001517           auipc   a0,0xf0001
f0001884:       |            8d850513           addi    a0,a0,-1832 # e0002158 <xPendingReadyList>
f0001888:       |            410c                       lw      a1,0(a0)
f000188a:       |            f0000917           auipc   s2,0xf0000
f000188e:       |            7fe90913           addi    s2,s2,2046 # e0002088 <xYieldPending>
f0001892:       |  /-------- cddd                       beqz    a1,f0001950 <xTaskResumeAll+0x11a>
f0001894:       |  |         4885                       li      a7,1
f0001896:       |  |         f0000617           auipc   a2,0xf0000
f000189a:       |  |         7d260613           addi    a2,a2,2002 # e0002068 <uxTopReadyPriority>
f000189e:       |  |         4851                       li      a6,20
f00018a0:       |  |         f0001297           auipc   t0,0xf0001
f00018a4:       |  |         82c28293           addi    t0,t0,-2004 # e00020cc <pxReadyTasksLists>
f00018a8:       |  |         f0000317           auipc   t1,0xf0000
f00018ac:       |  |         7bc30313           addi    t1,t1,1980 # e0002064 <pxCurrentTCB>
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00018b0:       |  |  /----> 454c                       lw      a1,12(a0)
f00018b2:       |  |  |      45c0                       lw      s0,12(a1)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00018b4:       |  |  |      500c                       lw      a1,32(s0)
f00018b6:       |  |  |      4c58                       lw      a4,28(s0)
f00018b8:       |  |  |      5404                       lw      s1,40(s0)
f00018ba:       |  |  |      c70c                       sw      a1,8(a4)
f00018bc:       |  |  |      5014                       lw      a3,32(s0)
f00018be:       |  |  |      c2d8                       sw      a4,4(a3)
f00018c0:       |  |  |      40cc                       lw      a1,4(s1)
f00018c2:       |  |  |      01840713           addi    a4,s0,24
f00018c6:       |  |  |  /-- 00e59363           bne     a1,a4,f00018cc <xTaskResumeAll+0x96>
f00018ca:       |  |  |  |   c0d4                       sw      a3,4(s1)
f00018cc:       |  |  |  \-> 02042423           sw      zero,40(s0)
f00018d0:       |  |  |      408c                       lw      a1,0(s1)
f00018d2:       |  |  |      15fd                       addi    a1,a1,-1
f00018d4:       |  |  |      c08c                       sw      a1,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f00018d6:       |  |  |      444c                       lw      a1,12(s0)
f00018d8:       |  |  |      4418                       lw      a4,8(s0)
f00018da:       |  |  |      4854                       lw      a3,20(s0)
f00018dc:       |  |  |      c70c                       sw      a1,8(a4)
f00018de:       |  |  |      444c                       lw      a1,12(s0)
f00018e0:       |  |  |      c1d8                       sw      a4,4(a1)
f00018e2:       |  |  |      42d8                       lw      a4,4(a3)
f00018e4:       |  |  |      00440493           addi    s1,s0,4
f00018e8:       |  |  |  /-- 00971363           bne     a4,s1,f00018ee <xTaskResumeAll+0xb8>
f00018ec:       |  |  |  |   c2cc                       sw      a1,4(a3)
f00018ee:       |  |  |  \-> 428c                       lw      a1,0(a3)
f00018f0:       |  |  |      15fd                       addi    a1,a1,-1
f00018f2:       |  |  |      c28c                       sw      a1,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
f00018f4:       |  |  |      544c                       lw      a1,44(s0)
f00018f6:       |  |  |      4214                       lw      a3,0(a2)
f00018f8:       |  |  |      00b89733           sll     a4,a7,a1
f00018fc:       |  |  |      8ed9                       or      a3,a3,a4
f00018fe:       |  |  |      c214                       sw      a3,0(a2)
f0001900:       |  |  |      030586b3           mul     a3,a1,a6
f0001904:       |  |  |      9696                       add     a3,a3,t0
f0001906:       |  |  |      42d8                       lw      a4,4(a3)
f0001908:       |  |  |      c418                       sw      a4,8(s0)
f000190a:       |  |  |      471c                       lw      a5,8(a4)
f000190c:       |  |  |      c45c                       sw      a5,12(s0)
f000190e:       |  |  |      471c                       lw      a5,8(a4)
f0001910:       |  |  |      c3c4                       sw      s1,4(a5)
f0001912:       |  |  |      c704                       sw      s1,8(a4)
f0001914:       |  |  |      c854                       sw      a3,20(s0)
f0001916:       |  |  |      4298                       lw      a4,0(a3)
f0001918:       |  |  |      0705                       addi    a4,a4,1
f000191a:       |  |  |      c298                       sw      a4,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
f000191c:       |  |  |      00032683           lw      a3,0(t1)
f0001920:       |  |  |      56d4                       lw      a3,44(a3)
f0001922:       |  |  |  /-- 00d5e463           bltu    a1,a3,f000192a <xTaskResumeAll+0xf4>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
f0001926:       |  |  |  |   01192023           sw      a7,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f000192a:       |  |  |  \-> 410c                       lw      a1,0(a0)
f000192c:       |  |  \----- f1d1                       bnez    a1,f00018b0 <xTaskResumeAll+0x7a>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f000192e:       |  |         f0000517           auipc   a0,0xf0000
f0001932:       |  |         74e50513           addi    a0,a0,1870 # e000207c <pxDelayedTaskList>
f0001936:       |  |         410c                       lw      a1,0(a0)
f0001938:       |  |         418c                       lw      a1,0(a1)
f000193a:       |  |  /----- c589                       beqz    a1,f0001944 <xTaskResumeAll+0x10e>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f000193c:       |  |  |      4108                       lw      a0,0(a0)
f000193e:       |  |  |      4548                       lw      a0,12(a0)
f0001940:       |  |  |      4108                       lw      a0,0(a0)
f0001942:       |  |  |  /-- a011                       j       f0001946 <xTaskResumeAll+0x110>
f0001944:       |  |  \--|-> 557d                       li      a0,-1
f0001946:       |  |     \-> f0000597           auipc   a1,0xf0000
f000194a:       |  |         74a58593           addi    a1,a1,1866 # e0002090 <xNextTaskUnblockTime>
f000194e:       |  |         c188                       sw      a0,0(a1)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
f0001950:       |  \-------> f0000417           auipc   s0,0xf0000
f0001954:       |            74840413           addi    s0,s0,1864 # e0002098 <xPendedTicks>
f0001958:       |            4004                       lw      s1,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
f000195a:       |     /----- c491                       beqz    s1,f0001966 <xTaskResumeAll+0x130>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
f000195c:       |     |  /-> 2839                       jal     f000197a <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
f000195e:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
f0001960:       |     |  \-- fcf5                       bnez    s1,f000195c <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
f0001962:       |     |      00042023           sw      zero,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
f0001966:       |     \----> 00092503           lw      a0,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
f000196a:       \----------> 3965                       jal     f0001622 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
f000196c:                    4501                       li      a0,0
f000196e:                    4902                       lw      s2,0(sp)
f0001970:                    4492                       lw      s1,4(sp)
f0001972:                    4422                       lw      s0,8(sp)
f0001974:                    40b2                       lw      ra,12(sp)
f0001976:                    0141                       addi    sp,sp,16
f0001978:                    8082                       ret

f000197a <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f000197a:                          f0000517             auipc   a0,0xf0000
f000197e:                          70a50513             addi    a0,a0,1802 # e0002084 <uxSchedulerSuspended>
f0001982:                          4108                 lw      a0,0(a0)
f0001984:                      /-- c909                 beqz    a0,f0001996 <xTaskIncrementTick+0x1c>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
f0001986:                      |   f0000517             auipc   a0,0xf0000
f000198a:                      |   71250513             addi    a0,a0,1810 # e0002098 <xPendedTicks>
f000198e:                      |   410c                 lw      a1,0(a0)
f0001990:                      |   0585                 addi    a1,a1,1
f0001992:                      |   c10c                 sw      a1,0(a0)
f0001994:       /--------------|-- aa01                 j       f0001aa4 <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
f0001996:       |              \-> f0000517             auipc   a0,0xf0000
f000199a:       |                  6fe50513             addi    a0,a0,1790 # e0002094 <xTickCount>
f000199e:       |                  410c                 lw      a1,0(a0)
f00019a0:       |                  00158393             addi    t2,a1,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
f00019a4:       |                  00752023             sw      t2,0(a0)
f00019a8:       |                  f0000e17             auipc   t3,0xf0000
f00019ac:       |                  6d4e0e13             addi    t3,t3,1748 # e000207c <pxDelayedTaskList>
f00019b0:       |                  f0000817             auipc   a6,0xf0000
f00019b4:       |                  6e080813             addi    a6,a6,1760 # e0002090 <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
f00019b8:       |        /-------- 02b3ff63             bgeu    t2,a1,f00019f6 <xTaskIncrementTick+0x7c>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
f00019bc:       |        |         000e2503             lw      a0,0(t3)
f00019c0:       |        |         f0000597             auipc   a1,0xf0000
f00019c4:       |        |         6c058593             addi    a1,a1,1728 # e0002080 <pxOverflowDelayedTaskList>
f00019c8:       |        |         4194                 lw      a3,0(a1)
f00019ca:       |        |         00de2023             sw      a3,0(t3)
f00019ce:       |        |         c188                 sw      a0,0(a1)
f00019d0:       |        |         f0000517             auipc   a0,0xf0000
f00019d4:       |        |         6cc50513             addi    a0,a0,1740 # e000209c <xNumOfOverflows>
f00019d8:       |        |         410c                 lw      a1,0(a0)
f00019da:       |        |         0585                 addi    a1,a1,1
f00019dc:       |        |         c10c                 sw      a1,0(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f00019de:       |        |         000e2503             lw      a0,0(t3)
f00019e2:       |        |         4108                 lw      a0,0(a0)
f00019e4:       |        |  /----- c511                 beqz    a0,f00019f0 <xTaskIncrementTick+0x76>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f00019e6:       |        |  |      000e2503             lw      a0,0(t3)
f00019ea:       |        |  |      4548                 lw      a0,12(a0)
f00019ec:       |        |  |      4108                 lw      a0,0(a0)
f00019ee:       |        |  |  /-- a011                 j       f00019f2 <xTaskIncrementTick+0x78>
f00019f0:       |        |  \--|-> 557d                 li      a0,-1
f00019f2:       |        |     \-> 00a82023             sw      a0,0(a6)
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
f00019f6:       |        \-------> 00082503             lw      a0,0(a6)
f00019fa:       +----------------- 0aa3e563             bltu    t2,a0,f0001aa4 <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f00019fe:       |                  000e2503             lw      a0,0(t3)
f0001a02:       |                  4108                 lw      a0,0(a0)
f0001a04:       |  /-------------- cd49                 beqz    a0,f0001a9e <xTaskIncrementTick+0x124>
f0001a06:       |  |               4885                 li      a7,1
f0001a08:       |  |               f0000e97             auipc   t4,0xf0000
f0001a0c:       |  |               660e8e93             addi    t4,t4,1632 # e0002068 <uxTopReadyPriority>
f0001a10:       |  |               42d1                 li      t0,20
f0001a12:       |  |               f0000317             auipc   t1,0xf0000
f0001a16:       |  |               6ba30313             addi    t1,t1,1722 # e00020cc <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0001a1a:       |  |  /----------> 000e2503             lw      a0,0(t3)
f0001a1e:       |  |  |            4548                 lw      a0,12(a0)
f0001a20:       |  |  |            4554                 lw      a3,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
f0001a22:       |  |  |            42c8                 lw      a0,4(a3)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
f0001a24:       |  |  |  /-------- 06a3ee63             bltu    t2,a0,f0001aa0 <xTaskIncrementTick+0x126>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0001a28:       |  |  |  |         46cc                 lw      a1,12(a3)
f0001a2a:       |  |  |  |         469c                 lw      a5,8(a3)
f0001a2c:       |  |  |  |         4ac8                 lw      a0,20(a3)
f0001a2e:       |  |  |  |         c78c                 sw      a1,8(a5)
f0001a30:       |  |  |  |         46cc                 lw      a1,12(a3)
f0001a32:       |  |  |  |         c1dc                 sw      a5,4(a1)
f0001a34:       |  |  |  |         4150                 lw      a2,4(a0)
f0001a36:       |  |  |  |         00468793             addi    a5,a3,4
f0001a3a:       |  |  |  |     /-- 00f61363             bne     a2,a5,f0001a40 <xTaskIncrementTick+0xc6>
f0001a3e:       |  |  |  |     |   c14c                 sw      a1,4(a0)
f0001a40:       |  |  |  |     \-> 410c                 lw      a1,0(a0)
f0001a42:       |  |  |  |         15fd                 addi    a1,a1,-1
f0001a44:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0001a46:       |  |  |  |         5688                 lw      a0,40(a3)
f0001a48:       |  |  |  |  /----- c10d                 beqz    a0,f0001a6a <xTaskIncrementTick+0xf0>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0001a4a:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0001a4c:       |  |  |  |  |      4ed0                 lw      a2,28(a3)
f0001a4e:       |  |  |  |  |      c60c                 sw      a1,8(a2)
f0001a50:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0001a52:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
f0001a54:       |  |  |  |  |      4150                 lw      a2,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0001a56:       |  |  |  |  |      01868713             addi    a4,a3,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0001a5a:       |  |  |  |  |  /-- 00e61363             bne     a2,a4,f0001a60 <xTaskIncrementTick+0xe6>
f0001a5e:       |  |  |  |  |  |   c14c                 sw      a1,4(a0)
f0001a60:       |  |  |  |  |  \-> 0206a423             sw      zero,40(a3)
f0001a64:       |  |  |  |  |      410c                 lw      a1,0(a0)
f0001a66:       |  |  |  |  |      15fd                 addi    a1,a1,-1
f0001a68:       |  |  |  |  |      c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
f0001a6a:       |  |  |  |  \----> 56c8                 lw      a0,44(a3)
f0001a6c:       |  |  |  |         000ea583             lw      a1,0(t4)
f0001a70:       |  |  |  |         00a89633             sll     a2,a7,a0
f0001a74:       |  |  |  |         8dd1                 or      a1,a1,a2
f0001a76:       |  |  |  |         00bea023             sw      a1,0(t4)
f0001a7a:       |  |  |  |         02550533             mul     a0,a0,t0
f0001a7e:       |  |  |  |         951a                 add     a0,a0,t1
f0001a80:       |  |  |  |         414c                 lw      a1,4(a0)
f0001a82:       |  |  |  |         c68c                 sw      a1,8(a3)
f0001a84:       |  |  |  |         4590                 lw      a2,8(a1)
f0001a86:       |  |  |  |         c6d0                 sw      a2,12(a3)
f0001a88:       |  |  |  |         4590                 lw      a2,8(a1)
f0001a8a:       |  |  |  |         c25c                 sw      a5,4(a2)
f0001a8c:       |  |  |  |         c59c                 sw      a5,8(a1)
f0001a8e:       |  |  |  |         cac8                 sw      a0,20(a3)
f0001a90:       |  |  |  |         410c                 lw      a1,0(a0)
f0001a92:       |  |  |  |         0585                 addi    a1,a1,1
f0001a94:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0001a96:       |  |  |  |         000e2503             lw      a0,0(t3)
f0001a9a:       |  |  |  |         4108                 lw      a0,0(a0)
f0001a9c:       |  |  \--|-------- fd3d                 bnez    a0,f0001a1a <xTaskIncrementTick+0xa0>
f0001a9e:       |  \-----|-------> 557d                 li      a0,-1
f0001aa0:       |        \-------> 00a82023             sw      a0,0(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
f0001aa4:       \----------------> 4501                 li      a0,0
f0001aa6:                          8082                 ret

f0001aa8 <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0001aa8:       00850593                addi    a1,a0,8
f0001aac:       c14c                    sw      a1,4(a0)
f0001aae:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
f0001ab0:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0001ab2:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0001ab4:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
f0001ab6:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
f0001aba:       8082                    ret

f0001abc <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
f0001abc:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
f0001ac0:       8082                    ret

f0001ac2 <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0001ac2:           4510                        lw      a2,8(a0)
f0001ac4:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
f0001ac6:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0001ac8:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
f0001aca:           4510                        lw      a2,8(a0)
f0001acc:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
f0001ace:           41d4                        lw      a3,4(a1)
f0001ad0:       /-- 00a69363            bne     a3,a0,f0001ad6 <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
f0001ad4:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
f0001ad6:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
f0001ada:           4188                        lw      a0,0(a1)
f0001adc:           157d                        addi    a0,a0,-1
f0001ade:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
f0001ae0:           4188                        lw      a0,0(a1)
f0001ae2:           8082                        ret

f0001ae4 <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
f0001ae4:                 1141                  addi    sp,sp,-16
f0001ae6:                 c606                  sw      ra,12(sp)
f0001ae8:                 c422                  sw      s0,8(sp)
f0001aea:                 c226                  sw      s1,4(sp)
f0001aec:                 c04a                  sw      s2,0(sp)
f0001aee:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
f0001af0:                 9941                  andi    a0,a0,-16
f0001af2:                 0541                  addi    a0,a0,16
f0001af4:                 00f47593              andi    a1,s0,15
f0001af8:          /----- 00a46363              bltu    s0,a0,f0001afe <pvPortMalloc+0x1a>
f0001afc:          |      4501                  li      a0,0
f0001afe:          \--/-X c191                  beqz    a1,f0001b02 <pvPortMalloc+0x1e>
f0001b00:             |   842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
f0001b02:             \-> 3315                  jal     f0001826 <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
f0001b04:                 f0000517              auipc   a0,0xf0000
f0001b08:                 59c50513              addi    a0,a0,1436 # e00020a0 <pvPortMalloc.pucAlignedHeap>
f0001b0c:                 4104                  lw      s1,0(a0)
f0001b0e:             /-- c099                  beqz    s1,f0001b14 <pvPortMalloc+0x30>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
f0001b10:          /--|-- e819                  bnez    s0,f0001b26 <pvPortMalloc+0x42>
f0001b12:       /--|--|-- a081                  j       f0001b52 <pvPortMalloc+0x6e>
f0001b14:       |  |  \-> f0000597              auipc   a1,0xf0000
f0001b18:       |  |      68058593              addi    a1,a1,1664 # e0002194 <ucHeap>
f0001b1c:       |  |      05c1                  addi    a1,a1,16
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
f0001b1e:       |  |      ff05f493              andi    s1,a1,-16
f0001b22:       |  |      c104                  sw      s1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
f0001b24:       +--|----- c41d                  beqz    s0,f0001b52 <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
f0001b26:       |  \----> f0000517              auipc   a0,0xf0000
f0001b2a:       |         57e50513              addi    a0,a0,1406 # e00020a4 <xNextFreeByte>
f0001b2e:       |         00052903              lw      s2,0(a0)
f0001b32:       |         008905b3              add     a1,s2,s0
f0001b36:       |         0045d613              srli    a2,a1,0x4
f0001b3a:       |         7ff63613              sltiu   a2,a2,2047
f0001b3e:       |         00b936b3              sltu    a3,s2,a1
f0001b42:       |         8e75                  and     a2,a2,a3
f0001b44:       +-------- c619                  beqz    a2,f0001b52 <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
f0001b46:       |         c10c                  sw      a1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
f0001b48:       |         31fd                  jal     f0001836 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
f0001b4a:       |     /-- c489                  beqz    s1,f0001b54 <pvPortMalloc+0x70>
f0001b4c:       |     |   01248533              add     a0,s1,s2
f0001b50:       |  /--|-- a029                  j       f0001b5a <pvPortMalloc+0x76>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
f0001b52:       \--|--|-> 31d5                  jal     f0001836 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
f0001b54:          |  \-> c3aff0ef              jal     ra,f0000f8e <vApplicationMallocFailedHook>
f0001b58:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
f0001b5a:          \----> 4902                  lw      s2,0(sp)
f0001b5c:                 4492                  lw      s1,4(sp)
f0001b5e:                 4422                  lw      s0,8(sp)
f0001b60:                 40b2                  lw      ra,12(sp)
f0001b62:                 0141                  addi    sp,sp,16
f0001b64:                 8082                  ret

f0001b66 <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
f0001b66:       8082                    ret

f0001b68 <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
f0001b68:       4505                    li      a0,1
f0001b6a:       8082                    ret

f0001b6c <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
f0001b6c:       4505                    li      a0,1
f0001b6e:       8082                    ret

f0001b70 <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
f0001b70:                 1101                  addi    sp,sp,-32
f0001b72:                 ce06                  sw      ra,28(sp)
f0001b74:                 cc22                  sw      s0,24(sp)
f0001b76:                 ca26                  sw      s1,20(sp)
f0001b78:                 84ae                  mv      s1,a1
f0001b7a:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
f0001b7c:       /-------- ed85                  bnez    a1,f0001bb4 <rand_testutils_init+0x44>
f0001b7e:       |         00002517              auipc   a0,0x2
f0001b82:       |         b5650513              addi    a0,a0,-1194 # f00036d4 <kDeviceLogBypassUartAddress>
f0001b86:       |         4108                  lw      a0,0(a0)
f0001b88:       |     /-- c901                  beqz    a0,f0001b98 <rand_testutils_init+0x28>
f0001b8a:       |     |   1000e517              auipc   a0,0x1000e
f0001b8e:       |     |   56650513              addi    a0,a0,1382 # 100f0 <_non_volatile_scratch_end+0xff900f0>
f0001b92:       |     |   4581                  li      a1,0
f0001b94:       |     |   2af1                  jal     f0001d70 <base_log_internal_dv>
f0001b96:       |  /--|-- a819                  j       f0001bac <rand_testutils_init+0x3c>
f0001b98:       |  |  \-> 00001597              auipc   a1,0x1
f0001b9c:       |  |      51058593              addi    a1,a1,1296 # f00030a8 <uxTopUsedPriority+0x94>
f0001ba0:       |  |      850a                  mv      a0,sp
f0001ba2:       |  |      4651                  li      a2,20
f0001ba4:       |  |      2a3000ef              jal     ra,f0002646 <memcpy>
f0001ba8:       |  |      850a                  mv      a0,sp
f0001baa:       |  |      2215                  jal     f0001cce <base_log_internal_core>
f0001bac:       |  \----> 6531                  lui     a0,0xc
f0001bae:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001bb2:       |         2899                  jal     f0001c08 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0001bb4:       \-------> c004                  sw      s1,0(s0)
f0001bb6:                 6561                  lui     a0,0x18
f0001bb8:                 6a050513              addi    a0,a0,1696 # 186a0 <test_status_set.kLogFields.2+0x8560>
f0001bbc:                 c048                  sw      a0,4(s0)
f0001bbe:                 deadc537              lui     a0,0xdeadc
f0001bc2:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xeea5beef>
f0001bc6:                 c408                  sw      a0,8(s0)
f0001bc8:                 80000537              lui     a0,0x80000
f0001bcc:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x8ff80057>
f0001bd0:                 c448                  sw      a0,12(s0)
f0001bd2:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001bd6:                 00002597              auipc   a1,0x2
f0001bda:                 ae258593              addi    a1,a1,-1310 # f00036b8 <kDeviceType>
f0001bde:                 418c                  lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0001be0:                 c808                  sw      a0,16(s0)
f0001be2:                 557d                  li      a0,-1
f0001be4:                 4609                  li      a2,2
f0001be6:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001be8:             /-- 00c5e463              bltu    a1,a2,f0001bf0 <rand_testutils_init+0x80>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
f0001bec:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
f0001bf0:             \-> 44d2                  lw      s1,20(sp)
f0001bf2:                 4462                  lw      s0,24(sp)
f0001bf4:                 40f2                  lw      ra,28(sp)
f0001bf6:                 6105                  addi    sp,sp,32
f0001bf8:                 8082                  ret

f0001bfa <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
f0001bfa:       /----- c581                     beqz    a1,f0001c02 <dif_rv_core_ibex_init+0x8>
f0001bfc:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
f0001bfe:       |      c188                     sw      a0,0(a1)
f0001c00:       |  /-- a011                     j       f0001c04 <dif_rv_core_ibex_init+0xa>
f0001c02:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
f0001c04:          \-> 8532                     mv      a0,a2
f0001c06:              8082                     ret

f0001c08 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
f0001c08:                    1101                       addi    sp,sp,-32
f0001c0a:                    ce06                       sw      ra,28(sp)
f0001c0c:                    65b1                       lui     a1,0xc
f0001c0e:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
f0001c12:             /----- 02b50063           beq     a0,a1,f0001c32 <test_status_set+0x2a>
f0001c16:             |      65a5                       lui     a1,0x9
f0001c18:             |      05b5                       addi    a1,a1,13
f0001c1a:          /--|----- 02b50d63           beq     a0,a1,f0001c54 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001c1e:          |  |      00002597           auipc   a1,0x2
f0001c22:          |  |      ab258593           addi    a1,a1,-1358 # f00036d0 <kDeviceTestStatusAddress>
f0001c26:          |  |      418c                       lw      a1,0(a1)
f0001c28:          |  |  /-- c191                       beqz    a1,f0001c2c <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001c2a:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
f0001c2c:          |  |  \-> 40f2                       lw      ra,28(sp)
f0001c2e:          |  |      6105                       addi    sp,sp,32
f0001c30:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001c32:          |  \----> 00002517           auipc   a0,0x2
f0001c36:          |         aa250513           addi    a0,a0,-1374 # f00036d4 <kDeviceLogBypassUartAddress>
f0001c3a:          |         4108                       lw      a0,0(a0)
f0001c3c:          |  /----- ed0d                       bnez    a0,f0001c76 <test_status_set+0x6e>
f0001c3e:          |  |      00001597           auipc   a1,0x1
f0001c42:          |  |      7b658593           addi    a1,a1,1974 # f00033f4 <top_earlgrey_plic_interrupt_for_peripheral+0x338>
f0001c46:          |  |      0028                       addi    a0,sp,8
f0001c48:          |  |      4651                       li      a2,20
f0001c4a:          |  |      1fd000ef           jal     ra,f0002646 <memcpy>
f0001c4e:          |  |      0028                       addi    a0,sp,8
f0001c50:          |  |      28bd                       jal     f0001cce <base_log_internal_core>
f0001c52:          |  |  /-- a805                       j       f0001c82 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001c54:          \--|--|-> 00002517           auipc   a0,0x2
f0001c58:             |  |   a8050513           addi    a0,a0,-1408 # f00036d4 <kDeviceLogBypassUartAddress>
f0001c5c:             |  |   4108                       lw      a0,0(a0)
f0001c5e:       /-----|--|-- ed05                       bnez    a0,f0001c96 <test_status_set+0x8e>
f0001c60:       |     |  |   00001597           auipc   a1,0x1
f0001c64:       |     |  |   78058593           addi    a1,a1,1920 # f00033e0 <top_earlgrey_plic_interrupt_for_peripheral+0x324>
f0001c68:       |     |  |   0028                       addi    a0,sp,8
f0001c6a:       |     |  |   4651                       li      a2,20
f0001c6c:       |     |  |   1db000ef           jal     ra,f0002646 <memcpy>
f0001c70:       |     |  |   0028                       addi    a0,sp,8
f0001c72:       |     |  |   28b1                       jal     f0001cce <base_log_internal_core>
f0001c74:       |  /--|--|-- a03d                       j       f0001ca2 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001c76:       |  |  \--|-> 1000e517           auipc   a0,0x1000e
f0001c7a:       |  |     |   4ca50513           addi    a0,a0,1226 # 10140 <_non_volatile_scratch_end+0xff90140>
f0001c7e:       |  |     |   4581                       li      a1,0
f0001c80:       |  |     |   28c5                       jal     f0001d70 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001c82:       |  |     \-> 00002517           auipc   a0,0x2
f0001c86:       |  |         a4e50513           addi    a0,a0,-1458 # f00036d0 <kDeviceTestStatusAddress>
f0001c8a:       |  |         4108                       lw      a0,0(a0)
f0001c8c:       |  |  /----- c505                       beqz    a0,f0001cb4 <test_status_set+0xac>
f0001c8e:       |  |  |      65b1                       lui     a1,0xc
f0001c90:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001c94:       |  |  |  /-- a839                       j       f0001cb2 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001c96:       \--|--|--|-> 1000e517           auipc   a0,0x1000e
f0001c9a:          |  |  |   49650513           addi    a0,a0,1174 # 1012c <_non_volatile_scratch_end+0xff9012c>
f0001c9e:          |  |  |   4581                       li      a1,0
f0001ca0:          |  |  |   28c1                       jal     f0001d70 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001ca2:          \--|--|-> 00002517           auipc   a0,0x2
f0001ca6:             |  |   a2e50513           addi    a0,a0,-1490 # f00036d0 <kDeviceTestStatusAddress>
f0001caa:             |  |   4108                       lw      a0,0(a0)
f0001cac:             +--|-- c501                       beqz    a0,f0001cb4 <test_status_set+0xac>
f0001cae:             |  |   65a5                       lui     a1,0x9
f0001cb0:             |  |   05b5                       addi    a1,a1,13
f0001cb2:             |  \-> c10c                       sw      a1,0(a0)
f0001cb4:             \----> 2009                       jal     f0001cb6 <abort>

f0001cb6 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
f0001cb6:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
f0001cba:       \-- bff5                        j       f0001cb6 <abort>

f0001cbc <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
f0001cbc:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
f0001cc0:       8082                    ret

f0001cc2 <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
f0001cc2:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
f0001cc6:       8082                    ret

f0001cc8 <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
f0001cc8:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
f0001ccc:       8082                    ret

f0001cce <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
f0001cce:              7179                     addi    sp,sp,-48
f0001cd0:              c606                     sw      ra,12(sp)
f0001cd2:              c422                     sw      s0,8(sp)
f0001cd4:              c226                     sw      s1,4(sp)
f0001cd6:              842a                     mv      s0,a0
f0001cd8:              d646                     sw      a7,44(sp)
f0001cda:              d442                     sw      a6,40(sp)
f0001cdc:              d23e                     sw      a5,36(sp)
f0001cde:              d03a                     sw      a4,32(sp)
f0001ce0:              ce36                     sw      a3,28(sp)
f0001ce2:              cc32                     sw      a2,24(sp)
f0001ce4:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
f0001ce6:              4148                     lw      a0,4(a0)
f0001ce8:              800005b7                 lui     a1,0x80000
f0001cec:              fff58613                 addi    a2,a1,-1 # 7fffffff <_non_volatile_scratch_end+0x8ff7ffff>
f0001cf0:              4581                     li      a1,0
f0001cf2:              23f000ef                 jal     ra,f0002730 <memchr>
f0001cf6:              4054                     lw      a3,4(s0)
f0001cf8:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
f0001cfc:              02f00593                 li      a1,47
f0001d00:              8536                     mv      a0,a3
f0001d02:              2dd000ef                 jal     ra,f00027de <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
f0001d06:       /----- c501                     beqz    a0,f0001d0e <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
f0001d08:       |      00150693                 addi    a3,a0,1
f0001d0c:       |  /-- a011                     j       f0001d10 <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
f0001d0e:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001d10:          \-> 4008                     lw      a0,0(s0)
f0001d12:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
f0001d14:       /----- 00a5ea63                 bltu    a1,a0,f0001d28 <base_log_internal_core+0x5a>
f0001d18:       |      050a                     slli    a0,a0,0x2
f0001d1a:       |      00001597                 auipc   a1,0x1
f0001d1e:       |      70658593                 addi    a1,a1,1798 # f0003420 <top_earlgrey_plic_interrupt_for_peripheral+0x364>
f0001d22:       |      952e                     add     a0,a0,a1
f0001d24:       |      410c                     lw      a1,0(a0)
f0001d26:       |  /-- a029                     j       f0001d30 <base_log_internal_core+0x62>
f0001d28:       \--|-> 00001597                 auipc   a1,0x1
f0001d2c:          |   6f558593                 addi    a1,a1,1781 # f000341d <top_earlgrey_plic_interrupt_for_peripheral+0x361>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
f0001d30:          \-> f0000497                 auipc   s1,0xf0000
f0001d34:              37848493                 addi    s1,s1,888 # e00020a8 <base_log_internal_core.global_log_counter>
f0001d38:              0004d603                 lhu     a2,0(s1)
f0001d3c:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001d3e:              00001517                 auipc   a0,0x1
f0001d42:              6ca50513                 addi    a0,a0,1738 # f0003408 <top_earlgrey_plic_interrupt_for_peripheral+0x34c>
f0001d46:              2865                     jal     f0001dfe <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
f0001d48:              00049503                 lh      a0,0(s1)
f0001d4c:              0505                     addi    a0,a0,1
f0001d4e:              00a49023                 sh      a0,0(s1)
f0001d52:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
f0001d54:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
f0001d56:              4808                     lw      a0,16(s0)
f0001d58:              084c                     addi    a1,sp,20
f0001d5a:              28d9                     jal     f0001e30 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
f0001d5c:              00001517                 auipc   a0,0x1
f0001d60:              bb550513                 addi    a0,a0,-1099 # f0002911 <_text_end+0x71>
f0001d64:              2869                     jal     f0001dfe <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
f0001d66:              4492                     lw      s1,4(sp)
f0001d68:              4422                     lw      s0,8(sp)
f0001d6a:              40b2                     lw      ra,12(sp)
f0001d6c:              6145                     addi    sp,sp,48
f0001d6e:              8082                     ret

f0001d70 <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
f0001d70:              1101                     addi    sp,sp,-32
f0001d72:              ce46                     sw      a7,28(sp)
f0001d74:              cc42                     sw      a6,24(sp)
f0001d76:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
f0001d78:              00002797                 auipc   a5,0x2
f0001d7c:              95c78793                 addi    a5,a5,-1700 # f00036d4 <kDeviceLogBypassUartAddress>
f0001d80:              439c                     lw      a5,0(a5)
f0001d82:              c83a                     sw      a4,16(sp)
f0001d84:              c636                     sw      a3,12(sp)
f0001d86:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001d88:              c388                     sw      a0,0(a5)
f0001d8a:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
f0001d8c:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001d8e:       /----- c989                     beqz    a1,f0001da0 <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
f0001d90:       |  /-> 4512                     lw      a0,4(sp)
f0001d92:       |  |   00450613                 addi    a2,a0,4
f0001d96:       |  |   c232                     sw      a2,4(sp)
f0001d98:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001d9a:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001d9c:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
f0001d9e:       |  \-- f9ed                     bnez    a1,f0001d90 <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
f0001da0:       \----> 6105                     addi    sp,sp,32
f0001da2:              8082                     ret

f0001da4 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
f0001da4:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
f0001da6:       8082                    ret

f0001da8 <base_uart_stdout>:
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:79
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
f0001da8:       f0000597                auipc   a1,0xf0000
f0001dac:       30458593                addi    a1,a1,772 # e00020ac <base_stdout>
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:66
  base_stdout = out;
f0001db0:       c188                    sw      a0,0(a1)
f0001db2:       00000517                auipc   a0,0x0
f0001db6:       00c50513                addi    a0,a0,12 # f0001dbe <base_dev_uart>
f0001dba:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:82
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
f0001dbc:       8082                    ret

f0001dbe <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:69
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
f0001dbe:                 1101                  addi    sp,sp,-32
f0001dc0:                 ce06                  sw      ra,28(sp)
f0001dc2:                 cc22                  sw      s0,24(sp)
f0001dc4:                 ca26                  sw      s1,20(sp)
f0001dc6:                 c84a                  sw      s2,16(sp)
f0001dc8:                 c64e                  sw      s3,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001dca:       /-------- c20d                  beqz    a2,f0001dec <base_dev_uart+0x2e>
f0001dcc:       |         8432                  mv      s0,a2
f0001dce:       |         892e                  mv      s2,a1
f0001dd0:       |         89aa                  mv      s3,a0
f0001dd2:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:72
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
f0001dd4:       |  /----> 00990533              add     a0,s2,s1
f0001dd8:       |  |      00054583              lbu     a1,0(a0)
f0001ddc:       |  |      854e                  mv      a0,s3
f0001dde:       |  |      2f59                  jal     f0002574 <dif_uart_byte_send_polled>
f0001de0:       |  |  /-- e519                  bnez    a0,f0001dee <base_dev_uart+0x30>
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001de2:       |  |  |   0485                  addi    s1,s1,1
f0001de4:       |  \--|-- fe9418e3              bne     s0,s1,f0001dd4 <base_dev_uart+0x16>
f0001de8:       |     |   84a2                  mv      s1,s0
f0001dea:       |     +-- a011                  j       f0001dee <base_dev_uart+0x30>
f0001dec:       \-----|-> 4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:77
}
f0001dee:             \-> 8526                  mv      a0,s1
f0001df0:                 49b2                  lw      s3,12(sp)
f0001df2:                 4942                  lw      s2,16(sp)
f0001df4:                 44d2                  lw      s1,20(sp)
f0001df6:                 4462                  lw      s0,24(sp)
f0001df8:                 40f2                  lw      ra,28(sp)
f0001dfa:                 6105                  addi    sp,sp,32
f0001dfc:                 8082                  ret

f0001dfe <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84

size_t base_printf(const char *format, ...) {
f0001dfe:       7179                    addi    sp,sp,-48
f0001e00:       c606                    sw      ra,12(sp)
f0001e02:       d646                    sw      a7,44(sp)
f0001e04:       d442                    sw      a6,40(sp)
f0001e06:       d23e                    sw      a5,36(sp)
f0001e08:       d03a                    sw      a4,32(sp)
f0001e0a:       ce36                    sw      a3,28(sp)
f0001e0c:       cc32                    sw      a2,24(sp)
f0001e0e:       ca2e                    sw      a1,20(sp)
f0001e10:       f0000597                auipc   a1,0xf0000
f0001e14:       29c58593                addi    a1,a1,668 # e00020ac <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
f0001e18:       4190                    lw      a2,0(a1)
f0001e1a:       41cc                    lw      a1,4(a1)
f0001e1c:       872a                    mv      a4,a0
f0001e1e:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
f0001e20:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001e22:       0854                    addi    a3,sp,20
f0001e24:       8532                    mv      a0,a2
f0001e26:       863a                    mv      a2,a4
f0001e28:       200d                    jal     f0001e4a <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
f0001e2a:       40b2                    lw      ra,12(sp)
f0001e2c:       6145                    addi    sp,sp,48
f0001e2e:       8082                    ret

f0001e30 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
f0001e30:       f0000697                auipc   a3,0xf0000
f0001e34:       27c68693                addi    a3,a3,636 # e00020ac <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001e38:       4290                    lw      a2,0(a3)
f0001e3a:       42d4                    lw      a3,4(a3)
f0001e3c:       872e                    mv      a4,a1
f0001e3e:       87aa                    mv      a5,a0
f0001e40:       8532                    mv      a0,a2
f0001e42:       85b6                    mv      a1,a3
f0001e44:       863e                    mv      a2,a5
f0001e46:       86ba                    mv      a3,a4
f0001e48:       a009                    j       f0001e4a <base_vfprintf>

f0001e4a <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
f0001e4a:                                                                    715d                       addi    sp,sp,-80
f0001e4c:                                                                    c686                       sw      ra,76(sp)
f0001e4e:                                                                    c4a2                       sw      s0,72(sp)
f0001e50:                                                                    c2a6                       sw      s1,68(sp)
f0001e52:                                                                    c0ca                       sw      s2,64(sp)
f0001e54:                                                                    de4e                       sw      s3,60(sp)
f0001e56:                                                                    dc52                       sw      s4,56(sp)
f0001e58:                                                                    da56                       sw      s5,52(sp)
f0001e5a:                                                                    d85a                       sw      s6,48(sp)
f0001e5c:                                                                    d65e                       sw      s7,44(sp)
f0001e5e:                                                                    d462                       sw      s8,40(sp)
f0001e60:                                                                    d266                       sw      s9,36(sp)
f0001e62:                                                                    d06a                       sw      s10,32(sp)
f0001e64:                                                                    ce6e                       sw      s11,28(sp)
f0001e66:                                                                    8cb2                       mv      s9,a2
f0001e68:                                                                    892a                       mv      s2,a0
f0001e6a:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
f0001e6c:                                                                /-- c199                       beqz    a1,f0001e72 <base_vfprintf+0x28>
f0001e6e:                                                                |   89ae                       mv      s3,a1
f0001e70:                                                             /--|-- a029                       j       f0001e7a <base_vfprintf+0x30>
f0001e72:                                                             |  \-> 00000997           auipc   s3,0x0
f0001e76:                                                             |      f3298993           addi    s3,s3,-206 # f0001da4 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
f0001e7a:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
f0001e7c:                                                                    000cc503           lbu     a0,0(s9)
f0001e80:       /----------------------------------------------------------- 42050563           beqz    a0,f00022aa <base_vfprintf+0x460>
f0001e84:       |                                                            4a81                       li      s5,0
f0001e86:       |                                                            02500c13           li      s8,37
f0001e8a:       |                                                            4d25                       li      s10,9
f0001e8c:       |                                                            4a29                       li      s4,10
f0001e8e:       |                                                            658d                       lui     a1,0x3
f0001e90:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_manifest_code_end+0x382>
f0001e94:       |                                                            c02e                       sw      a1,0(sp)
f0001e96:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
f0001e98:       |        |                                               /-> 0ff57413           andi    s0,a0,255
f0001e9c:       |        |                                            /--|-- 01840963           beq     s0,s8,f0001eae <base_vfprintf+0x64>
f0001ea0:       |        |                                            +--|-- c419                       beqz    s0,f0001eae <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
f0001ea2:       |        |                                            |  |   009c8533           add     a0,s9,s1
f0001ea6:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
f0001eaa:       |        |                                            |  |   0485                       addi    s1,s1,1
f0001eac:       |        |                                            |  \-- b7f5                       j       f0001e98 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
f0001eae:       |        |                                            \--/-X c491                       beqz    s1,f0001eba <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
f0001eb0:       |        |                                               |   854a                       mv      a0,s2
f0001eb2:       |        |                                               |   85e6                       mv      a1,s9
f0001eb4:       |        |                                               |   8626                       mv      a2,s1
f0001eb6:       |        |                                               |   9982                       jalr    s3
f0001eb8:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
f0001eba:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,f00022ac <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
f0001ebe:       |  |     |                                                   009c8533           add     a0,s9,s1
f0001ec2:       |  |     |                                                   00154603           lbu     a2,1(a0)
f0001ec6:       |  |     |                                                   02100713           li      a4,33
f0001eca:       |  |     |                                            /----- 00e61863           bne     a2,a4,f0001eda <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001ece:       |  |     |                                            |      00254583           lbu     a1,2(a0)
f0001ed2:       |  |     |                                            |      00250693           addi    a3,a0,2
f0001ed6:       |  |     |                                            |      4b05                       li      s6,1
f0001ed8:       |  |     |                                            |  /-- a029                       j       f0001ee2 <base_vfprintf+0x98>
f0001eda:       |  |     |                                            \--|-> 4b01                       li      s6,0
f0001edc:       |  |     |                                               |   00150693           addi    a3,a0,1
f0001ee0:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001ee2:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,f0002298 <base_vfprintf+0x44e>
f0001ee6:       |  |  |  |                                                   4481                       li      s1,0
f0001ee8:       |  |  |  |                                                   4b81                       li      s7,0
f0001eea:       |  |  |  |                                                   4501                       li      a0,0
f0001eec:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
f0001ef0:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
f0001ef4:       |  |  |  |                                                   00168c93           addi    s9,a3,1
f0001ef8:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
f0001efc:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001f00:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
f0001f04:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,f0001f3a <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
f0001f08:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
f0001f0c:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,f0001f22 <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
f0001f0e:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
f0001f12:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
f0001f14:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001f18:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001f1c:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
f0001f1e:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,f0001ef8 <base_vfprintf+0xae>
f0001f20:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       f0002298 <base_vfprintf+0x44e>
f0001f22:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
f0001f26:       |  |  |  |                                   |     |  |      03000613           li      a2,48
f0001f2a:       |  |  |  |                                   |     |  |      02000513           li      a0,32
f0001f2e:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,f0001f0e <base_vfprintf+0xc4>
f0001f32:       |  |  |  |                                   |     |         03000513           li      a0,48
f0001f36:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
f0001f38:       |  |  |  |                                   |     \-------- b7c5                       j       f0001f18 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
f0001f3a:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,f0001f42 <base_vfprintf+0xf8>
f0001f3c:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,f0001f4a <base_vfprintf+0x100>
f0001f40:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       f00022cc <base_vfprintf+0x482>
f0001f42:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
f0001f46:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,f00022cc <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001f4a:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
f0001f4e:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,f0001fa0 <base_vfprintf+0x156>
f0001f52:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
f0001f54:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
f0001f58:       |  |  |  |  |                                         |      4dc58593           addi    a1,a1,1244 # f0003430 <top_earlgrey_plic_interrupt_for_peripheral+0x374>
f0001f5c:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
f0001f5e:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
f0001f60:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
f0001f62:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,f000221a <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
f0001f66:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
f0001f68:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
f0001f6c:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
f0001f6e:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
f0001f72:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,f0001f8a <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
f0001f76:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
f0001f7a:       |  |  |  |  |  |                                      |  |   55158593           addi    a1,a1,1361 # f00034c7 <top_earlgrey_plic_interrupt_for_peripheral+0x40b>
f0001f7e:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
f0001f80:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
f0001f82:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
f0001f84:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
f0001f86:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001f8a:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
f0001f8e:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
f0001f92:       |  |  |  |  |  |                                      |      54c80813           addi    a6,a6,1356 # f00034da <kDigitsLow>
f0001f96:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
f0001f98:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
f0001f9a:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
f0001f9c:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
f0001f9e:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       f00021e6 <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001fa0:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
f0001fa4:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,f0001fde <base_vfprintf+0x194>
f0001fa8:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,f000221a <base_vfprintf+0x3d0>
f0001fac:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,f000221a <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
f0001fb0:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
f0001fb4:       |  |  |  |  |  |        |                                |   51558593           addi    a1,a1,1301 # f00034c5 <top_earlgrey_plic_interrupt_for_peripheral+0x409>
f0001fb8:       |  |  |  |  |  |        |                             /--|-- a851                       j       f000204c <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
f0001fba:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,f0001fde <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
f0001fbe:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
f0001fc0:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
f0001fc4:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001fc6:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
f0001fc8:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
f0001fcc:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001fce:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001fd0:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
f0001fd4:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
f0001fd8:       |  |  |  |  |  |        |                             |  |   53388893           addi    a7,a7,1331 # f0003507 <kDigitsHigh>
f0001fdc:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       f00021c0 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
f0001fde:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
f0001fe0:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
f0001fe4:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
f0001fe6:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
f0001fe8:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
f0001fec:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
f0001ff0:       |  |  |  |  |  |        |           |                 |      51b80813           addi    a6,a6,1307 # f0003507 <kDigitsHigh>
f0001ff4:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       f00021e0 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
f0001ff6:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,f000221a <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
f0001ffa:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
f0001ffc:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
f0002000:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0002002:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
f0002004:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
f0002008:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f000200a:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f000200c:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
f0002010:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
f0002014:       |  |  |  |  |  |        |        |  |                 |      4f788893           addi    a7,a7,1271 # f0003507 <kDigitsHigh>
f0002018:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       f000220e <base_vfprintf+0x3c4>
f000201a:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
f000201c:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
f0002020:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
f0002022:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
f0002024:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,f0002234 <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
f0002028:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,f000228c <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
f000202c:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
f0002030:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4a058593           addi    a1,a1,1184 # f00034cc <top_earlgrey_plic_interrupt_for_peripheral+0x410>
f0002034:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
f0002036:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       f0002224 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
f0002038:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,f000221a <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
f000203c:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
f000203e:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
f0002042:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
f0002044:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
f0002046:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
f000204a:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
f000204c:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
f000204e:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       f0002224 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
f0002050:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,f000221a <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
f0002054:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
f0002056:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
f000205a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
f000205c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
f000205e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
f0002062:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
f0002066:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47880813           addi    a6,a6,1144 # f00034da <kDigitsLow>
f000206a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
f000206c:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       f00021e2 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
f000206e:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,f000221a <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0002072:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
f0002076:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     45758593           addi    a1,a1,1111 # f00034c9 <top_earlgrey_plic_interrupt_for_peripheral+0x40d>
f000207a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
f000207c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f000207e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
f0002080:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
f0002082:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
f0002086:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
f0002088:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f000208a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
f000208e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
f0002092:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     44c80813           addi    a6,a6,1100 # f00034da <kDigitsLow>
f0002096:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
f0002098:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
f000209c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
f000209e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f00020a0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
f00020a2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     f00023bc <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
f00020a4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
f00020a8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       f000222a <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
f00020aa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
f00020ac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
f00020b0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
f00020b2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
f00020b4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
f00020b6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
f00020ba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
f00020be:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f00020c0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
f00020c2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
f00020c4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
f00020c8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     f000243a <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
f00020ca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f00020cc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f00020ce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
f00020d2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
f00020d6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f00020d8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
f00020da:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,f00020d2 <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f00020dc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
f00020e0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f00020e4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3f158593           addi    a1,a1,1009 # f00034d1 <top_earlgrey_plic_interrupt_for_peripheral+0x415>
f00020e8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f00020ea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f00020ec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f00020ee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f00020f0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
f00020f4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f00020f6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f00020f8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f00020fc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f0002100:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3d658593           addi    a1,a1,982 # f00034d2 <top_earlgrey_plic_interrupt_for_peripheral+0x416>
f0002104:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0002106:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
f0002108:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f000210a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
f000210c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f0002110:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3b058593           addi    a1,a1,944 # f00034bc <top_earlgrey_plic_interrupt_for_peripheral+0x400>
f0002114:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
f0002116:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0002118:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f000211a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
f000211e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,f0002244 <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
f0002122:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
f0002126:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               3b258593           addi    a1,a1,946 # f00034d4 <top_earlgrey_plic_interrupt_for_peripheral+0x418>
f000212a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f000212c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f000212e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0002130:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0002134:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
f0002136:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
f0002138:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f000213a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f000213c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f000213e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0002140:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
f0002144:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               39a80813           addi    a6,a6,922 # f00034da <kDigitsLow>
f0002148:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
f000214a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f000214c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
f000214e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
f0002150:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
f0002152:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     f00023bc <write_digits>
f0002154:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
f0002156:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
f000215a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               38058593           addi    a1,a1,896 # f00034d6 <top_earlgrey_plic_interrupt_for_peripheral+0x41a>
f000215e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0002160:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0002162:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0002164:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
f0002166:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       f000225e <base_vfprintf+0x414>
f0002168:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
f000216a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
f000216e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
f0002170:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,f0002276 <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
f0002174:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0002176:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
f000217a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f000217c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
f000217e:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       f0002224 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
f0002180:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,f000221a <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
f0002184:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
f0002186:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
f000218a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f000218c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f000218e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
f0002192:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
f0002196:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         34880813           addi    a6,a6,840 # f00034da <kDigitsLow>
f000219a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
f000219c:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       f00021e2 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
f000219e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,f00021ca <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
f00021a2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
f00021a4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
f00021a8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f00021aa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
f00021ac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
f00021b0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f00021b2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f00021b4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
f00021b8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
f00021bc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   32288893           addi    a7,a7,802 # f00034da <kDigitsLow>
f00021c0:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
f00021c2:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
f00021c4:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
f00021c6:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
f00021c8:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       f0002216 <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
f00021ca:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
f00021cc:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
f00021d0:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
f00021d2:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
f00021d4:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
f00021d8:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
f00021dc:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      30280813           addi    a6,a6,770 # f00034da <kDigitsLow>
f00021e0:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
f00021e2:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
f00021e4:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
f00021e6:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
f00021e8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     f00023bc <write_digits>
f00021ea:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       f0002228 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
f00021ec:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,f000221a <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
f00021f0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
f00021f2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
f00021f6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f00021f8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
f00021fa:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
f00021fe:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0002200:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0002202:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
f0002206:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
f000220a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   2d488893           addi    a7,a7,724 # f00034da <kDigitsLow>
f000220e:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
f0002210:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
f0002212:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
f0002214:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
f0002216:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     f00022d8 <hex_dump>
f0002218:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       f0002228 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
f000221a:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
f000221e:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   2fd58593           addi    a1,a1,765 # f0003517 <kUnknownSpec>
f0002222:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
f0002224:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
f0002226:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
f0002228:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
f000222a:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
f000222e:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,f0001e96 <base_vfprintf+0x4c>
f0002232:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       f00022ac <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
f0002234:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
f0002238:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
f000223c:       |  |  |     |     |  |                 |  |  |  |  |         2a280813           addi    a6,a6,674 # f00034da <kDigitsLow>
f0002240:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
f0002242:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       f00021e2 <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0002244:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
f0002246:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
f000224a:       |  |  |     |     |  |                    |     |  |         29480813           addi    a6,a6,660 # f00034da <kDigitsLow>
f000224e:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
f0002250:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
f0002252:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
f0002254:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
f0002256:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
f0002258:       |  |  |     |     |  |                    |     |  |         2295                       jal     f00023bc <write_digits>
f000225a:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
f000225e:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
f0002262:       |  |  |     |     |  |                    |     |            27a58593           addi    a1,a1,634 # f00034d8 <top_earlgrey_plic_interrupt_for_peripheral+0x41c>
f0002266:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
f0002268:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
f000226a:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
f000226c:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
f0002270:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
f0002274:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       f000222a <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0002276:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
f0002278:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f000227a:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
f000227e:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
f0002282:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0002284:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,f000227a <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
f0002286:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
f000228a:       |  |  |     |     |  +-------------------------------------- bf69                       j       f0002224 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
f000228c:       |  |  |     |     \--|-------------------------------------> 00000597           auipc   a1,0x0
f0002290:       |  |  |     |        |                                       7bb58593           addi    a1,a1,1979 # f0002a47 <kOttfTestConfig+0x133>
f0002294:       |  |  |     |        |                                       4615                       li      a2,5
f0002296:       |  |  |     |        \-------------------------------------- b779                       j       f0002224 <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
f0002298:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
f000229c:       |  |        |                                                25258593           addi    a1,a1,594 # f00034ea <kErrorNul>
f00022a0:       |  |        |                                                4645                       li      a2,17
f00022a2:       |  |        |                                            /-> 854a                       mv      a0,s2
f00022a4:       |  |        |                                            |   9982                       jalr    s3
f00022a6:       |  |        |                                            |   9aaa                       add     s5,s5,a0
f00022a8:       |  +--------|--------------------------------------------|-- a011                       j       f00022ac <base_vfprintf+0x462>
f00022aa:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
f00022ac:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
f00022ae:                   |                                            |   4df2                       lw      s11,28(sp)
f00022b0:                   |                                            |   5d02                       lw      s10,32(sp)
f00022b2:                   |                                            |   5c92                       lw      s9,36(sp)
f00022b4:                   |                                            |   5c22                       lw      s8,40(sp)
f00022b6:                   |                                            |   5bb2                       lw      s7,44(sp)
f00022b8:                   |                                            |   5b42                       lw      s6,48(sp)
f00022ba:                   |                                            |   5ad2                       lw      s5,52(sp)
f00022bc:                   |                                            |   5a62                       lw      s4,56(sp)
f00022be:                   |                                            |   59f2                       lw      s3,60(sp)
f00022c0:                   |                                            |   4906                       lw      s2,64(sp)
f00022c2:                   |                                            |   4496                       lw      s1,68(sp)
f00022c4:                   |                                            |   4426                       lw      s0,72(sp)
f00022c6:                   |                                            |   40b6                       lw      ra,76(sp)
f00022c8:                   |                                            |   6161                       addi    sp,sp,80
f00022ca:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
f00022cc:                   \--------------------------------------------|-> 00001597           auipc   a1,0x1
f00022d0:                                                                |   22f58593           addi    a1,a1,559 # f00034fb <kErrorTooWide>
f00022d4:                                                                |   4631                       li      a2,12
f00022d6:                                                                \-- b7f1                       j       f00022a2 <base_vfprintf+0x458>

f00022d8 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
f00022d8:                    715d                       addi    sp,sp,-80
f00022da:                    c686                       sw      ra,76(sp)
f00022dc:                    c4a2                       sw      s0,72(sp)
f00022de:                    c2a6                       sw      s1,68(sp)
f00022e0:                    c0ca                       sw      s2,64(sp)
f00022e2:                    de4e                       sw      s3,60(sp)
f00022e4:                    dc52                       sw      s4,56(sp)
f00022e6:                    da56                       sw      s5,52(sp)
f00022e8:                    d85a                       sw      s6,48(sp)
f00022ea:                    d65e                       sw      s7,44(sp)
f00022ec:                    d462                       sw      s8,40(sp)
f00022ee:                    d266                       sw      s9,36(sp)
f00022f0:                    d06a                       sw      s10,32(sp)
f00022f2:                    8bc6                       mv      s7,a7
f00022f4:                    8a42                       mv      s4,a6
f00022f6:                    8b36                       mv      s6,a3
f00022f8:                    8ab2                       mv      s5,a2
f00022fa:                    892e                       mv      s2,a1
f00022fc:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
f00022fe:          /-------- 02e6fc63           bgeu    a3,a4,f0002336 <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
f0002302:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
f0002306:          |         850a                       mv      a0,sp
f0002308:          |         02000613           li      a2,32
f000230c:          |         85be                       mv      a1,a5
f000230e:          |         26c1                       jal     f00026ce <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0002310:          +-------- c09d                       beqz    s1,f0002336 <hex_dump+0x5e>
f0002312:          |         4c01                       li      s8,0
f0002314:          |  /----> 02000513           li      a0,32
f0002318:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
f000231a:          |  |  /-- 00a4e463           bltu    s1,a0,f0002322 <hex_dump+0x4a>
f000231e:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0002322:          |  |  \-> 858a                       mv      a1,sp
f0002324:          |  |      854e                       mv      a0,s3
f0002326:          |  |      8622                       mv      a2,s0
f0002328:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
f000232a:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f000232c:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f000232e:          |  \----- f0fd                       bnez    s1,f0002314 <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0002330:          |     /-- 000b1663           bnez    s6,f000233c <hex_dump+0x64>
f0002334:       /--|-----|-- a0ad                       j       f000239e <hex_dump+0xc6>
f0002336:       |  \-----|-> 4c01                       li      s8,0
f0002338:       +--------|-- 060b0363           beqz    s6,f000239e <hex_dump+0xc6>
f000233c:       |        \-> 4401                       li      s0,0
f000233e:       |            4601                       li      a2,0
f0002340:       |            fffb0493           addi    s1,s6,-1
f0002344:       |            8b0a                       mv      s6,sp
f0002346:       |            02000c93           li      s9,32
f000234a:       |            5d7d                       li      s10,-1
f000234c:       |     /----> 8526                       mv      a0,s1
f000234e:       |     |  /-- 000a1363           bnez    s4,f0002354 <hex_dump+0x7c>
f0002352:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
f0002354:       |     |  \-> 9556                       add     a0,a0,s5
f0002356:       |     |      00054503           lbu     a0,0(a0)
f000235a:       |     |      00455593           srli    a1,a0,0x4
f000235e:       |     |      95de                       add     a1,a1,s7
f0002360:       |     |      00058583           lb      a1,0(a1)
f0002364:       |     |      00cb06b3           add     a3,s6,a2
f0002368:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f000236c:       |     |      893d                       andi    a0,a0,15
f000236e:       |     |      955e                       add     a0,a0,s7
f0002370:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
f0002374:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0002376:       |     |      00a680a3           sb      a0,1(a3)
f000237a:       |     |  /-- 01961963           bne     a2,s9,f000238c <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
f000237e:       |     |  |   858a                       mv      a1,sp
f0002380:       |     |  |   02000613           li      a2,32
f0002384:       |     |  |   854e                       mv      a0,s3
f0002386:       |     |  |   9902                       jalr    s2
f0002388:       |     |  |   4601                       li      a2,0
f000238a:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f000238c:       |     |  \-> 14fd                       addi    s1,s1,-1
f000238e:       |     |      0405                       addi    s0,s0,1
f0002390:       |     \----- fba49ee3           bne     s1,s10,f000234c <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
f0002394:       +----------- c609                       beqz    a2,f000239e <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
f0002396:       |            858a                       mv      a1,sp
f0002398:       |            854e                       mv      a0,s3
f000239a:       |            9902                       jalr    s2
f000239c:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
f000239e:       \----------> 8562                       mv      a0,s8
f00023a0:                    5d02                       lw      s10,32(sp)
f00023a2:                    5c92                       lw      s9,36(sp)
f00023a4:                    5c22                       lw      s8,40(sp)
f00023a6:                    5bb2                       lw      s7,44(sp)
f00023a8:                    5b42                       lw      s6,48(sp)
f00023aa:                    5ad2                       lw      s5,52(sp)
f00023ac:                    5a62                       lw      s4,56(sp)
f00023ae:                    59f2                       lw      s3,60(sp)
f00023b0:                    4906                       lw      s2,64(sp)
f00023b2:                    4496                       lw      s1,68(sp)
f00023b4:                    4426                       lw      s0,72(sp)
f00023b6:                    40b6                       lw      ra,76(sp)
f00023b8:                    6161                       addi    sp,sp,80
f00023ba:                    8082                       ret

f00023bc <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
f00023bc:              7179                     addi    sp,sp,-48
f00023be:              d606                     sw      ra,44(sp)
f00023c0:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
f00023c2:       /----- ca05                     beqz    a2,f00023f2 <write_digits+0x36>
f00023c4:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f00023c6:       |      02b10293                 addi    t0,sp,43
f00023ca:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
f00023cc:       |  |   02f65633                 divu    a2,a2,a5
f00023d0:       |  |   02f605b3                 mul     a1,a2,a5
f00023d4:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
f00023d8:       |  |   95c2                     add     a1,a1,a6
f00023da:       |  |   00058e03                 lb      t3,0(a1)
f00023de:       |  |   007285b3                 add     a1,t0,t2
f00023e2:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f00023e6:       |  |   13fd                     addi    t2,t2,-1
f00023e8:       |  \-- fef371e3                 bgeu    t1,a5,f00023ca <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f00023ec:       |      40700633                 neg     a2,t2
f00023f0:       |  /-- a031                     j       f00023fc <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
f00023f2:       \--|-> 00080583                 lb      a1,0(a6)
f00023f6:          |   02b105a3                 sb      a1,43(sp)
f00023fa:          |   4605                     li      a2,1
f00023fc:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f00023fe:          /-- c291                     beqz    a3,f0002402 <write_digits+0x46>
f0002400:          |   85b6                     mv      a1,a3
f0002402:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
f0002406:          /-- 00d5e463                 bltu    a1,a3,f000240e <write_digits+0x52>
f000240a:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f000240e:       /--\-X 00b67e63                 bgeu    a2,a1,f000242a <write_digits+0x6e>
f0002412:       |      40c586b3                 sub     a3,a1,a2
f0002416:       |      007c                     addi    a5,sp,12
f0002418:       |      40c78633                 sub     a2,a5,a2
f000241c:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
f000241e:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0002422:       |  |   16fd                     addi    a3,a3,-1
f0002424:       |  |   167d                     addi    a2,a2,-1
f0002426:       |  \-- fee5                     bnez    a3,f000241e <write_digits+0x62>
f0002428:       |      862e                     mv      a2,a1
f000242a:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
f000242c:              8d91                     sub     a1,a1,a2
f000242e:              02058593                 addi    a1,a1,32
f0002432:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
f0002434:              50b2                     lw      ra,44(sp)
f0002436:              6145                     addi    sp,sp,48
f0002438:              8082                     ret

f000243a <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
f000243a:              00052813                 slti    a6,a0,0
f000243e:              41f55793                 srai    a5,a0,0x1f
f0002442:              8fe9                     and     a5,a5,a0
f0002444:              8bfd                     andi    a5,a5,31
f0002446:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
f000244a:              00e87833                 and     a6,a6,a4
f000244e:              02000713                 li      a4,32
f0002452:          /-- 00081363                 bnez    a6,f0002458 <status_extract+0x1e>
f0002456:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
f0002458:          \-> 00271813                 slli    a6,a4,0x2
f000245c:              f0000797                 auipc   a5,0xf0000
f0002460:              b7878793                 addi    a5,a5,-1160 # e0001fd4 <status_codes>
f0002464:              97c2                     add     a5,a5,a6
f0002466:              439c                     lw      a5,0(a5)
f0002468:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f000246a:              00173593                 seqz    a1,a4
f000246e:       /----- cb1d                     beqz    a4,f00024a4 <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
 * @return Zero-extended `field` from `bitfield`.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_read(uint32_t bitfield,
                                      bitfield_field32_t field) {
  return (bitfield >> field.index) & field.mask;
f0002470:       |      00555713                 srli    a4,a0,0x5
f0002474:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
f0002478:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f000247a:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
f000247e:       |      8a7d                     andi    a2,a2,31
f0002480:       |      04066613                 ori     a2,a2,64
f0002484:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
f0002488:       |      01555613                 srli    a2,a0,0x15
f000248c:       |      8a7d                     andi    a2,a2,31
f000248e:       |      04066613                 ori     a2,a2,64
f0002492:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
f0002496:       |      8169                     srli    a0,a0,0x1a
f0002498:       |      897d                     andi    a0,a0,31
f000249a:       |      04056513                 ori     a0,a0,64
f000249e:       |      00a68123                 sb      a0,2(a3)
f00024a2:       |  /-- a011                     j       f00024a6 <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
f00024a4:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
f00024a6:          \-> 0015c513                 xori    a0,a1,1
f00024aa:              8082                     ret

f00024ac <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
f00024ac:       /----- c581                     beqz    a1,f00024b4 <dif_uart_init+0x8>
f00024ae:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
f00024b0:       |      c188                     sw      a0,0(a1)
f00024b2:       |  /-- a011                     j       f00024b6 <dif_uart_init+0xa>
f00024b4:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
f00024b6:          \-> 8532                     mv      a0,a2
f00024b8:              8082                     ret

f00024ba <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:91

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
f00024ba:              1101                     addi    sp,sp,-32
f00024bc:              ce06                     sw      ra,28(sp)
f00024be:              cc22                     sw      s0,24(sp)
f00024c0:              ca26                     sw      s1,20(sp)
f00024c2:              c84a                     sw      s2,16(sp)
f00024c4:              c64e                     sw      s3,12(sp)
f00024c6:              448d                     li      s1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL) {
f00024c8:       /----- cd51                     beqz    a0,f0002564 <dif_uart_configure+0xaa>
f00024ca:       |      892e                     mv      s2,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:96
    return kDifBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
f00024cc:       |      4194                     lw      a3,0(a1)
f00024ce:       +----- cad9                     beqz    a3,f0002564 <dif_uart_configure+0xaa>
f00024d0:       |      00492603                 lw      a2,4(s2)
f00024d4:       +----- ca41                     beqz    a2,f0002564 <dif_uart_configure+0xaa>
f00024d6:       |      842a                     mv      s0,a0
f00024d8:       |      0016e537                 lui     a0,0x16e
f00024dc:       |      36050513                 addi    a0,a0,864 # 16e360 <_ottf_size+0xee360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:118
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
f00024e0:       |      8d35                     xor     a0,a0,a3
f00024e2:       |      016e35b7                 lui     a1,0x16e3
f00024e6:       |      60058593                 addi    a1,a1,1536 # 16e3600 <_ottf_size+0x1663600>
f00024ea:       |      8db1                     xor     a1,a1,a2
f00024ec:       |      00b56733                 or      a4,a0,a1
f00024f0:       |      6541                     lui     a0,0x10
f00024f2:       |      fff50993                 addi    s3,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
f00024f6:       |      4581                     li      a1,0
f00024f8:       |      854e                     mv      a0,s3
f00024fa:       |  /-- cb01                     beqz    a4,f000250a <dif_uart_configure+0x50>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:120
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
f00024fc:       |  |   01469513                 slli    a0,a3,0x14
f0002500:       |  |   00c6d593                 srli    a1,a3,0xc
f0002504:       |  |   4681                     li      a3,0
f0002506:       |  |   4701                     li      a4,0
f0002508:       |  |   2079                     jal     f0002596 <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:122
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
f000250a:       |  \-> 01357633                 and     a2,a0,s3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:125

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
f000250e:       |      8d31                     xor     a0,a0,a2
f0002510:       |      8d4d                     or      a0,a0,a1
f0002512:       +----- e929                     bnez    a0,f0002564 <dif_uart_configure+0xaa>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:47
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
f0002514:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002516:       |      00052823                 sw      zero,16(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:53
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
f000251a:       |      4008                     lw      a0,0(s0)
f000251c:       |      458d                     li      a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000251e:       |      d10c                     sw      a1,32(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:55
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
f0002520:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002522:       |      02052423                 sw      zero,40(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
f0002526:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002528:       |      02052823                 sw      zero,48(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f000252c:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000252e:       |      00052223                 sw      zero,4(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
f0002532:       |      4008                     lw      a0,0(s0)
f0002534:       |      55fd                     li      a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002536:       |      c10c                     sw      a1,0(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifToggleEnabled) {
f0002538:       |      00892683                 lw      a3,8(s2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
f000253c:       |      01061513                 slli    a0,a2,0x10
f0002540:       |      4605                     li      a2,1
f0002542:       |      04300593                 li      a1,67
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
f0002546:       |  /-- 00c68363                 beq     a3,a2,f000254c <dif_uart_configure+0x92>
f000254a:       |  |   458d                     li      a1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
f000254c:       |  \-> 00c92603                 lw      a2,12(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  if (config.parity_enable == kDifToggleEnabled) {
f0002550:       |      8d4d                     or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
  if (config.parity == kDifUartParityOdd) {
f0002552:       |  /-- e219                     bnez    a2,f0002558 <dif_uart_configure+0x9e>
f0002554:       |  |   08056513                 ori     a0,a0,128
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:143
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
f0002558:       |  \-> 400c                     lw      a1,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000255a:       |      c988                     sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:146

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f000255c:       |      4008                     lw      a0,0(s0)
f000255e:       |      4481                     li      s1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002560:       |      00052223                 sw      zero,4(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:149

  return kDifOk;
}
f0002564:       \----> 8526                     mv      a0,s1
f0002566:              49b2                     lw      s3,12(sp)
f0002568:              4942                     lw      s2,16(sp)
f000256a:              44d2                     lw      s1,20(sp)
f000256c:              4462                     lw      s0,24(sp)
f000256e:              40f2                     lw      ra,28(sp)
f0002570:              6105                     addi    sp,sp,32
f0002572:              8082                     ret

f0002574 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:256

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
f0002574:       /----- cd19                     beqz    a0,f0002592 <dif_uart_byte_send_polled+0x1e>
f0002576:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0002578:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f000257a:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:261
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
f000257c:       |  \-- fef5                     bnez    a3,f0002578 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000257e:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0002580:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f0002582:       |  /-- e299                     bnez    a3,f0002588 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0002584:       |  |   ce4c                     sw      a1,28(a2)
f0002586:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0002588:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f000258a:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:268

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
f000258c:       |  \-- dd75                     beqz    a0,f0002588 <dif_uart_byte_send_polled+0x14>
f000258e:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:272
  }

  return kDifOk;
}
f0002590:       |      8082                     ret
f0002592:       \----> 450d                     li      a0,3
f0002594:              8082                     ret

f0002596 <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
f0002596:                 1141                  addi    sp,sp,-16
f0002598:                 c622                  sw      s0,12(sp)
f000259a:                 c426                  sw      s1,8(sp)
f000259c:                 c24a                  sw      s2,4(sp)
f000259e:                 4881                  li      a7,0
f00025a0:                 4801                  li      a6,0
f00025a2:                 4e01                  li      t3,0
f00025a4:                 4e81                  li      t4,0
f00025a6:                 03f00793              li      a5,63
f00025aa:                 42fd                  li      t0,31
f00025ac:                 00159313              slli    t1,a1,0x1
f00025b0:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
f00025b2:       /-------> fe078493              addi    s1,a5,-32
f00025b6:       |     /-- 0004c563              bltz    s1,f00025c0 <udiv64_slow+0x2a>
f00025ba:       |     |   0095df33              srl     t5,a1,s1
f00025be:       |  /--|-- a809                  j       f00025d0 <udiv64_slow+0x3a>
f00025c0:       |  |  \-> 00f554b3              srl     s1,a0,a5
f00025c4:       |  |      40f28433              sub     s0,t0,a5
f00025c8:       |  |      00831433              sll     s0,t1,s0
f00025cc:       |  |      0084ef33              or      t5,s1,s0
f00025d0:       |  \----> 01fe5493              srli    s1,t3,0x1f
f00025d4:       |         001e9413              slli    s0,t4,0x1
f00025d8:       |         00946eb3              or      t4,s0,s1
f00025dc:       |         001e1493              slli    s1,t3,0x1
f00025e0:       |         001f7413              andi    s0,t5,1
f00025e4:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
f00025e8:       |  /----- 00de8563              beq     t4,a3,f00025f2 <udiv64_slow+0x5c>
f00025ec:       |  |      00debe33              sltu    t3,t4,a3
f00025f0:       |  |  /-- a019                  j       f00025f6 <udiv64_slow+0x60>
f00025f2:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
f00025f6:       |     \-> 001e4f93              xori    t6,t3,1
f00025fa:       |         4901                  li      s2,0
f00025fc:       |         4481                  li      s1,0
f00025fe:       |     /-- 000e1463              bnez    t3,f0002606 <udiv64_slow+0x70>
f0002602:       |     |   8936                  mv      s2,a3
f0002604:       |     |   84b2                  mv      s1,a2
f0002606:       |     \-> 01f8de13              srli    t3,a7,0x1f
f000260a:       |         00181413              slli    s0,a6,0x1
f000260e:       |         01c46833              or      a6,s0,t3
f0002612:       |         0886                  slli    a7,a7,0x1
f0002614:       |         409f0e33              sub     t3,t5,s1
f0002618:       |         009f34b3              sltu    s1,t5,s1
f000261c:       |         412e8433              sub     s0,t4,s2
f0002620:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f0002624:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
f0002626:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f000262a:       \-------- f87794e3              bne     a5,t2,f00025b2 <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
f000262e:             /-- c709                  beqz    a4,f0002638 <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
f0002630:             |   01c72023              sw      t3,0(a4)
f0002634:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
f0002638:             \-> 8546                  mv      a0,a7
f000263a:                 85c2                  mv      a1,a6
f000263c:                 4912                  lw      s2,4(sp)
f000263e:                 44a2                  lw      s1,8(sp)
f0002640:                 4432                  lw      s0,12(sp)
f0002642:                 0141                  addi    sp,sp,16
f0002644:                 8082                  ret

f0002646 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
f0002646:                       00153693                seqz    a3,a0
f000264a:                       0015b713                seqz    a4,a1
f000264e:                       8ed9                    or      a3,a3,a4
f0002650:       /-------------- eab5                    bnez    a3,f00026c4 <memcpy+0x7e>
f0002652:       |               4711                    li      a4,4
f0002654:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002656:       |        /----- 00e66c63                bltu    a2,a4,f000266e <memcpy+0x28>
f000265a:       |        |      00a5c6b3                xor     a3,a1,a0
f000265e:       |        |      0036f793                andi    a5,a3,3
f0002662:       |        |      8832                    mv      a6,a2
f0002664:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
f0002666:       |        |  /-- eb91                    bnez    a5,f000267a <memcpy+0x34>
f0002668:       |        |  |   40a006b3                neg     a3,a0
f000266c:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f000266e:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002672:       |           |   9b71                    andi    a4,a4,-4
f0002674:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002678:       |  /--------|-- c6b9                    beqz    a3,f00026c6 <memcpy+0x80>
f000267a:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f000267c:       |  |        /-> 00f58733                add     a4,a1,a5
f0002680:       |  |        |   00070883                lb      a7,0(a4)
f0002684:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f0002688:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f000268a:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f000268e:       |  |        \-- fef697e3                bne     a3,a5,f000267c <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002692:       |  |  /-------- 0106fb63                bgeu    a3,a6,f00026a8 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  // the pointer points to four bytes of four-byte-aligned memory.
  //
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002696:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f000269a:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f000269c:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f00026a0:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f00026a2:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f00026a4:       |  |  |  +----- ff06e9e3                bltu    a3,a6,f0002696 <memcpy+0x50>
f00026a8:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,f00026c4 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
f00026ac:       |  |  |  |      8e15                    sub     a2,a2,a3
f00026ae:       |  |  |  |      00d50733                add     a4,a0,a3
f00026b2:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
f00026b4:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
f00026b8:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
f00026bc:       |  |  |  |  |   167d                    addi    a2,a2,-1
f00026be:       |  |  |  |  |   0705                    addi    a4,a4,1
f00026c0:       |  |  |  |  |   0585                    addi    a1,a1,1
f00026c2:       |  |  |  |  \-- fa6d                    bnez    a2,f00026b4 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
f00026c4:       \--|--|--|----> 8082                    ret
f00026c6:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00026c8:             |  \----- fd06e7e3                bltu    a3,a6,f0002696 <memcpy+0x50>
f00026cc:             \-------- bff1                    j       f00026a8 <memcpy+0x62>

f00026ce <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
f00026ce:                 4691                  li      a3,4
f00026d0:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00026d2:             /-- 00d66663              bltu    a2,a3,f00026de <memset+0x10>
f00026d6:             |   40a006b3              neg     a3,a0
f00026da:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f00026de:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f00026e2:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f00026e6:          /----- cb01                  beqz    a4,f00026f6 <memset+0x28>
f00026e8:          |      87aa                  mv      a5,a0
f00026ea:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
f00026ec:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
f00026f0:          |  |   16fd                  addi    a3,a3,-1
f00026f2:          |  |   0785                  addi    a5,a5,1
f00026f4:          |  \-- fee5                  bnez    a3,f00026ec <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00026f6:       /--\----X 02080263              beqz    a6,f000271a <memset+0x4c>
f00026fa:       |         00e808b3              add     a7,a6,a4
f00026fe:       |         0ff5f813              andi    a6,a1,255
f0002702:       |         010107b7              lui     a5,0x1010
f0002706:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xf90101>
f000270a:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f000270e:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f0002712:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f0002714:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f0002716:       |     \-- ff176ce3              bltu    a4,a7,f000270e <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
f000271a:       \--/----X 00c77a63              bgeu    a4,a2,f000272e <memset+0x60>
f000271e:          |      8e19                  sub     a2,a2,a4
f0002720:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
f0002724:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
f0002728:          |  |   167d                  addi    a2,a2,-1
f000272a:          |  |   0685                  addi    a3,a3,1
f000272c:          |  \-- fe65                  bnez    a2,f0002724 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
f000272e:          \----> 8082                  ret

f0002730 <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
f0002730:                             4691                      li      a3,4
f0002732:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002734:                         /-- 00d66663                  bltu    a2,a3,f0002740 <memchr+0x10>
f0002738:                         |   40a006b3                  neg     a3,a0
f000273c:                         |   0036fe93                  andi    t4,a3,3
f0002740:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002744:                      /----- 000e8b63                  beqz    t4,f000275a <memchr+0x2a>
f0002748:                      |      85aa                      mv      a1,a0
f000274a:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
f000274c:                      |  /-> 0005c683                  lbu     a3,0(a1)
f0002750:       /--------------|--|-- 09c68563                  beq     a3,t3,f00027da <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
f0002754:       |              |  |   17fd                      addi    a5,a5,-1
f0002756:       |              |  |   0585                      addi    a1,a1,1
f0002758:       |              |  \-- fbf5                      bnez    a5,f000274c <memchr+0x1c>
f000275a:       |              \----> 41d605b3                  sub     a1,a2,t4
f000275e:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002760:       |  /----------------- c9a9                      beqz    a1,f00027b2 <memchr+0x82>
f0002762:       |  |                  01d58833                  add     a6,a1,t4
f0002766:       |  |                  010105b7                  lui     a1,0x1010
f000276a:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f000276e:       |  |                  02be02b3                  mul     t0,t3,a1
f0002772:       |  |                  0ff00893                  li      a7,255
f0002776:       |  |                  65c1                      lui     a1,0x10
f0002778:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f000277c:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002780:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0002784:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
f0002786:       |  |              |   0056c7b3                  xor     a5,a3,t0
f000278a:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f000278e:       |  |              |   0ff6f713                  andi    a4,a3,255
f0002792:       +--|--------------|-- 05170463                  beq     a4,a7,f00027da <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f0002796:       |  |              |   0076f733                  and     a4,a3,t2
f000279a:       |  |  /-----------|-- 02770b63                  beq     a4,t2,f00027d0 <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f000279e:       |  |  |           |   0066f6b3                  and     a3,a3,t1
f00027a2:       |  |  |  /--------|-- 02668963                  beq     a3,t1,f00027d4 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f00027a6:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
f00027aa:       |  |  |  |  /-----|-- c69d                      beqz    a3,f00027d8 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00027ac:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
f00027ae:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,f0002780 <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
f00027b2:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,f00027cc <memchr+0x9c>
f00027b6:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
f00027ba:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
f00027be:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
f00027c2:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,f00027da <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
f00027c6:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
f00027c8:       |     |  |  |  |  |   0585                      addi    a1,a1,1
f00027ca:       |     |  |  |  |  \-- fa75                      bnez    a2,f00027be <memchr+0x8e>
f00027cc:       |     |  |  |  \----> 4581                      li      a1,0
f00027ce:       +-----|--|--|-------- a031                      j       f00027da <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
f00027d0:       |     \--|--|-------> 0585                      addi    a1,a1,1
f00027d2:       +--------|--|-------- a021                      j       f00027da <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
f00027d4:       |        \--|-------> 0589                      addi    a1,a1,2
f00027d6:       +-----------|-------- a011                      j       f00027da <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
f00027d8:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f00027da:       \-------------------> 852e                      mv      a0,a1
f00027dc:                             8082                      ret

f00027de <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
f00027de:                          4691                 li      a3,4
f00027e0:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00027e2:                      /-- 00d66663             bltu    a2,a3,f00027ee <memrchr+0x10>
f00027e6:                      |   40a006b3             neg     a3,a0
f00027ea:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f00027ee:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f00027f2:                          9af1                 andi    a3,a3,-4
f00027f4:                          006687b3             add     a5,a3,t1
f00027f8:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
f00027fa:                      /-- 00f66363             bltu    a2,a5,f0002800 <memrchr+0x22>
f00027fe:                      |   86be                 mv      a3,a5
f0002800:                      \-> 0ff5f393             andi    t2,a1,255
f0002804:                   /--/-X 00c7fd63             bgeu    a5,a2,f000281e <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
f0002808:                   |  |   00c50733             add     a4,a0,a2
f000280c:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
f0002810:                   |  |   fff60713             addi    a4,a2,-1
f0002814:                   |  |   863a                 mv      a2,a4
f0002816:                   |  \-- fe7597e3             bne     a1,t2,f0002804 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f000281a:                   |      953a                 add     a0,a0,a4
f000281c:                   |      8082                 ret
f000281e:                   \----> 010105b7             lui     a1,0x1010
f0002822:                          10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
f0002826:                          02b382b3             mul     t0,t2,a1
f000282a:                          00ff0837             lui     a6,0xff0
f000282e:                          65c1                 lui     a1,0x10
f0002830:                          f0058793             addi    a5,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f0002834:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
f0002838:       /--------------/-X 04d37563             bgeu    t1,a3,f0002882 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f000283c:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0002840:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
f0002844:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f0002848:       |              |   01875593             srli    a1,a4,0x18
f000284c:       |  /-----------|-- cd95                 beqz    a1,f0002888 <memrchr+0xaa>
f000284e:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f0002852:       |  |           |   010775b3             and     a1,a4,a6
f0002856:       |  |  /--------|-- 03058c63             beq     a1,a6,f000288e <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f000285a:       |  |  |        |   00f775b3             and     a1,a4,a5
f000285e:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,f0002894 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f0002862:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
f0002866:       |  |  |  |     |   16f1                 addi    a3,a3,-4
f0002868:       |  |  |  |     \-- fd1598e3             bne     a1,a7,f0002838 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000286c:       |  |  |  |         9536                 add     a0,a0,a3
f000286e:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
f0002870:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
f0002874:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
f0002878:       |  |  |  |     |   fff68613             addi    a2,a3,-1
f000287c:       |  |  |  |     |   86b2                 mv      a3,a2
f000287e:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,f000289a <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
f0002882:       \--|--|--|--|--\-X f6fd                 bnez    a3,f0002870 <memrchr+0x92>
f0002884:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002886:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
f0002888:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000288c:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
f000288e:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002892:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
f0002894:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002898:                   |      8082                 ret
f000289a:                   \----> 9532                 add     a0,a0,a2
f000289c:                          8082                 ret
f000289e:                          0000                 unimp
