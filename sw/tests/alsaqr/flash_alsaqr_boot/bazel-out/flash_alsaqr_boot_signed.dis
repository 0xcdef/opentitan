
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot_prog_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot_prog_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xf0000480

Program Header:
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x00001fc4 flags rw-
    LOAD off    0x00001000 vaddr 0xf0000000 paddr 0xf0000000 align 2**12
         filesz 0x00003570 memsz 0x00003570 flags rwx
    LOAD off    0x00004fc4 vaddr 0xe0001fc4 paddr 0xf0003570 align 2**12
         filesz 0x00000094 memsz 0x000001d0 flags rw-
    LOAD off    0x00000194 vaddr 0xe0002194 paddr 0xf0003604 align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0xf0079000 paddr 0xf0079000 align 2**12
         filesz 0x00000000 memsz 0x00007000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                    Size      VMA       LMA       File off  Algn  Flags
  0 .manifest               00000400  f0000000  f0000000  00001000  2**3  CONTENTS, ALLOC, LOAD, DATA
  1 .vectors                00000080  f0000400  f0000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .crt                    000000c6  f0000480  f0000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array             00000000  f0000548  f0000548  00005058  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .text                   000021ec  f0000548  f0000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .shutdown               00000000  f0002734  f0002734  00005058  2**2  CONTENTS
  6 .rodata                 00000e38  f0002738  f0002738  00003738  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .static_critical        00001fc4  e0000000  e0000000  00001000  2**2  ALLOC
  8 .data                   00000094  e0001fc4  f0003570  00004fc4  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss                    0000013c  e0002058  f0003604  00005058  2**2  ALLOC
 10 .freertos.heap          00008000  e0002194  f0003604  00005194  2**2  ALLOC
 11 .non_volatile_scratch   00005000  f007b000  f007b000  00006000  2**11  ALLOC
 12 .non_volatile_counter_0 00000800  f007a800  f007a800  00006000  2**11  ALLOC
 13 .non_volatile_counter_1 00000800  f007a000  f007a000  00006000  2**11  ALLOC
 14 .non_volatile_counter_2 00000800  f0079800  f0079800  00006000  2**11  ALLOC
 15 .non_volatile_counter_3 00000800  f0079000  f0079000  00006000  2**11  ALLOC
 16 .logs.fields            00000154  00010000  00010000  00005058  2**2  CONTENTS, READONLY
 17 .riscv.attributes       00000026  00000000  00000000  000051ac  2**0  CONTENTS, READONLY
 18 .debug_info             00009ded  00000000  00000000  000051d2  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev           0000280e  00000000  00000000  0000efbf  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges          00000088  00000000  00000000  000117cd  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line             00008149  00000000  00000000  00011855  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc              000069ad  00000000  00000000  0001999e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges           000009d0  00000000  00000000  0002034b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str              00003e31  00000000  00000000  00020d1b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame            000010a0  00000000  00000000  00024b4c  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
f0000000 l    d  .manifest      00000000 .manifest
f0000400 l    d  .vectors       00000000 .vectors
f0000480 l    d  .crt   00000000 .crt
f0000548 l    d  .init_array    00000000 .init_array
f0000548 l    d  .text  00000000 .text
f0002734 l    d  .shutdown      00000000 .shutdown
f0002738 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc4 l    d  .data  00000000 .data
e0002058 l    d  .bss   00000000 .bss
e0002194 l    d  .freertos.heap 00000000 .freertos.heap
f007b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
f007a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
f007a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
f0079800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
f0079000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
00010000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    df *ABS*  00000000 manifest_def.c
f0000000 l     O .manifest      00000380 kManifest_
00000000 l       .debug_str     00000000 
000012d3 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00001300 l       .debug_str     00000000 
000014d2 l       .debug_str     00000000 
000014c9 l       .debug_str     00000000 
0000130b l       .debug_str     00000000 
000013b9 l       .debug_str     00000000 
000013e8 l       .debug_str     00000000 
000013f0 l       .debug_str     00000000 
00001404 l       .debug_str     00000000 
0000140f l       .debug_str     00000000 
00001416 l       .debug_str     00000000 
00001424 l       .debug_str     00000000 
00001432 l       .debug_str     00000000 
00001443 l       .debug_str     00000000 
00001474 l       .debug_str     00000000 
00001499 l       .debug_str     00000000 
000014a9 l       .debug_str     00000000 
000014b4 l       .debug_str     00000000 
000014bd l       .debug_str     00000000 
0000132a l       .debug_str     00000000 
00001315 l       .debug_str     00000000 
000024d7 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
000013cb l       .debug_str     00000000 
000013b0 l       .debug_str     00000000 
00001341 l       .debug_str     00000000 
00001359 l       .debug_str     00000000 
00001379 l       .debug_str     00000000 
0000138d l       .debug_str     00000000 
0000139f l       .debug_str     00000000 
00001363 l       .debug_str     00000000 
0000134f l       .debug_str     00000000 
00001464 l       .debug_str     00000000 
0000144d l       .debug_str     00000000 
00001482 l       .debug_str     00000000 
0000146d l       .debug_str     00000000 
000014dd l       .debug_str     00000000 
00000410 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
f0000400 l       .vectors       00000000 
f0000400 l       .vectors       00000000 
f0000480 l       .crt   00000000 
f0000480 l       .crt   00000000 
f00004e4 l       .crt   00000000 init_array_loop_end
f00004d8 l       .crt   00000000 init_array_loop
f00004d8 l       .crt   00000000 
f00004e4 l       .crt   00000000 
00001dd7 l       .debug_info    00000000 
00000a91 l       .debug_abbrev  00000000 
f0000480 l       .vectors       00000000 
f00004e8 l       .crt   00000000 
00000160 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
f00004e8 l       .crt   00000000 
f00004e8 l       .crt   00000000 
f000050a l       .crt   00000000 
f000050c l       .crt   00000000 
f000050c l       .crt   00000000 
0000231d l       .debug_info    00000000 
00000b87 l       .debug_abbrev  00000000 
f0000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
f0000548 l       .text  00000000 
f0000548 l       .text  00000000 
f0000598 l       .text  00000000 
f000059c l       .text  00000000 
f000059c l       .text  00000000 
00001361 l       .debug_info    00000000 
0000074b l       .debug_abbrev  00000000 
f00005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
f00005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
f00005c0 l       .text  00000000 
f00005c0 l       .text  00000000 
f00005e4 l       .text  00000000 
f00005e8 l     F .text  0000001e save_current_sp_to_tcb
f00005e8 l       .text  00000000 
f00005e8 l       .text  00000000 
f0000604 l       .text  00000000 
f0000608 l       .text  00000000 
f0000608 l       .text  00000000 
f000064a l       .text  00000000 
f000064c l       .text  00000000 
f000064e l       .text  00000000 
f0000650 l       .text  00000000 
f0000654 l       .text  00000000 
f0000658 l       .text  00000000 
f0000658 l       .text  00000000 
f00006a0 l       .text  00000000 
f00006a2 l       .text  00000000 
f00006a6 l       .text  00000000 
f00006ac l       .text  00000000 
f00006ac l       .text  00000000 
f00006f4 l       .text  00000000 
f00006f6 l       .text  00000000 
f00006fa l       .text  00000000 
f0000700 l       .text  00000000 
f0000700 l       .text  00000000 
f0000748 l       .text  00000000 
f000074a l       .text  00000000 
f000074e l       .text  00000000 
f0000754 l       .text  00000000 
f0000754 l       .text  00000000 
f000079c l       .text  00000000 
f000079e l       .text  00000000 
f00007a2 l       .text  00000000 
f00007a8 l       .text  00000000 
f00007a8 l       .text  00000000 
00001f1c l       .debug_info    00000000 
00000ab0 l       .debug_abbrev  00000000 
f0000810 l       .text  00000000 
00000000 l    df *ABS*  00000000 flash_alsaqr_boot.c
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f0000818 l       .text  00000000 
f0000818 l       .text  00000000 
f0000818 l       .text  00000000 
f0000820 l       .text  00000000 
f0000820 l       .text  00000000 
f0000828 l       .text  00000000 
f0000828 l       .text  00000000 
f000082e l       .text  00000000 
f0000838 l       .text  00000000 
f000083c l       .text  00000000 
f000083c l       .text  00000000 
f0000846 l       .text  00000000 
f0000846 l       .text  00000000 
f0000848 l       .text  00000000 
f0000848 l       .text  00000000 
f000084c l       .text  00000000 
f0000850 l       .text  00000000 
f0000852 l       .text  00000000 
f0000852 l       .text  00000000 
f000085c l       .text  00000000 
f000085c l       .text  00000000 
f000085e l       .text  00000000 
f000085e l       .text  00000000 
f0000862 l       .text  00000000 
f0000862 l       .text  00000000 
f0000864 l       .text  00000000 
f0000864 l       .text  00000000 
f0000868 l       .text  00000000 
f000086a l       .text  00000000 
f000086a l       .text  00000000 
00000000 l       .debug_loc     00000000 
00000026 l       .debug_loc     00000000 
0000004e l       .debug_loc     00000000 
00000072 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000000b9 l       .debug_str     00000000 
00000109 l       .debug_str     00000000 
000000f8 l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000154 l       .debug_str     00000000 
0000015e l       .debug_str     00000000 
00000168 l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
00002ed5 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
f000086a l       .text  00000000 
00000000 l    df *ABS*  00000000 uart.c
f000086a l       .text  00000000 
f000086a l       .text  00000000 
f000086a l       .text  00000000 
f000086e l       .text  00000000 
f0000872 l       .text  00000000 
f0000874 l       .text  00000000 
f0000878 l       .text  00000000 
f000087a l       .text  00000000 
f000087e l       .text  00000000 
f000087e l       .text  00000000 
f0000884 l       .text  00000000 
f0000888 l       .text  00000000 
f000088a l       .text  00000000 
f000088c l       .text  00000000 
f0000890 l       .text  00000000 
f0000894 l       .text  00000000 
f0000896 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f000089c l       .text  00000000 
f000089e l       .text  00000000 
f00008a2 l       .text  00000000 
f00008a4 l       .text  00000000 
f00008a8 l       .text  00000000 
f00008aa l       .text  00000000 
f00008ac l       .text  00000000 
f00008ac l       .text  00000000 
f00008ac l       .text  00000000 
f00008ac l       .text  00000000 
f00008ac l       .text  00000000 
f00008b0 l       .text  00000000 
f00008b2 l       .text  00000000 
f00008b6 l       .text  00000000 
f00008b8 l       .text  00000000 
f00008ba l       .text  00000000 
f00008ba l       .text  00000000 
00000090 l       .debug_loc     00000000 
000000ab l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00001457 l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
00000624 l       .debug_str     00000000 
000001c2 l       .debug_str     00000000 
000004c4 l       .debug_str     00000000 
0000019d l       .debug_str     00000000 
000001d7 l       .debug_str     00000000 
00003189 l       .debug_str     00000000 
000001a7 l       .debug_str     00000000 
000001b4 l       .debug_str     00000000 
000023a5 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
000001ce l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
00000030 l       .debug_frame   00000000 
f0000898 l       .text  00000000 
f00008ac l       .text  00000000 
f00008ba l       .text  00000000 
00000000 l    df *ABS*  00000000 string_lib.c
f00008ba l       .text  00000000 
f00008ba l       .text  00000000 
f00008ba l       .text  00000000 
f00008bc l       .text  00000000 
f00008d6 l       .text  00000000 
f00008d8 l       .text  00000000 
f00008ec l       .text  00000000 
f00008ec l       .text  00000000 
f000090e l       .text  00000000 
f000090e l       .text  00000000 
f0000912 l       .text  00000000 
f000091a l       .text  00000000 
f000091e l       .text  00000000 
f0000922 l       .text  00000000 
f0000922 l       .text  00000000 
f000092e l       .text  00000000 
f0000934 l       .text  00000000 
f0000934 l       .text  00000000 
f0000936 l       .text  00000000 
f0000936 l       .text  00000000 
f0000938 l       .text  00000000 
f000093a l       .text  00000000 
f000093a l       .text  00000000 
f000093e l       .text  00000000 
f0000940 l       .text  00000000 
f0000944 l       .text  00000000 
f0000948 l       .text  00000000 
f0000948 l       .text  00000000 
f000094c l       .text  00000000 
f000094c l       .text  00000000 
f000094e l       .text  00000000 
f0000952 l       .text  00000000 
f0000956 l       .text  00000000 
f000095c l       .text  00000000 
f0000964 l       .text  00000000 
f0000966 l       .text  00000000 
f0000966 l       .text  00000000 
f000096e l       .text  00000000 
f0000972 l       .text  00000000 
f0000974 l       .text  00000000 
f0000978 l       .text  00000000 
f0000978 l       .text  00000000 
f0000980 l       .text  00000000 
f0000984 l       .text  00000000 
f0000986 l       .text  00000000 
f000098a l       .text  00000000 
f000098a l       .text  00000000 
f00009a2 l       .text  00000000 
f00009a8 l       .text  00000000 
f00009b2 l       .text  00000000 
f00009c2 l       .text  00000000 
f00009c2 l       .text  00000000 
f00009c6 l       .text  00000000 
f00009c6 l       .text  00000000 
f00009c8 l       .text  00000000 
f00009c8 l       .text  00000000 
f00009d0 l       .text  00000000 
f00009d2 l       .text  00000000 
f00009d4 l       .text  00000000 
f00009d4 l       .text  00000000 
f00009da l       .text  00000000 
f00009e2 l       .text  00000000 
f00009e8 l       .text  00000000 
f00009ec l       .text  00000000 
f00009f0 l       .text  00000000 
f00009f4 l       .text  00000000 
f0000a3c l     F .text  000000cc qprints
f00009fa l       .text  00000000 
f00009fc l       .text  00000000 
f0000a02 l       .text  00000000 
f0000a06 l       .text  00000000 
f0000a0c l       .text  00000000 
f0000a0e l       .text  00000000 
f0000b08 l     F .text  00000138 qprinti
f0000a16 l       .text  00000000 
f0000a18 l       .text  00000000 
f0000a18 l       .text  00000000 
f0000a1a l       .text  00000000 
f0000a1c l       .text  00000000 
f0000a1c l       .text  00000000 
f0000a2e l       .text  00000000 
f0000a3c l       .text  00000000 
f0000a3c l       .text  00000000 
f0000a3c l       .text  00000000 
f0000a3c l       .text  00000000 
f0000a3c l       .text  00000000 
f0000a3e l       .text  00000000 
f0000a4c l       .text  00000000 
f0000a4e l       .text  00000000 
f0000a50 l       .text  00000000 
f0000a50 l       .text  00000000 
f0000a54 l       .text  00000000 
f0000a54 l       .text  00000000 
f0000a58 l       .text  00000000 
f0000a5a l       .text  00000000 
f0000a5c l       .text  00000000 
f0000a60 l       .text  00000000 
f0000a60 l       .text  00000000 
f0000a68 l       .text  00000000 
f0000a6c l       .text  00000000 
f0000a6c l       .text  00000000 
f0000a6e l       .text  00000000 
f0000a70 l       .text  00000000 
f0000a74 l       .text  00000000 
f0000a74 l       .text  00000000 
f0000a80 l       .text  00000000 
f0000a82 l       .text  00000000 
f0000a86 l       .text  00000000 
f0000a86 l       .text  00000000 
f0000a8a l       .text  00000000 
f0000a8a l       .text  00000000 
f0000a92 l       .text  00000000 
f0000a94 l       .text  00000000 
f0000a94 l       .text  00000000 
f0000a98 l       .text  00000000 
f0000a98 l       .text  00000000 
f0000a9a l       .text  00000000 
f0000aa2 l       .text  00000000 
f0000aa6 l       .text  00000000 
f0000aa8 l       .text  00000000 
f0000aae l       .text  00000000 
f0000aae l       .text  00000000 
f0000ab2 l       .text  00000000 
f0000ab2 l       .text  00000000 
f0000ab4 l       .text  00000000 
f0000abc l       .text  00000000 
f0000ac0 l       .text  00000000 
f0000ac6 l       .text  00000000 
f0000ac6 l       .text  00000000 
f0000aca l       .text  00000000 
f0000aca l       .text  00000000 
f0000ace l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000ad8 l       .text  00000000 
f0000ada l       .text  00000000 
f0000ada l       .text  00000000 
f0000ade l       .text  00000000 
f0000ae0 l       .text  00000000 
f0000ae4 l       .text  00000000 
f0000aea l       .text  00000000 
f0000aea l       .text  00000000 
f0000aee l       .text  00000000 
f0000aee l       .text  00000000 
f0000af0 l       .text  00000000 
f0000af0 l       .text  00000000 
f0000af4 l       .text  00000000 
f0000b08 l       .text  00000000 
f0000b08 l       .text  00000000 
f0000b08 l       .text  00000000 
f0000b08 l       .text  00000000 
f0000b08 l       .text  00000000 
f0000b0a l       .text  00000000 
f0000b14 l       .text  00000000 
f0000b16 l       .text  00000000 
f0000b18 l       .text  00000000 
f0000b18 l       .text  00000000 
f0000b1a l       .text  00000000 
f0000b1e l       .text  00000000 
f0000b1e l       .text  00000000 
f0000b26 l       .text  00000000 
f0000b34 l       .text  00000000 
f0000b38 l       .text  00000000 
f0000b38 l       .text  00000000 
f0000b3c l       .text  00000000 
f0000b3c l       .text  00000000 
f0000b3e l       .text  00000000 
f0000b42 l       .text  00000000 
f0000b46 l       .text  00000000 
f0000b48 l       .text  00000000 
f0000b50 l       .text  00000000 
f0000b52 l       .text  00000000 
f0000b52 l       .text  00000000 
f0000b54 l       .text  00000000 
f0000b54 l       .text  00000000 
f0000b56 l       .text  00000000 
f0000b5a l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5e l       .text  00000000 
f0000b5e l       .text  00000000 
f0000b62 l       .text  00000000 
f0000b66 l       .text  00000000 
f0000b66 l       .text  00000000 
f0000b6a l       .text  00000000 
f0000b6e l       .text  00000000 
f0000b6e l       .text  00000000 
f0000b70 l       .text  00000000 
f0000b70 l       .text  00000000 
f0000b76 l       .text  00000000 
f0000b76 l       .text  00000000 
f0000b7a l       .text  00000000 
f0000b7a l       .text  00000000 
f0000b7e l       .text  00000000 
f0000b82 l       .text  00000000 
f0000b86 l       .text  00000000 
f0000b88 l       .text  00000000 
f0000b8a l       .text  00000000 
f0000b8a l       .text  00000000 
f0000b8c l       .text  00000000 
f0000b8c l       .text  00000000 
f0000b8e l       .text  00000000 
f0000b92 l       .text  00000000 
f0000b96 l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000ba4 l       .text  00000000 
f0000ba8 l       .text  00000000 
f0000baa l       .text  00000000 
f0000bae l       .text  00000000 
f0000bb0 l       .text  00000000 
f0000bb2 l       .text  00000000 
f0000bb2 l       .text  00000000 
f0000bb4 l       .text  00000000 
f0000bb8 l       .text  00000000 
f0000bb8 l       .text  00000000 
f0000bbc l       .text  00000000 
f0000bbc l       .text  00000000 
f0000bc0 l       .text  00000000 
f0000bc2 l       .text  00000000 
f0000bc2 l       .text  00000000 
f0000bc6 l       .text  00000000 
f0000bc8 l       .text  00000000 
f0000bcc l       .text  00000000 
f0000bce l       .text  00000000 
f0000bd2 l       .text  00000000 
f0000bd4 l       .text  00000000 
f0000bd6 l       .text  00000000 
f0000bda l       .text  00000000 
f0000bdc l       .text  00000000 
f0000bdc l       .text  00000000 
f0000be0 l       .text  00000000 
f0000be0 l       .text  00000000 
f0000be2 l       .text  00000000 
f0000be4 l       .text  00000000 
f0000be6 l       .text  00000000 
f0000be6 l       .text  00000000 
f0000bec l       .text  00000000 
f0000bee l       .text  00000000 
f0000bee l       .text  00000000 
f0000bf2 l       .text  00000000 
f0000bf6 l       .text  00000000 
f0000bf6 l       .text  00000000 
f0000bfe l       .text  00000000 
f0000c02 l       .text  00000000 
f0000c04 l       .text  00000000 
f0000c08 l       .text  00000000 
f0000c08 l       .text  00000000 
f0000c0c l       .text  00000000 
f0000c12 l       .text  00000000 
f0000c12 l       .text  00000000 
f0000c14 l       .text  00000000 
f0000c16 l       .text  00000000 
f0000c16 l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c1e l       .text  00000000 
f0000c1e l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c26 l       .text  00000000 
f0000c28 l       .text  00000000 
f0000c28 l       .text  00000000 
f0000c30 l       .text  00000000 
f0000c30 l       .text  00000000 
f0000c32 l       .text  00000000 
f0000c32 l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c36 l       .text  00000000 
f0000c40 l       .text  00000000 
f0000c40 l       .text  00000000 
000000c6 l       .debug_loc     00000000 
000000ec l       .debug_loc     00000000 
00000112 l       .debug_loc     00000000 
0000013a l       .debug_loc     00000000 
00000160 l       .debug_loc     00000000 
000001bd l       .debug_loc     00000000 
000001e5 l       .debug_loc     00000000 
0000020b l       .debug_loc     00000000 
00000240 l       .debug_loc     00000000 
00000280 l       .debug_loc     00000000 
0000029b l       .debug_loc     00000000 
000002b6 l       .debug_loc     00000000 
000002dc l       .debug_loc     00000000 
0000031c l       .debug_loc     00000000 
00000342 l       .debug_loc     00000000 
00000389 l       .debug_loc     00000000 
000003a4 l       .debug_loc     00000000 
000003cc l       .debug_loc     00000000 
00000453 l       .debug_loc     00000000 
00000479 l       .debug_loc     00000000 
000004b9 l       .debug_loc     00000000 
000004da l       .debug_loc     00000000 
000004ff l       .debug_loc     00000000 
00000525 l       .debug_loc     00000000 
00000561 l       .debug_loc     00000000 
00000587 l       .debug_loc     00000000 
000005b8 l       .debug_loc     00000000 
000005e9 l       .debug_loc     00000000 
00000625 l       .debug_loc     00000000 
00000667 l       .debug_loc     00000000 
00000691 l       .debug_loc     00000000 
000006ee l       .debug_loc     00000000 
00000716 l       .debug_loc     00000000 
00000794 l       .debug_loc     00000000 
000007af l       .debug_loc     00000000 
000007d5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000001db l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000206 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
000001b4 l       .debug_str     00000000 
00000227 l       .debug_str     00000000 
00003b81 l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000235 l       .debug_str     00000000 
0000024a l       .debug_str     00000000 
0000129d l       .debug_str     00000000 
00003afa l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00000242 l       .debug_str     00000000 
00000238 l       .debug_str     00000000 
00000252 l       .debug_str     00000000 
0000025a l       .debug_str     00000000 
000001d7 l       .debug_str     00000000 
000023a5 l       .debug_str     00000000 
00002ed5 l       .debug_str     00000000 
00000278 l       .debug_str     00000000 
00000288 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
00000297 l       .debug_str     00000000 
00003189 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
000004c4 l       .debug_str     00000000 
000024aa l       .debug_str     00000000 
000002a5 l       .debug_str     00000000 
000002a8 l       .debug_str     00000000 
0000029b l       .debug_str     00000000 
000002b0 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
00003bc6 l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
00000273 l       .debug_str     00000000 
00000265 l       .debug_str     00000000 
00003327 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00003bb2 l       .debug_str     00000000 
00002298 l       .debug_str     00000000 
00000094 l       .debug_frame   00000000 
f0000a3c l       .text  00000000 
f0000b08 l       .text  00000000 
f0000c40 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
f0000c40 l       .text  00000000 
f0000c40 l       .text  00000000 
f0000c40 l       .text  00000000 
f0000c42 l       .text  00000000 
f0000c42 l       .text  00000000 
f0000c44 l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c50 l       .text  00000000 
f0000c58 l       .text  00000000 
f0000c58 l       .text  00000000 
f0000c62 l       .text  00000000 
00010000 l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
f0000c64 l       .text  00000000 
f0000c76 l       .text  00000000 
f0000c76 l       .text  00000000 
f0000c8c l       .text  00000000 
f0000c8c l       .text  00000000 
f0000c92 l       .text  00000000 
f0000c92 l       .text  00000000 
e0002058 l     O .bss   00000004 uart0
f0000c92 l       .text  00000000 
f0000c92 l       .text  00000000 
f0000c92 l       .text  00000000 
f0000c94 l       .text  00000000 
f0000c9c l       .text  00000000 
f0000ca2 l       .text  00000000 
f0000ca6 l       .text  00000000 
f0000ca6 l       .text  00000000 
f0000cb0 l       .text  00000000 
f0000cc0 l       .text  00000000 
f0000dc4 l     F .text  000000da init_uart
f0000cc2 l       .text  00000000 
f0000cc4 l       .text  00000000 
f0000cc4 l       .text  00000000 
f0000cc8 l       .text  00000000 
f0000cca l       .text  00000000 
00010014 l     O .logs.fields   00000014 _ottf_main.kLogFields
f0000ccc l       .text  00000000 
f0000cdc l       .text  00000000 
f0000cdc l       .text  00000000 
f0000cde l       .text  00000000 
f0000cde l       .text  00000000 
f0000cf6 l       .text  00000000 
f0000cf6 l       .text  00000000 
f0000d00 l       .text  00000000 
f0000d02 l       .text  00000000 
f0000d04 l       .text  00000000 
f0000d04 l       .text  00000000 
f0000d08 l       .text  00000000 
f0000d0a l       .text  00000000 
00010028 l     O .logs.fields   00000014 _ottf_main.kLogFields.3
f0000d0a l       .text  00000000 
f0000d1a l       .text  00000000 
f0000d1a l       .text  00000000 
f0000d1c l       .text  00000000 
f0000d1c l       .text  00000000 
f0000d34 l       .text  00000000 
f0000d34 l       .text  00000000 
f0000d3a l       .text  00000000 
f0000d3e l       .text  00000000 
f0000d3e l       .text  00000000 
f0000d46 l       .text  00000000 
f0000d56 l       .text  00000000 
f0000d5a l       .text  00000000 
f0000d5c l       .text  00000000 
f0000e9e l     F .text  00000092 test_wrapper
f0000d5c l       .text  00000000 
f0000d6c l       .text  00000000 
f0000d78 l       .text  00000000 
f0000d78 l       .text  00000000 
f0000d7c l       .text  00000000 
f0000d7c l       .text  00000000 
f0000d7e l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d86 l       .text  00000000 
0001003c l     O .logs.fields   00000014 _ottf_main.kLogFields.7
f0000d88 l       .text  00000000 
f0000d96 l       .text  00000000 
f0000d96 l       .text  00000000 
f0000d98 l       .text  00000000 
f0000d98 l       .text  00000000 
f0000dae l       .text  00000000 
f0000dae l       .text  00000000 
f0000db4 l       .text  00000000 
f0000db8 l       .text  00000000 
f0000db8 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc6 l       .text  00000000 
f0000dc6 l       .text  00000000 
f0000dc6 l       .text  00000000 
f0000dcc l       .text  00000000 
f0000ddc l       .text  00000000 
f0000ddc l       .text  00000000 
f0000de4 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000de8 l       .text  00000000 
f0000de8 l       .text  00000000 
f0000dea l       .text  00000000 
f0000dec l       .text  00000000 
00010050 l     O .logs.fields   00000014 init_uart.kLogFields
f0000dec l       .text  00000000 
f0000dfc l       .text  00000000 
f0000dfc l       .text  00000000 
f0000dfe l       .text  00000000 
f0000dfe l       .text  00000000 
f0000e16 l       .text  00000000 
f0000e16 l       .text  00000000 
f0000e1c l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e4c l       .text  00000000 
f0000e4e l       .text  00000000 
f0000e50 l       .text  00000000 
f0000e50 l       .text  00000000 
f0000e52 l       .text  00000000 
f0000e54 l       .text  00000000 
00010064 l     O .logs.fields   00000014 init_uart.kLogFields.11
f0000e54 l       .text  00000000 
f0000e64 l       .text  00000000 
f0000e64 l       .text  00000000 
f0000e66 l       .text  00000000 
f0000e66 l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e84 l       .text  00000000 
f0000e88 l       .text  00000000 
f0000e88 l       .text  00000000 
f0000e94 l       .text  00000000 
f0000e94 l       .text  00000000 
f0000e9e l       .text  00000000 
f0000e9e l       .text  00000000 
f0000e9e l       .text  00000000 
f0000e9e l       .text  00000000 
f0000e9e l       .text  00000000 
f0000ea0 l       .text  00000000 
f0000ea6 l       .text  00000000 
f0000ea8 l       .text  00000000 
f0000eac l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb2 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000eb6 l       .text  00000000 
f0000eba l       .text  00000000 
f0000eba l       .text  00000000 
f0000eca l       .text  00000000 
f0000eca l       .text  00000000 
f0000ed4 l       .text  00000000 
f0000ed6 l       .text  00000000 
f0000ede l       .text  00000000 
f0000ee2 l       .text  00000000 
f0000ee4 l       .text  00000000 
f0000ee6 l       .text  00000000 
f0000ee6 l       .text  00000000 
f0000ef0 l       .text  00000000 
f0000ef2 l       .text  00000000 
00010078 l     O .logs.fields   00000014 report_test_status.kLogFields
f0000ef4 l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f06 l       .text  00000000 
f0000f1e l       .text  00000000 
f0000f1e l       .text  00000000 
f0000f20 l       .text  00000000 
f0000f20 l       .text  00000000 
f0000f26 l       .text  00000000 
f0000f26 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
000007f0 l       .debug_loc     00000000 
0000080b l       .debug_loc     00000000 
00000826 l       .debug_loc     00000000 
00000841 l       .debug_loc     00000000 
0000085c l       .debug_loc     00000000 
0000088d l       .debug_loc     00000000 
000008a8 l       .debug_loc     00000000 
000008d9 l       .debug_loc     00000000 
0000090a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000002b6 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000078 l       .debug_ranges  00000000 
0000083d l       .debug_str     00000000 
000002e7 l       .debug_str     00000000 
0000036d l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
0000033c l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
00002fde l       .debug_str     00000000 
00000367 l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000345 l       .debug_str     00000000 
00000338 l       .debug_str     00000000 
000002f2 l       .debug_str     00000000 
00000303 l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
00000326 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
000008a3 l       .debug_str     00000000 
000003de l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
00000385 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003af l       .debug_str     00000000 
0000038b l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
00000460 l       .debug_str     00000000 
0000044d l       .debug_str     00000000 
000003fe l       .debug_str     00000000 
000024b3 l       .debug_str     00000000 
00000419 l       .debug_str     00000000 
00000431 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
000003eb l       .debug_str     00000000 
000003da l       .debug_str     00000000 
000008ae l       .debug_str     00000000 
000007e0 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
0000048a l       .debug_str     00000000 
000004a3 l       .debug_str     00000000 
000004b5 l       .debug_str     00000000 
000004c6 l       .debug_str     00000000 
000004d8 l       .debug_str     00000000 
00000532 l       .debug_str     00000000 
000004ea l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
0000050b l       .debug_str     00000000 
0000051c l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
0000054f l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
00000575 l       .debug_str     00000000 
00000584 l       .debug_str     00000000 
00000593 l       .debug_str     00000000 
000005ac l       .debug_str     00000000 
000005eb l       .debug_str     00000000 
000005c6 l       .debug_str     00000000 
000005d9 l       .debug_str     00000000 
0000061b l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000608 l       .debug_str     00000000 
0000062b l       .debug_str     00000000 
0000062c l       .debug_str     00000000 
0000035f l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00000637 l       .debug_str     00000000 
0000064a l       .debug_str     00000000 
0000065f l       .debug_str     00000000 
00000676 l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
00000682 l       .debug_str     00000000 
00000858 l       .debug_str     00000000 
00000868 l       .debug_str     00000000 
00000696 l       .debug_str     00000000 
0000087e l       .debug_str     00000000 
000006a2 l       .debug_str     00000000 
00000896 l       .debug_str     00000000 
000006b0 l       .debug_str     00000000 
000006c1 l       .debug_str     00000000 
000006de l       .debug_str     00000000 
000006e8 l       .debug_str     00000000 
000006f9 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000001ce l       .debug_str     00000000 
00000707 l       .debug_str     00000000 
00000717 l       .debug_str     00000000 
0000072d l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
000008b8 l       .debug_str     00000000 
000008d2 l       .debug_str     00000000 
000005a5 l       .debug_str     00000000 
00000755 l       .debug_str     00000000 
00000763 l       .debug_str     00000000 
000007b8 l       .debug_str     00000000 
00000776 l       .debug_str     00000000 
0000077f l       .debug_str     00000000 
0000078b l       .debug_str     00000000 
00000624 l       .debug_str     00000000 
00000799 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
000007c8 l       .debug_str     00000000 
000007d9 l       .debug_str     00000000 
000007ec l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000807 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
000008c5 l       .debug_str     00000000 
00000150 l       .debug_frame   00000000 
f0000c92 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000e9e l       .text  00000000 
f0000f30 l       .text  00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f32 l       .text  00000000 
f0000f32 l       .text  00000000 
00000000 l       .debug_str     00000000 
000008e2 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
00000228 l       .debug_frame   00000000 
f0000f32 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
f0000f32 l       .text  00000000 
f0000f32 l       .text  00000000 
f0000f32 l       .text  00000000 
f0000f34 l       .text  00000000 
f0000f34 l       .text  00000000 
f0000f36 l       .text  00000000 
f0000f40 l       .text  00000000 
f0000f42 l       .text  00000000 
f0000f42 l       .text  00000000 
f0000f58 l       .text  00000000 
f0000f58 l       .text  00000000 
f0000f5a l       .text  00000000 
0001008c l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
f0000f5a l       .text  00000000 
f0000f68 l       .text  00000000 
f0000f68 l       .text  00000000 
f0000f6c l       .text  00000000 
f0000f6c l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f72 l       .text  00000000 
f0000f72 l       .text  00000000 
f0000f74 l       .text  00000000 
f0000f74 l       .text  00000000 
f0000f7e l       .text  00000000 
f0000f80 l       .text  00000000 
f0000f80 l       .text  00000000 
f0000f96 l       .text  00000000 
f0000f96 l       .text  00000000 
f0000f98 l       .text  00000000 
000100a0 l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
f0000f98 l       .text  00000000 
f0000fa6 l       .text  00000000 
f0000fa6 l       .text  00000000 
f0000faa l       .text  00000000 
f0000faa l       .text  00000000 
f0000fae l       .text  00000000 
f0000fae l       .text  00000000 
f0000fae l       .text  00000000 
00000925 l       .debug_loc     00000000 
00000940 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000000c8 l       .debug_ranges  00000000 
00000963 l       .debug_str     00000000 
000002e7 l       .debug_str     00000000 
0000036d l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
0000033c l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
00002fde l       .debug_str     00000000 
00000367 l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000345 l       .debug_str     00000000 
00000338 l       .debug_str     00000000 
000002f2 l       .debug_str     00000000 
00000303 l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
00000326 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
0000099e l       .debug_str     00000000 
000009b1 l       .debug_str     00000000 
0000065f l       .debug_str     00000000 
0000064a l       .debug_str     00000000 
0000094d l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
0000095d l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
00000682 l       .debug_str     00000000 
0000024c l       .debug_frame   00000000 
f0000f70 l       .text  00000000 
f0000fae l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
f0000fae l       .text  00000000 
f0000fae l       .text  00000000 
f0000fae l       .text  00000000 
f0000fb0 l       .text  00000000 
f0000fb0 l       .text  00000000 
f0000fb2 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fba l       .text  00000000 
f0000fba l       .text  00000000 
f0000fbe l       .text  00000000 
f0000fbe l       .text  00000000 
f0000fc2 l       .text  00000000 
f0000fc2 l       .text  00000000 
f0000fca l       .text  00000000 
f0000fca l       .text  00000000 
00000000 l       .debug_str     00000000 
000009bc l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000009f1 l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
0000062c l       .debug_str     00000000 
0000035f l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00000a55 l       .debug_str     00000000 
00000a0e l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00000a1d l       .debug_str     00000000 
00000a2f l       .debug_str     00000000 
00000a41 l       .debug_str     00000000 
00000290 l       .debug_frame   00000000 
f0000fca l       .text  00000000 
00000000 l    df *ABS*  00000000 irq.c
f0000fca l       .text  00000000 
f0000fca l       .text  00000000 
f0000fca l       .text  00000000 
f0000fca l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fce l       .text  00000000 
f0000fce l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fd4 l       .text  00000000 
f0000fd4 l       .text  00000000 
f0000fd6 l       .text  00000000 
f0000fd6 l       .text  00000000 
f0000fda l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fde l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe4 l       .text  00000000 
f0000fe8 l       .text  00000000 
f0000fea l       .text  00000000 
f0000fea l       .text  00000000 
f0000fec l       .text  00000000 
f0000ff0 l       .text  00000000 
f0000ff4 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ff8 l       .text  00000000 
f0000ffc l       .text  00000000 
f0000ffc l       .text  00000000 
f0001000 l       .text  00000000 
f0001002 l       .text  00000000 
f0001002 l       .text  00000000 
f0001006 l       .text  00000000 
f0001006 l       .text  00000000 
f000100a l       .text  00000000 
f000100c l       .text  00000000 
f000100c l       .text  00000000 
f000100c l       .text  00000000 
f000100c l       .text  00000000 
f000100c l       .text  00000000 
f000100c l       .text  00000000 
f000100e l       .text  00000000 
f0001010 l       .text  00000000 
f0001010 l       .text  00000000 
f0001014 l       .text  00000000 
f0001016 l       .text  00000000 
f0001016 l       .text  00000000 
f0001018 l       .text  00000000 
f0001018 l       .text  00000000 
f000101c l       .text  00000000 
f000101e l       .text  00000000 
f000101e l       .text  00000000 
0000095b l       .debug_loc     00000000 
0000098b l       .debug_loc     00000000 
000009bb l       .debug_loc     00000000 
000009eb l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000000e0 l       .debug_ranges  00000000 
00000a85 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000a9b l       .debug_str     00000000 
00000ab3 l       .debug_str     00000000 
00000ac8 l       .debug_str     00000000 
00000ade l       .debug_str     00000000 
0000094d l       .debug_str     00000000 
00000de4 l       .debug_str     00000000 
00000a1d l       .debug_str     00000000 
00000af0 l       .debug_str     00000000 
00000a0e l       .debug_str     00000000 
00000a2f l       .debug_str     00000000 
00000ae6 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000002bc l       .debug_frame   00000000 
f0000fdc l       .text  00000000 
f0000ff6 l       .text  00000000 
f000100c l       .text  00000000 
f000101e l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
f000101e l       .text  00000000 
f000101e l       .text  00000000 
f000101e l       .text  00000000 
f0001020 l       .text  00000000 
f000102a l       .text  00000000 
f000102c l       .text  00000000 
f000102e l       .text  00000000 
f000102e l       .text  00000000 
f0001032 l       .text  00000000 
f0001034 l       .text  00000000 
f0001034 l       .text  00000000 
f0001038 l       .text  00000000 
f0001038 l       .text  00000000 
f0001042 l       .text  00000000 
f0001044 l       .text  00000000 
f0001044 l       .text  00000000 
f0001046 l       .text  00000000 
000100b4 l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
f0001046 l       .text  00000000 
f0001068 l       .text  00000000 
f0001068 l       .text  00000000 
f0001086 l       .text  00000000 
f0001086 l       .text  00000000 
f0001094 l       .text  00000000 
f0001094 l       .text  00000000 
f0001094 l       .text  00000000 
f0001094 l       .text  00000000 
f0001094 l       .text  00000000 
f0001096 l       .text  00000000 
f0001096 l       .text  00000000 
f0001098 l       .text  00000000 
f000109c l       .text  00000000 
f000109c l       .text  00000000 
f000109e l       .text  00000000 
f000109e l       .text  00000000 
f00010a0 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010ba l       .text  00000000 
f00010c0 l       .text  00000000 
f00010c6 l       .text  00000000 
f00010cc l       .text  00000000 
f00010d2 l       .text  00000000 
f00010d8 l       .text  00000000 
f00010e0 l     F .text  00000020 generic_fault_handler
f00010de l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e2 l       .text  00000000 
f00010e2 l       .text  00000000 
f00010e4 l       .text  00000000 
f00010e8 l       .text  00000000 
f00010ea l       .text  00000000 
f00010ea l       .text  00000000 
f00010ec l       .text  00000000 
f00010ee l       .text  00000000 
f0002e2c l     O .rodata        00000080 exception_reason
f00010fa l       .text  00000000 
f00010fc l       .text  00000000 
f00010fc l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001102 l       .text  00000000 
f0001102 l       .text  00000000 
f0001104 l       .text  00000000 
f0001108 l       .text  00000000 
f000110a l       .text  00000000 
f0001114 l       .text  00000000 
f0001114 l       .text  00000000 
f0001118 l       .text  00000000 
f0001118 l       .text  00000000 
f0001118 l       .text  00000000 
f0001118 l       .text  00000000 
f0001118 l       .text  00000000 
f0001118 l       .text  00000000 
f000111a l       .text  00000000 
f000111a l       .text  00000000 
f000111c l       .text  00000000 
f0001120 l       .text  00000000 
f0001122 l       .text  00000000 
f000112c l       .text  00000000 
f000112c l       .text  00000000 
f0001130 l       .text  00000000 
f0001130 l       .text  00000000 
f0001130 l       .text  00000000 
f0001130 l       .text  00000000 
f0001130 l       .text  00000000 
f0001130 l       .text  00000000 
f0001130 l       .text  00000000 
f0001134 l       .text  00000000 
f0001134 l       .text  00000000 
f0001134 l       .text  00000000 
f0001134 l       .text  00000000 
f0001134 l       .text  00000000 
f0001136 l       .text  00000000 
f0001136 l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000114a l       .text  00000000 
f000114a l       .text  00000000 
f0001152 l       .text  00000000 
f0001154 l       .text  00000000 
f0001154 l       .text  00000000 
f0001156 l       .text  00000000 
f0001156 l       .text  00000000 
f0001158 l       .text  00000000 
f000115a l       .text  00000000 
000100c8 l     O .logs.fields   00000014 ottf_external_isr.kLogFields
f000115a l       .text  00000000 
f000116a l       .text  00000000 
f000116a l       .text  00000000 
f000116c l       .text  00000000 
f000116c l       .text  00000000 
f0001184 l       .text  00000000 
f0001184 l       .text  00000000 
f000118a l       .text  00000000 
f000118e l       .text  00000000 
f000118e l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001192 l       .text  00000000 
f000119e l       .text  00000000 
f000119e l       .text  00000000 
f00011a0 l       .text  00000000 
f00011a4 l       .text  00000000 
f00011a4 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011aa l       .text  00000000 
f00011b6 l       .text  00000000 
f00011b8 l       .text  00000000 
f00011b8 l       .text  00000000 
f00011ba l       .text  00000000 
f00011ba l       .text  00000000 
f00011bc l       .text  00000000 
f00011be l       .text  00000000 
000100dc l     O .logs.fields   00000014 ottf_external_isr.kLogFields.5
f00011be l       .text  00000000 
f00011ce l       .text  00000000 
f00011ce l       .text  00000000 
f00011d0 l       .text  00000000 
f00011d0 l       .text  00000000 
f00011e8 l       .text  00000000 
f00011e8 l       .text  00000000 
f00011ee l       .text  00000000 
f00011f2 l       .text  00000000 
f00011f2 l       .text  00000000 
f00011fc l       .text  00000000 
f0001200 l       .text  00000000 
f0001202 l       .text  00000000 
f0001202 l       .text  00000000 
f000120c l       .text  00000000 
f000120c l       .text  00000000 
f0001210 l       .text  00000000 
f0001210 l       .text  00000000 
f0001210 l       .text  00000000 
f0001210 l     F .text  00000018 generic_internal_irq_handler
f0001210 l       .text  00000000 
f0001210 l       .text  00000000 
f0001210 l       .text  00000000 
f0001212 l       .text  00000000 
f0001212 l       .text  00000000 
f0001214 l       .text  00000000 
f0001218 l       .text  00000000 
f000121a l       .text  00000000 
f0001224 l       .text  00000000 
f0001224 l       .text  00000000 
f0001228 l       .text  00000000 
f0001228 l       .text  00000000 
f0001228 l       .text  00000000 
f0001228 l       .text  00000000 
f0001228 l       .text  00000000 
f0001228 l       .text  00000000 
f000122a l       .text  00000000 
f000122a l       .text  00000000 
f000122c l       .text  00000000 
f0001230 l       .text  00000000 
f0001230 l       .text  00000000 
f0001236 l       .text  00000000 
f0001236 l       .text  00000000 
f000123a l       .text  00000000 
f000123c l       .text  00000000 
f0001240 l       .text  00000000 
f0001246 l       .text  00000000 
f000124c l       .text  00000000 
f000124c l       .text  00000000 
f0001250 l       .text  00000000 
f0001252 l       .text  00000000 
f000125c l       .text  00000000 
f000125c l       .text  00000000 
f0001260 l       .text  00000000 
f0001260 l       .text  00000000 
f0001260 l       .text  00000000 
00000a1b l       .debug_loc     00000000 
00000a41 l       .debug_loc     00000000 
00000a67 l       .debug_loc     00000000 
00000a82 l       .debug_loc     00000000 
00000a9d l       .debug_loc     00000000 
00000ab8 l       .debug_loc     00000000 
00000ad3 l       .debug_loc     00000000 
00000b1f l       .debug_loc     00000000 
00000b52 l       .debug_loc     00000000 
00000b83 l       .debug_loc     00000000 
00000b9e l       .debug_loc     00000000 
00000bcf l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000af5 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000110 l       .debug_ranges  00000000 
000011f3 l       .debug_str     00000000 
000002e7 l       .debug_str     00000000 
00000b61 l       .debug_str     00000000 
00001294 l       .debug_str     00000000 
0000129b l       .debug_str     00000000 
000012a0 l       .debug_str     00000000 
0000036d l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
0000033c l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
00002fde l       .debug_str     00000000 
00000367 l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000345 l       .debug_str     00000000 
00000338 l       .debug_str     00000000 
000002f2 l       .debug_str     00000000 
00000303 l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
00000326 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00000b26 l       .debug_str     00000000 
00001270 l       .debug_str     00000000 
000012a6 l       .debug_str     00000000 
000012b2 l       .debug_str     00000000 
000010ee l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
00000b33 l       .debug_str     00000000 
00000b49 l       .debug_str     00000000 
00000b3d l       .debug_str     00000000 
0000038b l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
00000b57 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
00000c2a l       .debug_str     00000000 
00000b68 l       .debug_str     00000000 
00000b80 l       .debug_str     00000000 
00000b99 l       .debug_str     00000000 
00000bb3 l       .debug_str     00000000 
00000bc6 l       .debug_str     00000000 
00000bde l       .debug_str     00000000 
00000bf7 l       .debug_str     00000000 
00000c09 l       .debug_str     00000000 
00000c1e l       .debug_str     00000000 
00000c6a l       .debug_str     00000000 
00000c33 l       .debug_str     00000000 
00000c4f l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
0000054f l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
00000575 l       .debug_str     00000000 
00000584 l       .debug_str     00000000 
00000593 l       .debug_str     00000000 
000007e0 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
0000048a l       .debug_str     00000000 
000004a3 l       .debug_str     00000000 
000004b5 l       .debug_str     00000000 
000004c6 l       .debug_str     00000000 
000004d8 l       .debug_str     00000000 
000010dc l       .debug_str     00000000 
00000c83 l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000cc5 l       .debug_str     00000000 
00000ce5 l       .debug_str     00000000 
00000d05 l       .debug_str     00000000 
00000d25 l       .debug_str     00000000 
00000d44 l       .debug_str     00000000 
00000d68 l       .debug_str     00000000 
00000d87 l       .debug_str     00000000 
00000da6 l       .debug_str     00000000 
00000dc5 l       .debug_str     00000000 
00000de7 l       .debug_str     00000000 
00000e09 l       .debug_str     00000000 
00000e2b l       .debug_str     00000000 
00000e52 l       .debug_str     00000000 
00000e75 l       .debug_str     00000000 
00000e98 l       .debug_str     00000000 
00000eb9 l       .debug_str     00000000 
00000edd l       .debug_str     00000000 
00000f05 l       .debug_str     00000000 
00000f2a l       .debug_str     00000000 
00000f50 l       .debug_str     00000000 
00000f75 l       .debug_str     00000000 
00000f98 l       .debug_str     00000000 
00000fbc l       .debug_str     00000000 
00000fdb l       .debug_str     00000000 
00000ffa l       .debug_str     00000000 
00001019 l       .debug_str     00000000 
0000103a l       .debug_str     00000000 
0000105a l       .debug_str     00000000 
0000107f l       .debug_str     00000000 
0000109e l       .debug_str     00000000 
000010bd l       .debug_str     00000000 
00001127 l       .debug_str     00000000 
000010f9 l       .debug_str     00000000 
00001113 l       .debug_str     00000000 
00001139 l       .debug_str     00000000 
00001144 l       .debug_str     00000000 
00001163 l       .debug_str     00000000 
00001177 l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
0000064a l       .debug_str     00000000 
0000065f l       .debug_str     00000000 
0000120c l       .debug_str     00000000 
00001196 l       .debug_str     00000000 
00001223 l       .debug_str     00000000 
0000095d l       .debug_str     00000000 
00001239 l       .debug_str     00000000 
0000124b l       .debug_str     00000000 
0000125a l       .debug_str     00000000 
000011a7 l       .debug_str     00000000 
00000707 l       .debug_str     00000000 
000011bd l       .debug_str     00000000 
000011d6 l       .debug_str     00000000 
00001282 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000012be l       .debug_str     00000000 
000008c5 l       .debug_str     00000000 
00000320 l       .debug_frame   00000000 
f0001094 l       .text  00000000 
f00010e0 l       .text  00000000 
f0001100 l       .text  00000000 
f0001118 l       .text  00000000 
f0001130 l       .text  00000000 
f0001134 l       .text  00000000 
f0001210 l       .text  00000000 
f0001228 l       .text  00000000 
f0001260 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
f0001260 l       .text  00000000 
f0001260 l       .text  00000000 
f0001260 l       .text  00000000 
f0001260 l       .text  00000000 
f0001268 l       .text  00000000 
f0001268 l       .text  00000000 
f0001274 l       .text  00000000 
f0001274 l       .text  00000000 
f0001276 l       .text  00000000 
f0001276 l       .text  00000000 
f000127c l       .text  00000000 
f000127c l       .text  00000000 
f000127e l       .text  00000000 
f0001282 l       .text  00000000 
f0001282 l       .text  00000000 
f0001284 l       .text  00000000 
f0001284 l       .text  00000000 
f0001288 l       .text  00000000 
f0001288 l       .text  00000000 
f0001288 l       .text  00000000 
f0001288 l       .text  00000000 
f0001288 l       .text  00000000 
f0001288 l       .text  00000000 
f0001290 l       .text  00000000 
f0001290 l       .text  00000000 
f0001296 l       .text  00000000 
f0001296 l       .text  00000000 
f0001298 l       .text  00000000 
f0001298 l       .text  00000000 
f00012a0 l       .text  00000000 
f00012a0 l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a4 l       .text  00000000 
f00012a4 l       .text  00000000 
f00012a8 l       .text  00000000 
f00012a8 l       .text  00000000 
00000bea l       .debug_loc     00000000 
00000c10 l       .debug_loc     00000000 
00000c43 l       .debug_loc     00000000 
00000c65 l       .debug_loc     00000000 
00000c80 l       .debug_loc     00000000 
00000ca2 l       .debug_loc     00000000 
00000cd5 l       .debug_loc     00000000 
00000cfd l       .debug_loc     00000000 
00000d25 l       .debug_loc     00000000 
00000d40 l       .debug_loc     00000000 
00000d70 l       .debug_loc     00000000 
00000d8b l       .debug_loc     00000000 
00000da6 l       .debug_loc     00000000 
00000dc1 l       .debug_loc     00000000 
00000ddc l       .debug_loc     00000000 
00000df7 l       .debug_loc     00000000 
00000e12 l       .debug_loc     00000000 
00000e2d l       .debug_loc     00000000 
00000e48 l       .debug_loc     00000000 
00000e63 l       .debug_loc     00000000 
00000e7e l       .debug_loc     00000000 
00000e9a l       .debug_loc     00000000 
00000eb5 l       .debug_loc     00000000 
00000ed3 l       .debug_loc     00000000 
00000ef9 l       .debug_loc     00000000 
00000f2a l       .debug_loc     00000000 
00000f45 l       .debug_loc     00000000 
00000f60 l       .debug_loc     00000000 
00000f7f l       .debug_loc     00000000 
00000f9e l       .debug_loc     00000000 
00000fb9 l       .debug_loc     00000000 
00000fd4 l       .debug_loc     00000000 
00000fef l       .debug_loc     00000000 
0000100f l       .debug_loc     00000000 
0000102a l       .debug_loc     00000000 
00001045 l       .debug_loc     00000000 
00001060 l       .debug_loc     00000000 
0000107d l       .debug_loc     00000000 
00001098 l       .debug_loc     00000000 
000010b3 l       .debug_loc     00000000 
000010ce l       .debug_loc     00000000 
000010e9 l       .debug_loc     00000000 
00001104 l       .debug_loc     00000000 
00001124 l       .debug_loc     00000000 
0000113f l       .debug_loc     00000000 
0000115a l       .debug_loc     00000000 
00001175 l       .debug_loc     00000000 
00001195 l       .debug_loc     00000000 
000011b0 l       .debug_loc     00000000 
000011cb l       .debug_loc     00000000 
000011e6 l       .debug_loc     00000000 
00001206 l       .debug_loc     00000000 
00001221 l       .debug_loc     00000000 
0000123c l       .debug_loc     00000000 
00001257 l       .debug_loc     00000000 
00001277 l       .debug_loc     00000000 
00001292 l       .debug_loc     00000000 
000012ad l       .debug_loc     00000000 
000012c8 l       .debug_loc     00000000 
000012e8 l       .debug_loc     00000000 
00001303 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000014ee l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000218 l       .debug_ranges  00000000 
0000150e l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00001524 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
0000054f l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
00000575 l       .debug_str     00000000 
00000584 l       .debug_str     00000000 
00000593 l       .debug_str     00000000 
000005eb l       .debug_str     00000000 
000005c6 l       .debug_str     00000000 
000005d9 l       .debug_str     00000000 
0000153a l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000017b9 l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
0000154e l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00001684 l       .debug_str     00000000 
00000b38 l       .debug_str     00000000 
000004c4 l       .debug_str     00000000 
000001a0 l       .debug_ranges  00000000 
00000188 l       .debug_ranges  00000000 
00000c7c l       .debug_str     00000000 
000001d0 l       .debug_ranges  00000000 
0000178f l       .debug_str     00000000 
000001b8 l       .debug_ranges  00000000 
00001558 l       .debug_str     00000000 
00001135 l       .debug_str     00000000 
000015a0 l       .debug_str     00000000 
00001592 l       .debug_str     00000000 
00001571 l       .debug_str     00000000 
0000157b l       .debug_str     00000000 
000012be l       .debug_str     00000000 
000015b0 l       .debug_str     00000000 
000015c5 l       .debug_str     00000000 
000015db l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
000015ea l       .debug_str     00000000 
00001696 l       .debug_str     00000000 
000013aa l       .debug_str     00000000 
000037d1 l       .debug_str     00000000 
00001597 l       .debug_str     00000000 
0000179f l       .debug_str     00000000 
000001e8 l       .debug_ranges  00000000 
000015fd l       .debug_str     00000000 
00001614 l       .debug_str     00000000 
00001617 l       .debug_str     00000000 
0000162e l       .debug_str     00000000 
0000161d l       .debug_str     00000000 
00000af0 l       .debug_str     00000000 
000015e4 l       .debug_str     00000000 
00001641 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000016b2 l       .debug_str     00000000 
000017aa l       .debug_str     00000000 
00000200 l       .debug_ranges  00000000 
000016ce l       .debug_str     00000000 
000006fe l       .debug_str     00000000 
000016eb l       .debug_str     00000000 
00001702 l       .debug_str     00000000 
000017af l       .debug_str     00000000 
00001656 l       .debug_str     00000000 
00001670 l       .debug_str     00000000 
0000170c l       .debug_str     00000000 
0000171c l       .debug_str     00000000 
000011a7 l       .debug_str     00000000 
000017c0 l       .debug_str     00000000 
000017cb l       .debug_str     00000000 
000011bd l       .debug_str     00000000 
000017de l       .debug_str     00000000 
00001727 l       .debug_str     00000000 
000017ec l       .debug_str     00000000 
00001746 l       .debug_str     00000000 
0000176b l       .debug_str     00000000 
000017f8 l       .debug_str     00000000 
000008c5 l       .debug_str     00000000 
00000b49 l       .debug_str     00000000 
00000b3d l       .debug_str     00000000 
0000038b l       .debug_str     00000000 
00000799 l       .debug_str     00000000 
00000434 l       .debug_frame   00000000 
f0001288 l       .text  00000000 
f00012a8 l       .text  00000000 
00000000 l    df *ABS*  00000000 tasks.c
f00012a8 l       .text  00000000 
f00012a8 l       .text  00000000 
f00012a8 l       .text  00000000 
f00012aa l       .text  00000000 
f00012c0 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c4 l       .text  00000000 
f00012c6 l       .text  00000000 
f00012c8 l       .text  00000000 
f00012ca l       .text  00000000 
f00012ca l       .text  00000000 
f00012ce l       .text  00000000 
f00012d2 l       .text  00000000 
f00012d2 l       .text  00000000 
f00012d4 l       .text  00000000 
f00012d8 l       .text  00000000 
f00012da l       .text  00000000 
f00012da l       .text  00000000 
f00012e0 l       .text  00000000 
f00012e0 l       .text  00000000 
f00012e2 l       .text  00000000 
f00012e2 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e6 l       .text  00000000 
f00012e6 l       .text  00000000 
f00012ec l       .text  00000000 
f00012ee l       .text  00000000 
f00012ee l       .text  00000000 
f00012f0 l       .text  00000000 
f00012f4 l       .text  00000000 
f00012f4 l       .text  00000000 
f00012fc l       .text  00000000 
f0001304 l       .text  00000000 
f0001308 l       .text  00000000 
f000130c l       .text  00000000 
f000130c l       .text  00000000 
f0001312 l       .text  00000000 
f0001316 l       .text  00000000 
f000131a l       .text  00000000 
f0001320 l       .text  00000000 
f0001320 l       .text  00000000 
f0001322 l       .text  00000000 
f0001324 l       .text  00000000 
f0001324 l       .text  00000000 
f0001326 l       .text  00000000 
f0001326 l       .text  00000000 
f000132a l       .text  00000000 
f0001330 l       .text  00000000 
f0001330 l       .text  00000000 
f0001334 l       .text  00000000 
f0001336 l       .text  00000000 
f0001336 l       .text  00000000 
f000133a l       .text  00000000 
f000133e l       .text  00000000 
f0001342 l       .text  00000000 
f0001342 l       .text  00000000 
f0001346 l       .text  00000000 
f0001348 l       .text  00000000 
f0001348 l       .text  00000000 
f000134e l       .text  00000000 
f0001356 l       .text  00000000 
f000135a l       .text  00000000 
f000135e l       .text  00000000 
f0001362 l       .text  00000000 
f000136c l       .text  00000000 
f000136c l       .text  00000000 
f0001370 l       .text  00000000 
f0001374 l       .text  00000000 
f0001378 l       .text  00000000 
f0001378 l       .text  00000000 
f000137c l       .text  00000000 
e0002078 l     O .bss   00000004 xSchedulerRunning
f000137c l       .text  00000000 
f0001388 l       .text  00000000 
f0001390 l       .text  00000000 
f0001392 l       .text  00000000 
f0001392 l       .text  00000000 
f0001396 l       .text  00000000 
f000139c l       .text  00000000 
f00013a0 l       .text  00000000 
e0002074 l     O .bss   00000004 uxCurrentNumberOfTasks
f00013a0 l       .text  00000000 
f00013ae l       .text  00000000 
e00020cc l     O .bss   00000064 pxReadyTasksLists
f00013b2 l       .text  00000000 
f00013ba l       .text  00000000 
f00013bc l       .text  00000000 
f00013bc l       .text  00000000 
f00013c0 l       .text  00000000 
f00013c2 l       .text  00000000 
f00013c6 l       .text  00000000 
f00013c8 l       .text  00000000 
f00013cc l       .text  00000000 
f00013d0 l       .text  00000000 
f00013d6 l       .text  00000000 
f00013da l       .text  00000000 
f00013de l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e8 l       .text  00000000 
f00013e8 l       .text  00000000 
f00013ee l       .text  00000000 
f00013ee l       .text  00000000 
f00013f0 l       .text  00000000 
f00013f0 l       .text  00000000 
f00013f4 l       .text  00000000 
e000216c l     O .bss   00000014 xDelayedTaskList1
f00013f4 l       .text  00000000 
f0001400 l       .text  00000000 
e0002180 l     O .bss   00000014 xDelayedTaskList2
f0001400 l       .text  00000000 
f000140c l       .text  00000000 
e0002158 l     O .bss   00000014 xPendingReadyList
f000140c l       .text  00000000 
f0001416 l       .text  00000000 
e0002130 l     O .bss   00000014 xTasksWaitingTermination
f0001416 l       .text  00000000 
f0001420 l       .text  00000000 
e0002144 l     O .bss   00000014 xSuspendedTaskList
f0001420 l       .text  00000000 
f000142a l       .text  00000000 
e000207c l     O .bss   00000004 pxDelayedTaskList
f000142a l       .text  00000000 
e0002080 l     O .bss   00000004 pxOverflowDelayedTaskList
f0001436 l       .text  00000000 
f0001442 l       .text  00000000 
e000206c l     O .bss   00000004 uxTaskNumber
f0001442 l       .text  00000000 
f0001450 l       .text  00000000 
e0002068 l     O .bss   00000004 uxTopReadyPriority
f000146a l       .text  00000000 
f000146a l       .text  00000000 
f0001472 l       .text  00000000 
f000148c l       .text  00000000 
f0001490 l       .text  00000000 
f0001490 l       .text  00000000 
f0001492 l       .text  00000000 
f0001492 l       .text  00000000 
f0001496 l       .text  00000000 
f0001498 l       .text  00000000 
f0001498 l       .text  00000000 
f000149c l       .text  00000000 
f000149c l       .text  00000000 
f00014a4 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014b8 l       .text  00000000 
e0002070 l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
e0002090 l     O .bss   00000004 xNextTaskUnblockTime
f00014b8 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c4 l       .text  00000000 
f00014ce l       .text  00000000 
f00014d0 l       .text  00000000 
f00014d2 l       .text  00000000 
f00014d4 l       .text  00000000 
f00014da l       .text  00000000 
f00014dc l       .text  00000000 
f00014de l       .text  00000000 
f00014e0 l       .text  00000000 
f00014e2 l       .text  00000000 
f00014e6 l       .text  00000000 
f00014e8 l       .text  00000000 
f00014e8 l       .text  00000000 
f00014e8 l       .text  00000000 
f00014e8 l       .text  00000000 
f00014e8 l       .text  00000000 
f00014ea l       .text  00000000 
f00014ea l       .text  00000000 
f00014ee l       .text  00000000 
e0002084 l     O .bss   00000004 uxSchedulerSuspended
f00014f8 l       .text  00000000 
e0002088 l     O .bss   00000004 xYieldPending
f00014fa l       .text  00000000 
f0001508 l       .text  00000000 
f0001514 l       .text  00000000 
f0001524 l       .text  00000000 
f0001528 l       .text  00000000 
f0001534 l       .text  00000000 
f0001534 l       .text  00000000 
f00015a4 l       .text  00000000 
f00015a4 l       .text  00000000 
f00015a6 l       .text  00000000 
f00015a6 l       .text  00000000 
f00015aa l       .text  00000000 
f00015aa l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b8 l       .text  00000000 
f00015bc l       .text  00000000 
f00015c2 l       .text  00000000 
f00015c4 l       .text  00000000 
f00015c6 l       .text  00000000 
f00015c8 l       .text  00000000 
f00015cc l       .text  00000000 
f00015cc l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d6 l       .text  00000000 
f00015d6 l       .text  00000000 
f00015d8 l       .text  00000000 
f000163a l     F .text  00000082 prvIdleTask
e000208c l     O .bss   00000004 xIdleTaskHandle
f00015fa l       .text  00000000 
f00015fa l       .text  00000000 
f00015fc l       .text  00000000 
f00015fc l       .text  00000000 
f0001600 l       .text  00000000 
f0001604 l       .text  00000000 
f0001604 l       .text  00000000 
f0001610 l       .text  00000000 
e0002094 l     O .bss   00000004 xTickCount
f000161a l       .text  00000000 
f0001626 l       .text  00000000 
f000162a l       .text  00000000 
f000162a l       .text  00000000 
f0001634 l       .text  00000000 
f000163a l       .text  00000000 
f000163a l       .text  00000000 
f000163a l       .text  00000000 
f000163a l       .text  00000000 
f000163a l       .text  00000000 
f000163c l       .text  00000000 
f000164a l       .text  00000000 
f000164a l       .text  00000000 
f0001672 l       .text  00000000 
f0001672 l       .text  00000000 
f0001674 l       .text  00000000 
f0001676 l       .text  00000000 
f0001676 l       .text  00000000 
f000167a l       .text  00000000 
f000167e l       .text  00000000 
f0001680 l       .text  00000000 
f0001684 l       .text  00000000 
f000168a l       .text  00000000 
f000168e l       .text  00000000 
f000168e l       .text  00000000 
f0001694 l       .text  00000000 
f0001694 l       .text  00000000 
f0001698 l       .text  00000000 
f000169a l       .text  00000000 
f000169a l       .text  00000000 
f00016a4 l       .text  00000000 
f00016aa l       .text  00000000 
f00016ac l       .text  00000000 
f00016ac l       .text  00000000 
f00016ae l       .text  00000000 
f00016b0 l       .text  00000000 
f00016b0 l       .text  00000000 
f00016b4 l       .text  00000000 
f00016b4 l       .text  00000000 
f00016b6 l       .text  00000000 
f00016b6 l       .text  00000000 
f00016bc l       .text  00000000 
f00016bc l       .text  00000000 
f00016bc l       .text  00000000 
f00016bc l       .text  00000000 
f00016bc l       .text  00000000 
f00016bc l       .text  00000000 
f00016ca l       .text  00000000 
f00016ca l       .text  00000000 
f00016cc l       .text  00000000 
f00016cc l       .text  00000000 
f00016cc l       .text  00000000 
f00016cc l       .text  00000000 
f00016cc l       .text  00000000 
f00016ce l       .text  00000000 
f00016ce l       .text  00000000 
f00016d6 l       .text  00000000 
f00016d6 l       .text  00000000 
f00016d6 l       .text  00000000 
f00016da l       .text  00000000 
f00016da l       .text  00000000 
f00016e4 l       .text  00000000 
f00016e6 l       .text  00000000 
f00016f0 l       .text  00000000 
f00016f6 l       .text  00000000 
f00016f8 l       .text  00000000 
f00016f8 l       .text  00000000 
f0001706 l       .text  00000000 
f0001708 l       .text  00000000 
f000170a l       .text  00000000 
f0001714 l       .text  00000000 
f0001716 l       .text  00000000 
f0001720 l       .text  00000000 
f0001728 l       .text  00000000 
f000172a l       .text  00000000 
f000172a l       .text  00000000 
f000172c l       .text  00000000 
f0001746 l       .text  00000000 
f0001746 l       .text  00000000 
f000174a l       .text  00000000 
f000174a l       .text  00000000 
f0001750 l       .text  00000000 
f0001756 l       .text  00000000 
f0001758 l       .text  00000000 
f0001760 l       .text  00000000 
f0001762 l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f0001772 l       .text  00000000 
f0001778 l       .text  00000000 
f000177a l       .text  00000000 
f000177e l       .text  00000000 
f0001782 l       .text  00000000 
f0001784 l       .text  00000000 
f000178a l       .text  00000000 
f000178a l       .text  00000000 
f000178e l       .text  00000000 
f0001796 l       .text  00000000 
f0001796 l       .text  00000000 
f000179e l       .text  00000000 
f00017ae l       .text  00000000 
f00017b2 l       .text  00000000 
f00017b2 l       .text  00000000 
f00017b6 l       .text  00000000 
f00017b8 l       .text  00000000 
f00017bc l       .text  00000000 
f00017c0 l       .text  00000000 
f00017c0 l       .text  00000000 
f00017c2 l       .text  00000000 
f00017c4 l       .text  00000000 
f00017c4 l       .text  00000000 
f00017d0 l       .text  00000000 
f00017d2 l       .text  00000000 
f00017d2 l       .text  00000000 
f00017da l       .text  00000000 
f00017dc l       .text  00000000 
f00017e6 l       .text  00000000 
e0002098 l     O .bss   00000004 xPendedTicks
f00017e6 l       .text  00000000 
f00017f0 l       .text  00000000 
f00017f0 l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f4 l       .text  00000000 
f00017f4 l       .text  00000000 
f00017f6 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017fc l       .text  00000000 
f00017fc l       .text  00000000 
f0001800 l       .text  00000000 
f0001802 l       .text  00000000 
f0001802 l       .text  00000000 
f0001810 l       .text  00000000 
f0001810 l       .text  00000000 
f0001810 l       .text  00000000 
f0001810 l       .text  00000000 
f0001810 l       .text  00000000 
f0001810 l       .text  00000000 
f000181a l       .text  00000000 
f000181c l       .text  00000000 
f000182c l       .text  00000000 
f000182c l       .text  00000000 
f0001836 l       .text  00000000 
f000183a l       .text  00000000 
f000183a l       .text  00000000 
f000183e l       .text  00000000 
f000183e l       .text  00000000 
f000184e l       .text  00000000 
f0001852 l       .text  00000000 
f0001852 l       .text  00000000 
f0001856 l       .text  00000000 
e000209c l     O .bss   00000004 xNumOfOverflows
f0001874 l       .text  00000000 
f0001874 l       .text  00000000 
f000187a l       .text  00000000 
f000187c l       .text  00000000 
f000187c l       .text  00000000 
f0001886 l       .text  00000000 
f000188c l       .text  00000000 
f000188c l       .text  00000000 
f0001890 l       .text  00000000 
f0001894 l       .text  00000000 
f000189a l       .text  00000000 
f000189c l       .text  00000000 
f000189e l       .text  00000000 
f00018b0 l       .text  00000000 
f00018b0 l       .text  00000000 
f00018b8 l       .text  00000000 
f00018b8 l       .text  00000000 
f00018ba l       .text  00000000 
f00018ba l       .text  00000000 
f00018be l       .text  00000000 
f00018be l       .text  00000000 
f00018c4 l       .text  00000000 
f00018ca l       .text  00000000 
f00018cc l       .text  00000000 
f00018cc l       .text  00000000 
f00018d0 l       .text  00000000 
f00018d0 l       .text  00000000 
f00018d4 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018dc l       .text  00000000 
f00018dc l       .text  00000000 
f00018de l       .text  00000000 
f00018de l       .text  00000000 
f00018e0 l       .text  00000000 
f00018e0 l       .text  00000000 
f00018ea l       .text  00000000 
f00018ec l       .text  00000000 
f00018ec l       .text  00000000 
f00018f0 l       .text  00000000 
f00018f0 l       .text  00000000 
f00018f4 l       .text  00000000 
f00018f6 l       .text  00000000 
f0001900 l       .text  00000000 
f0001900 l       .text  00000000 
f0001910 l       .text  00000000 
f0001910 l       .text  00000000 
f0001918 l       .text  00000000 
f0001928 l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f0001932 l       .text  00000000 
f0001934 l       .text  00000000 
f0001934 l       .text  00000000 
f000193a l       .text  00000000 
f000193a l       .text  00000000 
f000193e l       .text  00000000 
f000193e l       .text  00000000 
0000131e l       .debug_loc     00000000 
0000135a l       .debug_loc     00000000 
00001380 l       .debug_loc     00000000 
0000139b l       .debug_loc     00000000 
000013d7 l       .debug_loc     00000000 
000013fd l       .debug_loc     00000000 
00001423 l       .debug_loc     00000000 
00001454 l       .debug_loc     00000000 
000014b1 l       .debug_loc     00000000 
000014d7 l       .debug_loc     00000000 
000014fd l       .debug_loc     00000000 
00001523 l       .debug_loc     00000000 
00001549 l       .debug_loc     00000000 
0000156f l       .debug_loc     00000000 
00001595 l       .debug_loc     00000000 
000015b0 l       .debug_loc     00000000 
000015d8 l       .debug_loc     00000000 
00001614 l       .debug_loc     00000000 
00001647 l       .debug_loc     00000000 
00001662 l       .debug_loc     00000000 
0000167d l       .debug_loc     00000000 
000016a3 l       .debug_loc     00000000 
000016ea l       .debug_loc     00000000 
00001747 l       .debug_loc     00000000 
00001799 l       .debug_loc     00000000 
000017bf l       .debug_loc     00000000 
000017e5 l       .debug_loc     00000000 
00001816 l       .debug_loc     00000000 
00001831 l       .debug_loc     00000000 
00001857 l       .debug_loc     00000000 
00001872 l       .debug_loc     00000000 
0000188d l       .debug_loc     00000000 
000018a8 l       .debug_loc     00000000 
000018d0 l       .debug_loc     00000000 
000018eb l       .debug_loc     00000000 
00001906 l       .debug_loc     00000000 
00001937 l       .debug_loc     00000000 
0000195d l       .debug_loc     00000000 
0000199d l       .debug_loc     00000000 
000019ce l       .debug_loc     00000000 
000019ff l       .debug_loc     00000000 
00001a30 l       .debug_loc     00000000 
00001a4b l       .debug_loc     00000000 
00001a71 l       .debug_loc     00000000 
00001ace l       .debug_loc     00000000 
00001ae9 l       .debug_loc     00000000 
00001b3b l       .debug_loc     00000000 
00001b82 l       .debug_loc     00000000 
00001ba8 l       .debug_loc     00000000 
00001bd0 l       .debug_loc     00000000 
00001bf6 l       .debug_loc     00000000 
00001c11 l       .debug_loc     00000000 
00001c6e l       .debug_loc     00000000 
00001c94 l       .debug_loc     00000000 
00001cf1 l       .debug_loc     00000000 
00001d17 l       .debug_loc     00000000 
00001d3f l       .debug_loc     00000000 
00001d97 l       .debug_loc     00000000 
00001df9 l       .debug_loc     00000000 
00001e14 l       .debug_loc     00000000 
00001e2f l       .debug_loc     00000000 
00001e4a l       .debug_loc     00000000 
00001e65 l       .debug_loc     00000000 
00001e98 l       .debug_loc     00000000 
00001ee4 l       .debug_loc     00000000 
00001eff l       .debug_loc     00000000 
00001f1a l       .debug_loc     00000000 
00001f35 l       .debug_loc     00000000 
00001f50 l       .debug_loc     00000000 
00001f84 l       .debug_loc     00000000 
00001fc0 l       .debug_loc     00000000 
00001fdb l       .debug_loc     00000000 
00001ff6 l       .debug_loc     00000000 
00002011 l       .debug_loc     00000000 
0000202c l       .debug_loc     00000000 
00002047 l       .debug_loc     00000000 
00002062 l       .debug_loc     00000000 
0000207d l       .debug_loc     00000000 
00002098 l       .debug_loc     00000000 
000020b3 l       .debug_loc     00000000 
000020ef l       .debug_loc     00000000 
00002125 l       .debug_loc     00000000 
0000216c l       .debug_loc     00000000 
00002187 l       .debug_loc     00000000 
000021e5 l       .debug_loc     00000000 
00002200 l       .debug_loc     00000000 
00002232 l       .debug_loc     00000000 
0000225a l       .debug_loc     00000000 
00002275 l       .debug_loc     00000000 
0000229b l       .debug_loc     00000000 
000022b6 l       .debug_loc     00000000 
000022d2 l       .debug_loc     00000000 
0000230e l       .debug_loc     00000000 
0000233f l       .debug_loc     00000000 
00002372 l       .debug_loc     00000000 
0000238d l       .debug_loc     00000000 
000023a8 l       .debug_loc     00000000 
000023d9 l       .debug_loc     00000000 
0000240a l       .debug_loc     00000000 
0000243b l       .debug_loc     00000000 
0000246f l       .debug_loc     00000000 
00002495 l       .debug_loc     00000000 
000024b0 l       .debug_loc     00000000 
000024cb l       .debug_loc     00000000 
000024e6 l       .debug_loc     00000000 
0000250c l       .debug_loc     00000000 
00002527 l       .debug_loc     00000000 
00002542 l       .debug_loc     00000000 
0000255d l       .debug_loc     00000000 
00002578 l       .debug_loc     00000000 
0000259e l       .debug_loc     00000000 
000025b9 l       .debug_loc     00000000 
000025d4 l       .debug_loc     00000000 
000025fa l       .debug_loc     00000000 
00002615 l       .debug_loc     00000000 
00002630 l       .debug_loc     00000000 
0000264b l       .debug_loc     00000000 
00002666 l       .debug_loc     00000000 
000026b8 l       .debug_loc     00000000 
0000270a l       .debug_loc     00000000 
00002730 l       .debug_loc     00000000 
0000274b l       .debug_loc     00000000 
00002772 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000197e l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000310 l       .debug_ranges  00000000 
00000b26 l       .debug_str     00000000 
00001a88 l       .debug_str     00000000 
00001a81 l       .debug_str     00000000 
00000682 l       .debug_str     00000000 
00001998 l       .debug_str     00000000 
000019b1 l       .debug_str     00000000 
000022f7 l       .debug_str     00000000 
00001a4d l       .debug_str     00000000 
00001a58 l       .debug_str     00000000 
000009b1 l       .debug_str     00000000 
00001a60 l       .debug_str     00000000 
00001a72 l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00001a31 l       .debug_str     00000000 
00001a42 l       .debug_str     00000000 
000019c0 l       .debug_str     00000000 
000019d6 l       .debug_str     00000000 
000019dd l       .debug_str     00000000 
000019e8 l       .debug_str     00000000 
000019f0 l       .debug_str     00000000 
000019cb l       .debug_str     00000000 
00001a3c l       .debug_str     00000000 
000019fc l       .debug_str     00000000 
00001a0c l       .debug_str     00000000 
00001a14 l       .debug_str     00000000 
0000062b l       .debug_str     00000000 
00001a2d l       .debug_str     00000000 
00001a1d l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
00001a8e l       .debug_str     00000000 
00001aa0 l       .debug_str     00000000 
00001ab2 l       .debug_str     00000000 
00001ab9 l       .debug_str     00000000 
00001acb l       .debug_str     00000000 
00001ae5 l       .debug_str     00000000 
00001af7 l       .debug_str     00000000 
00001b10 l       .debug_str     00000000 
00001b23 l       .debug_str     00000000 
00001b35 l       .debug_str     00000000 
00001b47 l       .debug_str     00000000 
00001b5a l       .debug_str     00000000 
00001b67 l       .debug_str     00000000 
00001b84 l       .debug_str     00000000 
00001b9b l       .debug_str     00000000 
0000062c l       .debug_str     00000000 
0000035f l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00001bad l       .debug_str     00000000 
00001bc2 l       .debug_str     00000000 
00001bd0 l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
00001be0 l       .debug_str     00000000 
00001bf5 l       .debug_str     00000000 
00001c00 l       .debug_str     00000000 
00001c0d l       .debug_str     00000000 
00001c1d l       .debug_str     00000000 
00001c26 l       .debug_str     00000000 
00001c2d l       .debug_str     00000000 
00001c36 l       .debug_str     00000000 
00001c41 l       .debug_str     00000000 
00001c4a l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
00001c53 l       .debug_str     00000000 
00001c68 l       .debug_str     00000000 
00001c73 l       .debug_str     00000000 
00001c7a l       .debug_str     00000000 
00001c87 l       .debug_str     00000000 
00001c94 l       .debug_str     00000000 
00001ca2 l       .debug_str     00000000 
00001cab l       .debug_str     00000000 
000038cc l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
00001cee l       .debug_str     00000000 
00001cdf l       .debug_str     00000000 
00001cb4 l       .debug_str     00000000 
00001cc2 l       .debug_str     00000000 
00001cd2 l       .debug_str     00000000 
00001cfd l       .debug_str     00000000 
00001d10 l       .debug_str     00000000 
00001d29 l       .debug_str     00000000 
00000676 l       .debug_str     00000000 
000020e6 l       .debug_str     00000000 
00002268 l       .debug_str     00000000 
00000278 l       .debug_ranges  00000000 
00000298 l       .debug_ranges  00000000 
00001d40 l       .debug_str     00000000 
00001d4d l       .debug_str     00000000 
00001d57 l       .debug_str     00000000 
00001d6b l       .debug_str     00000000 
00001d81 l       .debug_str     00000000 
00001e9b l       .debug_str     00000000 
00001d91 l       .debug_str     00000000 
00001d9e l       .debug_str     00000000 
00001da4 l       .debug_str     00000000 
00000696 l       .debug_str     00000000 
000020f3 l       .debug_str     00000000 
000002b0 l       .debug_ranges  00000000 
00001dc0 l       .debug_str     00000000 
00001dcd l       .debug_str     00000000 
00001ead l       .debug_str     00000000 
0000099e l       .debug_str     00000000 
00002101 l       .debug_str     00000000 
0000210d l       .debug_str     00000000 
0000211b l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00001ec6 l       .debug_str     00000000 
0000213b l       .debug_str     00000000 
00001ed8 l       .debug_str     00000000 
00002144 l       .debug_str     00000000 
00001ef1 l       .debug_str     00000000 
0000215a l       .debug_str     00000000 
00002168 l       .debug_str     00000000 
00002177 l       .debug_str     00000000 
0000218d l       .debug_str     00000000 
00001f02 l       .debug_str     00000000 
000021a3 l       .debug_str     00000000 
00000637 l       .debug_str     00000000 
000021b2 l       .debug_str     00000000 
000021c0 l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
00001ddc l       .debug_str     00000000 
00001f0f l       .debug_str     00000000 
000021cc l       .debug_str     00000000 
00001f1b l       .debug_str     00000000 
000021da l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
00000a55 l       .debug_str     00000000 
00001df3 l       .debug_str     00000000 
00001f2e l       .debug_str     00000000 
00001f3a l       .debug_str     00000000 
00001e13 l       .debug_str     00000000 
00001f4c l       .debug_str     00000000 
000021f1 l       .debug_str     00000000 
00002201 l       .debug_str     00000000 
00002208 l       .debug_str     00000000 
00001f5b l       .debug_str     00000000 
00002216 l       .debug_str     00000000 
00002226 l       .debug_str     00000000 
00002236 l       .debug_str     00000000 
000002c8 l       .debug_ranges  00000000 
000002e0 l       .debug_ranges  00000000 
00001f6e l       .debug_str     00000000 
0000223d l       .debug_str     00000000 
00001f80 l       .debug_str     00000000 
00001f99 l       .debug_str     00000000 
000006a2 l       .debug_str     00000000 
00002244 l       .debug_str     00000000 
00001e25 l       .debug_str     00000000 
00001fb0 l       .debug_str     00000000 
00002251 l       .debug_str     00000000 
0000225f l       .debug_str     00000000 
00001fbf l       .debug_str     00000000 
00002267 l       .debug_str     00000000 
00002270 l       .debug_str     00000000 
0000227b l       .debug_str     00000000 
00002286 l       .debug_str     00000000 
00002290 l       .debug_str     00000000 
00001fe0 l       .debug_str     00000000 
0000229a l       .debug_str     00000000 
000022aa l       .debug_str     00000000 
00001ff2 l       .debug_str     00000000 
00002002 l       .debug_str     00000000 
000022b9 l       .debug_str     00000000 
00002307 l       .debug_str     00000000 
00001e35 l       .debug_str     00000000 
00002018 l       .debug_str     00000000 
000022c5 l       .debug_str     00000000 
000022db l       .debug_str     00000000 
00002037 l       .debug_str     00000000 
00002056 l       .debug_str     00000000 
000022e7 l       .debug_str     00000000 
0000206f l       .debug_str     00000000 
000022f6 l       .debug_str     00000000 
000002f8 l       .debug_ranges  00000000 
00002091 l       .debug_str     00000000 
00001e5e l       .debug_str     00000000 
00001e41 l       .debug_str     00000000 
00001e91 l       .debug_str     00000000 
00001e87 l       .debug_str     00000000 
00001e68 l       .debug_str     00000000 
00001e77 l       .debug_str     00000000 
000020a6 l       .debug_str     00000000 
00002306 l       .debug_str     00000000 
00002314 l       .debug_str     00000000 
000020bb l       .debug_str     00000000 
000020cc l       .debug_str     00000000 
00001ebb l       .debug_str     00000000 
000001ce l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
000004f8 l       .debug_frame   00000000 
f00014b8 l       .text  00000000 
f00014e8 l       .text  00000000 
f00015d4 l       .text  00000000 
f000163a l       .text  00000000 
f00016bc l       .text  00000000 
f00016cc l       .text  00000000 
f0001810 l       .text  00000000 
f000193e l       .text  00000000 
00000000 l    df *ABS*  00000000 list.c
f000193e l       .text  00000000 
f000193e l       .text  00000000 
f000193e l       .text  00000000 
f000193e l       .text  00000000 
f0001942 l       .text  00000000 
f0001946 l       .text  00000000 
f0001948 l       .text  00000000 
f000194a l       .text  00000000 
f000194c l       .text  00000000 
f0001950 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001956 l       .text  00000000 
f0001958 l       .text  00000000 
f0001958 l       .text  00000000 
f0001958 l       .text  00000000 
f0001958 l       .text  00000000 
f0001958 l       .text  00000000 
f0001958 l       .text  00000000 
f000195a l       .text  00000000 
f000195c l       .text  00000000 
f000195e l       .text  00000000 
f000195e l       .text  00000000 
f0001960 l       .text  00000000 
f0001962 l       .text  00000000 
f0001964 l       .text  00000000 
f0001966 l       .text  00000000 
f000196a l       .text  00000000 
f000196c l       .text  00000000 
f0001970 l       .text  00000000 
f0001972 l       .text  00000000 
f0001976 l       .text  00000000 
f0001978 l       .text  00000000 
f000197a l       .text  00000000 
f000197a l       .text  00000000 
0000278d l       .debug_loc     00000000 
000027a8 l       .debug_loc     00000000 
000027c3 l       .debug_loc     00000000 
000027de l       .debug_loc     00000000 
000027f9 l       .debug_loc     00000000 
0000281f l       .debug_loc     00000000 
0000283a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002321 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000438 l       .debug_ranges  00000000 
00001a31 l       .debug_str     00000000 
00001a42 l       .debug_str     00000000 
000019c0 l       .debug_str     00000000 
000019d6 l       .debug_str     00000000 
000019dd l       .debug_str     00000000 
000019e8 l       .debug_str     00000000 
000019f0 l       .debug_str     00000000 
000019cb l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00001a3c l       .debug_str     00000000 
000019fc l       .debug_str     00000000 
00001a0c l       .debug_str     00000000 
00001a14 l       .debug_str     00000000 
0000062b l       .debug_str     00000000 
00001a2d l       .debug_str     00000000 
00001a1d l       .debug_str     00000000 
00001d81 l       .debug_str     00000000 
00002201 l       .debug_str     00000000 
00001d57 l       .debug_str     00000000 
0000233a l       .debug_str     00000000 
00001dcd l       .debug_str     00000000 
00002341 l       .debug_str     00000000 
00001e35 l       .debug_str     00000000 
0000234f l       .debug_str     00000000 
00002361 l       .debug_str     00000000 
00001dc0 l       .debug_str     00000000 
0000236c l       .debug_str     00000000 
00001ab2 l       .debug_str     00000000 
00000838 l       .debug_frame   00000000 
f0001952 l       .text  00000000 
f0001958 l       .text  00000000 
f000197a l       .text  00000000 
00000000 l    df *ABS*  00000000 heap_1.c
f000197a l       .text  00000000 
f000197a l       .text  00000000 
f000197a l       .text  00000000 
f000197c l       .text  00000000 
f0001984 l       .text  00000000 
f0001986 l       .text  00000000 
f0001986 l       .text  00000000 
f000198a l       .text  00000000 
f000198e l       .text  00000000 
f0001992 l       .text  00000000 
f0001994 l       .text  00000000 
f0001996 l       .text  00000000 
f0001998 l       .text  00000000 
f000199a l       .text  00000000 
e00020a0 l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
f000199a l       .text  00000000 
f00019a4 l       .text  00000000 
f00019a6 l       .text  00000000 
f00019a6 l       .text  00000000 
f00019aa l       .text  00000000 
f00019aa l       .text  00000000 
f00019b4 l       .text  00000000 
f00019ba l       .text  00000000 
e00020a4 l     O .bss   00000004 xNextFreeByte
f00019bc l       .text  00000000 
f00019c8 l       .text  00000000 
f00019cc l       .text  00000000 
f00019d8 l       .text  00000000 
f00019dc l       .text  00000000 
f00019dc l       .text  00000000 
f00019de l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e2 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e8 l       .text  00000000 
f00019e8 l       .text  00000000 
f00019ea l       .text  00000000 
f00019ea l       .text  00000000 
f00019ee l       .text  00000000 
f00019ee l       .text  00000000 
f00019f0 l       .text  00000000 
f00019f6 l       .text  00000000 
f00019fc l       .text  00000000 
f00019fc l       .text  00000000 
f00019fc l       .text  00000000 
f00019fc l       .text  00000000 
f00019fc l       .text  00000000 
f00019fc l       .text  00000000 
f00019fe l       .text  00000000 
f00019fe l       .text  00000000 
00002855 l       .debug_loc     00000000 
00002891 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000237b l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000468 l       .debug_ranges  00000000 
00001d40 l       .debug_str     00000000 
000023a7 l       .debug_str     00000000 
000023ef l       .debug_str     00000000 
000023fb l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
000023b6 l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001e25 l       .debug_str     00000000 
00001f4c l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00000963 l       .debug_str     00000000 
00001d4d l       .debug_str     00000000 
00002404 l       .debug_str     00000000 
000023c4 l       .debug_str     00000000 
000023da l       .debug_str     00000000 
0000089c l       .debug_frame   00000000 
f00019fc l       .text  00000000 
f00019fe l       .text  00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
f00019fe l       .text  00000000 
f00019fe l       .text  00000000 
f00019fe l       .text  00000000 
f00019fe l       .text  00000000 
f0001a02 l       .text  00000000 
f0001a02 l       .text  00000000 
f0001a02 l       .text  00000000 
f0001a02 l       .text  00000000 
f0001a02 l       .text  00000000 
f0001a02 l       .text  00000000 
f0001a06 l       .text  00000000 
f0001a06 l       .text  00000000 
00000000 l       .debug_str     00000000 
00002407 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000490 l       .debug_ranges  00000000 
000007ec l       .debug_str     00000000 
00000807 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000008fc l       .debug_frame   00000000 
f0001a02 l       .text  00000000 
f0001a06 l       .text  00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
f0001a06 l       .text  00000000 
f0001a06 l       .text  00000000 
f0001a06 l       .text  00000000 
f0001a08 l       .text  00000000 
f0001a0e l       .text  00000000 
f0001a10 l       .text  00000000 
f0001a12 l       .text  00000000 
f0001a14 l       .text  00000000 
f0001a14 l       .text  00000000 
f0001a1e l       .text  00000000 
000100f0 l     O .logs.fields   00000014 rand_testutils_init.kLogFields
f0001a20 l       .text  00000000 
f0001a2c l       .text  00000000 
f0001a2c l       .text  00000000 
f0001a2e l       .text  00000000 
f0001a2e l       .text  00000000 
f0001a42 l       .text  00000000 
f0001a42 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a6c l       .text  00000000 
f0001a6c l       .text  00000000 
f0001a76 l       .text  00000000 
f0001a7e l       .text  00000000 
f0001a82 l       .text  00000000 
f0001a82 l       .text  00000000 
f0001a86 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a90 l       .text  00000000 
f0001a90 l       .text  00000000 
00010104 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
00010118 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
000028d0 l       .debug_loc     00000000 
0000290c l       .debug_loc     00000000 
0000293d l       .debug_loc     00000000 
00002979 l       .debug_loc     00000000 
0000299f l       .debug_loc     00000000 
000029c5 l       .debug_loc     00000000 
000029f6 l       .debug_loc     00000000 
00002a27 l       .debug_loc     00000000 
00002a4d l       .debug_loc     00000000 
00002a75 l       .debug_loc     00000000 
00002a90 l       .debug_loc     00000000 
00002aab l       .debug_loc     00000000 
00002ac6 l       .debug_loc     00000000 
00002ae1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000243d l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000004c0 l       .debug_ranges  00000000 
0000072d l       .debug_str     00000000 
000002e7 l       .debug_str     00000000 
000003de l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
0000036d l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
0000033c l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
00002fde l       .debug_str     00000000 
00000367 l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000345 l       .debug_str     00000000 
00000338 l       .debug_str     00000000 
000002f2 l       .debug_str     00000000 
00000303 l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
00000326 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00002464 l       .debug_str     00000000 
0000247f l       .debug_str     00000000 
0000250e l       .debug_str     00000000 
00002540 l       .debug_str     00000000 
00002544 l       .debug_str     00000000 
00002523 l       .debug_str     00000000 
000005a5 l       .debug_str     00000000 
000007e0 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
0000048a l       .debug_str     00000000 
000004a3 l       .debug_str     00000000 
000004b5 l       .debug_str     00000000 
000004c6 l       .debug_str     00000000 
000004d8 l       .debug_str     00000000 
00000532 l       .debug_str     00000000 
000004ea l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
0000050b l       .debug_str     00000000 
0000051c l       .debug_str     00000000 
0000064a l       .debug_str     00000000 
0000065f l       .debug_str     00000000 
00000707 l       .debug_str     00000000 
000024e3 l       .debug_str     00000000 
0000249b l       .debug_str     00000000 
000024a8 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000024ac l       .debug_str     00000000 
000024f9 l       .debug_str     00000000 
000024b8 l       .debug_str     00000000 
000003da l       .debug_str     00000000 
0000038b l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
00002529 l       .debug_str     00000000 
00002548 l       .debug_str     00000000 
0000254e l       .debug_str     00000000 
0000140f l       .debug_str     00000000 
0000255f l       .debug_str     00000000 
00002553 l       .debug_str     00000000 
00002558 l       .debug_str     00000000 
00000431 l       .debug_str     00000000 
000004a8 l       .debug_ranges  00000000 
000004c4 l       .debug_str     00000000 
0000256b l       .debug_str     00000000 
000024dc l       .debug_str     00000000 
00000460 l       .debug_str     00000000 
0000044d l       .debug_str     00000000 
000003fe l       .debug_str     00000000 
000024b3 l       .debug_str     00000000 
00000419 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
000003eb l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
00000930 l       .debug_frame   00000000 
f0001a90 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
f0001a90 l       .text  00000000 
f0001a90 l       .text  00000000 
f0001a90 l       .text  00000000 
f0001a90 l       .text  00000000 
f0001a92 l       .text  00000000 
f0001a94 l       .text  00000000 
f0001a98 l       .text  00000000 
f0001a9a l       .text  00000000 
f0001a9c l       .text  00000000 
f0001a9e l       .text  00000000 
f0001a9e l       .text  00000000 
00002afc l       .debug_loc     00000000 
00002b17 l       .debug_loc     00000000 
00002b32 l       .debug_loc     00000000 
00002b4d l       .debug_loc     00000000 
00002b68 l       .debug_loc     00000000 
00002b97 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000256d l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000004f0 l       .debug_ranges  00000000 
000005a1 l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
0000054f l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
00000575 l       .debug_str     00000000 
00000584 l       .debug_str     00000000 
00000593 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
0000261a l       .debug_str     00000000 
000025a2 l       .debug_str     00000000 
000025c0 l       .debug_str     00000000 
000025de l       .debug_str     00000000 
000025fc l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00000717 l       .debug_str     00000000 
0000038b l       .debug_str     00000000 
000003de l       .debug_str     00000000 
000015fd l       .debug_str     00000000 
00001614 l       .debug_str     00000000 
00001617 l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
0000162e l       .debug_str     00000000 
0000161d l       .debug_str     00000000 
00000af0 l       .debug_str     00000000 
000015e4 l       .debug_str     00000000 
00001641 l       .debug_str     00000000 
00001571 l       .debug_str     00000000 
0000157b l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
0000153a l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000017b9 l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
0000154e l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00002631 l       .debug_str     00000000 
00003598 l       .debug_str     00000000 
00002667 l       .debug_str     00000000 
00002671 l       .debug_str     00000000 
000008c5 l       .debug_str     00000000 
000003eb l       .debug_str     00000000 
000003da l       .debug_str     00000000 
0000264e l       .debug_str     00000000 
000009d8 l       .debug_frame   00000000 
f0001a9e l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f0001a9e l       .text  00000000 
f0001a9e l       .text  00000000 
f0001a9e l       .text  00000000 
f0001aa0 l       .text  00000000 
f0001aa2 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aac l       .text  00000000 
f0001ab0 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001abe l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001ad2 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ae8 l       .text  00000000 
f0001ae8 l       .text  00000000 
f0001aea l       .text  00000000 
f0001aea l       .text  00000000 
f0001af4 l       .text  00000000 
f0001af6 l       .text  00000000 
f0001af6 l       .text  00000000 
f0001b0a l       .text  00000000 
f0001b0a l       .text  00000000 
f0001b0c l       .text  00000000 
00010140 l     O .logs.fields   00000014 test_status_set.kLogFields.2
f0001b0c l       .text  00000000 
f0001b18 l       .text  00000000 
f0001b18 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b24 l       .text  00000000 
f0001b24 l       .text  00000000 
0001012c l     O .logs.fields   00000014 test_status_set.kLogFields
f0001b2c l       .text  00000000 
f0001b38 l       .text  00000000 
f0001b38 l       .text  00000000 
f0001b42 l       .text  00000000 
f0001b44 l       .text  00000000 
f0001b44 l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b4c l       .text  00000000 
00002bb2 l       .debug_loc     00000000 
00002bd0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002cef l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000707 l       .debug_str     00000000 
000002e7 l       .debug_str     00000000 
000007e0 l       .debug_str     00000000 
0000036d l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
0000033c l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
00002fde l       .debug_str     00000000 
00000367 l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000345 l       .debug_str     00000000 
00000338 l       .debug_str     00000000 
000002f2 l       .debug_str     00000000 
00000303 l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
00000326 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
0000048a l       .debug_str     00000000 
000004a3 l       .debug_str     00000000 
000004b5 l       .debug_str     00000000 
000004c6 l       .debug_str     00000000 
000004d8 l       .debug_str     00000000 
00002d1d l       .debug_str     00000000 
00002d44 l       .debug_str     00000000 
00002d36 l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
0000153a l       .debug_str     00000000 
000017b9 l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
0000154e l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
0000065f l       .debug_str     00000000 
0000064a l       .debug_str     00000000 
0000095d l       .debug_str     00000000 
00000a0c l       .debug_frame   00000000 
f0001b4c l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
f0001b4c l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b50 l       .text  00000000 
f0001b50 l       .text  00000000 
f0001b52 l       .text  00000000 
f0001b52 l       .text  00000000 
00002be3 l       .debug_loc     00000000 
00002bfe l       .debug_loc     00000000 
00002c25 l       .debug_loc     00000000 
00002c4c l       .debug_loc     00000000 
00002c68 l       .debug_loc     00000000 
00002c95 l       .debug_loc     00000000 
00002cbc l       .debug_loc     00000000 
00002ce3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002d5c l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000508 l       .debug_ranges  00000000 
00001464 l       .debug_str     00000000 
0000144d l       .debug_str     00000000 
00002d79 l       .debug_str     00000000 
00002d8a l       .debug_str     00000000 
00002d94 l       .debug_str     00000000 
00002d9f l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00002dcd l       .debug_str     00000000 
00000414 l       .debug_str     00000000 
000014ae l       .debug_str     00000000 
00002db3 l       .debug_str     00000000 
00002dac l       .debug_str     00000000 
00002dba l       .debug_str     00000000 
0000095d l       .debug_str     00000000 
00002dde l       .debug_str     00000000 
00000a38 l       .debug_frame   00000000 
f0001b52 l       .text  00000000 
00000000 l    df *ABS*  00000000 ibex.c
f0001b52 l       .text  00000000 
f0001b52 l       .text  00000000 
f0001b52 l       .text  00000000 
f0001b52 l       .text  00000000 
f0001b56 l       .text  00000000 
f0001b56 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b5c l       .text  00000000 
f0001b5c l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b62 l       .text  00000000 
f0001b62 l       .text  00000000 
f0001b64 l       .text  00000000 
f0001b64 l       .text  00000000 
00002cff l       .debug_loc     00000000 
00002d1a l       .debug_loc     00000000 
00002d35 l       .debug_loc     00000000 
00002d50 l       .debug_loc     00000000 
00002d77 l       .debug_loc     00000000 
00002d9e l       .debug_loc     00000000 
00002dba l       .debug_loc     00000000 
00002dd5 l       .debug_loc     00000000 
00002df1 l       .debug_loc     00000000 
00002e18 l       .debug_loc     00000000 
00002e3f l       .debug_loc     00000000 
00002e65 l       .debug_loc     00000000 
00002e8c l       .debug_loc     00000000 
00002eb3 l       .debug_loc     00000000 
00002ecf l       .debug_loc     00000000 
00002eea l       .debug_loc     00000000 
00002f11 l       .debug_loc     00000000 
00002f38 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002df0 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000560 l       .debug_ranges  00000000 
00001464 l       .debug_str     00000000 
0000144d l       .debug_str     00000000 
00001196 l       .debug_str     00000000 
000012a0 l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
00001177 l       .debug_str     00000000 
0000129b l       .debug_str     00000000 
00002e19 l       .debug_str     00000000 
00002d79 l       .debug_str     00000000 
00002d9f l       .debug_str     00000000 
00002d94 l       .debug_str     00000000 
00002d8a l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00002e29 l       .debug_str     00000000 
0000040c l       .debug_str     00000000 
00002e0d l       .debug_str     00000000 
00002e57 l       .debug_str     00000000 
00002e40 l       .debug_str     00000000 
00000530 l       .debug_ranges  00000000 
00002e6a l       .debug_str     00000000 
00000548 l       .debug_ranges  00000000 
00002e48 l       .debug_str     00000000 
00002e3b l       .debug_str     00000000 
00002db3 l       .debug_str     00000000 
000014ae l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00000a98 l       .debug_frame   00000000 
f0001b58 l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b64 l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
f0001b64 l       .text  00000000 
f0001b64 l       .text  00000000 
f0001b64 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b7c l       .text  00000000 
f0001b86 l       .text  00000000 
f0001b8c l       .text  00000000 
f0001b8c l       .text  00000000 
f0001b8e l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b9c l       .text  00000000 
f0001b9c l       .text  00000000 
f0001b9e l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001ba4 l       .text  00000000 
f0001ba4 l       .text  00000000 
f0001ba6 l       .text  00000000 
f0001ba6 l       .text  00000000 
f0001baa l       .text  00000000 
f0001baa l       .text  00000000 
f0001bb0 l       .text  00000000 
f0001bbe l       .text  00000000 
f0001bbe l       .text  00000000 
e00020a8 l     O .bss   00000002 base_log_internal_core.global_log_counter
f0001bc6 l       .text  00000000 
f0001bd2 l       .text  00000000 
f0001bd4 l       .text  00000000 
f0001bde l       .text  00000000 
f0001bde l       .text  00000000 
f0001bea l       .text  00000000 
f0001bea l       .text  00000000 
f0001bec l       .text  00000000 
f0001bee l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bfc l       .text  00000000 
f0001bfc l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c0e l       .text  00000000 
f0001c0e l       .text  00000000 
f0001c18 l       .text  00000000 
f0001c18 l       .text  00000000 
f0001c1e l       .text  00000000 
f0001c1e l       .text  00000000 
f0001c22 l       .text  00000000 
f0001c22 l       .text  00000000 
f0001c24 l       .text  00000000 
f0001c24 l       .text  00000000 
f0001c26 l       .text  00000000 
f0001c26 l       .text  00000000 
f0001c28 l       .text  00000000 
f0001c2c l       .text  00000000 
f0001c30 l       .text  00000000 
f0001c32 l       .text  00000000 
f0001c32 l       .text  00000000 
f0001c34 l       .text  00000000 
f0001c34 l       .text  00000000 
f0001c36 l       .text  00000000 
f0001c36 l       .text  00000000 
f0001c3a l       .text  00000000 
f0001c3a l       .text  00000000 
00002f54 l       .debug_loc     00000000 
00002f7c l       .debug_loc     00000000 
00002f97 l       .debug_loc     00000000 
00002fd3 l       .debug_loc     00000000 
00002fef l       .debug_loc     00000000 
0000300a l       .debug_loc     00000000 
00003025 l       .debug_loc     00000000 
00003040 l       .debug_loc     00000000 
0000307e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002e7f l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000005a8 l       .debug_ranges  00000000 
0000065f l       .debug_str     00000000 
00002e9b l       .debug_str     00000000 
00002ee9 l       .debug_str     00000000 
00002eed l       .debug_str     00000000 
00002efb l       .debug_str     00000000 
00000368 l       .debug_str     00000000 
000001ce l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
00000338 l       .debug_str     00000000 
000002f2 l       .debug_str     00000000 
00000303 l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
00000326 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
00000ae6 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00002eae l       .debug_str     00000000 
0000033c l       .debug_str     00000000 
00000345 l       .debug_str     00000000 
00002ec1 l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00002ec8 l       .debug_str     00000000 
00002ed0 l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
00002edc l       .debug_str     00000000 
0000153a l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000017b9 l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
0000154e l       .debug_str     00000000 
0000064a l       .debug_str     00000000 
00000367 l       .debug_str     00000000 
00002f05 l       .debug_str     00000000 
000004c4 l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
0000036d l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
00002fde l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000242 l       .debug_str     00000000 
00000238 l       .debug_str     00000000 
00000b34 l       .debug_frame   00000000 
f0001c06 l       .text  00000000 
f0001c3a l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
f0001c3a l     F .text  00000004 base_dev_null
e00020ac l     O .bss   00000008 base_stdout
f0001c3a l       .text  00000000 
f0001c3a l       .text  00000000 
f0001c3a l       .text  00000000 
f0001c3c l       .text  00000000 
f0001c3c l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c46 l       .text  00000000 
f0001c46 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c54 l     F .text  00000040 base_dev_uart
f0001c50 l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c56 l       .text  00000000 
f0001c56 l       .text  00000000 
f0001c60 l       .text  00000000 
f0001c60 l       .text  00000000 
f0001c60 l       .text  00000000 
f0001c62 l       .text  00000000 
f0001c64 l       .text  00000000 
f0001c66 l       .text  00000000 
f0001c68 l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c72 l       .text  00000000 
f0001c76 l       .text  00000000 
f0001c76 l       .text  00000000 
f0001c78 l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c7e l       .text  00000000 
f0001c7e l       .text  00000000 
f0001c80 l       .text  00000000 
f0001c82 l       .text  00000000 
f0001c84 l       .text  00000000 
f0001c84 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c96 l       .text  00000000 
f0001c98 l       .text  00000000 
f0001ca6 l       .text  00000000 
f0001cae l       .text  00000000 
f0001cae l       .text  00000000 
f0001cb4 l       .text  00000000 
f0001cb4 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cb8 l       .text  00000000 
f0001cb8 l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cbe l       .text  00000000 
f0001cc0 l       .text  00000000 
f0001cc0 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cce l       .text  00000000 
f0001cd4 l       .text  00000000 
f0001cd4 l       .text  00000000 
f0001cd6 l       .text  00000000 
f0001cd6 l       .text  00000000 
f0001cdc l       .text  00000000 
f0001cde l       .text  00000000 
f0001ce0 l       .text  00000000 
f0001ce0 l       .text  00000000 
f0001ce0 l       .text  00000000 
f0001ce0 l       .text  00000000 
f0001ce0 l       .text  00000000 
f0001ce0 l       .text  00000000 
f0001ce2 l       .text  00000000 
f0001cfc l       .text  00000000 
f0001cfe l       .text  00000000 
f0001d00 l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d04 l       .text  00000000 
f0001d06 l       .text  00000000 
f0001d08 l       .text  00000000 
f0001d10 l       .text  00000000 
f0001d10 l       .text  00000000 
f0001d12 l       .text  00000000 
f0001d12 l       .text  00000000 
f0001d16 l       .text  00000000 
f0001d1a l       .text  00000000 
f0001d2e l       .text  00000000 
f0001d2e l       .text  00000000 
f0001d38 l       .text  00000000 
f0001d3c l       .text  00000000 
f0001d40 l       .text  00000000 
f0001d42 l       .text  00000000 
f0001d44 l       .text  00000000 
f0001d44 l       .text  00000000 
f0001d46 l       .text  00000000 
f0001d48 l       .text  00000000 
f0001d4e l       .text  00000000 
f0001d4e l       .text  00000000 
f0001d50 l       .text  00000000 
f0001d50 l       .text  00000000 
f0001d54 l       .text  00000000 
f0001d54 l       .text  00000000 
f0001d60 l       .text  00000000 
f0001d64 l       .text  00000000 
f0001d64 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d78 l       .text  00000000 
f0001d78 l       .text  00000000 
f0001d7c l       .text  00000000 
f0001d7c l       .text  00000000 
f0001d8a l       .text  00000000 
f0001d8a l       .text  00000000 
f0001d8e l       .text  00000000 
f0001d96 l       .text  00000000 
f0001d9a l       .text  00000000 
f0001d9a l       .text  00000000 
f0001d9e l       .text  00000000 
f0001da4 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001daa l       .text  00000000 
f0001dae l       .text  00000000 
f0001dae l       .text  00000000 
f0001db2 l       .text  00000000 
f0001db8 l       .text  00000000 
f0001db8 l       .text  00000000 
f0001dbc l       .text  00000000 
f0001dd0 l       .text  00000000 
f0001dd0 l       .text  00000000 
f0001dd2 l       .text  00000000 
f0001dd8 l       .text  00000000 
f0001ddc l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de8 l       .text  00000000 
f0001dea l       .text  00000000 
f0001df8 l       .text  00000000 
f0001df8 l       .text  00000000 
f0001dfc l       .text  00000000 
f0001e08 l       .text  00000000 
f0001e08 l       .text  00000000 
f0001e0c l       .text  00000000 
f0001e0c l       .text  00000000 
f0001e1a l       .text  00000000 
f0001e1a l       .text  00000000 
f0001e1c l       .text  00000000 
f0001e20 l       .text  00000000 
f0001e20 l       .text  00000000 
f0001e24 l       .text  00000000 
f0003372 l     O .rodata        00000010 kDigitsLow
f0001e36 l       .text  00000000 
f0001e36 l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e46 l       .text  00000000 
f0001e46 l       .text  00000000 
f0001e50 l       .text  00000000 
f0001e50 l       .text  00000000 
f0001e54 l       .text  00000000 
f0001e54 l       .text  00000000 
f0001e5e l       .text  00000000 
f0001e5e l       .text  00000000 
f0001e66 l       .text  00000000 
f0001e66 l       .text  00000000 
f0001e6a l       .text  00000000 
f000339f l     O .rodata        00000010 kDigitsHigh
f0001e74 l       .text  00000000 
f0001e74 l       .text  00000000 
f0001e7e l       .text  00000000 
f0001e7e l       .text  00000000 
f0001e82 l       .text  00000000 
f0001e8c l       .text  00000000 
f0001e8c l       .text  00000000 
f0001e90 l       .text  00000000 
f0001e9a l       .text  00000000 
f0001e9a l       .text  00000000 
f0001ea2 l       .text  00000000 
f0001ea2 l       .text  00000000 
f0001ea6 l       .text  00000000 
f0001eb0 l       .text  00000000 
f0001eb0 l       .text  00000000 
f0001eba l       .text  00000000 
f0001ebe l       .text  00000000 
f0001ec2 l       .text  00000000 
f0001ec2 l       .text  00000000 
f0001ece l       .text  00000000 
f0001ece l       .text  00000000 
f0001ed2 l       .text  00000000 
f0001edc l       .text  00000000 
f0001ee0 l       .text  00000000 
f0001ee0 l       .text  00000000 
f0001ee2 l       .text  00000000 
f0001ee2 l       .text  00000000 
f0001ee6 l       .text  00000000 
f0001ee6 l       .text  00000000 
f0001eea l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001ef8 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f08 l       .text  00000000 
f0001f08 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f20 l       .text  00000000 
f0001f20 l       .text  00000000 
f0001f24 l       .text  00000000 
f0001f24 l       .text  00000000 
f0002252 l     F .text  0000007e write_digits
f0001f3a l       .text  00000000 
f0001f3a l       .text  00000000 
f0001f40 l       .text  00000000 
f0001f40 l       .text  00000000 
f0001f4a l       .text  00000000 
f0001f4a l       .text  00000000 
f0001f4c l       .text  00000000 
f0001f56 l       .text  00000000 
f0001f56 l       .text  00000000 
f0001f60 l       .text  00000000 
f0001f60 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f68 l       .text  00000000 
f0001f68 l       .text  00000000 
f0001f6c l       .text  00000000 
f0001f6e l       .text  00000000 
f0001f72 l       .text  00000000 
f0001f72 l       .text  00000000 
f0001f76 l       .text  00000000 
f0001f76 l       .text  00000000 
f0001f82 l       .text  00000000 
f0001f82 l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f86 l       .text  00000000 
f0001f86 l       .text  00000000 
f0001f8e l       .text  00000000 
f0001f8e l       .text  00000000 
f0001f92 l       .text  00000000 
f0001f92 l       .text  00000000 
f0001fa0 l       .text  00000000 
f0001fa0 l       .text  00000000 
f0001fa2 l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fb4 l       .text  00000000 
f0001fb4 l       .text  00000000 
f0001fb8 l       .text  00000000 
f0001fb8 l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fca l       .text  00000000 
f0001fca l       .text  00000000 
f0001fd2 l       .text  00000000 
f0001fd2 l       .text  00000000 
f0001fd4 l       .text  00000000 
f0001fd4 l       .text  00000000 
f0001fd6 l       .text  00000000 
f0001fd6 l       .text  00000000 
f0001fea l       .text  00000000 
f0001fea l       .text  00000000 
f0001fec l       .text  00000000 
f0001ffa l       .text  00000000 
f0001ffa l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffe l       .text  00000000 
f0002006 l       .text  00000000 
f000200a l       .text  00000000 
f000200c l       .text  00000000 
f0002016 l       .text  00000000 
f0002016 l       .text  00000000 
f000201a l       .text  00000000 
f0002024 l       .text  00000000 
f0002024 l       .text  00000000 
f0002028 l       .text  00000000 
f0002034 l       .text  00000000 
f0002034 l       .text  00000000 
f0002038 l       .text  00000000 
f0002038 l       .text  00000000 
f0002042 l       .text  00000000 
f0002042 l       .text  00000000 
f000204a l       .text  00000000 
f000204a l       .text  00000000 
f000204e l       .text  00000000 
f0002056 l       .text  00000000 
f0002056 l       .text  00000000 
f0002060 l       .text  00000000 
f0002060 l       .text  00000000 
f000206a l       .text  00000000 
f000206a l       .text  00000000 
f000206e l       .text  00000000 
f0002076 l       .text  00000000 
f0002076 l       .text  00000000 
f0002080 l       .text  00000000 
f0002082 l       .text  00000000 
f0002082 l       .text  00000000 
f0002086 l       .text  00000000 
f0002090 l       .text  00000000 
f0002090 l       .text  00000000 
f0002098 l       .text  00000000 
f0002098 l       .text  00000000 
f000209c l       .text  00000000 
f00020a4 l       .text  00000000 
f00020a4 l       .text  00000000 
f000216e l     F .text  000000e4 hex_dump
f00020ae l       .text  00000000 
f00020b0 l       .text  00000000 
f00033af l     O .rodata        0000000f kUnknownSpec
f00020b0 l       .text  00000000 
f00020ba l       .text  00000000 
f00020ba l       .text  00000000 
f00020be l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c4 l       .text  00000000 
f00020ca l       .text  00000000 
f00020ca l       .text  00000000 
f00020ce l       .text  00000000 
f00020da l       .text  00000000 
f00020da l       .text  00000000 
f00020dc l       .text  00000000 
f00020dc l       .text  00000000 
f00020f0 l       .text  00000000 
f00020f0 l       .text  00000000 
f00020f4 l       .text  00000000 
f0002102 l       .text  00000000 
f0002102 l       .text  00000000 
f0002106 l       .text  00000000 
f0002106 l       .text  00000000 
f000210c l       .text  00000000 
f000210c l       .text  00000000 
f000210e l       .text  00000000 
f000210e l       .text  00000000 
f0002110 l       .text  00000000 
f0002110 l       .text  00000000 
f0002118 l       .text  00000000 
f000211a l       .text  00000000 
f000211c l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f000212e l       .text  00000000 
f0003382 l     O .rodata        00000011 kErrorNul
f000212e l       .text  00000000 
f0002138 l       .text  00000000 
f0002138 l       .text  00000000 
f000213c l       .text  00000000 
f0002140 l       .text  00000000 
f0002142 l       .text  00000000 
f0002142 l       .text  00000000 
f0002152 l       .text  00000000 
f0002156 l       .text  00000000 
f0002162 l       .text  00000000 
f0003393 l     O .rodata        0000000c kErrorTooWide
f0002162 l       .text  00000000 
f000216e l       .text  00000000 
f000216e l       .text  00000000 
f000216e l       .text  00000000 
f000216e l       .text  00000000 
f000216e l       .text  00000000 
f000216e l       .text  00000000 
f0002170 l       .text  00000000 
f0002188 l       .text  00000000 
f000218a l       .text  00000000 
f000218c l       .text  00000000 
f000218e l       .text  00000000 
f0002190 l       .text  00000000 
f0002194 l       .text  00000000 
f0002194 l       .text  00000000 
f0002198 l       .text  00000000 
f000219c l       .text  00000000 
f000219c l       .text  00000000 
f00021a6 l       .text  00000000 
f00021a6 l       .text  00000000 
f00021a8 l       .text  00000000 
f00021aa l       .text  00000000 
f00021b0 l       .text  00000000 
f00021b0 l       .text  00000000 
f00021b4 l       .text  00000000 
f00021b8 l       .text  00000000 
f00021b8 l       .text  00000000 
f00021c0 l       .text  00000000 
f00021c0 l       .text  00000000 
f00021c2 l       .text  00000000 
f00021c4 l       .text  00000000 
f00021c4 l       .text  00000000 
f00021c6 l       .text  00000000 
f00021c6 l       .text  00000000 
f00021cc l       .text  00000000 
f00021cc l       .text  00000000 
f00021ce l       .text  00000000 
f00021ce l       .text  00000000 
f00021d2 l       .text  00000000 
f00021d6 l       .text  00000000 
f00021dc l       .text  00000000 
f00021dc l       .text  00000000 
f00021e2 l       .text  00000000 
f00021ea l       .text  00000000 
f00021ea l       .text  00000000 
f00021ec l       .text  00000000 
f00021f0 l       .text  00000000 
f00021f4 l       .text  00000000 
f00021fa l       .text  00000000 
f00021fe l       .text  00000000 
f0002202 l       .text  00000000 
f0002204 l       .text  00000000 
f000220a l       .text  00000000 
f000220c l       .text  00000000 
f0002214 l       .text  00000000 
f000221a l       .text  00000000 
f000221e l       .text  00000000 
f000221e l       .text  00000000 
f0002220 l       .text  00000000 
f0002222 l       .text  00000000 
f0002222 l       .text  00000000 
f0002224 l       .text  00000000 
f0002226 l       .text  00000000 
f000222a l       .text  00000000 
f000222a l       .text  00000000 
f000222c l       .text  00000000 
f0002232 l       .text  00000000 
f0002232 l       .text  00000000 
f0002234 l       .text  00000000 
f000223c l       .text  00000000 
f000223e l       .text  00000000 
f0002242 l       .text  00000000 
f0002244 l       .text  00000000 
f0002246 l       .text  00000000 
f0002248 l       .text  00000000 
f0002252 l       .text  00000000 
f0002252 l       .text  00000000 
f0002252 l       .text  00000000 
f0002252 l       .text  00000000 
f0002252 l       .text  00000000 
f0002254 l       .text  00000000 
f0002256 l       .text  00000000 
f0002258 l       .text  00000000 
f0002258 l       .text  00000000 
f000225a l       .text  00000000 
f000225c l       .text  00000000 
f0002260 l       .text  00000000 
f0002260 l       .text  00000000 
f0002262 l       .text  00000000 
f0002262 l       .text  00000000 
f000226e l       .text  00000000 
f000226e l       .text  00000000 
f0002270 l       .text  00000000 
f0002274 l       .text  00000000 
f000227c l       .text  00000000 
f000227c l       .text  00000000 
f000227e l       .text  00000000 
f0002282 l       .text  00000000 
f0002286 l       .text  00000000 
f0002286 l       .text  00000000 
f0002288 l       .text  00000000 
f0002288 l       .text  00000000 
f000228c l       .text  00000000 
f0002292 l       .text  00000000 
f0002292 l       .text  00000000 
f0002294 l       .text  00000000 
f0002296 l       .text  00000000 
f0002298 l       .text  00000000 
f000229c l       .text  00000000 
f00022a0 l       .text  00000000 
f00022a4 l       .text  00000000 
f00022a4 l       .text  00000000 
f00022ae l       .text  00000000 
f00022b2 l       .text  00000000 
f00022b4 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022bc l       .text  00000000 
f00022be l       .text  00000000 
f00022c0 l       .text  00000000 
f00022c2 l       .text  00000000 
f00022c2 l       .text  00000000 
f00022c8 l       .text  00000000 
f00022ca l       .text  00000000 
f00022ca l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
0000309b l       .debug_loc     00000000 
000030c7 l       .debug_loc     00000000 
000030e2 l       .debug_loc     00000000 
00003108 l       .debug_loc     00000000 
00003134 l       .debug_loc     00000000 
00003165 l       .debug_loc     00000000 
00003196 l       .debug_loc     00000000 
000031d2 l       .debug_loc     00000000 
00003203 l       .debug_loc     00000000 
0000322a l       .debug_loc     00000000 
0000325b l       .debug_loc     00000000 
00003276 l       .debug_loc     00000000 
00003292 l       .debug_loc     00000000 
000032ad l       .debug_loc     00000000 
000032d3 l       .debug_loc     00000000 
000032f9 l       .debug_loc     00000000 
00003335 l       .debug_loc     00000000 
00003440 l       .debug_loc     00000000 
0000359a l       .debug_loc     00000000 
0000369a l       .debug_loc     00000000 
000037a5 l       .debug_loc     00000000 
000037c5 l       .debug_loc     00000000 
000037eb l       .debug_loc     00000000 
0000381b l       .debug_loc     00000000 
00003a53 l       .debug_loc     00000000 
00003a6f l       .debug_loc     00000000 
00003a8a l       .debug_loc     00000000 
00003bff l       .debug_loc     00000000 
00003d4f l       .debug_loc     00000000 
00003e63 l       .debug_loc     00000000 
00003e89 l       .debug_loc     00000000 
00003ea4 l       .debug_loc     00000000 
00003ebf l       .debug_loc     00000000 
00003eda l       .debug_loc     00000000 
00003ef5 l       .debug_loc     00000000 
00003f10 l       .debug_loc     00000000 
00003f2c l       .debug_loc     00000000 
00003f47 l       .debug_loc     00000000 
00003f62 l       .debug_loc     00000000 
00003f7d l       .debug_loc     00000000 
00003f98 l       .debug_loc     00000000 
00003fca l       .debug_loc     00000000 
00003ffd l       .debug_loc     00000000 
00004018 l       .debug_loc     00000000 
0000406b l       .debug_loc     00000000 
0000409e l       .debug_loc     00000000 
000040b9 l       .debug_loc     00000000 
000040d4 l       .debug_loc     00000000 
000040ef l       .debug_loc     00000000 
0000410a l       .debug_loc     00000000 
00004125 l       .debug_loc     00000000 
00004140 l       .debug_loc     00000000 
0000415b l       .debug_loc     00000000 
00004176 l       .debug_loc     00000000 
00004191 l       .debug_loc     00000000 
000041ac l       .debug_loc     00000000 
000041c7 l       .debug_loc     00000000 
000041e3 l       .debug_loc     00000000 
00004202 l       .debug_loc     00000000 
0000421d l       .debug_loc     00000000 
0000424e l       .debug_loc     00000000 
00004274 l       .debug_loc     00000000 
000042a5 l       .debug_loc     00000000 
000042d6 l       .debug_loc     00000000 
000042f1 l       .debug_loc     00000000 
0000430c l       .debug_loc     00000000 
00004327 l       .debug_loc     00000000 
00004358 l       .debug_loc     00000000 
00004373 l       .debug_loc     00000000 
0000438e l       .debug_loc     00000000 
000043aa l       .debug_loc     00000000 
000043d0 l       .debug_loc     00000000 
00004401 l       .debug_loc     00000000 
0000441c l       .debug_loc     00000000 
00004437 l       .debug_loc     00000000 
0000445d l       .debug_loc     00000000 
00004483 l       .debug_loc     00000000 
0000449e l       .debug_loc     00000000 
000044b9 l       .debug_loc     00000000 
000044d4 l       .debug_loc     00000000 
000044ef l       .debug_loc     00000000 
0000450e l       .debug_loc     00000000 
00004529 l       .debug_loc     00000000 
00004544 l       .debug_loc     00000000 
00004560 l       .debug_loc     00000000 
0000457b l       .debug_loc     00000000 
00004596 l       .debug_loc     00000000 
000045b5 l       .debug_loc     00000000 
000045db l       .debug_loc     00000000 
0000460c l       .debug_loc     00000000 
00004664 l       .debug_loc     00000000 
000046ae l       .debug_loc     00000000 
00004700 l       .debug_loc     00000000 
0000473d l       .debug_loc     00000000 
00004779 l       .debug_loc     00000000 
000047e3 l       .debug_loc     00000000 
0000482c l       .debug_loc     00000000 
00004896 l       .debug_loc     00000000 
000048bc l       .debug_loc     00000000 
000048d7 l       .debug_loc     00000000 
000048f2 l       .debug_loc     00000000 
00004919 l       .debug_loc     00000000 
00004961 l       .debug_loc     00000000 
00004987 l       .debug_loc     00000000 
000049ad l       .debug_loc     00000000 
000049d3 l       .debug_loc     00000000 
000049ee l       .debug_loc     00000000 
00004a1e l       .debug_loc     00000000 
00004a44 l       .debug_loc     00000000 
00004a76 l       .debug_loc     00000000 
00004ab4 l       .debug_loc     00000000 
00004ae3 l       .debug_loc     00000000 
00004afe l       .debug_loc     00000000 
00004b31 l       .debug_loc     00000000 
00004b4c l       .debug_loc     00000000 
00004b88 l       .debug_loc     00000000 
00004bae l       .debug_loc     00000000 
00004bc9 l       .debug_loc     00000000 
00004be4 l       .debug_loc     00000000 
00004bff l       .debug_loc     00000000 
00004c55 l       .debug_loc     00000000 
00004c84 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002f10 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000006f8 l       .debug_ranges  00000000 
00002f2e l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
00002f4d l       .debug_str     00000000 
00002f65 l       .debug_str     00000000 
00002f59 l       .debug_str     00000000 
000024d7 l       .debug_str     00000000 
0000324a l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00002f73 l       .debug_str     00000000 
00002f7d l       .debug_str     00000000 
000032a2 l       .debug_str     00000000 
00002f8b l       .debug_str     00000000 
00003b81 l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
00003afa l       .debug_str     00000000 
0000315f l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
00003329 l       .debug_str     00000000 
00001323 l       .debug_str     00000000 
00003189 l       .debug_str     00000000 
00003339 l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00002f95 l       .debug_str     00000000 
00002fa1 l       .debug_str     00000000 
00002fae l       .debug_str     00000000 
00002ffd l       .debug_str     00000000 
00002fec l       .debug_str     00000000 
00002fc5 l       .debug_str     00000000 
00002fd4 l       .debug_str     00000000 
00002fe3 l       .debug_str     00000000 
00003010 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
0000054f l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
00000575 l       .debug_str     00000000 
00000584 l       .debug_str     00000000 
00000593 l       .debug_str     00000000 
0000301b l       .debug_str     00000000 
00003024 l       .debug_str     00000000 
0000302f l       .debug_str     00000000 
00003037 l       .debug_str     00000000 
00003043 l       .debug_str     00000000 
0000304f l       .debug_str     00000000 
0000305c l       .debug_str     00000000 
0000306c l       .debug_str     00000000 
0000307d l       .debug_str     00000000 
0000308a l       .debug_str     00000000 
00003093 l       .debug_str     00000000 
0000309d l       .debug_str     00000000 
000030a7 l       .debug_str     00000000 
000030b2 l       .debug_str     00000000 
000030bc l       .debug_str     00000000 
000030c7 l       .debug_str     00000000 
000030d5 l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003af l       .debug_str     00000000 
0000038b l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
000030e9 l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
000030de l       .debug_str     00000000 
0000035f l       .debug_str     00000000 
00003209 l       .debug_str     00000000 
000030fd l       .debug_str     00000000 
000007c8 l       .debug_str     00000000 
000003b3 l       .debug_str     00000000 
00003217 l       .debug_str     00000000 
000004c4 l       .debug_str     00000000 
0000310d l       .debug_str     00000000 
00002edc l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000368 l       .debug_str     00000000 
00000242 l       .debug_str     00000000 
00000238 l       .debug_str     00000000 
00002ed0 l       .debug_str     00000000 
000005c0 l       .debug_ranges  00000000 
00003225 l       .debug_str     00000000 
000032af l       .debug_str     00000000 
000032ea l       .debug_str     00000000 
000006a0 l       .debug_ranges  00000000 
000031a3 l       .debug_str     00000000 
000005d8 l       .debug_ranges  00000000 
00000600 l       .debug_ranges  00000000 
00000620 l       .debug_ranges  00000000 
00000638 l       .debug_ranges  00000000 
00000670 l       .debug_ranges  00000000 
00000658 l       .debug_ranges  00000000 
00000688 l       .debug_ranges  00000000 
00003127 l       .debug_str     00000000 
0000313d l       .debug_str     00000000 
000023a5 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00003146 l       .debug_str     00000000 
00003184 l       .debug_str     00000000 
00003171 l       .debug_str     00000000 
0000314e l       .debug_str     00000000 
00000539 l       .debug_str     00000000 
00003167 l       .debug_str     00000000 
0000318d l       .debug_str     00000000 
0000319f l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00000ae6 l       .debug_str     00000000 
000034af l       .debug_str     00000000 
000031ae l       .debug_str     00000000 
000031a8 l       .debug_str     00000000 
000031b5 l       .debug_str     00000000 
000031bd l       .debug_str     00000000 
000014ae l       .debug_str     00000000 
000031c1 l       .debug_str     00000000 
000014b9 l       .debug_str     00000000 
000034c8 l       .debug_str     00000000 
000031c5 l       .debug_str     00000000 
00003299 l       .debug_str     00000000 
00003bdc l       .debug_str     00000000 
0000331e l       .debug_str     00000000 
00003315 l       .debug_str     00000000 
00003330 l       .debug_str     00000000 
0000266d l       .debug_str     00000000 
00003233 l       .debug_str     00000000 
00003241 l       .debug_str     00000000 
000032b9 l       .debug_str     00000000 
000024dc l       .debug_str     00000000 
0000324f l       .debug_str     00000000 
000031d4 l       .debug_str     00000000 
00002ff9 l       .debug_str     00000000 
0000325c l       .debug_str     00000000 
00003286 l       .debug_str     00000000 
000032d6 l       .debug_str     00000000 
00002fde l       .debug_str     00000000 
000006e0 l       .debug_ranges  00000000 
000032c9 l       .debug_str     00000000 
000032e5 l       .debug_str     00000000 
000032f8 l       .debug_str     00000000 
00002fcf l       .debug_str     00000000 
000006c0 l       .debug_ranges  00000000 
000032c2 l       .debug_str     00000000 
00003307 l       .debug_str     00000000 
00003310 l       .debug_str     00000000 
000031e6 l       .debug_str     00000000 
000031fa l       .debug_str     00000000 
00003269 l       .debug_str     00000000 
00003278 l       .debug_str     00000000 
00003202 l       .debug_str     00000000 
00000b78 l       .debug_frame   00000000 
f0001c3e l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001ce0 l       .text  00000000 
f000216e l       .text  00000000 
f0002252 l       .text  00000000 
f00022d0 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d4 l       .text  00000000 
f00022dc l       .text  00000000 
f00022dc l       .text  00000000 
f00022e0 l       .text  00000000 
f00022e0 l       .text  00000000 
f00022ec l       .text  00000000 
f00022ee l       .text  00000000 
f00022ee l       .text  00000000 
f00022f2 l       .text  00000000 
f00022fe l       .text  00000000 
f0002300 l       .text  00000000 
f0002304 l       .text  00000000 
f0002306 l       .text  00000000 
f0002306 l       .text  00000000 
f000230a l       .text  00000000 
f000230a l       .text  00000000 
f000230e l       .text  00000000 
f000230e l       .text  00000000 
f0002310 l       .text  00000000 
f0002310 l       .text  00000000 
f0002314 l       .text  00000000 
f0002314 l       .text  00000000 
f0002316 l       .text  00000000 
f000231a l       .text  00000000 
f000231a l       .text  00000000 
f000231e l       .text  00000000 
f0002322 l       .text  00000000 
f0002328 l       .text  00000000 
f0002328 l       .text  00000000 
f000232c l       .text  00000000 
f000232e l       .text  00000000 
f000232e l       .text  00000000 
f0002334 l       .text  00000000 
f0002334 l       .text  00000000 
f000233a l       .text  00000000 
f000233a l       .text  00000000 
f000233c l       .text  00000000 
f000233c l       .text  00000000 
f0002342 l       .text  00000000 
f0002342 l       .text  00000000 
00004c9f l       .debug_loc     00000000 
00004cba l       .debug_loc     00000000 
00004ceb l       .debug_loc     00000000 
00004d11 l       .debug_loc     00000000 
00004d37 l       .debug_loc     00000000 
00004d52 l       .debug_loc     00000000 
00004d74 l       .debug_loc     00000000 
00004d9b l       .debug_loc     00000000 
00004dc2 l       .debug_loc     00000000 
00004de6 l       .debug_loc     00000000 
00004e17 l       .debug_loc     00000000 
00004e32 l       .debug_loc     00000000 
00004e63 l       .debug_loc     00000000 
00004ebd l       .debug_loc     00000000 
00004ef9 l       .debug_loc     00000000 
00004f1d l       .debug_loc     00000000 
00004f42 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000333f l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000007a8 l       .debug_ranges  00000000 
0000335b l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
0000336b l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
00003499 l       .debug_str     00000000 
00003378 l       .debug_str     00000000 
0000337c l       .debug_str     00000000 
00003387 l       .debug_str     00000000 
00003390 l       .debug_str     00000000 
000033a1 l       .debug_str     00000000 
000033b3 l       .debug_str     00000000 
000033bd l       .debug_str     00000000 
000033cc l       .debug_str     00000000 
000033de l       .debug_str     00000000 
000033f1 l       .debug_str     00000000 
00003405 l       .debug_str     00000000 
0000340e l       .debug_str     00000000 
0000341a l       .debug_str     00000000 
00003429 l       .debug_str     00000000 
00003433 l       .debug_str     00000000 
00003440 l       .debug_str     00000000 
0000344a l       .debug_str     00000000 
0000345b l       .debug_str     00000000 
0000035f l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
000030d5 l       .debug_str     00000000 
000034aa l       .debug_str     00000000 
000034b8 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
0000087c l       .debug_str     00000000 
000015fd l       .debug_str     00000000 
00001614 l       .debug_str     00000000 
00001617 l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
0000162e l       .debug_str     00000000 
0000161d l       .debug_str     00000000 
00000af0 l       .debug_str     00000000 
000015e4 l       .debug_str     00000000 
000034e2 l       .debug_str     00000000 
000034a5 l       .debug_str     00000000 
000034f0 l       .debug_str     00000000 
000031c1 l       .debug_str     00000000 
00000790 l       .debug_ranges  00000000 
000034c1 l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
000034af l       .debug_str     00000000 
000031ae l       .debug_str     00000000 
000034cc l       .debug_str     00000000 
000031c5 l       .debug_str     00000000 
000034fa l       .debug_str     00000000 
000034c8 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00000d6c l       .debug_frame   00000000 
f0002342 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
f0002342 l       .text  00000000 
f0002342 l       .text  00000000 
f0002342 l       .text  00000000 
f0002342 l       .text  00000000 
f0002344 l       .text  00000000 
f0002346 l       .text  00000000 
f000234a l       .text  00000000 
f000234c l       .text  00000000 
f000234e l       .text  00000000 
f0002350 l       .text  00000000 
f0002350 l       .text  00000000 
00004f64 l       .debug_loc     00000000 
00004f7f l       .debug_loc     00000000 
00004f9a l       .debug_loc     00000000 
00004fb5 l       .debug_loc     00000000 
00004fd1 l       .debug_loc     00000000 
00004fed l       .debug_loc     00000000 
00005008 l       .debug_loc     00000000 
00005023 l       .debug_loc     00000000 
0000503e l       .debug_loc     00000000 
00005059 l       .debug_loc     00000000 
00005074 l       .debug_loc     00000000 
0000508f l       .debug_loc     00000000 
000050aa l       .debug_loc     00000000 
000050c5 l       .debug_loc     00000000 
000050eb l       .debug_loc     00000000 
00005106 l       .debug_loc     00000000 
00005121 l       .debug_loc     00000000 
0000513f l       .debug_loc     00000000 
00005166 l       .debug_loc     00000000 
00005181 l       .debug_loc     00000000 
0000519c l       .debug_loc     00000000 
000051b7 l       .debug_loc     00000000 
000051d5 l       .debug_loc     00000000 
000051fc l       .debug_loc     00000000 
00005217 l       .debug_loc     00000000 
00005232 l       .debug_loc     00000000 
0000524d l       .debug_loc     00000000 
00005268 l       .debug_loc     00000000 
0000528e l       .debug_loc     00000000 
000052a9 l       .debug_loc     00000000 
000052c4 l       .debug_loc     00000000 
000052ea l       .debug_loc     00000000 
0000530a l       .debug_loc     00000000 
00005330 l       .debug_loc     00000000 
0000534e l       .debug_loc     00000000 
00005369 l       .debug_loc     00000000 
0000538f l       .debug_loc     00000000 
000053b5 l       .debug_loc     00000000 
000053d0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003501 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000007c0 l       .debug_ranges  00000000 
0000352e l       .debug_str     00000000 
00003568 l       .debug_str     00000000 
0000355b l       .debug_str     00000000 
00003538 l       .debug_str     00000000 
00003549 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
0000054f l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
00000575 l       .debug_str     00000000 
00000584 l       .debug_str     00000000 
00000593 l       .debug_str     00000000 
0000358f l       .debug_str     00000000 
00003577 l       .debug_str     00000000 
0000364d l       .debug_str     00000000 
0000359e l       .debug_str     00000000 
000035b5 l       .debug_str     00000000 
000035cc l       .debug_str     00000000 
000035df l       .debug_str     00000000 
000035f5 l       .debug_str     00000000 
0000360b l       .debug_str     00000000 
00003621 l       .debug_str     00000000 
00003636 l       .debug_str     00000000 
000005eb l       .debug_str     00000000 
000005c6 l       .debug_str     00000000 
000005d9 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00000755 l       .debug_str     00000000 
0000038b l       .debug_str     00000000 
000003b3 l       .debug_str     00000000 
0000153a l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000017b9 l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
0000154e l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
0000365a l       .debug_str     00000000 
00003598 l       .debug_str     00000000 
00002667 l       .debug_str     00000000 
00002671 l       .debug_str     00000000 
0000366f l       .debug_str     00000000 
00001135 l       .debug_str     00000000 
00000539 l       .debug_str     00000000 
000015ea l       .debug_str     00000000 
00003685 l       .debug_str     00000000 
00003781 l       .debug_str     00000000 
00001670 l       .debug_str     00000000 
00001614 l       .debug_str     00000000 
00001571 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
0000157b l       .debug_str     00000000 
0000369c l       .debug_str     00000000 
0000171c l       .debug_str     00000000 
000037a8 l       .debug_str     00000000 
000015e4 l       .debug_str     00000000 
000036b4 l       .debug_str     00000000 
000015fd l       .debug_str     00000000 
00001617 l       .debug_str     00000000 
0000162e l       .debug_str     00000000 
0000161d l       .debug_str     00000000 
00000af0 l       .debug_str     00000000 
00001641 l       .debug_str     00000000 
000036d1 l       .debug_str     00000000 
000036ea l       .debug_str     00000000 
000012a2 l       .debug_str     00000000 
000037b7 l       .debug_str     00000000 
000036fd l       .debug_str     00000000 
000013aa l       .debug_str     00000000 
000037c5 l       .debug_str     00000000 
0000179f l       .debug_str     00000000 
00003716 l       .debug_str     00000000 
000037d5 l       .debug_str     00000000 
0000372f l       .debug_str     00000000 
00003748 l       .debug_str     00000000 
000008c5 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003af l       .debug_str     00000000 
00003761 l       .debug_str     00000000 
00003772 l       .debug_str     00000000 
0000378a l       .debug_str     00000000 
00000799 l       .debug_str     00000000 
000037e0 l       .debug_str     00000000 
00000da0 l       .debug_frame   00000000 
f0002350 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
f0002350 l       .text  00000000 
f0002350 l       .text  00000000 
f0002350 l       .text  00000000 
f0002352 l       .text  00000000 
f000235c l       .text  00000000 
f000235e l       .text  00000000 
f0002360 l       .text  00000000 
f0002362 l       .text  00000000 
f0002362 l       .text  00000000 
f0002364 l       .text  00000000 
f0002366 l       .text  00000000 
f000236a l       .text  00000000 
f000236c l       .text  00000000 
f000236e l       .text  00000000 
f0002376 l       .text  00000000 
f0002382 l       .text  00000000 
f0002392 l       .text  00000000 
f000239a l       .text  00000000 
f00023a0 l       .text  00000000 
f00023a0 l       .text  00000000 
f00023a4 l       .text  00000000 
f00023a4 l       .text  00000000 
f00023a6 l       .text  00000000 
f00023a8 l       .text  00000000 
f00023aa l       .text  00000000 
f00023aa l       .text  00000000 
f00023ac l       .text  00000000 
f00023ac l       .text  00000000 
f00023b0 l       .text  00000000 
f00023b0 l       .text  00000000 
f00023b2 l       .text  00000000 
f00023b4 l       .text  00000000 
f00023b4 l       .text  00000000 
f00023b6 l       .text  00000000 
f00023b6 l       .text  00000000 
f00023b8 l       .text  00000000 
f00023b8 l       .text  00000000 
f00023bc l       .text  00000000 
f00023bc l       .text  00000000 
f00023be l       .text  00000000 
f00023be l       .text  00000000 
f00023c2 l       .text  00000000 
f00023c2 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c8 l       .text  00000000 
f00023c8 l       .text  00000000 
f00023ca l       .text  00000000 
f00023cc l       .text  00000000 
f00023cc l       .text  00000000 
f00023ce l       .text  00000000 
f00023ce l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023d8 l       .text  00000000 
f00023dc l       .text  00000000 
f00023dc l       .text  00000000 
f00023e0 l       .text  00000000 
f00023e0 l       .text  00000000 
f00023e2 l       .text  00000000 
f00023e6 l       .text  00000000 
f00023e8 l       .text  00000000 
f00023e8 l       .text  00000000 
f00023ea l       .text  00000000 
f00023ee l       .text  00000000 
f00023f0 l       .text  00000000 
f00023f0 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f4 l       .text  00000000 
f00023f4 l       .text  00000000 
f00023f6 l       .text  00000000 
f00023f6 l       .text  00000000 
f00023fa l       .text  00000000 
f00023fa l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240c l       .text  00000000 
f000240e l       .text  00000000 
f000240e l       .text  00000000 
f0002410 l       .text  00000000 
f0002410 l       .text  00000000 
f0002412 l       .text  00000000 
f0002412 l       .text  00000000 
f0002414 l       .text  00000000 
f0002414 l       .text  00000000 
f0002416 l       .text  00000000 
f0002416 l       .text  00000000 
f0002418 l       .text  00000000 
f0002418 l       .text  00000000 
f000241a l       .text  00000000 
f000241a l       .text  00000000 
f000241c l       .text  00000000 
f000241e l       .text  00000000 
f000241e l       .text  00000000 
f0002420 l       .text  00000000 
f0002420 l       .text  00000000 
f0002422 l       .text  00000000 
f0002422 l       .text  00000000 
f0002424 l       .text  00000000 
f0002426 l       .text  00000000 
f0002428 l       .text  00000000 
f0002428 l       .text  00000000 
f000242a l       .text  00000000 
f000242a l       .text  00000000 
f000242c l       .text  00000000 
f000242c l       .text  00000000 
000053eb l       .debug_loc     00000000 
00005411 l       .debug_loc     00000000 
00005439 l       .debug_loc     00000000 
00005468 l       .debug_loc     00000000 
00005483 l       .debug_loc     00000000 
0000549f l       .debug_loc     00000000 
000054d5 l       .debug_loc     00000000 
000054f0 l       .debug_loc     00000000 
00005517 l       .debug_loc     00000000 
0000553c l       .debug_loc     00000000 
00005562 l       .debug_loc     00000000 
00005588 l       .debug_loc     00000000 
000055ae l       .debug_loc     00000000 
000055c9 l       .debug_loc     00000000 
000055eb l       .debug_loc     00000000 
00005611 l       .debug_loc     00000000 
00005637 l       .debug_loc     00000000 
0000565d l       .debug_loc     00000000 
00005683 l       .debug_loc     00000000 
0000569e l       .debug_loc     00000000 
000056c0 l       .debug_loc     00000000 
000056e6 l       .debug_loc     00000000 
00005701 l       .debug_loc     00000000 
00005728 l       .debug_loc     00000000 
00005743 l       .debug_loc     00000000 
0000575e l       .debug_loc     00000000 
00005779 l       .debug_loc     00000000 
000057a0 l       .debug_loc     00000000 
000057bb l       .debug_loc     00000000 
000057d6 l       .debug_loc     00000000 
000057fc l       .debug_loc     00000000 
00005817 l       .debug_loc     00000000 
00005832 l       .debug_loc     00000000 
0000584d l       .debug_loc     00000000 
00005873 l       .debug_loc     00000000 
0000588e l       .debug_loc     00000000 
000058a9 l       .debug_loc     00000000 
000058c4 l       .debug_loc     00000000 
000058df l       .debug_loc     00000000 
000058fa l       .debug_loc     00000000 
00005915 l       .debug_loc     00000000 
00005930 l       .debug_loc     00000000 
00005953 l       .debug_loc     00000000 
0000596e l       .debug_loc     00000000 
00005989 l       .debug_loc     00000000 
000059a4 l       .debug_loc     00000000 
000059bf l       .debug_loc     00000000 
000059e2 l       .debug_loc     00000000 
000059fd l       .debug_loc     00000000 
00005a18 l       .debug_loc     00000000 
00005a3e l       .debug_loc     00000000 
00005a64 l       .debug_loc     00000000 
00005a8a l       .debug_loc     00000000 
00005ab0 l       .debug_loc     00000000 
00005ad6 l       .debug_loc     00000000 
00005afc l       .debug_loc     00000000 
00005b17 l       .debug_loc     00000000 
00005b3d l       .debug_loc     00000000 
00005b6c l       .debug_loc     00000000 
00005b92 l       .debug_loc     00000000 
00005bad l       .debug_loc     00000000 
00005bc8 l       .debug_loc     00000000 
00005be8 l       .debug_loc     00000000 
00005c03 l       .debug_loc     00000000 
00005c1e l       .debug_loc     00000000 
00005c4f l       .debug_loc     00000000 
00005c80 l       .debug_loc     00000000 
00005ca6 l       .debug_loc     00000000 
00005ccc l       .debug_loc     00000000 
00005ce8 l       .debug_loc     00000000 
00005d03 l       .debug_loc     00000000 
00005d1e l       .debug_loc     00000000 
00005d39 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000037ff l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000858 l       .debug_ranges  00000000 
0000381c l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
0000054f l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
00000575 l       .debug_str     00000000 
00000584 l       .debug_str     00000000 
00000593 l       .debug_str     00000000 
000005eb l       .debug_str     00000000 
000005c6 l       .debug_str     00000000 
000005d9 l       .debug_str     00000000 
0000061b l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000608 l       .debug_str     00000000 
000038a7 l       .debug_str     00000000 
00003832 l       .debug_str     00000000 
00003849 l       .debug_str     00000000 
00003860 l       .debug_str     00000000 
00003877 l       .debug_str     00000000 
0000388f l       .debug_str     00000000 
000038f7 l       .debug_str     00000000 
000038ba l       .debug_str     00000000 
000038ce l       .debug_str     00000000 
000038e2 l       .debug_str     00000000 
00003937 l       .debug_str     00000000 
0000390b l       .debug_str     00000000 
00003922 l       .debug_str     00000000 
00001464 l       .debug_str     00000000 
0000144d l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
00003949 l       .debug_str     00000000 
000003b3 l       .debug_str     00000000 
000037d1 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003af l       .debug_str     00000000 
0000038b l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000395 l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
0000153a l       .debug_str     00000000 
000017b9 l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
0000154e l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
000015fd l       .debug_str     00000000 
00001614 l       .debug_str     00000000 
00001617 l       .debug_str     00000000 
0000162e l       .debug_str     00000000 
0000161d l       .debug_str     00000000 
00000af0 l       .debug_str     00000000 
000015e4 l       .debug_str     00000000 
00000763 l       .debug_str     00000000 
000007c1 l       .debug_str     00000000 
00003ae7 l       .debug_str     00000000 
00003aeb l       .debug_str     00000000 
00003af6 l       .debug_str     00000000 
00002e0d l       .debug_str     00000000 
000015ea l       .debug_str     00000000 
000039bc l       .debug_str     00000000 
000038b0 l       .debug_str     00000000 
000039d6 l       .debug_str     00000000 
000039f4 l       .debug_str     00000000 
000024d7 l       .debug_str     00000000 
00003954 l       .debug_str     00000000 
000032ea l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
00003964 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00001670 l       .debug_str     00000000 
00001571 l       .debug_str     00000000 
0000157b l       .debug_str     00000000 
00003971 l       .debug_str     00000000 
00003310 l       .debug_str     00000000 
000039f0 l       .debug_str     00000000 
000032be l       .debug_str     00000000 
00003a08 l       .debug_str     00000000 
00003984 l       .debug_str     00000000 
0000398f l       .debug_str     00000000 
0000399d l       .debug_str     00000000 
00003a04 l       .debug_str     00000000 
000039af l       .debug_str     00000000 
0000310d l       .debug_str     00000000 
00003a1b l       .debug_str     00000000 
000034cc l       .debug_str     00000000 
00003a38 l       .debug_str     00000000 
00003b15 l       .debug_str     00000000 
00003a54 l       .debug_str     00000000 
00003b1f l       .debug_str     00000000 
00001690 l       .debug_str     00000000 
00001641 l       .debug_str     00000000 
00003a70 l       .debug_str     00000000 
00003940 l       .debug_str     00000000 
00000792 l       .debug_str     00000000 
00000828 l       .debug_ranges  00000000 
00000840 l       .debug_ranges  00000000 
00003a86 l       .debug_str     00000000 
00003b54 l       .debug_str     00000000 
00003aa1 l       .debug_str     00000000 
00003abd l       .debug_str     00000000 
000031ae l       .debug_str     00000000 
000008c5 l       .debug_str     00000000 
00003ad5 l       .debug_str     00000000 
000007b8 l       .debug_str     00000000 
00000776 l       .debug_str     00000000 
0000077f l       .debug_str     00000000 
0000078b l       .debug_str     00000000 
00000624 l       .debug_str     00000000 
00000799 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
00003b00 l       .debug_str     00000000 
00003b2a l       .debug_str     00000000 
00003b40 l       .debug_str     00000000 
00000e74 l       .debug_frame   00000000 
f000240a l       .text  00000000 
f000242c l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
f000242c l       .text  00000000 
f000242c l       .text  00000000 
f000242c l       .text  00000000 
f000242e l       .text  00000000 
f0002434 l       .text  00000000 
f0002440 l       .text  00000000 
f0002448 l       .text  00000000 
f0002448 l       .text  00000000 
f0002450 l       .text  00000000 
f0002472 l       .text  00000000 
f0002476 l       .text  00000000 
f0002476 l       .text  00000000 
f000247a l       .text  00000000 
f000247e l       .text  00000000 
f000247e l       .text  00000000 
f0002482 l       .text  00000000 
f0002494 l       .text  00000000 
f0002498 l       .text  00000000 
f00024a8 l       .text  00000000 
f00024aa l       .text  00000000 
f00024aa l       .text  00000000 
f00024ba l       .text  00000000 
f00024bc l       .text  00000000 
f00024bc l       .text  00000000 
f00024c0 l       .text  00000000 
f00024c0 l       .text  00000000 
f00024c4 l       .text  00000000 
f00024c4 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024ce l       .text  00000000 
f00024d0 l       .text  00000000 
f00024d2 l       .text  00000000 
f00024dc l       .text  00000000 
f00024dc l       .text  00000000 
00005d5f l       .debug_loc     00000000 
00005d77 l       .debug_loc     00000000 
00005d9e l       .debug_loc     00000000 
00005dcf l       .debug_loc     00000000 
00005e22 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003b63 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00002e0d l       .debug_str     00000000 
000024da l       .debug_str     00000000 
000024aa l       .debug_str     00000000 
00003b7d l       .debug_str     00000000 
0000134a l       .debug_str     00000000 
00003b85 l       .debug_str     00000000 
00003b89 l       .debug_str     00000000 
000004c4 l       .debug_str     00000000 
00001464 l       .debug_str     00000000 
0000144d l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000f78 l       .debug_frame   00000000 
f00024dc l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
f00024dc l       .text  00000000 
f00024dc l       .text  00000000 
f00024dc l       .text  00000000 
f00024dc l       .text  00000000 
f00024e4 l       .text  00000000 
f00024e8 l       .text  00000000 
f00024e8 l       .text  00000000 
f00024ec l       .text  00000000 
f00024ec l       .text  00000000 
f00024f0 l       .text  00000000 
f00024f0 l       .text  00000000 
f00024fc l       .text  00000000 
f00024fe l       .text  00000000 
f00024fe l       .text  00000000 
f0002504 l       .text  00000000 
f0002504 l       .text  00000000 
f0002508 l       .text  00000000 
f000250a l       .text  00000000 
f000250e l       .text  00000000 
f000250e l       .text  00000000 
f0002510 l       .text  00000000 
f0002510 l       .text  00000000 
f0002512 l       .text  00000000 
f0002512 l       .text  00000000 
f000251a l       .text  00000000 
f000251e l       .text  00000000 
f0002520 l       .text  00000000 
f0002524 l       .text  00000000 
f0002528 l       .text  00000000 
f0002528 l       .text  00000000 
f000252c l       .text  00000000 
f000252c l       .text  00000000 
f0002530 l       .text  00000000 
f0002532 l       .text  00000000 
f0002532 l       .text  00000000 
f0002536 l       .text  00000000 
f0002536 l       .text  00000000 
f0002538 l       .text  00000000 
f0002538 l       .text  00000000 
f000253a l       .text  00000000 
f000253a l       .text  00000000 
f000253e l       .text  00000000 
f000253e l       .text  00000000 
f0002542 l       .text  00000000 
f0002544 l       .text  00000000 
f000254a l       .text  00000000 
f000254a l       .text  00000000 
f000254e l       .text  00000000 
f0002552 l       .text  00000000 
f000255a l       .text  00000000 
f000255a l       .text  00000000 
f000255c l       .text  00000000 
f000255c l       .text  00000000 
f000255e l       .text  00000000 
f000255e l       .text  00000000 
f0002564 l       .text  00000000 
f0002564 l       .text  00000000 
f0002564 l       .text  00000000 
f0002564 l       .text  00000000 
f0002564 l       .text  00000000 
f0002568 l       .text  00000000 
f0002568 l       .text  00000000 
f000256c l       .text  00000000 
f000256c l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f0002578 l       .text  00000000 
f000257c l       .text  00000000 
f000257c l       .text  00000000 
f000257e l       .text  00000000 
f000257e l       .text  00000000 
f0002582 l       .text  00000000 
f0002582 l       .text  00000000 
f0002586 l       .text  00000000 
f0002586 l       .text  00000000 
f0002588 l       .text  00000000 
f000258a l       .text  00000000 
f000258c l       .text  00000000 
f000258c l       .text  00000000 
f0002590 l       .text  00000000 
f0002594 l       .text  00000000 
f00025a4 l       .text  00000000 
f00025a4 l       .text  00000000 
f00025a8 l       .text  00000000 
f00025a8 l       .text  00000000 
f00025aa l       .text  00000000 
f00025aa l       .text  00000000 
f00025ac l       .text  00000000 
f00025ac l       .text  00000000 
f00025b0 l       .text  00000000 
f00025b0 l       .text  00000000 
f00025b6 l       .text  00000000 
f00025ba l       .text  00000000 
f00025ba l       .text  00000000 
f00025be l       .text  00000000 
f00025c2 l       .text  00000000 
f00025c4 l       .text  00000000 
f00025c6 l       .text  00000000 
f00025c6 l       .text  00000000 
f00025c6 l       .text  00000000 
f00025c6 l       .text  00000000 
f00025c6 l       .text  00000000 
f00025ca l       .text  00000000 
f00025ca l       .text  00000000 
f00025ce l       .text  00000000 
f00025ce l       .text  00000000 
f00025d6 l       .text  00000000 
f00025da l       .text  00000000 
f00025de l       .text  00000000 
f00025e0 l       .text  00000000 
f00025e2 l       .text  00000000 
f00025e2 l       .text  00000000 
f00025e6 l       .text  00000000 
f00025ea l       .text  00000000 
f00025ea l       .text  00000000 
f00025ec l       .text  00000000 
f00025ee l       .text  00000000 
f00025f0 l       .text  00000000 
f00025f6 l       .text  00000000 
f00025f6 l       .text  00000000 
f00025f8 l       .text  00000000 
f00025fc l       .text  00000000 
f0002608 l       .text  00000000 
f0002616 l       .text  00000000 
f0002616 l       .text  00000000 
f000261a l       .text  00000000 
f000261c l       .text  00000000 
f000261c l       .text  00000000 
f0002620 l       .text  00000000 
f0002624 l       .text  00000000 
f0002624 l       .text  00000000 
f0002628 l       .text  00000000 
f000262c l       .text  00000000 
f0002630 l       .text  00000000 
f0002634 l       .text  00000000 
f0002638 l       .text  00000000 
f0002638 l       .text  00000000 
f000263c l       .text  00000000 
f0002640 l       .text  00000000 
f0002642 l       .text  00000000 
f0002642 l       .text  00000000 
f0002644 l       .text  00000000 
f0002648 l       .text  00000000 
f0002648 l       .text  00000000 
f0002650 l       .text  00000000 
f0002654 l       .text  00000000 
f0002654 l       .text  00000000 
f0002658 l       .text  00000000 
f000265c l       .text  00000000 
f0002660 l       .text  00000000 
f0002662 l       .text  00000000 
f0002666 l       .text  00000000 
f0002666 l       .text  00000000 
f000266a l       .text  00000000 
f000266a l       .text  00000000 
f000266e l       .text  00000000 
f0002670 l       .text  00000000 
f0002670 l       .text  00000000 
f0002674 l       .text  00000000 
f0002674 l       .text  00000000 
f0002674 l       .text  00000000 
f0002674 l       .text  00000000 
f0002674 l       .text  00000000 
f0002678 l       .text  00000000 
f0002678 l       .text  00000000 
f000267c l       .text  00000000 
f000267c l       .text  00000000 
f0002684 l       .text  00000000 
f0002684 l       .text  00000000 
f0002688 l       .text  00000000 
f000268a l       .text  00000000 
f000268e l       .text  00000000 
f000268e l       .text  00000000 
f0002690 l       .text  00000000 
f0002690 l       .text  00000000 
f0002694 l       .text  00000000 
f0002694 l       .text  00000000 
f000269a l       .text  00000000 
f000269a l       .text  00000000 
f000269e l       .text  00000000 
f000269e l       .text  00000000 
f00026a6 l       .text  00000000 
f00026aa l       .text  00000000 
f00026aa l       .text  00000000 
f00026ac l       .text  00000000 
f00026b0 l       .text  00000000 
f00026b0 l       .text  00000000 
f00026b2 l       .text  00000000 
f00026b4 l       .text  00000000 
f00026b4 l       .text  00000000 
f00026bc l       .text  00000000 
f00026bc l       .text  00000000 
f00026c0 l       .text  00000000 
f00026c0 l       .text  00000000 
f00026ca l       .text  00000000 
f00026ce l       .text  00000000 
f00026ce l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d6 l       .text  00000000 
f00026da l       .text  00000000 
f00026da l       .text  00000000 
f00026de l       .text  00000000 
f00026e2 l       .text  00000000 
f00026e2 l       .text  00000000 
f00026e4 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026ec l       .text  00000000 
f00026f0 l       .text  00000000 
f00026f4 l       .text  00000000 
f00026f8 l       .text  00000000 
f00026fc l       .text  00000000 
f00026fe l       .text  00000000 
f00026fe l       .text  00000000 
f0002702 l       .text  00000000 
f0002702 l       .text  00000000 
f0002704 l       .text  00000000 
f0002706 l       .text  00000000 
f0002706 l       .text  00000000 
f000270e l       .text  00000000 
f0002712 l       .text  00000000 
f0002712 l       .text  00000000 
f0002714 l       .text  00000000 
f0002718 l       .text  00000000 
f0002718 l       .text  00000000 
f000271a l       .text  00000000 
f000271c l       .text  00000000 
f000271c l       .text  00000000 
f000271e l       .text  00000000 
f000271e l       .text  00000000 
f0002722 l       .text  00000000 
f0002722 l       .text  00000000 
f0002724 l       .text  00000000 
f0002724 l       .text  00000000 
f0002728 l       .text  00000000 
f0002728 l       .text  00000000 
f000272a l       .text  00000000 
f000272a l       .text  00000000 
f000272e l       .text  00000000 
f000272e l       .text  00000000 
f0002730 l       .text  00000000 
f0002730 l       .text  00000000 
f0002732 l       .text  00000000 
f0002732 l       .text  00000000 
f0002734 l       .text  00000000 
f0002734 l       .text  00000000 
00005e55 l       .debug_loc     00000000 
00005e7b l       .debug_loc     00000000 
00005ea1 l       .debug_loc     00000000 
00005ec7 l       .debug_loc     00000000 
00005eed l       .debug_loc     00000000 
00005f0c l       .debug_loc     00000000 
00005f2b l       .debug_loc     00000000 
00005f51 l       .debug_loc     00000000 
00005f6c l       .debug_loc     00000000 
00005fb5 l       .debug_loc     00000000 
00005fdb l       .debug_loc     00000000 
00005ffd l       .debug_loc     00000000 
00006018 l       .debug_loc     00000000 
00006033 l       .debug_loc     00000000 
0000604e l       .debug_loc     00000000 
00006069 l       .debug_loc     00000000 
00006084 l       .debug_loc     00000000 
0000609f l       .debug_loc     00000000 
000060ef l       .debug_loc     00000000 
0000610a l       .debug_loc     00000000 
00006125 l       .debug_loc     00000000 
00006147 l       .debug_loc     00000000 
00006162 l       .debug_loc     00000000 
0000617d l       .debug_loc     00000000 
00006198 l       .debug_loc     00000000 
000061b3 l       .debug_loc     00000000 
000061ce l       .debug_loc     00000000 
000061ed l       .debug_loc     00000000 
0000620c l       .debug_loc     00000000 
00006232 l       .debug_loc     00000000 
0000624d l       .debug_loc     00000000 
00006296 l       .debug_loc     00000000 
000062bc l       .debug_loc     00000000 
000062d7 l       .debug_loc     00000000 
000062f2 l       .debug_loc     00000000 
0000630d l       .debug_loc     00000000 
00006328 l       .debug_loc     00000000 
00006343 l       .debug_loc     00000000 
0000635e l       .debug_loc     00000000 
00006379 l       .debug_loc     00000000 
00006398 l       .debug_loc     00000000 
000063b7 l       .debug_loc     00000000 
000063d2 l       .debug_loc     00000000 
00006419 l       .debug_loc     00000000 
00006434 l       .debug_loc     00000000 
0000644f l       .debug_loc     00000000 
00006475 l       .debug_loc     00000000 
00006490 l       .debug_loc     00000000 
000064ab l       .debug_loc     00000000 
000064c6 l       .debug_loc     00000000 
000064e1 l       .debug_loc     00000000 
000064fc l       .debug_loc     00000000 
00006522 l       .debug_loc     00000000 
0000653d l       .debug_loc     00000000 
00006563 l       .debug_loc     00000000 
00006589 l       .debug_loc     00000000 
000065a6 l       .debug_loc     00000000 
00006601 l       .debug_loc     00000000 
0000661c l       .debug_loc     00000000 
00006642 l       .debug_loc     00000000 
00006668 l       .debug_loc     00000000 
00006683 l       .debug_loc     00000000 
000066a9 l       .debug_loc     00000000 
00006706 l       .debug_loc     00000000 
00006721 l       .debug_loc     00000000 
0000673c l       .debug_loc     00000000 
00006799 l       .debug_loc     00000000 
000067b6 l       .debug_loc     00000000 
000067d1 l       .debug_loc     00000000 
00006818 l       .debug_loc     00000000 
00006833 l       .debug_loc     00000000 
0000684e l       .debug_loc     00000000 
00006869 l       .debug_loc     00000000 
00006884 l       .debug_loc     00000000 
0000689f l       .debug_loc     00000000 
000068c5 l       .debug_loc     00000000 
000068e0 l       .debug_loc     00000000 
000068fb l       .debug_loc     00000000 
00006916 l       .debug_loc     00000000 
00006931 l       .debug_loc     00000000 
0000695e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003b8e l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00000958 l       .debug_ranges  00000000 
00003baa l       .debug_str     00000000 
00003bb4 l       .debug_str     00000000 
00003bbe l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
00000ae6 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00003bc8 l       .debug_str     00000000 
00003cc5 l       .debug_str     00000000 
00003ccf l       .debug_str     00000000 
00003189 l       .debug_str     00000000 
00003be2 l       .debug_str     00000000 
00003bed l       .debug_str     00000000 
000030d7 l       .debug_str     00000000 
000030d5 l       .debug_str     00000000 
00003bf9 l       .debug_str     00000000 
00003c0b l       .debug_str     00000000 
00003c1b l       .debug_str     00000000 
00003bd0 l       .debug_str     00000000 
00003c2b l       .debug_str     00000000 
00003c35 l       .debug_str     00000000 
00000297 l       .debug_str     00000000 
000012a2 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00003c3d l       .debug_str     00000000 
0000147c l       .debug_str     00000000 
000024dc l       .debug_str     00000000 
00003c8b l       .debug_str     00000000 
00003c90 l       .debug_str     00000000 
00003c94 l       .debug_str     00000000 
00003c9a l       .debug_str     00000000 
00003c0f l       .debug_str     00000000 
000004c4 l       .debug_str     00000000 
00003c1f l       .debug_str     00000000 
000008e8 l       .debug_ranges  00000000 
00002fcf l       .debug_str     00000000 
000008d0 l       .debug_ranges  00000000 
00003202 l       .debug_str     00000000 
00003c9f l       .debug_str     00000000 
00003ca6 l       .debug_str     00000000 
00000900 l       .debug_ranges  00000000 
00003c59 l       .debug_str     00000000 
00003cae l       .debug_str     00000000 
00003cb2 l       .debug_str     00000000 
00003cb6 l       .debug_str     00000000 
00003cbb l       .debug_str     00000000 
00003cc0 l       .debug_str     00000000 
00003cca l       .debug_str     00000000 
00003c60 l       .debug_str     00000000 
000014b9 l       .debug_str     00000000 
00002ec1 l       .debug_str     00000000 
00003cd5 l       .debug_str     00000000 
00000918 l       .debug_ranges  00000000 
00003cda l       .debug_str     00000000 
00003c46 l       .debug_str     00000000 
00003310 l       .debug_str     00000000 
00002ec8 l       .debug_str     00000000 
00000930 l       .debug_ranges  00000000 
00003c68 l       .debug_str     00000000 
00002d57 l       .debug_str     00000000 
00003c7a l       .debug_str     00000000 
00003c82 l       .debug_str     00000000 
0000154e l       .debug_str     00000000 
00001464 l       .debug_str     00000000 
0000144d l       .debug_str     00000000 
00000fa8 l       .debug_frame   00000000 
f0002564 l       .text  00000000 
f00025c6 l       .text  00000000 
f0002674 l       .text  00000000 
f0002734 l       .text  00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
00002680 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000026aa l       .debug_str     00000000 
00001144 l       .debug_str     00000000 
000010dc l       .debug_str     00000000 
00000c83 l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000cc5 l       .debug_str     00000000 
00000ce5 l       .debug_str     00000000 
00000d05 l       .debug_str     00000000 
00000d25 l       .debug_str     00000000 
00000d44 l       .debug_str     00000000 
00000d68 l       .debug_str     00000000 
00000d87 l       .debug_str     00000000 
00000da6 l       .debug_str     00000000 
00000dc5 l       .debug_str     00000000 
00000de7 l       .debug_str     00000000 
00000e09 l       .debug_str     00000000 
00000e2b l       .debug_str     00000000 
00000e52 l       .debug_str     00000000 
00000e75 l       .debug_str     00000000 
00000e98 l       .debug_str     00000000 
00000eb9 l       .debug_str     00000000 
00000edd l       .debug_str     00000000 
00000f05 l       .debug_str     00000000 
00000f2a l       .debug_str     00000000 
00000f50 l       .debug_str     00000000 
00000f75 l       .debug_str     00000000 
00000f98 l       .debug_str     00000000 
00000fbc l       .debug_str     00000000 
00000fdb l       .debug_str     00000000 
00000ffa l       .debug_str     00000000 
00001019 l       .debug_str     00000000 
0000103a l       .debug_str     00000000 
0000105a l       .debug_str     00000000 
0000107f l       .debug_str     00000000 
0000109e l       .debug_str     00000000 
000010bd l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
000026d5 l       .debug_str     00000000 
00002ccf l       .debug_str     00000000 
00002cb1 l       .debug_str     00000000 
000026f7 l       .debug_str     00000000 
00002718 l       .debug_str     00000000 
00002739 l       .debug_str     00000000 
0000275a l       .debug_str     00000000 
0000277b l       .debug_str     00000000 
0000279b l       .debug_str     00000000 
000027c0 l       .debug_str     00000000 
000027e0 l       .debug_str     00000000 
00002800 l       .debug_str     00000000 
00002820 l       .debug_str     00000000 
00002843 l       .debug_str     00000000 
00002866 l       .debug_str     00000000 
00002889 l       .debug_str     00000000 
000028ab l       .debug_str     00000000 
000028cf l       .debug_str     00000000 
000028f3 l       .debug_str     00000000 
00002915 l       .debug_str     00000000 
0000293a l       .debug_str     00000000 
0000295f l       .debug_str     00000000 
00002984 l       .debug_str     00000000 
000029ad l       .debug_str     00000000 
000029d3 l       .debug_str     00000000 
000029f5 l       .debug_str     00000000 
00002a1a l       .debug_str     00000000 
00002a41 l       .debug_str     00000000 
00002a67 l       .debug_str     00000000 
00002a91 l       .debug_str     00000000 
00002ab6 l       .debug_str     00000000 
00002ad6 l       .debug_str     00000000 
00002af8 l       .debug_str     00000000 
00002b17 l       .debug_str     00000000 
00002b37 l       .debug_str     00000000 
00002b57 l       .debug_str     00000000 
00002b77 l       .debug_str     00000000 
00002b99 l       .debug_str     00000000 
00002bba l       .debug_str     00000000 
00002be0 l       .debug_str     00000000 
00002c00 l       .debug_str     00000000 
00002c20 l       .debug_str     00000000 
00002c48 l       .debug_str     00000000 
00002c6b l       .debug_str     00000000 
00002c91 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
0000697e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003ce2 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000009b8 l       .debug_ranges  00000000 
00003d0c l       .debug_str     00000000 
00003d18 l       .debug_str     00000000 
00000532 l       .debug_str     00000000 
000004ea l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
0000050b l       .debug_str     00000000 
0000051c l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00003d26 l       .debug_str     00000000 
00001464 l       .debug_str     00000000 
0000144d l       .debug_str     00000000 
00003d36 l       .debug_str     00000000 
00003d54 l       .debug_str     00000000 
00003d6b l       .debug_str     00000000 
00003d7b l       .debug_str     00000000 
00003d8b l       .debug_str     00000000 
00003d99 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00003da7 l       .debug_str     00000000 
00003dbc l       .debug_str     00000000 
00003dd3 l       .debug_str     00000000 
00000ae6 l       .debug_str     00000000 
00003dec l       .debug_str     00000000 
00003e08 l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
00002dac l       .debug_str     00000000 
00000414 l       .debug_str     00000000 
00003e17 l       .debug_str     00000000 
0000106c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
00001807 l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
0000184e l       .debug_str     00000000 
00001868 l       .debug_str     00000000 
00001860 l       .debug_str     00000000 
00001482 l       .debug_str     00000000 
0000146d l       .debug_str     00000000 
000024d7 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
0000187c l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
000018bc l       .debug_str     00000000 
000018de l       .debug_str     00000000 
000018c7 l       .debug_str     00000000 
000018ce l       .debug_str     00000000 
000018d6 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
000018eb l       .debug_str     00000000 
000000aa l       .debug_str     00000000 
00001929 l       .debug_str     00000000 
0000196f l       .debug_str     00000000 
00001936 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
00001941 l       .debug_str     00000000 
00001956 l       .debug_str     00000000 
00001962 l       .debug_str     00000000 
00001969 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00000213 l       .debug_str     00000000 
f0001a06 g     F .text  0000008a rand_testutils_init
f007b000 g       *ABS*  00000000 _non_volatile_scratch_start
f0079800 g       *ABS*  00000000 _non_volatile_counter_3_end
f0079000 g       *ABS*  00000000 _non_volatile_counter_3_start
f00010e0  w    F .text  00000020 ottf_instr_misaligned_fault_handler
f0001210  w    F .text  00000018 ottf_external_nmi_handler
f00008ba g     F .text  00000182 printf
e00027c4 g       .data  00000000 __global_pointer$
e0002060 g     O .bss   00000004 ottf_plic
e0000000 g     O .static_critical       00000020 boot_measurements
f00010e0  w    F .text  00000020 ottf_instr_access_fault_handler
f0002674 g     F .text  000000c0 memrchr
f000240a g     F .text  00000022 dif_uart_byte_send_polled
f00010e0  w    F .text  00000020 ottf_user_ecall_handler
f0002734 g       .shutdown      00000000 _text_end
f0000fdc g     F .text  0000001a irq_external_ctrl
f000101e g     F .text  00000076 ottf_generic_fault_print
d0010000 g       .manifest      00000000 _chip_info_end
e0002064 g     O .bss   00000004 pxCurrentTCB
f0001228  w    F .text  00000038 ottf_internal_isr
f0001a90 g     F .text  0000000e dif_rv_core_ibex_init
f0002f54 g     O .rodata        000002e8 top_earlgrey_plic_interrupt_for_peripheral
f0000898 g     F .text  00000014 uart_sendchar
f0003558 g     O .rodata        00000008 kClockFreqPeripheralHz
f0001288 g     F .text  00000020 dif_rv_plic_irq_complete
f0000fae g     F .text  0000001c xPortStartScheduler
f00024dc g     F .text  00000088 memcpy
f0001134  w    F .text  000000dc ottf_external_isr
f00010e0  w    F .text  00000020 ottf_illegal_instr_fault_handler
f00019fc g     F .text  00000002 vPortFree
f0001a02  w    F .text  00000004 manufacturer_post_test_hook
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
e0002058 g       .bss   00000000 _bss_start
f0000ff6 g     F .text  00000016 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
00000000 g       *ABS*  00000000 __DYNAMIC
f0001b5e g     F .text  00000006 ibex_mepc_read
f007b000 g       *ABS*  00000000 _non_volatile_counter_0_end
f0000400 g       .vectors       00000000 _text_start
f00010e0  w    F .text  00000020 ottf_load_store_fault_handler
f0001952 g     F .text  00000006 vListInitialiseItem
e0002194 g     O .freertos.heap 00008000 ucHeap
00002734 g       *ABS*  00000000 _manifest_code_end
f0000400 g     F .vectors       00000080 _ottf_interrupt_vector
f0000548 g       .init_array    00000000 _init_array_end
f0001c06 g     F .text  00000034 base_log_internal_dv
f0003604 g       *ABS*  00000000 _data_init_end
f0002350 g     F .text  000000ba dif_uart_configure
f0001b4c g     F .text  00000006 abort
f00008ac g     F .text  0000000e uart_wait_tx_done
e0000020 g     O .static_critical       00000054 epmp_state
f000197a g     F .text  00000082 pvPortMalloc
f000193e g     F .text  00000014 vListInitialise
e0002194 g       .bss   00000000 _bss_end
f00019fe  w    F .text  00000004 manufacturer_pre_test_hook
f0000c40 g     F .text  00000052 ottf_machine_ecall_handler
f0003570 g       *ABS*  00000000 _data_init_start
f0000fca g     F .text  00000012 irq_global_ctrl
f0000f32 g     F .text  0000003e vApplicationMallocFailedHook
f0000480 g     F .crt   00000068 _ottf_start
e0001fd4 g     O .data  00000084 status_codes
00001fc4 g       *ABS*  00000000 _static_critical_size
f000100c g     F .text  00000012 irq_software_ctrl
f000086a g     F .text  0000002e uart_set_cfg
f000050c g     F .crt   0000003a crt_section_copy
f0003560 g     O .rodata        00000008 kUartBaudrate
f00025c6 g     F .text  000000ae memchr
f0000f30 g     F .text  00000002 test_coverage_send_buffer
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00080000 g       *ABS*  00000000 _ottf_size
f0001118  w    F .text  00000018 ottf_timer_isr
f00016bc g     F .text  00000010 vTaskSuspendAll
e0001fc4 g       .data  00000000 _data_start
f007a800 g       *ABS*  00000000 _non_volatile_counter_0_start
f0001958 g     F .text  00000022 uxListRemove
f0080000 g       .freertos.heap 00000000 _non_volatile_scratch_end
f007a000 g       *ABS*  00000000 _non_volatile_counter_2_end
f0001210  w    F .text  00000018 ottf_load_integrity_error_handler
f0079800 g       *ABS*  00000000 _non_volatile_counter_2_start
f00014e8 g     F .text  000000ec vTaskSwitchContext
f00010e0  w    F .text  00000020 ottf_breakpoint_handler
00004000 g       *ABS*  00000000 _stack_size
f0000608 g     F .text  00000050 handler_exception
f0001ce0 g     F .text  0000048e base_vfprintf
e0002058 g       .data  00000000 _data_end
f0000f70 g     F .text  0000003e vApplicationStackOverflowHook
f0001c3e g     F .text  00000016 base_uart_stdout
e0001fc4 g     O .data  00000010 remu10_table
f0000754 g     F .text  00000052 handler_irq_internal
f0001cc6 g     F .text  0000001a base_vprintf
f0001100  w    F .text  00000018 ottf_software_isr
e0000074 g     O .static_critical       00001f50 sec_mmio_ctx
f0002564 g     F .text  00000062 memset
f0001b52 g     F .text  00000006 ibex_mcause_read
f00006ac g     F .text  00000052 handler_irq_timer
e0020000 g       .manifest      00000000 _stack_end
e00020b4 g     O .bss   00000018 rand_testutils_rng_ctx
e0002194 g       .freertos.heap 00000000 _freertos_heap_start
f0001130  w    F .text  00000004 ottf_flow_control_isr
e001c000 g       *ABS*  00000000 _stack_start
f00004e8 g     F .crt   00000024 crt_section_clear
f00016cc g     F .text  00000144 xTaskResumeAll
f0000658 g     F .text  00000052 handler_irq_software
f0002eac g     O .rodata        00000004 uxTopUsedPriority
f00015d4 g     F .text  00000066 vTaskStartScheduler
00010000 g       *ABS*  00000000 _dv_log_offset
f0000548 g     F .text  00000052 xPortStartFirstTask
f0001094  w    F .text  0000004c ottf_exception_handler
d000ff80 g       *ABS*  00000000 _chip_info_start
f0000810 g     F .text  0000005a test_main
f0001810 g     F .text  0000012e xTaskIncrementTick
f0003568 g     O .rodata        00000004 kDeviceTestStatusAddress
f00027ac g     O .rodata        00000008 kOttfTestConfig
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
f000242c g     F .text  000000b0 udiv64_slow
f0001c94 g     F .text  00000032 base_printf
f0001260 g     F .text  00000028 dif_rv_plic_irq_claim
f000356c g     O .rodata        00000004 kDeviceLogBypassUartAddress
f00012a8 g     F .text  00000210 xTaskCreate
f0003550 g     O .rodata        00000004 kDeviceType
f0001b58 g     F .text  00000006 ibex_mtval_read
f007a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
f0000c92 g     F .text  00000132 _ottf_main
00000080 g       *ABS*  00000000 _chip_info_size
f00014b8 g     F .text  00000030 vTaskExitCritical
f000059c g     F .text  00000024 pxPortInitialiseStack
f00022d0 g     F .text  00000072 status_extract
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
f0002342 g     F .text  0000000e dif_uart_init
f007a000 g       *ABS*  00000000 _non_volatile_counter_1_start
f0000000 g       .manifest      00000000 _ottf_start_address
f0000548 g       .init_array    00000000 _init_array_start
f0001a9e g     F .text  000000ae test_status_set
f0001b64 g     F .text  000000a2 base_log_internal_core
f00007a8 g     F .text  00000068 ottf_isr_exit
f0000700 g     F .text  00000052 handler_irq_external



Disassembly of section .vectors:

f0000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
f0000400:       2080006f                j       f0000608 <handler_exception>
f0000404:       c0001073                unimp
f0000408:       c0001073                unimp
f000040c:       24c0006f                j       f0000658 <handler_irq_software>
f0000410:       c0001073                unimp
f0000414:       c0001073                unimp
f0000418:       c0001073                unimp
f000041c:       2900006f                j       f00006ac <handler_irq_timer>
f0000420:       c0001073                unimp
f0000424:       c0001073                unimp
f0000428:       c0001073                unimp
f000042c:       2d40006f                j       f0000700 <handler_irq_external>
f0000430:       c0001073                unimp
f0000434:       c0001073                unimp
f0000438:       c0001073                unimp
f000043c:       c0001073                unimp
f0000440:       c0001073                unimp
f0000444:       c0001073                unimp
f0000448:       c0001073                unimp
f000044c:       c0001073                unimp
f0000450:       c0001073                unimp
f0000454:       c0001073                unimp
f0000458:       c0001073                unimp
f000045c:       c0001073                unimp
f0000460:       c0001073                unimp
f0000464:       c0001073                unimp
f0000468:       c0001073                unimp
f000046c:       c0001073                unimp
f0000470:       c0001073                unimp
f0000474:       c0001073                unimp
f0000478:       c0001073                unimp
f000047c:       2d80006f                j       f0000754 <handler_irq_internal>

Disassembly of section .crt:

f0000480 <_ottf_start>:
_ottf_start():
f0000480:       f0002197                auipc   gp,0xf0002
f0000484:       34418193                addi    gp,gp,836 # e00027c4 <__global_pointer$>
f0000488:       f0020117                auipc   sp,0xf0020
f000048c:       b6810113                addi    sp,sp,-1176 # e001fff0 <_stack_start+0x3ff0>
f0000490:       00000297                auipc   t0,0x0
f0000494:       f7128293                addi    t0,t0,-143 # f0000401 <_ottf_interrupt_vector+0x1>
f0000498:       30529073                csrw    mtvec,t0
f000049c:       f0002517                auipc   a0,0xf0002
f00004a0:       b2850513                addi    a0,a0,-1240 # e0001fc4 <remu10_table>
f00004a4:       89418593                addi    a1,gp,-1900 # e0002058 <uart0>
f00004a8:       00003617                auipc   a2,0x3
f00004ac:       0c860613                addi    a2,a2,200 # f0003570 <_data_init_start>
f00004b0:       28b1                    jal     f000050c <crt_section_copy>
f00004b2:       f0002517                auipc   a0,0xf0002
f00004b6:       ba650513                addi    a0,a0,-1114 # e0002058 <uart0>
f00004ba:       f0002597                auipc   a1,0xf0002
f00004be:       cda58593                addi    a1,a1,-806 # e0002194 <ucHeap>
f00004c2:       201d                    jal     f00004e8 <crt_section_clear>
f00004c4:       00000417                auipc   s0,0x0
f00004c8:       08440413                addi    s0,s0,132 # f0000548 <xPortStartFirstTask>
f00004cc:       00000497                auipc   s1,0x0
f00004d0:       07c48493                addi    s1,s1,124 # f0000548 <xPortStartFirstTask>
f00004d4:       00947863                bgeu    s0,s1,f00004e4 <init_array_loop_end>

f00004d8 <init_array_loop>:
f00004d8:       /-> 00042283            lw      t0,0(s0)
f00004dc:       |   9282                        jalr    t0
f00004de:       |   0411                        addi    s0,s0,4
f00004e0:       \-- fe946ce3            bltu    s0,s1,f00004d8 <init_array_loop>

f00004e4 <init_array_loop_end>:
f00004e4:       7ae0006f                j       f0000c92 <_ottf_main>

f00004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
f00004e8:       /-------- 00b57e63              bgeu    a0,a1,f0000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
f00004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
f00004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
f00004f4:       |  /----- 00029b63              bnez    t0,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
f00004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
f00004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
f00004fe:       |  |  \-- feb56de3              bltu    a0,a1,f00004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
f0000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
f0000504:       \--+----X 00b51363              bne     a0,a1,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
f0000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
f000050a:          \----> 0000                  unimp

f000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
f000050c:       /-------- 02b57963              bgeu    a0,a1,f000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
f0000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
f0000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
f0000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
f000051c:       |  /----- 02029463              bnez    t0,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
f0000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
f0000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
f0000528:       |  +----- 0062ee63              bltu    t0,t1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
f000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
f0000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
f0000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
f0000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
f0000538:       |  |  \-- feb56ae3              bltu    a0,a1,f000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
f000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
f000053e:       \--+----X 00b51363              bne     a0,a1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
f0000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
f0000544:          \----> 0000                  unimp

Disassembly of section .text:

f0000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
f0000548:       f0002117                auipc   sp,0xf0002
f000054c:       b1c12103                lw      sp,-1252(sp) # e0002064 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
f0000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
f0000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
f000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
f0000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
f000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
f000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
f0000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
f0000598:       8082                    ret
f000059a:       0001                    nop

f000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
f000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
f00005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
f00005a4:       6309                    lui     t1,0x2
f00005a6:       88030313                addi    t1,t1,-1920 # 1880 <_epmp_reset_rx_size+0x1080>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
f00005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
f00005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
f00005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
f00005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
f00005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
f00005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
f00005be:       8082                    ret

f00005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
f00005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
f00005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
f00005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
f00005ca:       /-- 00731363            bne     t1,t2,f00005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
f00005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
f00005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
f00005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
f00005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
f00005da:       /-- 006e0463            beq     t3,t1,f00005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
f00005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
f00005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
f00005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
f00005e4:           8082                        ret
f00005e6:           0001                        nop

f00005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
f00005e8:           00002297            auipc   t0,0x2
f00005ec:           1c428293            addi    t0,t0,452 # f00027ac <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
f00005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
f00005f4:       /-- 00030863            beqz    t1,f0000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
f00005f8:       |   f0002397            auipc   t2,0xf0002
f00005fc:       |   a6c3a383            lw      t2,-1428(t2) # e0002064 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
f0000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
f0000604:       \-> 8082                        ret
f0000606:           0001                        nop

f0000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
f000064a:       3f9d                    jal     f00005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
f000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000064e:       3f69                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  jal ottf_exception_handler
f0000650:       245000ef                jal     ra,f0001094 <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:127

  // Return from ISR.
  j ottf_isr_exit
f0000654:       1540006f                j       f00007a8 <ottf_isr_exit>

f0000658 <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:140
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000658:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000065c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000065e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000660:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000662:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000664:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000666:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000668:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000066a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000066c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000066e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000670:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000672:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000674:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000676:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000678:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000067a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000067c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000067e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000680:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000682:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000684:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000686:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000688:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000068a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000068c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000068e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000690:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000692:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:171

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000694:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000698:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:176

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000069a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177
  sw t0, 0(sp)
f000069e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:181

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006a0:       37a1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:184

  // Jump to the software ISR.
  jal ottf_software_isr
f00006a2:       25f000ef                jal     ra,f0001100 <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:187

  // Return from ISR.
  j ottf_isr_exit
f00006a6:       1020006f                j       f00007a8 <ottf_isr_exit>
f00006aa:       0001                    nop

f00006ac <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:200
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f00006ac:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:201
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f00006b0:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f00006b2:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f00006b4:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f00006b6:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f00006b8:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f00006ba:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f00006bc:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f00006be:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f00006c0:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f00006c2:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f00006c4:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f00006c6:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f00006c8:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f00006ca:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f00006cc:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f00006ce:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f00006d0:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f00006d2:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f00006d4:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f00006d6:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f00006d8:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f00006da:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f00006dc:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f00006de:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f00006e0:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f00006e2:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f00006e4:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f00006e6:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:231

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f00006e8:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:232
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f00006ec:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:236

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f00006ee:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:237
  sw t0, 0(sp)
f00006f2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:241

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006f4:       3dd5                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:244

  // Jump to timer ISR.
  jal ottf_timer_isr
f00006f6:       223000ef                jal     ra,f0001118 <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247

  // Return from ISR.
  j ottf_isr_exit
f00006fa:       0ae0006f                j       f00007a8 <ottf_isr_exit>
f00006fe:       0001                    nop

f0000700 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:260
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000700:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:261
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000704:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:262
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f0000706:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000708:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000070a:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f000070c:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f000070e:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000710:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000712:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000714:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000716:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000718:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000071a:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f000071c:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f000071e:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000720:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000722:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000724:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000726:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000728:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000072a:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f000072c:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f000072e:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000730:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000732:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000734:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000736:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000738:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000073a:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f000073c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:292
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000740:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:296

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000742:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:297
  sw t0, 0(sp)
f0000746:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:301

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f0000748:       3545                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Jump to external ISR.
  jal ottf_external_isr
f000074a:       1eb000ef                jal     ra,f0001134 <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Return from ISR.
  j ottf_isr_exit
f000074e:       05a0006f                j       f00007a8 <ottf_isr_exit>
f0000752:       0001                    nop

f0000754 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:320
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000754:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:321
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000758:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:322
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000075a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:323
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f000075c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000075e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000760:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000762:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000764:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000766:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000768:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000076a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f000076c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000076e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000770:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000772:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000774:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000776:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000778:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000077a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f000077c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000077e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000780:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000782:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000784:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000786:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000788:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000078a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f000078c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000078e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000790:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000794:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000796:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:357
  sw t0, 0(sp)
f000079a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000079c:       35b1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:364

  // Jump to the internal ISR.
  jal ottf_internal_isr
f000079e:       28b000ef                jal     ra,f0001228 <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:367

  // Return from ISR.
  j ottf_isr_exit
f00007a2:       0060006f                j       f00007a8 <ottf_isr_exit>
f00007a6:       0001                    nop

f00007a8 <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:384
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
f00007a8:           00002297            auipc   t0,0x2
f00007ac:           00428293            addi    t0,t0,4 # f00027ac <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:385
  lb t1, 0(t0)
f00007b0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:386
  beqz t1, .L_skip_sp_restore
f00007b4:       /-- 00030863            beqz    t1,f00007c4 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:387
  lw  t2, pxCurrentTCB
f00007b8:       |   f0002397            auipc   t2,0xf0002
f00007bc:       |   8ac3a383            lw      t2,-1876(t2) # e0002064 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:388
  lw  sp, 0(t2)
f00007c0:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
f00007c4:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  csrw mepc, t0
f00007c6:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:396

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
f00007ca:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
  csrw mstatus, t0
f00007cc:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:400

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
f00007d0:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
f00007d2:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f00007d4:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:403
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f00007d6:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:404
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f00007d8:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f00007da:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
f00007dc:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f00007de:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f00007e0:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f00007e2:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f00007e4:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f00007e6:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f00007e8:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f00007ea:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f00007ec:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f00007ee:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f00007f0:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f00007f2:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f00007f4:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f00007f6:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f00007f8:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f00007fa:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f00007fc:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f00007fe:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000800:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000802:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000804:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000806:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000808:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
f000080c:           30200073            mret

f0000810 <test_main>:
test_main():
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:27

#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"

OTTF_DEFINE_TEST_CONFIG();

bool test_main(void) {
f0000810:           1141                        addi    sp,sp,-16
f0000812:           c606                        sw      ra,12(sp)
f0000814:           c422                        sw      s0,8(sp)
f0000816:           c226                        sw      s1,4(sp)
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:36
  #else
  //set_flls();
  int baud_rate = 115200;
  int test_freq = 100000000;
  #endif
  uart_set_cfg(0,(test_freq/baud_rate)>>4);
f0000818:           03600593            li      a1,54
f000081c:           4501                        li      a0,0
f000081e:           20b1                        jal     f000086a <uart_set_cfg>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:48

  int * pointer;
  int mbox_id = 143;

  // Initialazing the uart
  uart_set_cfg(0,(test_freq/baud_rate)>>4);
f0000820:           03600593            li      a1,54
f0000824:           4501                        li      a0,0
f0000826:           2091                        jal     f000086a <uart_set_cfg>
f0000828:           0c000537            lui     a0,0xc000
f000082c:           4405                        li      s0,1
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:52

  // Init CVA6 Plic
  pointer = (int *) PLIC_BASE+mbox_id;
  *pointer = 0x1;
f000082e:           22852e23            sw      s0,572(a0) # c00023c <_ottf_size+0xbf8023c>
f0000832:           0c002537            lui     a0,0xc002
f0000836:           65a1                        lui     a1,0x8
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:55

  pointer = (int *) 0x0C002090;
  *pointer =  1<<(mbox_id%32);
f0000838:           08b52823            sw      a1,144(a0) # c002090 <_ottf_size+0xbf82090>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:57

  printf("[SECD] Writing CVA6 boot PC into mbox\r\n");
f000083c:           00002517            auipc   a0,0x2
f0000840:           f3250513            addi    a0,a0,-206 # f000276e <_text_end+0x3a>
f0000844:           289d                        jal     f00008ba <printf>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:58
  uart_wait_tx_done();
f0000846:           209d                        jal     f00008ac <uart_wait_tx_done>
f0000848:           104044b7            lui     s1,0x10404
f000084c:           80000537            lui     a0,0x80000
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:61
  // Write CVA6 boot PC to mbox 
  pointer = (int *) 0x10404000;
  *pointer = 0x80000000;
f0000850:           c088                        sw      a0,0(s1)
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:63

  printf("[SECD] Booting CVA6\r\n");
f0000852:           00002517            auipc   a0,0x2
f0000856:           f4450513            addi    a0,a0,-188 # f0002796 <_text_end+0x62>
f000085a:           2085                        jal     f00008ba <printf>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:64
  uart_wait_tx_done();
f000085c:           2881                        jal     f00008ac <uart_wait_tx_done>
f000085e:           02448513            addi    a0,s1,36 # 10404024 <_ottf_size+0x10384024>
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:67
  // Send IRQ and boot
  pointer = (int *) 0x10404024;
  *pointer = 0x1;
f0000862:           c100                        sw      s0,0(a0)
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:70
  
  while(1)
    asm volatile ("wfi"); 
f0000864:       /-> 10500073            wfi
/proc/self/cwd/sw/tests/alsaqr/flash_alsaqr_boot/flash_alsaqr_boot.c:69
  while(1)
f0000868:       \-- bff5                        j       f0000864 <test_main+0x54>

f000086a <uart_set_cfg>:
uart_set_cfg():
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:25
 *              There is a prescaler in place that already divides the SoC
 *              clock by 16.  Since this is a counter, a value of 1 means that
 *              the SoC clock divided by 16*2 = 32 is used. A value of 31 would mean
 *              that we use the SoC clock divided by 16*32 = 512.
 */
void uart_set_cfg(int parity, uint16_t clk_counter) {
f000086a:       40000537                lui     a0,0x40000
f000086e:       08300613                li      a2,131
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:27
  unsigned int i;
  *(volatile unsigned int*)(UART_REG_LCR) = 0x83; //sets 8N1 and set DLAB to 1
f0000872:       c550                    sw      a2,12(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:28
  *(volatile unsigned int*)(UART_REG_DLM) = (clk_counter >> 8) & 0xFF;
f0000874:       0085d613                srli    a2,a1,0x8
f0000878:       c150                    sw      a2,4(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:29
  *(volatile unsigned int*)(UART_REG_DLL) =  clk_counter       & 0xFF;
f000087a:       0ff5f593                andi    a1,a1,255
f000087e:       c10c                    sw      a1,0(a0)
f0000880:       0a700593                li      a1,167
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:30
  *(volatile unsigned int*)(UART_REG_FCR) = 0xA7; //enables 16byte FIFO and clear FIFOs
f0000884:       c50c                    sw      a1,8(a0)
f0000886:       458d                    li      a1,3
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:31
  *(volatile unsigned int*)(UART_REG_LCR) = 0x03; //sets 8N1 and set DLAB to 0
f0000888:       c54c                    sw      a1,12(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:33

  *(volatile unsigned int*)(UART_REG_IER) = ((*(volatile unsigned int*)(UART_REG_IER)) & 0xF0) | 0x02; // set IER (interrupt enable register) on UART
f000088a:       414c                    lw      a1,4(a0)
f000088c:       0f05f593                andi    a1,a1,240
f0000890:       0025e593                ori     a1,a1,2
f0000894:       c14c                    sw      a1,4(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:34
}
f0000896:       8082                    ret

f0000898 <uart_sendchar>:
uart_sendchar():
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:60
  while((*((volatile int*)UART_REG_LSR) & 0x1) != 0x1);

  return *(volatile int*)UART_REG_RBR;
}

void uart_sendchar(const char c) {
f0000898:           400005b7            lui     a1,0x40000
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:62
  // wait until there is space in the fifo
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
f000089c:       /-> 49d0                        lw      a2,20(a1)
f000089e:       |   02067613            andi    a2,a2,32
f00008a2:       \-- de6d                        beqz    a2,f000089c <uart_sendchar+0x4>
f00008a4:           400005b7            lui     a1,0x40000
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:65

  // load FIFO
  *(volatile unsigned int*)(UART_REG_THR) = c;
f00008a8:           c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:66
}
f00008aa:           8082                        ret

f00008ac <uart_wait_tx_done>:
uart_wait_tx_done():
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:68

void uart_wait_tx_done(void) {
f00008ac:           40000537            lui     a0,0x40000
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:70
  // wait until there is space in the fifo
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x40) == 0);
f00008b0:       /-> 494c                        lw      a1,20(a0)
f00008b2:       |   0405f593            andi    a1,a1,64
f00008b6:       \-- dded                        beqz    a1,f00008b0 <uart_wait_tx_done+0x4>
/proc/self/cwd/sw/device/silicon_creator/rom/uart.c:71
}
f00008b8:           8082                        ret

f00008ba <printf>:
printf():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:236

  return pc;
}

int printf(const char *format, ...)
{
f00008ba:                                      711d                     addi    sp,sp,-96
f00008bc:                                      de06                     sw      ra,60(sp)
f00008be:                                      dc22                     sw      s0,56(sp)
f00008c0:                                      da26                     sw      s1,52(sp)
f00008c2:                                      d84a                     sw      s2,48(sp)
f00008c4:                                      d64e                     sw      s3,44(sp)
f00008c6:                                      d452                     sw      s4,40(sp)
f00008c8:                                      d256                     sw      s5,36(sp)
f00008ca:                                      d05a                     sw      s6,32(sp)
f00008cc:                                      ce5e                     sw      s7,28(sp)
f00008ce:                                      cc62                     sw      s8,24(sp)
f00008d0:                                      ca66                     sw      s9,20(sp)
f00008d2:                                      c86a                     sw      s10,16(sp)
f00008d4:                                      c66e                     sw      s11,12(sp)
f00008d6:                                      84aa                     mv      s1,a0
f00008d8:                                      4a01                     li      s4,0
f00008da:                                      cec6                     sw      a7,92(sp)
f00008dc:                                      ccc2                     sw      a6,88(sp)
f00008de:                                      cabe                     sw      a5,84(sp)
f00008e0:                                      c8ba                     sw      a4,80(sp)
f00008e2:                                      c6b6                     sw      a3,76(sp)
f00008e4:                                      c4b2                     sw      a2,72(sp)
f00008e6:                                      c2ae                     sw      a1,68(sp)
f00008e8:                                      04410c93                 addi    s9,sp,68
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:240
  int pc;
  va_list va;

  va_start(va, format);
f00008ec:                                      c266                     sw      s9,4(sp)
f00008ee:                                      02500913                 li      s2,37
f00008f2:                                      02d00993                 li      s3,45
f00008f6:                                      03000b13                 li      s6,48
f00008fa:                                      4aa5                     li      s5,9
f00008fc:                                      4429                     li      s0,10
f00008fe:                                      07200b93                 li      s7,114
f0000902:                                      05800c13                 li      s8,88
f0000906:                                      07800d93                 li      s11,120
f000090a:                                      07500d13                 li      s10,117
qprint():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:173
  for (; *format != 0; ++format)
f000090e:       /----------------------------> 0004c503                 lbu     a0,0(s1)
f0000912:       |                          /-- 01250463                 beq     a0,s2,f000091a <printf+0x60>
f0000916:       |                 /--------|-- ed19                     bnez    a0,f0000934 <printf+0x7a>
f0000918:       |  /--------------|--------|-- a211                     j       f0000a1c <printf+0x162>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:179
      if (*format == '\0') break;
f000091a:       |  |              |        \-> 0014c603                 lbu     a2,1(s1)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:177
      ++format;
f000091e:       |  |              |            00148593                 addi    a1,s1,1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:179
      if (*format == '\0') break;
f0000922:       |  |              |        /-- 01260863                 beq     a2,s2,f0000932 <printf+0x78>
f0000926:       |  |              |  /-----|-- 01360a63                 beq     a2,s3,f000093a <printf+0x80>
f000092a:       |  +--------------|--|-----|-- 0e060963                 beqz    a2,f0000a1c <printf+0x162>
f000092e:       |  |              |  |     |   4601                     li      a2,0
f0000930:       |  |              |  |  /--|-- a801                     j       f0000940 <printf+0x86>
f0000932:       |  |              |  |  |  \-> 84ae                     mv      s1,a1
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000934:       |  |              \--|--|----> 3795                     jal     f0000898 <uart_sendchar>
qprint():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:227
      ++pc;
f0000936:       |  |                 |  |      0a05                     addi    s4,s4,1
f0000938:       |  |  /--------------|--|----- a0c5                     j       f0000a18 <printf+0x15e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:183
        ++format;
f000093a:       |  |  |              \--|----> 00248593                 addi    a1,s1,2
f000093e:       |  |  |                 |      4605                     li      a2,1
f0000940:       |  |  |                 \----> 00266693                 ori     a3,a2,2
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:186
      while (*format == '0')
f0000944:       |  |  |                        fff58493                 addi    s1,a1,-1
f0000948:       |  |  |                    /-> 0014c503                 lbu     a0,1(s1)
f000094c:       |  |  |                    |   8732                     mv      a4,a2
f000094e:       |  |  |                    |   0485                     addi    s1,s1,1
f0000950:       |  |  |                    |   8636                     mv      a2,a3
f0000952:       |  |  |                    \-- ff650be3                 beq     a0,s6,f0000948 <printf+0x8e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:191
      for ( ; *format >= '0' && *format <= '9'; ++format) {
f0000956:       |  |  |                        fd050593                 addi    a1,a0,-48
f000095a:       |  |  |                        4681                     li      a3,0
f000095c:       |  |  |                        0ff5f593                 andi    a1,a1,255
f0000960:       |  |  |                 /----- 02bae563                 bltu    s5,a1,f000098a <printf+0xd0>
f0000964:       |  |  |                 |      85a6                     mv      a1,s1
f0000966:       |  |  |                 |  /-> 0ff57613                 andi    a2,a0,255
f000096a:       |  |  |                 |  |   0015c503                 lbu     a0,1(a1)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:192
        width *= 10;
f000096e:       |  |  |                 |  |   028686b3                 mul     a3,a3,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:193
        width += *format - '0';
f0000972:       |  |  |                 |  |   9636                     add     a2,a2,a3
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:191
      for ( ; *format >= '0' && *format <= '9'; ++format) {
f0000974:       |  |  |                 |  |   00158493                 addi    s1,a1,1
f0000978:       |  |  |                 |  |   fd050593                 addi    a1,a0,-48
f000097c:       |  |  |                 |  |   0ff5f793                 andi    a5,a1,255
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:193
        width += *format - '0';
f0000980:       |  |  |                 |  |   fd060693                 addi    a3,a2,-48
f0000984:       |  |  |                 |  |   85a6                     mv      a1,s1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:191
      for ( ; *format >= '0' && *format <= '9'; ++format) {
f0000986:       |  |  |                 |  \-- fe87e0e3                 bltu    a5,s0,f0000966 <printf+0xac>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:195
      if( *format == 's' ) {
f000098a:       |  |  |                 \--/-X 02abc463                 blt     s7,a0,f00009b2 <printf+0xf8>
f000098e:       |  |  |                 /--|-- 05850363                 beq     a0,s8,f00009d4 <printf+0x11a>
f0000992:       |  |  |                 |  |   06300593                 li      a1,99
f0000996:       |  |  |        /--------|--|-- 04b50663                 beq     a0,a1,f00009e2 <printf+0x128>
f000099a:       |  |  |        |        |  |   06400593                 li      a1,100
f000099e:       |  |  +--------|--------|--|-- 06b51d63                 bne     a0,a1,f0000a18 <printf+0x15e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:201
        pc += qprinti (out, va_arg(va, int), 10, 1, width, pad, 'a');
f00009a2:       |  |  |        |        |  |   000ca503                 lw      a0,0(s9)
f00009a6:       |  |  |        |        |  |   0c91                     addi    s9,s9,4
f00009a8:       |  |  |        |        |  |   45a9                     li      a1,10
f00009aa:       |  |  |        |        |  |   4605                     li      a2,1
f00009ac:       |  |  |        |        |  |   06100793                 li      a5,97
f00009b0:       |  |  |  /-----|--------|--|-- a095                     j       f0000a14 <printf+0x15a>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:195
      if( *format == 's' ) {
f00009b2:       |  |  |  |     |  /-----|--\-X 05b50563                 beq     a0,s11,f00009fc <printf+0x142>
f00009b6:       |  |  |  |  /--|--|-----|----- 05a50863                 beq     a0,s10,f0000a06 <printf+0x14c>
f00009ba:       |  |  |  |  |  |  |     |      07300593                 li      a1,115
f00009be:       |  |  +--|--|--|--|-----|----- 04b51d63                 bne     a0,a1,f0000a18 <printf+0x15e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:196
        register char *s = va_arg(va, char*);
f00009c2:       |  |  |  |  |  |  |     |      000ca503                 lw      a0,0(s9)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:197
        pc += qprints (out, s?s:"(null)", width, pad);
f00009c6:       |  |  |  |  |  |  |     |  /-- e509                     bnez    a0,f00009d0 <printf+0x116>
f00009c8:       |  |  |  |  |  |  |     |  |   00002517                 auipc   a0,0x2
f00009cc:       |  |  |  |  |  |  |     |  |   dec50513                 addi    a0,a0,-532 # f00027b4 <kOttfTestConfig+0x8>
f00009d0:       |  |  |  |  |  |  |     |  \-> 0c91                     addi    s9,s9,4
f00009d2:       |  |  |  |  |  |  |     |  /-- a00d                     j       f00009f4 <printf+0x13a>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:213
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'A');
f00009d4:       |  |  |  |  |  |  |     \--|-> 000ca503                 lw      a0,0(s9)
f00009d8:       |  |  |  |  |  |  |        |   0c91                     addi    s9,s9,4
f00009da:       |  |  |  |  |  |  |        |   45c1                     li      a1,16
f00009dc:       |  |  |  |  |  |  |        |   04100793                 li      a5,65
f00009e0:       |  |  |  |  |  |  |  /-----|-- a80d                     j       f0000a12 <printf+0x158>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:217
        scr[0] = va_arg(va, int);
f00009e2:       |  |  |  |  |  \--|--|-----|-> 000ca503                 lw      a0,0(s9)
f00009e6:       |  |  |  |  |     |  |     |   0c91                     addi    s9,s9,4
f00009e8:       |  |  |  |  |     |  |     |   00a10523                 sb      a0,10(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:218
        scr[1] = '\0';
f00009ec:       |  |  |  |  |     |  |     |   000105a3                 sb      zero,11(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:219
        pc += qprints (out, scr, width, pad);
f00009f0:       |  |  |  |  |     |  |     |   00a10513                 addi    a0,sp,10
f00009f4:       |  |  |  |  |     |  |     \-> 85b6                     mv      a1,a3
f00009f6:       |  |  |  |  |     |  |         863a                     mv      a2,a4
f00009f8:       |  |  |  |  |     |  |         2091                     jal     f0000a3c <qprints>
f00009fa:       |  |  |  |  |     |  |  /----- a831                     j       f0000a16 <printf+0x15c>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:209
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'a');
f00009fc:       |  |  |  |  |     \--|--|----> 000ca503                 lw      a0,0(s9)
f0000a00:       |  |  |  |  |        |  |      0c91                     addi    s9,s9,4
f0000a02:       |  |  |  |  |        |  |      45c1                     li      a1,16
f0000a04:       |  |  |  |  |        |  |  /-- a029                     j       f0000a0e <printf+0x154>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:205
        pc += qprinti (out, va_arg(va, unsigned int), 10, 0, width, pad, 'a');
f0000a06:       |  |  |  |  \--------|--|--|-> 000ca503                 lw      a0,0(s9)
f0000a0a:       |  |  |  |           |  |  |   0c91                     addi    s9,s9,4
f0000a0c:       |  |  |  |           |  |  |   45a9                     li      a1,10
f0000a0e:       |  |  |  |           |  |  \-> 06100793                 li      a5,97
f0000a12:       |  |  |  |           \--|----> 4601                     li      a2,0
f0000a14:       |  |  |  \--------------|----> 28d5                     jal     f0000b08 <qprinti>
f0000a16:       |  |  |                 \----> 9a2a                     add     s4,s4,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:173
  for (; *format != 0; ++format)
f0000a18:       |  |  \----------------------> 0485                     addi    s1,s1,1
f0000a1a:       \--|-------------------------- bdd5                     j       f000090e <printf+0x54>
printf():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:246

  pc = qprint(0, format, va);

  va_end(va);

  return pc;
f0000a1c:          \-------------------------> 8552                     mv      a0,s4
f0000a1e:                                      4db2                     lw      s11,12(sp)
f0000a20:                                      4d42                     lw      s10,16(sp)
f0000a22:                                      4cd2                     lw      s9,20(sp)
f0000a24:                                      4c62                     lw      s8,24(sp)
f0000a26:                                      4bf2                     lw      s7,28(sp)
f0000a28:                                      5b02                     lw      s6,32(sp)
f0000a2a:                                      5a92                     lw      s5,36(sp)
f0000a2c:                                      5a22                     lw      s4,40(sp)
f0000a2e:                                      59b2                     lw      s3,44(sp)
f0000a30:                                      5942                     lw      s2,48(sp)
f0000a32:                                      54d2                     lw      s1,52(sp)
f0000a34:                                      5462                     lw      s0,56(sp)
f0000a36:                                      50f2                     lw      ra,60(sp)
f0000a38:                                      6125                     addi    sp,sp,96
f0000a3a:                                      8082                     ret

f0000a3c <qprints>:
qprints():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:80
{
f0000a3c:                       1101                    addi    sp,sp,-32
f0000a3e:                       ce06                    sw      ra,28(sp)
f0000a40:                       cc22                    sw      s0,24(sp)
f0000a42:                       ca26                    sw      s1,20(sp)
f0000a44:                       c84a                    sw      s2,16(sp)
f0000a46:                       c64e                    sw      s3,12(sp)
f0000a48:                       c452                    sw      s4,8(sp)
f0000a4a:                       c256                    sw      s5,4(sp)
f0000a4c:                       8a2e                    mv      s4,a1
f0000a4e:                       892a                    mv      s2,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:83
  if (width > 0) {
f0000a50:          /----------- 02b05463                blez    a1,f0000a78 <qprints+0x3c>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:86
    for (ptr = string; *ptr; ++ptr) ++len;
f0000a54:          |            00094503                lbu     a0,0(s2)
f0000a58:       /--|----------- c505                    beqz    a0,f0000a80 <qprints+0x44>
f0000a5a:       |  |            4681                    li      a3,0
f0000a5c:       |  |            00190593                addi    a1,s2,1
f0000a60:       |  |        /-> 00d58533                add     a0,a1,a3
f0000a64:       |  |        |   00054703                lbu     a4,0(a0)
f0000a68:       |  |        |   00168513                addi    a0,a3,1
f0000a6c:       |  |        |   86aa                    mv      a3,a0
f0000a6e:       |  |        \-- fb6d                    bnez    a4,f0000a60 <qprints+0x24>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:87
    if (len >= width) width = 0;
f0000a70:       |  |  /-------- 01454b63                blt     a0,s4,f0000a86 <qprints+0x4a>
f0000a74:       |  |  |     /-> 4581                    li      a1,0
f0000a76:       |  |  |  /--|-- a811                    j       f0000a8a <qprints+0x4e>
f0000a78:       |  \--|--|--|-> 4481                    li      s1,0
f0000a7a:       |     |  |  |   02000993                li      s3,32
f0000a7e:       |  /--|--|--|-- a0b1                    j       f0000aca <qprints+0x8e>
f0000a80:       \--|--|--|--|-> 4501                    li      a0,0
f0000a82:          |  |  |  \-- ff4559e3                bge     a0,s4,f0000a74 <qprints+0x38>
f0000a86:          |  \--|----> 40aa05b3                sub     a1,s4,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:89
    if (pad & PAD_ZERO) padchar = '0';
f0000a8a:          |     \----> 00267693                andi    a3,a2,2
f0000a8e:          |            02000993                li      s3,32
f0000a92:          |        /-- c299                    beqz    a3,f0000a98 <qprints+0x5c>
f0000a94:          |        |   03000993                li      s3,48
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:91
  if (!(pad & PAD_RIGHT)) {
f0000a98:          |        \-> 8a05                    andi    a2,a2,1
f0000a9a:          |            00163613                seqz    a2,a2
f0000a9e:          |            00b026b3                sgtz    a3,a1
f0000aa2:          |            8e75                    and     a2,a2,a3
f0000aa4:          |     /----- c20d                    beqz    a2,f0000ac6 <qprints+0x8a>
f0000aa6:          |     |      4401                    li      s0,0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:92
    for ( ; width > 0; --width) {
f0000aa8:          |     |      40aa04b3                sub     s1,s4,a0
f0000aac:          |     |      4a85                    li      s5,1
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000aae:          |     |  /-> 854e                    mv      a0,s3
f0000ab0:          |     |  |   33e5                    jal     f0000898 <uart_sendchar>
qprints():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:92
    for ( ; width > 0; --width) {
f0000ab2:          |     |  |   147d                    addi    s0,s0,-1
f0000ab4:          |     |  |   00848a33                add     s4,s1,s0
f0000ab8:          |     |  |   001a0513                addi    a0,s4,1
f0000abc:          |     |  \-- feaac9e3                blt     s5,a0,f0000aae <qprints+0x72>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:97
  for ( ; *string ; ++string) {
f0000ac0:          |     |      408004b3                neg     s1,s0
f0000ac4:          +-----|----- a019                    j       f0000aca <qprints+0x8e>
f0000ac6:          |     \----> 4481                    li      s1,0
f0000ac8:          |            8a2e                    mv      s4,a1
f0000aca:          \----------> 00094503                lbu     a0,0(s2)
f0000ace:             /-------- c919                    beqz    a0,f0000ae4 <qprints+0xa8>
f0000ad0:             |         00190413                addi    s0,s2,1
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000ad4:             |     /-> 0ff57513                andi    a0,a0,255
f0000ad8:             |     |   33c1                    jal     f0000898 <uart_sendchar>
qprints():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:97
  for ( ; *string ; ++string) {
f0000ada:             |     |   00044503                lbu     a0,0(s0)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:99
    ++pc;
f0000ade:             |     |   0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:97
  for ( ; *string ; ++string) {
f0000ae0:             |     |   0405                    addi    s0,s0,1
f0000ae2:             |     \-- f96d                    bnez    a0,f0000ad4 <qprints+0x98>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:101
  for ( ; width > 0; --width) {
f0000ae4:             \--/----X 01405863                blez    s4,f0000af4 <qprints+0xb8>
f0000ae8:                |      94d2                    add     s1,s1,s4
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000aea:                |  /-> 854e                    mv      a0,s3
f0000aec:                |  |   3375                    jal     f0000898 <uart_sendchar>
qprints():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:101
  for ( ; width > 0; --width) {
f0000aee:                |  |   1a7d                    addi    s4,s4,-1
f0000af0:                |  \-- fe0a1de3                bnez    s4,f0000aea <qprints+0xae>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:106
  return pc;
f0000af4:                \----> 8526                    mv      a0,s1
f0000af6:                       4a92                    lw      s5,4(sp)
f0000af8:                       4a22                    lw      s4,8(sp)
f0000afa:                       49b2                    lw      s3,12(sp)
f0000afc:                       4942                    lw      s2,16(sp)
f0000afe:                       44d2                    lw      s1,20(sp)
f0000b00:                       4462                    lw      s0,24(sp)
f0000b02:                       40f2                    lw      ra,28(sp)
f0000b04:                       6105                    addi    sp,sp,32
f0000b06:                       8082                    ret

f0000b08 <qprinti>:
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:110
{
f0000b08:                          7139                 addi    sp,sp,-64
f0000b0a:                          de06                 sw      ra,60(sp)
f0000b0c:                          dc22                 sw      s0,56(sp)
f0000b0e:                          da26                 sw      s1,52(sp)
f0000b10:                          d84a                 sw      s2,48(sp)
f0000b12:                          d64e                 sw      s3,44(sp)
f0000b14:                          893a                 mv      s2,a4
f0000b16:                          89b6                 mv      s3,a3
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:116
  if (i == 0)
f0000b18:             /----------- cd39                 beqz    a0,f0000b76 <qprinti+0x6e>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:123
  if (sg && b == 10 && i < 0)
f0000b1a:             |            00c03633             snez    a2,a2
f0000b1e:             |            ff658693             addi    a3,a1,-10
f0000b22:             |            0016b693             seqz    a3,a3
f0000b26:             |            8e75                 and     a2,a2,a3
f0000b28:             |            00052693             slti    a3,a0,0
f0000b2c:             |            00d67833             and     a6,a2,a3
f0000b30:             |        /-- 00080463             beqz    a6,f0000b38 <qprinti+0x30>
f0000b34:             |        |   40a00533             neg     a0,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:129
  s = print_buf + PRINT_BUF_LEN-1;
f0000b38:             |        \-> 02b10693             addi    a3,sp,43
f0000b3c:             |            4641                 li      a2,16
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:130
  *s = '\0';
f0000b3e:             |            020105a3             sb      zero,43(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:133
  if(b == 16) {
f0000b42:             |  /-------- 04c59563             bne     a1,a2,f0000b8c <qprinti+0x84>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:135
    while (u) {
f0000b46:       /-----|--|-------- c579                 beqz    a0,f0000c14 <qprinti+0x10c>
f0000b48:       |     |  |         0c678613             addi    a2,a5,198
f0000b4c:       |     |  |         4725                 li      a4,9
f0000b4e:       |     |  |         47c1                 li      a5,16
f0000b50:       |     |  |  /----> 84aa                 mv      s1,a0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:136
      int t = u & 0xF;
f0000b52:       |     |  |  |      893d                 andi    a0,a0,15
f0000b54:       |     |  |  |      85b2                 mv      a1,a2
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:138
      if (t >= 10)
f0000b56:       |     |  |  |  /-- 00a76363             bltu    a4,a0,f0000b5c <qprinti+0x54>
f0000b5a:       |     |  |  |  |   4581                 li      a1,0
f0000b5c:       |     |  |  |  \-> 952e                 add     a0,a0,a1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:141
      *--s = t + '0';
f0000b5e:       |     |  |  |      03050513             addi    a0,a0,48
f0000b62:       |     |  |  |      fff68413             addi    s0,a3,-1
f0000b66:       |     |  |  |      fea68fa3             sb      a0,-1(a3)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:142
      u >>= 4;
f0000b6a:       |     |  |  |      0044d513             srli    a0,s1,0x4
f0000b6e:       |     |  |  |      86a2                 mv      a3,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:135
    while (u) {
f0000b70:       |     |  |  \----- fef4f0e3             bgeu    s1,a5,f0000b50 <qprinti+0x48>
f0000b74:       |     |  |  /----- a8ad                 j       f0000bee <qprinti+0xe6>
f0000b76:       |     \--|--|----> 03000513             li      a0,48
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:118
    print_buf[0] = '0';
f0000b7a:       |        |  |      00a10623             sb      a0,12(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:119
    print_buf[1] = '\0';
f0000b7e:       |        |  |      000106a3             sb      zero,13(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:120
    return qprints (out, print_buf, width, pad);
f0000b82:       |        |  |      0068                 addi    a0,sp,12
f0000b84:       |        |  |      85ce                 mv      a1,s3
f0000b86:       |        |  |      864a                 mv      a2,s2
f0000b88:       |        |  |      3d55                 jal     f0000a3c <qprints>
f0000b8a:       |  /-----|--|----- a065                 j       f0000c32 <qprinti+0x12a>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:146
    while (u) {
f0000b8c:       +--|-----\--|----X c541                 beqz    a0,f0000c14 <qprinti+0x10c>
f0000b8e:       |  |        |      1999a5b7             lui     a1,0x1999a
f0000b92:       |  |        |      99958593             addi    a1,a1,-1639 # 19999999 <_ottf_size+0x19919999>
f0000b96:       |  |        |      f0001717             auipc   a4,0xf0001
f0000b9a:       |  |        |      42e70713             addi    a4,a4,1070 # e0001fc4 <remu10_table>
f0000b9e:       |  |        |      57d9                 li      a5,-10
remu10():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:58
  n = (0x19999999 * n + (n >> 1) + (n >> 3)) >> 28;
f0000ba0:       |  |        |  /-> 02b50633             mul     a2,a0,a1
f0000ba4:       |  |        |  |   00155493             srli    s1,a0,0x1
f0000ba8:       |  |        |  |   9626                 add     a2,a2,s1
f0000baa:       |  |        |  |   00355413             srli    s0,a0,0x3
f0000bae:       |  |        |  |   9622                 add     a2,a2,s0
f0000bb0:       |  |        |  |   8271                 srli    a2,a2,0x1c
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:59
  return remu10_table[n];
f0000bb2:       |  |        |  |   963a                 add     a2,a2,a4
f0000bb4:       |  |        |  |   00060603             lb      a2,0(a2)
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:147
      *--s = remu10(u) + '0';
f0000bb8:       |  |        |  |   03060613             addi    a2,a2,48
divu10():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:42
  q = (n >> 1) + (n >> 2);
f0000bbc:       |  |        |  |   00255413             srli    s0,a0,0x2
f0000bc0:       |  |        |  |   94a2                 add     s1,s1,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:43
  q = q + (q >> 4);
f0000bc2:       |  |        |  |   0044d413             srli    s0,s1,0x4
f0000bc6:       |  |        |  |   94a2                 add     s1,s1,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:44
  q = q + (q >> 8);
f0000bc8:       |  |        |  |   0084d413             srli    s0,s1,0x8
f0000bcc:       |  |        |  |   94a2                 add     s1,s1,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:45
  q = q + (q >> 16);
f0000bce:       |  |        |  |   0104d413             srli    s0,s1,0x10
f0000bd2:       |  |        |  |   94a2                 add     s1,s1,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:46
  q = q >> 3;
f0000bd4:       |  |        |  |   808d                 srli    s1,s1,0x3
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:47
  r = n - q * 10;
f0000bd6:       |  |        |  |   02f48433             mul     s0,s1,a5
f0000bda:       |  |        |  |   9522                 add     a0,a0,s0
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:147
      *--s = remu10(u) + '0';
f0000bdc:       |  |        |  |   fff68413             addi    s0,a3,-1
divu10():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:49
  return q + ((r + 6) >> 4);
f0000be0:       |  |        |  |   0519                 addi    a0,a0,6
f0000be2:       |  |        |  |   8111                 srli    a0,a0,0x4
f0000be4:       |  |        |  |   9526                 add     a0,a0,s1
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:147
      *--s = remu10(u) + '0';
f0000be6:       |  |        |  |   fec68fa3             sb      a2,-1(a3)
f0000bea:       |  |        |  |   86a2                 mv      a3,s0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:146
    while (u) {
f0000bec:       |  |        |  \-- f955                 bnez    a0,f0000ba0 <qprinti+0x98>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:152
  if (neg) {
f0000bee:       |  |  /-----\----X 02080663             beqz    a6,f0000c1a <qprinti+0x112>
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:153
    if( width && (pad & PAD_ZERO) )
f0000bf2:       |  |  |  /-------> 0019b513             seqz    a0,s3
f0000bf6:       |  |  |  |         00297593             andi    a1,s2,2
f0000bfa:       |  |  |  |         0015b593             seqz    a1,a1
f0000bfe:       |  |  |  |         8d4d                 or      a0,a0,a1
f0000c00:       |  |  |  |  /----- cd19                 beqz    a0,f0000c1e <qprinti+0x116>
f0000c02:       |  |  |  |  |      4481                 li      s1,0
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:161
      *--s = '-';
f0000c04:       |  |  |  |  |      fff40513             addi    a0,s0,-1
f0000c08:       |  |  |  |  |      02d00593             li      a1,45
f0000c0c:       |  |  |  |  |      feb40fa3             sb      a1,-1(s0)
f0000c10:       |  |  |  |  |      842a                 mv      s0,a0
f0000c12:       |  |  |  |  |  /-- a819                 j       f0000c28 <qprinti+0x120>
f0000c14:       \--|--|--|--|--|-> 8436                 mv      s0,a3
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:152
  if (neg) {
f0000c16:          |  |  \--|--|-- fc081ee3             bnez    a6,f0000bf2 <qprinti+0xea>
f0000c1a:          |  \-----|--|-> 4481                 li      s1,0
f0000c1c:          |        |  +-- a031                 j       f0000c28 <qprinti+0x120>
putchar():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:64
  uart_sendchar(s);
f0000c1e:          |        \--|-> 02d00513             li      a0,45
f0000c22:          |           |   399d                 jal     f0000898 <uart_sendchar>
qprinti():
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:157
      --width;
f0000c24:          |           |   19fd                 addi    s3,s3,-1
f0000c26:          |           |   4485                 li      s1,1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:164
  return pc + qprints (out, s, width, pad);
f0000c28:          |           \-> 8522                 mv      a0,s0
f0000c2a:          |               85ce                 mv      a1,s3
f0000c2c:          |               864a                 mv      a2,s2
f0000c2e:          |               3539                 jal     f0000a3c <qprints>
f0000c30:          |               9526                 add     a0,a0,s1
/proc/self/cwd/sw/device/silicon_creator/rom/string_lib.c:165
}
f0000c32:          \-------------> 59b2                 lw      s3,44(sp)
f0000c34:                          5942                 lw      s2,48(sp)
f0000c36:                          54d2                 lw      s1,52(sp)
f0000c38:                          5462                 lw      s0,56(sp)
f0000c3a:                          50f2                 lw      ra,60(sp)
f0000c3c:                          6121                 addi    sp,sp,64
f0000c3e:                          8082                 ret

f0000c40 <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:49
// A global random number generator testutil handle.
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(void) {
f0000c40:           1101                        addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:50
  if (pxCurrentTCB != NULL) {
f0000c42:           ce06                        sw      ra,28(sp)
f0000c44:           f0001517            auipc   a0,0xf0001
f0000c48:           42050513            addi    a0,a0,1056 # e0002064 <pxCurrentTCB>
f0000c4c:           4108                        lw      a0,0(a0)
f0000c4e:       /-- c509                        beqz    a0,f0000c58 <ottf_machine_ecall_handler+0x18>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:54
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
f0000c50:       |   40f2                        lw      ra,28(sp)
f0000c52:       |   6105                        addi    sp,sp,32
f0000c54:       |   0950006f            j       f00014e8 <vTaskSwitchContext>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:57
    return;
  }
  LOG_ERROR(
f0000c58:       \-> 00003517            auipc   a0,0x3
f0000c5c:           91450513            addi    a0,a0,-1772 # f000356c <kDeviceLogBypassUartAddress>
f0000c60:           4108                        lw      a0,0(a0)
f0000c62:       /-- c911                        beqz    a0,f0000c76 <ottf_machine_ecall_handler+0x36>
f0000c64:       |   1000f517            auipc   a0,0x1000f
f0000c68:       |   39c50513            addi    a0,a0,924 # 10000 <_non_volatile_scratch_end+0xff90000>
f0000c6c:       |   4581                        li      a1,0
f0000c6e:       |   40f2                        lw      ra,28(sp)
f0000c70:       |   6105                        addi    sp,sp,32
f0000c72:       |   7950006f            j       f0001c06 <base_log_internal_dv>
f0000c76:       \-> 00002597            auipc   a1,0x2
f0000c7a:           daa58593            addi    a1,a1,-598 # f0002a20 <kOttfTestConfig+0x274>
f0000c7e:           0028                        addi    a0,sp,8
f0000c80:           4651                        li      a2,20
f0000c82:           05b010ef            jal     ra,f00024dc <memcpy>
f0000c86:           0028                        addi    a0,sp,8
f0000c88:           6dd000ef            jal     ra,f0001b64 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:60
      "OTTF currently only supports use of machine-mode ecall for FreeRTOS "
      "context switching.");
}
f0000c8c:           40f2                        lw      ra,28(sp)
f0000c8e:           6105                        addi    sp,sp,32
f0000c90:           8082                        ret

f0000c92 <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:120
  report_test_status(result);
}

dif_uart_t *ottf_console(void) { return &uart0; }

void _ottf_main(void) {
f0000c92:                 7179                  addi    sp,sp,-48
f0000c94:                 d606                  sw      ra,44(sp)
f0000c96:                 d422                  sw      s0,40(sp)
f0000c98:                 d226                  sw      s1,36(sp)
f0000c9a:                 d04a                  sw      s2,32(sp)
f0000c9c:                 6511                  lui     a0,0x4
f0000c9e:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x354>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:121
  test_status_set(kTestStatusInTest);
f0000ca2:                 5fd000ef              jal     ra,f0001a9e <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:124

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
f0000ca6:                 00003517              auipc   a0,0x3
f0000caa:                 8aa50513              addi    a0,a0,-1878 # f0003550 <kDeviceType>
f0000cae:                 4108                  lw      a0,0(a0)
f0000cb0:                 00003917              auipc   s2,0x3
f0000cb4:                 8bc90913              addi    s2,s2,-1860 # f000356c <kDeviceLogBypassUartAddress>
f0000cb8:                 00002497              auipc   s1,0x2
f0000cbc:                 af448493              addi    s1,s1,-1292 # f00027ac <kOttfTestConfig>
f0000cc0:          /----- c91d                  beqz    a0,f0000cf6 <_ottf_main+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    init_uart();
f0000cc2:          |      2209                  jal     f0000dc4 <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:126
    LOG_INFO("Running %s", kOttfTestConfig.file);
f0000cc4:          |      00092503              lw      a0,0(s2)
f0000cc8:          |      40c0                  lw      s0,4(s1)
f0000cca:          |  /-- c911                  beqz    a0,f0000cde <_ottf_main+0x4c>
f0000ccc:          |  |   1000f517              auipc   a0,0x1000f
f0000cd0:          |  |   34850513              addi    a0,a0,840 # 10014 <_non_volatile_scratch_end+0xff90014>
f0000cd4:          |  |   4585                  li      a1,1
f0000cd6:          |  |   8622                  mv      a2,s0
f0000cd8:          |  |   72f000ef              jal     ra,f0001c06 <base_log_internal_dv>
f0000cdc:          +--|-- a829                  j       f0000cf6 <_ottf_main+0x64>
f0000cde:          |  \-> 00002597              auipc   a1,0x2
f0000ce2:          |      d5658593              addi    a1,a1,-682 # f0002a34 <kOttfTestConfig+0x288>
f0000ce6:          |      850a                  mv      a0,sp
f0000ce8:          |      4651                  li      a2,20
f0000cea:          |      7f2010ef              jal     ra,f00024dc <memcpy>
f0000cee:          |      850a                  mv      a0,sp
f0000cf0:          |      85a2                  mv      a1,s0
f0000cf2:          |      673000ef              jal     ra,f0001b64 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:132
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
f0000cf6:          \----> c11f0537              lui     a0,0xc11f0
f0000cfa:                 082c                  addi    a1,sp,24
f0000cfc:                 595000ef              jal     ra,f0001a90 <dif_rv_core_ibex_init>
f0000d00:       /-------- cd1d                  beqz    a0,f0000d3e <_ottf_main+0xac>
f0000d02:       |         842a                  mv      s0,a0
f0000d04:       |         00092503              lw      a0,0(s2)
f0000d08:       |     /-- c911                  beqz    a0,f0000d1c <_ottf_main+0x8a>
f0000d0a:       |     |   1000f517              auipc   a0,0x1000f
f0000d0e:       |     |   31e50513              addi    a0,a0,798 # 10028 <_non_volatile_scratch_end+0xff90028>
f0000d12:       |     |   4585                  li      a1,1
f0000d14:       |     |   8622                  mv      a2,s0
f0000d16:       |     |   6f1000ef              jal     ra,f0001c06 <base_log_internal_dv>
f0000d1a:       |  /--|-- a829                  j       f0000d34 <_ottf_main+0xa2>
f0000d1c:       |  |  \-> 00002597              auipc   a1,0x2
f0000d20:       |  |      d2c58593              addi    a1,a1,-724 # f0002a48 <kOttfTestConfig+0x29c>
f0000d24:       |  |      850a                  mv      a0,sp
f0000d26:       |  |      4651                  li      a2,20
f0000d28:       |  |      7b4010ef              jal     ra,f00024dc <memcpy>
f0000d2c:       |  |      850a                  mv      a0,sp
f0000d2e:       |  |      85a2                  mv      a1,s0
f0000d30:       |  |      635000ef              jal     ra,f0001b64 <base_log_internal_core>
f0000d34:       |  \----> 6531                  lui     a0,0xc
f0000d36:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000d3a:       |         565000ef              jal     ra,f0001a9e <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:135
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
f0000d3e:       \-------> 850a                  mv      a0,sp
f0000d40:                 082c                  addi    a1,sp,24
f0000d42:                 4c5000ef              jal     ra,f0001a06 <rand_testutils_init>
f0000d46:                 f0001517              auipc   a0,0xf0001
f0000d4a:                 36e50513              addi    a0,a0,878 # e00020b4 <rand_testutils_rng_ctx>
f0000d4e:                 858a                  mv      a1,sp
f0000d50:                 4661                  li      a2,24
f0000d52:                 78a010ef              jal     ra,f00024dc <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:138

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
f0000d56:                 0004c503              lbu     a0,0(s1)
f0000d5a:          /----- c115                  beqz    a0,f0000d7e <_ottf_main+0xec>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:65
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
f0000d5c:          |      00000517              auipc   a0,0x0
f0000d60:          |      14250513              addi    a0,a0,322 # f0000e9e <test_wrapper>
f0000d64:          |      00002597              auipc   a1,0x2
f0000d68:          |      b6558593              addi    a1,a1,-1179 # f00028c9 <kOttfTestConfig+0x11d>
f0000d6c:          |      10000613              li      a2,256
f0000d70:          |      4705                  li      a4,1
f0000d72:          |      4681                  li      a3,0
f0000d74:          |      4781                  li      a5,0
f0000d76:          |      2b0d                  jal     f00012a8 <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", kOttfFreeRtosMinStackSize, 0);
    vTaskStartScheduler();
f0000d78:          |      05d000ef              jal     ra,f00015d4 <vTaskStartScheduler>
f0000d7c:          |  /-- a019                  j       f0000d82 <_ottf_main+0xf0>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:146
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
f0000d7e:          \--|-> 4501                  li      a0,0
f0000d80:             |   2a39                  jal     f0000e9e <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:150
  }

  // Unreachable.
  CHECK(false);
f0000d82:             \-> 00092503              lw      a0,0(s2)
f0000d86:             /-- c909                  beqz    a0,f0000d98 <_ottf_main+0x106>
f0000d88:             |   1000f517              auipc   a0,0x1000f
f0000d8c:             |   2b450513              addi    a0,a0,692 # 1003c <_non_volatile_scratch_end+0xff9003c>
f0000d90:             |   4581                  li      a1,0
f0000d92:             |   675000ef              jal     ra,f0001c06 <base_log_internal_dv>
f0000d96:          /--|-- a821                  j       f0000dae <_ottf_main+0x11c>
f0000d98:          |  \-> 00002597              auipc   a1,0x2
f0000d9c:          |      cc458593              addi    a1,a1,-828 # f0002a5c <kOttfTestConfig+0x2b0>
f0000da0:          |      850a                  mv      a0,sp
f0000da2:          |      4651                  li      a2,20
f0000da4:          |      738010ef              jal     ra,f00024dc <memcpy>
f0000da8:          |      850a                  mv      a0,sp
f0000daa:          |      5bb000ef              jal     ra,f0001b64 <base_log_internal_core>
f0000dae:          \----> 6531                  lui     a0,0xc
f0000db0:                 aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000db4:                 4eb000ef              jal     ra,f0001a9e <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:151
}
f0000db8:                 5902                  lw      s2,32(sp)
f0000dba:                 5492                  lw      s1,36(sp)
f0000dbc:                 5422                  lw      s0,40(sp)
f0000dbe:                 50b2                  lw      ra,44(sp)
f0000dc0:                 6145                  addi    sp,sp,48
f0000dc2:                 8082                  ret

f0000dc4 <init_uart>:
init_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:81
static void init_uart(void) {
f0000dc4:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:82
  CHECK_DIF_OK(dif_uart_init(
f0000dc6:                 ce06                  sw      ra,28(sp)
f0000dc8:                 cc22                  sw      s0,24(sp)
f0000dca:                 ca26                  sw      s1,20(sp)
f0000dcc:                 f0001597              auipc   a1,0xf0001
f0000dd0:                 28c58593              addi    a1,a1,652 # e0002058 <uart0>
f0000dd4:                 c0000537              lui     a0,0xc0000
f0000dd8:                 56a010ef              jal     ra,f0002342 <dif_uart_init>
f0000ddc:                 00002497              auipc   s1,0x2
f0000de0:                 79048493              addi    s1,s1,1936 # f000356c <kDeviceLogBypassUartAddress>
f0000de4:       /-------- cd15                  beqz    a0,f0000e20 <init_uart+0x5c>
f0000de6:       |         842a                  mv      s0,a0
f0000de8:       |         4088                  lw      a0,0(s1)
f0000dea:       |     /-- c911                  beqz    a0,f0000dfe <init_uart+0x3a>
f0000dec:       |     |   1000f517              auipc   a0,0x1000f
f0000df0:       |     |   26450513              addi    a0,a0,612 # 10050 <_non_volatile_scratch_end+0xff90050>
f0000df4:       |     |   4585                  li      a1,1
f0000df6:       |     |   8622                  mv      a2,s0
f0000df8:       |     |   60f000ef              jal     ra,f0001c06 <base_log_internal_dv>
f0000dfc:       |  /--|-- a829                  j       f0000e16 <init_uart+0x52>
f0000dfe:       |  |  \-> 00002597              auipc   a1,0x2
f0000e02:       |  |      c7258593              addi    a1,a1,-910 # f0002a70 <kOttfTestConfig+0x2c4>
f0000e06:       |  |      850a                  mv      a0,sp
f0000e08:       |  |      4651                  li      a2,20
f0000e0a:       |  |      6d2010ef              jal     ra,f00024dc <memcpy>
f0000e0e:       |  |      850a                  mv      a0,sp
f0000e10:       |  |      85a2                  mv      a1,s0
f0000e12:       |  |      553000ef              jal     ra,f0001b64 <base_log_internal_core>
f0000e16:       |  \----> 6531                  lui     a0,0xc
f0000e18:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000e1c:       |         483000ef              jal     ra,f0001a9e <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:84
  CHECK_DIF_OK(
f0000e20:       \-------> 00002517              auipc   a0,0x2
f0000e24:                 74050513              addi    a0,a0,1856 # f0003560 <kUartBaudrate>
f0000e28:                 4108                  lw      a0,0(a0)
f0000e2a:                 00002597              auipc   a1,0x2
f0000e2e:                 72e58593              addi    a1,a1,1838 # f0003558 <kClockFreqPeripheralHz>
f0000e32:                 418c                  lw      a1,0(a1)
f0000e34:                 c02a                  sw      a0,0(sp)
f0000e36:                 c22e                  sw      a1,4(sp)
f0000e38:                 c402                  sw      zero,8(sp)
f0000e3a:                 4505                  li      a0,1
f0000e3c:                 c62a                  sw      a0,12(sp)
f0000e3e:                 f0001517              auipc   a0,0xf0001
f0000e42:                 21a50513              addi    a0,a0,538 # e0002058 <uart0>
f0000e46:                 858a                  mv      a1,sp
f0000e48:                 508010ef              jal     ra,f0002350 <dif_uart_configure>
f0000e4c:       /-------- cd15                  beqz    a0,f0000e88 <init_uart+0xc4>
f0000e4e:       |         842a                  mv      s0,a0
f0000e50:       |         4088                  lw      a0,0(s1)
f0000e52:       |     /-- c911                  beqz    a0,f0000e66 <init_uart+0xa2>
f0000e54:       |     |   1000f517              auipc   a0,0x1000f
f0000e58:       |     |   21050513              addi    a0,a0,528 # 10064 <_non_volatile_scratch_end+0xff90064>
f0000e5c:       |     |   4585                  li      a1,1
f0000e5e:       |     |   8622                  mv      a2,s0
f0000e60:       |     |   5a7000ef              jal     ra,f0001c06 <base_log_internal_dv>
f0000e64:       |  /--|-- a829                  j       f0000e7e <init_uart+0xba>
f0000e66:       |  |  \-> 00002597              auipc   a1,0x2
f0000e6a:       |  |      c1e58593              addi    a1,a1,-994 # f0002a84 <kOttfTestConfig+0x2d8>
f0000e6e:       |  |      850a                  mv      a0,sp
f0000e70:       |  |      4651                  li      a2,20
f0000e72:       |  |      66a010ef              jal     ra,f00024dc <memcpy>
f0000e76:       |  |      850a                  mv      a0,sp
f0000e78:       |  |      85a2                  mv      a1,s0
f0000e7a:       |  |      4eb000ef              jal     ra,f0001b64 <base_log_internal_core>
f0000e7e:       |  \----> 6531                  lui     a0,0xc
f0000e80:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000e84:       |         41b000ef              jal     ra,f0001a9e <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:91
  base_uart_stdout(&uart0);
f0000e88:       \-------> f0001517              auipc   a0,0xf0001
f0000e8c:                 1d050513              addi    a0,a0,464 # e0002058 <uart0>
f0000e90:                 5af000ef              jal     ra,f0001c3e <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:92
}
f0000e94:                 44d2                  lw      s1,20(sp)
f0000e96:                 4462                  lw      s0,24(sp)
f0000e98:                 40f2                  lw      ra,28(sp)
f0000e9a:                 6105                  addi    sp,sp,32
f0000e9c:                 8082                  ret

f0000e9e <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:110
static void test_wrapper(void *task_parameters) {
f0000e9e:                 1101                  addi    sp,sp,-32
f0000ea0:                 ce06                  sw      ra,28(sp)
f0000ea2:                 cc22                  sw      s0,24(sp)
f0000ea4:                 ca26                  sw      s1,20(sp)
f0000ea6:                 6531                  lui     a0,0xc
f0000ea8:                 aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:112
  bool result = manufacturer_pre_test_hook();
f0000eac:                 353000ef              jal     ra,f00019fe <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:113
  result = result && test_main();
f0000eb0:          /----- cd09                  beqz    a0,f0000eca <test_wrapper+0x2c>
f0000eb2:          |      3ab9                  jal     f0000810 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  result = result && manufacturer_post_test_hook();
f0000eb4:          +----- c919                  beqz    a0,f0000eca <test_wrapper+0x2c>
f0000eb6:          |      34d000ef              jal     ra,f0001a02 <manufacturer_post_test_hook>
f0000eba:          |  /-- e509                  bnez    a0,f0000ec4 <test_wrapper+0x26>
f0000ebc:          |  |   6531                  lui     a0,0xc
f0000ebe:          |  |   aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000ec2:          +--|-- a021                  j       f0000eca <test_wrapper+0x2c>
f0000ec4:          |  \-> 6525                  lui     a0,0x9
f0000ec6:          |      00d50413              addi    s0,a0,13 # 900d <_non_volatile_scratch_size+0x400d>
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:96
  if (kDeviceType != kDeviceSimDV) {
f0000eca:          \----> 00002517              auipc   a0,0x2
f0000ece:                 68650513              addi    a0,a0,1670 # f0003550 <kDeviceType>
f0000ed2:                 4108                  lw      a0,0(a0)
f0000ed4:       /-------- c531                  beqz    a0,f0000f20 <test_wrapper+0x82>
f0000ed6:       |         00002497              auipc   s1,0x2
f0000eda:       |         8d648493              addi    s1,s1,-1834 # f00027ac <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:97
    if (kOttfTestConfig.can_clobber_uart) {
f0000ede:       |         0014c503              lbu     a0,1(s1)
f0000ee2:       |     /-- c111                  beqz    a0,f0000ee6 <test_wrapper+0x48>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:98
      init_uart();
f0000ee4:       |     |   35c5                  jal     f0000dc4 <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f0000ee6:       |     \-> 00002517              auipc   a0,0x2
f0000eea:       |         68650513              addi    a0,a0,1670 # f000356c <kDeviceLogBypassUartAddress>
f0000eee:       |         4108                  lw      a0,0(a0)
f0000ef0:       |         40c4                  lw      s1,4(s1)
f0000ef2:       |     /-- c911                  beqz    a0,f0000f06 <test_wrapper+0x68>
f0000ef4:       |     |   1000f517              auipc   a0,0x1000f
f0000ef8:       |     |   18450513              addi    a0,a0,388 # 10078 <_non_volatile_scratch_end+0xff90078>
f0000efc:       |     |   4585                  li      a1,1
f0000efe:       |     |   8626                  mv      a2,s1
f0000f00:       |     |   507000ef              jal     ra,f0001c06 <base_log_internal_dv>
f0000f04:       |  /--|-- a829                  j       f0000f1e <test_wrapper+0x80>
f0000f06:       |  |  \-> 00002597              auipc   a1,0x2
f0000f0a:       |  |      b9258593              addi    a1,a1,-1134 # f0002a98 <kOttfTestConfig+0x2ec>
f0000f0e:       |  |      850a                  mv      a0,sp
f0000f10:       |  |      4651                  li      a2,20
f0000f12:       |  |      5ca010ef              jal     ra,f00024dc <memcpy>
f0000f16:       |  |      850a                  mv      a0,sp
f0000f18:       |  |      85a6                  mv      a1,s1
f0000f1a:       |  |      44b000ef              jal     ra,f0001b64 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
    test_coverage_send_buffer();
f0000f1e:       |  \----> 2809                  jal     f0000f30 <test_coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:104
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
f0000f20:       \-------> 8522                  mv      a0,s0
f0000f22:                 37d000ef              jal     ra,f0001a9e <test_status_set>
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:116
}
f0000f26:                 44d2                  lw      s1,20(sp)
f0000f28:                 4462                  lw      s0,24(sp)
f0000f2a:                 40f2                  lw      ra,28(sp)
f0000f2c:                 6105                  addi    sp,sp,32
f0000f2e:                 8082                  ret

f0000f30 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
f0000f30:       8082                    ret

f0000f32 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
f0000f32:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
f0000f34:              ce06                     sw      ra,28(sp)
f0000f36:              00002517                 auipc   a0,0x2
f0000f3a:              63650513                 addi    a0,a0,1590 # f000356c <kDeviceLogBypassUartAddress>
f0000f3e:              4108                     lw      a0,0(a0)
f0000f40:       /----- ed09                     bnez    a0,f0000f5a <vApplicationMallocFailedHook+0x28>
f0000f42:       |      00002597                 auipc   a1,0x2
f0000f46:       |      c1a58593                 addi    a1,a1,-998 # f0002b5c <kOttfTestConfig+0x3b0>
f0000f4a:       |      0028                     addi    a0,sp,8
f0000f4c:       |      4651                     li      a2,20
f0000f4e:       |      58e010ef                 jal     ra,f00024dc <memcpy>
f0000f52:       |      0028                     addi    a0,sp,8
f0000f54:       |      411000ef                 jal     ra,f0001b64 <base_log_internal_core>
f0000f58:       |  /-- a801                     j       f0000f68 <vApplicationMallocFailedHook+0x36>
f0000f5a:       \--|-> 1000f517                 auipc   a0,0x1000f
f0000f5e:          |   13250513                 addi    a0,a0,306 # 1008c <_non_volatile_scratch_end+0xff9008c>
f0000f62:          |   4581                     li      a1,0
f0000f64:          |   4a3000ef                 jal     ra,f0001c06 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:20
  irq_global_ctrl(false);
f0000f68:          \-> 4501                     li      a0,0
f0000f6a:              2085                     jal     f0000fca <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
  abort();
f0000f6c:              3e1000ef                 jal     ra,f0001b4c <abort>

f0000f70 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:28

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
f0000f70:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s");
f0000f72:              ce06                     sw      ra,28(sp)
f0000f74:              00002517                 auipc   a0,0x2
f0000f78:              5f850513                 addi    a0,a0,1528 # f000356c <kDeviceLogBypassUartAddress>
f0000f7c:              4108                     lw      a0,0(a0)
f0000f7e:       /----- ed09                     bnez    a0,f0000f98 <vApplicationStackOverflowHook+0x28>
f0000f80:       |      00002597                 auipc   a1,0x2
f0000f84:       |      bf058593                 addi    a1,a1,-1040 # f0002b70 <kOttfTestConfig+0x3c4>
f0000f88:       |      0028                     addi    a0,sp,8
f0000f8a:       |      4651                     li      a2,20
f0000f8c:       |      550010ef                 jal     ra,f00024dc <memcpy>
f0000f90:       |      0028                     addi    a0,sp,8
f0000f92:       |      3d3000ef                 jal     ra,f0001b64 <base_log_internal_core>
f0000f96:       |  /-- a801                     j       f0000fa6 <vApplicationStackOverflowHook+0x36>
f0000f98:       \--|-> 1000f517                 auipc   a0,0x1000f
f0000f9c:          |   10850513                 addi    a0,a0,264 # 100a0 <_non_volatile_scratch_end+0xff900a0>
f0000fa0:          |   4581                     li      a1,0
f0000fa2:          |   465000ef                 jal     ra,f0001c06 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  irq_global_ctrl(false);
f0000fa6:          \-> 4501                     li      a0,0
f0000fa8:              200d                     jal     f0000fca <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:31
  abort();
f0000faa:              3a3000ef                 jal     ra,f0001b4c <abort>

f0000fae <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
f0000fae:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
f0000fb0:       c606                    sw      ra,12(sp)
f0000fb2:       4505                    li      a0,1
f0000fb4:       2089                    jal     f0000ff6 <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
f0000fb6:       4505                    li      a0,1
f0000fb8:       2015                    jal     f0000fdc <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
f0000fba:       4505                    li      a0,1
f0000fbc:       2881                    jal     f000100c <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
f0000fbe:       d8aff0ef                jal     ra,f0000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
f0000fc2:       4501                    li      a0,0
f0000fc4:       40b2                    lw      ra,12(sp)
f0000fc6:       0141                    addi    sp,sp,16
f0000fc8:       8082                    ret

f0000fca <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
f0000fca:       /-- c509                        beqz    a0,f0000fd4 <irq_global_ctrl+0xa>
f0000fcc:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
f0000fce:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
f0000fd2:       |   8082                        ret
f0000fd4:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
f0000fd6:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
f0000fda:           8082                        ret

f0000fdc <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
f0000fdc:       /-- c519                        beqz    a0,f0000fea <irq_external_ctrl+0xe>
f0000fde:       |   6505                        lui     a0,0x1
f0000fe0:       |   80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0000fe4:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0000fe8:       |   8082                        ret
f0000fea:       \-> 6505                        lui     a0,0x1
f0000fec:           80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0000ff0:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
f0000ff4:           8082                        ret

f0000ff6 <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
f0000ff6:       /-- c511                        beqz    a0,f0001002 <irq_timer_ctrl+0xc>
f0000ff8:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0000ffc:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001000:       |   8082                        ret
f0001002:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001006:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
f000100a:           8082                        ret

f000100c <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
f000100c:       /-- c509                        beqz    a0,f0001016 <irq_software_ctrl+0xa>
f000100e:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0001010:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001014:       |   8082                        ret
f0001016:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001018:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
f000101c:           8082                        ret

f000101e <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:56
    "Reserved",
    "Reserved",
    "Reserved",
};

void ottf_generic_fault_print(const char *reason, uint32_t mcause) {
f000101e:           7179                        addi    sp,sp,-48
f0001020:           d606                        sw      ra,44(sp)
f0001022:           d422                        sw      s0,40(sp)
f0001024:           d226                        sw      s1,36(sp)
f0001026:           d04a                        sw      s2,32(sp)
f0001028:           ce4e                        sw      s3,28(sp)
f000102a:           892e                        mv      s2,a1
f000102c:           89aa                        mv      s3,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:57
  uint32_t mepc = ibex_mepc_read();
f000102e:           331000ef            jal     ra,f0001b5e <ibex_mepc_read>
f0001032:           84aa                        mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f0001034:           325000ef            jal     ra,f0001b58 <ibex_mtval_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f0001038:           00002597            auipc   a1,0x2
f000103c:           53458593            addi    a1,a1,1332 # f000356c <kDeviceLogBypassUartAddress>
f0001040:           418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f0001042:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f0001044:       /-- c195                        beqz    a1,f0001068 <ottf_generic_fault_print+0x4a>
f0001046:       |   1000f517            auipc   a0,0x1000f
f000104a:       |   06e50513            addi    a0,a0,110 # 100b4 <_non_volatile_scratch_end+0xff900b4>
f000104e:       |   4591                        li      a1,4
f0001050:       |   864e                        mv      a2,s3
f0001052:       |   86ca                        mv      a3,s2
f0001054:       |   8726                        mv      a4,s1
f0001056:       |   87a2                        mv      a5,s0
f0001058:       |   49f2                        lw      s3,28(sp)
f000105a:       |   5902                        lw      s2,32(sp)
f000105c:       |   5492                        lw      s1,36(sp)
f000105e:       |   5422                        lw      s0,40(sp)
f0001060:       |   50b2                        lw      ra,44(sp)
f0001062:       |   6145                        addi    sp,sp,48
f0001064:       |   3a30006f            j       f0001c06 <base_log_internal_dv>
f0001068:       \-> 00002597            auipc   a1,0x2
f000106c:           d8858593            addi    a1,a1,-632 # f0002df0 <kOttfTestConfig+0x644>
f0001070:           0028                        addi    a0,sp,8
f0001072:           4651                        li      a2,20
f0001074:           468010ef            jal     ra,f00024dc <memcpy>
f0001078:           0028                        addi    a0,sp,8
f000107a:           85ce                        mv      a1,s3
f000107c:           864a                        mv      a2,s2
f000107e:           86a6                        mv      a3,s1
f0001080:           8722                        mv      a4,s0
f0001082:           2e3000ef            jal     ra,f0001b64 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:61
            mtval);
}
f0001086:           49f2                        lw      s3,28(sp)
f0001088:           5902                        lw      s2,32(sp)
f000108a:           5492                        lw      s1,36(sp)
f000108c:           5422                        lw      s0,40(sp)
f000108e:           50b2                        lw      ra,44(sp)
f0001090:           6145                        addi    sp,sp,48
f0001092:           8082                        ret

f0001094 <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:79
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(void) {
f0001094:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
  uint32_t mcause = ibex_mcause_read();
f0001096:           c606                        sw      ra,12(sp)
f0001098:           2bb000ef            jal     ra,f0001b52 <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:82

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
f000109c:           897d                        andi    a0,a0,31
f000109e:           45ad                        li      a1,11
f00010a0:       /-- 02a5ef63            bltu    a1,a0,f00010de <ottf_exception_handler+0x4a>
f00010a4:       |   050a                        slli    a0,a0,0x2
f00010a6:       |   00002597            auipc   a1,0x2
f00010aa:       |   ade58593            addi    a1,a1,-1314 # f0002b84 <kOttfTestConfig+0x3d8>
f00010ae:       |   952e                        add     a0,a0,a1
f00010b0:       |   4108                        lw      a0,0(a0)
f00010b2:       |   8502                        jr      a0
f00010b4:       |   40b2                        lw      ra,12(sp)
f00010b6:       |   0141                        addi    sp,sp,16
f00010b8:       |   a025                        j       f00010e0 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:84
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler();
f00010ba:       |   40b2                        lw      ra,12(sp)
f00010bc:       |   0141                        addi    sp,sp,16
f00010be:       |   a00d                        j       f00010e0 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:87
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler();
f00010c0:       |   40b2                        lw      ra,12(sp)
f00010c2:       |   0141                        addi    sp,sp,16
f00010c4:       |   a831                        j       f00010e0 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler();
f00010c6:       |   40b2                        lw      ra,12(sp)
f00010c8:       |   0141                        addi    sp,sp,16
f00010ca:       |   a819                        j       f00010e0 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler();
f00010cc:       |   40b2                        lw      ra,12(sp)
f00010ce:       |   0141                        addi    sp,sp,16
f00010d0:       |   a801                        j       f00010e0 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:105
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler();
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler();
f00010d2:       |   40b2                        lw      ra,12(sp)
f00010d4:       |   0141                        addi    sp,sp,16
f00010d6:       |   a029                        j       f00010e0 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
      ottf_machine_ecall_handler();
f00010d8:       |   40b2                        lw      ra,12(sp)
f00010da:       |   0141                        addi    sp,sp,16
f00010dc:       |   b695                        j       f0000c40 <ottf_machine_ecall_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:108
      break;
    default:
      generic_fault_handler();
f00010de:       \-> 2009                        jal     f00010e0 <ottf_breakpoint_handler>

f00010e0 <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:63
static void generic_fault_handler(void) {
f00010e0:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:64
  uint32_t mcause = ibex_mcause_read();
f00010e2:       c606                    sw      ra,12(sp)
f00010e4:       26f000ef                jal     ra,f0001b52 <ibex_mcause_read>
f00010e8:       85aa                    mv      a1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
  ottf_generic_fault_print(exception_reason[mcause & kIbexExcMax], mcause);
f00010ea:       897d                    andi    a0,a0,31
f00010ec:       050a                    slli    a0,a0,0x2
f00010ee:       00002617                auipc   a2,0x2
f00010f2:       d3e60613                addi    a2,a2,-706 # f0002e2c <exception_reason>
f00010f6:       9532                    add     a0,a0,a2
f00010f8:       4108                    lw      a0,0(a0)
f00010fa:       3715                    jal     f000101e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:66
  abort();
f00010fc:       251000ef                jal     ra,f0001b4c <abort>

f0001100 <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:141
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(void);

OT_WEAK
void ottf_software_isr(void) {
f0001100:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
  ottf_generic_fault_print("Software IRQ", ibex_mcause_read());
f0001102:       c606                    sw      ra,12(sp)
f0001104:       24f000ef                jal     ra,f0001b52 <ibex_mcause_read>
f0001108:       85aa                    mv      a1,a0
f000110a:       00002517                auipc   a0,0x2
f000110e:       b0750513                addi    a0,a0,-1273 # f0002c11 <kOttfTestConfig+0x465>
f0001112:       3731                    jal     f000101e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:143
  abort();
f0001114:       239000ef                jal     ra,f0001b4c <abort>

f0001118 <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:147
}

OT_WEAK
void ottf_timer_isr(void) {
f0001118:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
  ottf_generic_fault_print("Timer IRQ", ibex_mcause_read());
f000111a:       c606                    sw      ra,12(sp)
f000111c:       237000ef                jal     ra,f0001b52 <ibex_mcause_read>
f0001120:       85aa                    mv      a1,a0
f0001122:       00002517                auipc   a0,0x2
f0001126:       afc50513                addi    a0,a0,-1284 # f0002c1e <kOttfTestConfig+0x472>
f000112a:       3dd5                    jal     f000101e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:149
  abort();
f000112c:       221000ef                jal     ra,f0001b4c <abort>

f0001130 <ottf_flow_control_isr>:
ottf_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:153
}

OT_WEAK
bool ottf_flow_control_isr(void) { return false; }
f0001130:       4501                    li      a0,0
f0001132:       8082                    ret

f0001134 <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:156

OT_WEAK
void ottf_external_isr(void) {
f0001134:                    7179                       addi    sp,sp,-48
f0001136:                    d606                       sw      ra,44(sp)
f0001138:                    d422                       sw      s0,40(sp)
f000113a:                    d226                       sw      s1,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:159
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
f000113c:                    f0001517           auipc   a0,0xf0001
f0001140:                    f2450513           addi    a0,a0,-220 # e0002060 <ottf_plic>
f0001144:                    1010                       addi    a2,sp,32
f0001146:                    4581                       li      a1,0
f0001148:                    2a21                       jal     f0001260 <dif_rv_plic_irq_claim>
f000114a:                    00002497           auipc   s1,0x2
f000114e:                    42248493           addi    s1,s1,1058 # f000356c <kDeviceLogBypassUartAddress>
f0001152:          /-------- cd15                       beqz    a0,f000118e <ottf_external_isr+0x5a>
f0001154:          |         842a                       mv      s0,a0
f0001156:          |         4088                       lw      a0,0(s1)
f0001158:          |     /-- c911                       beqz    a0,f000116c <ottf_external_isr+0x38>
f000115a:          |     |   1000f517           auipc   a0,0x1000f
f000115e:          |     |   f6e50513           addi    a0,a0,-146 # 100c8 <_non_volatile_scratch_end+0xff900c8>
f0001162:          |     |   4585                       li      a1,1
f0001164:          |     |   8622                       mv      a2,s0
f0001166:          |     |   2a1000ef           jal     ra,f0001c06 <base_log_internal_dv>
f000116a:          |  /--|-- a829                       j       f0001184 <ottf_external_isr+0x50>
f000116c:          |  |  \-> 00002597           auipc   a1,0x2
f0001170:          |  |      c9858593           addi    a1,a1,-872 # f0002e04 <kOttfTestConfig+0x658>
f0001174:          |  |      0028                       addi    a0,sp,8
f0001176:          |  |      4651                       li      a2,20
f0001178:          |  |      364010ef           jal     ra,f00024dc <memcpy>
f000117c:          |  |      0028                       addi    a0,sp,8
f000117e:          |  |      85a2                       mv      a1,s0
f0001180:          |  |      1e5000ef           jal     ra,f0001b64 <base_log_internal_core>
f0001184:          |  \----> 6531                       lui     a0,0xc
f0001186:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000118a:          |         115000ef           jal     ra,f0001a9e <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:162

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
f000118e:          \-------> 5502                       lw      a0,32(sp)
f0001190:                    050a                       slli    a0,a0,0x2
f0001192:                    00002597           auipc   a1,0x2
f0001196:                    dc258593           addi    a1,a1,-574 # f0002f54 <top_earlgrey_plic_interrupt_for_peripheral>
f000119a:                    952e                       add     a0,a0,a1
f000119c:                    4108                       lw      a0,0(a0)
f000119e:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f00011a0:       /----------- 04b51e63           bne     a0,a1,f00011fc <ottf_external_isr+0xc8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:165
      ottf_flow_control_isr()) {
f00011a4:       |            3771                       jal     f0001130 <ottf_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f00011a6:       +----------- c939                       beqz    a0,f00011fc <ottf_external_isr+0xc8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:167
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
f00011a8:       |            5602                       lw      a2,32(sp)
f00011aa:       |            f0001517           auipc   a0,0xf0001
f00011ae:       |            eb650513           addi    a0,a0,-330 # e0002060 <ottf_plic>
f00011b2:       |            4581                       li      a1,0
f00011b4:       |            28d1                       jal     f0001288 <dif_rv_plic_irq_complete>
f00011b6:       |  /-------- cd15                       beqz    a0,f00011f2 <ottf_external_isr+0xbe>
f00011b8:       |  |         842a                       mv      s0,a0
f00011ba:       |  |         4088                       lw      a0,0(s1)
f00011bc:       |  |     /-- c911                       beqz    a0,f00011d0 <ottf_external_isr+0x9c>
f00011be:       |  |     |   1000f517           auipc   a0,0x1000f
f00011c2:       |  |     |   f1e50513           addi    a0,a0,-226 # 100dc <_non_volatile_scratch_end+0xff900dc>
f00011c6:       |  |     |   4585                       li      a1,1
f00011c8:       |  |     |   8622                       mv      a2,s0
f00011ca:       |  |     |   23d000ef           jal     ra,f0001c06 <base_log_internal_dv>
f00011ce:       |  |  /--|-- a829                       j       f00011e8 <ottf_external_isr+0xb4>
f00011d0:       |  |  |  \-> 00002597           auipc   a1,0x2
f00011d4:       |  |  |      c4858593           addi    a1,a1,-952 # f0002e18 <kOttfTestConfig+0x66c>
f00011d8:       |  |  |      0028                       addi    a0,sp,8
f00011da:       |  |  |      4651                       li      a2,20
f00011dc:       |  |  |      300010ef           jal     ra,f00024dc <memcpy>
f00011e0:       |  |  |      0028                       addi    a0,sp,8
f00011e2:       |  |  |      85a2                       mv      a1,s0
f00011e4:       |  |  |      181000ef           jal     ra,f0001b64 <base_log_internal_core>
f00011e8:       |  |  \----> 6531                       lui     a0,0xc
f00011ea:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00011ee:       |  |         0b1000ef           jal     ra,f0001a9e <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:174
    return;
  }

  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
  abort();
}
f00011f2:       |  \-------> 5492                       lw      s1,36(sp)
f00011f4:       |            5422                       lw      s0,40(sp)
f00011f6:       |            50b2                       lw      ra,44(sp)
f00011f8:       |            6145                       addi    sp,sp,48
f00011fa:       |            8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:172
  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
f00011fc:       \----------> 157000ef           jal     ra,f0001b52 <ibex_mcause_read>
f0001200:                    85aa                       mv      a1,a0
f0001202:                    00002517           auipc   a0,0x2
f0001206:                    acc50513           addi    a0,a0,-1332 # f0002cce <kOttfTestConfig+0x522>
f000120a:                    3d11                       jal     f000101e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:173
  abort();
f000120c:                    141000ef           jal     ra,f0001b4c <abort>

f0001210 <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:176

static void generic_internal_irq_handler(void) {
f0001210:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f0001212:       c606                    sw      ra,12(sp)
f0001214:       13f000ef                jal     ra,f0001b52 <ibex_mcause_read>
f0001218:       85aa                    mv      a1,a0
f000121a:       00002517                auipc   a0,0x2
f000121e:       bc850513                addi    a0,a0,-1080 # f0002de2 <kOttfTestConfig+0x636>
f0001222:       3bf5                    jal     f000101e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f0001224:       129000ef                jal     ra,f0001b4c <abort>

f0001228 <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:190
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(void);

OT_WEAK
void ottf_internal_isr(void) {
f0001228:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:191
  uint32_t mcause = ibex_mcause_read();
f000122a:              c606                     sw      ra,12(sp)
f000122c:              127000ef                 jal     ra,f0001b52 <ibex_mcause_read>
f0001230:              800005b7                 lui     a1,0x80000
f0001234:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:192
  switch ((ibex_internal_irq_t)(mcause)) {
f0001236:          /-- 00b50863                 beq     a0,a1,f0001246 <ottf_internal_isr+0x1e>
f000123a:          |   5581                     li      a1,-32
f000123c:       /--|-- 00b51863                 bne     a0,a1,f000124c <ottf_internal_isr+0x24>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:194
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler();
f0001240:       |  |   40b2                     lw      ra,12(sp)
f0001242:       |  |   0141                     addi    sp,sp,16
f0001244:       |  |   b7f1                     j       f0001210 <ottf_external_nmi_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:197
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler();
f0001246:       |  \-> 40b2                     lw      ra,12(sp)
f0001248:       |      0141                     addi    sp,sp,16
f000124a:       |      b7d9                     j       f0001210 <ottf_external_nmi_handler>
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f000124c:       \----> 107000ef                 jal     ra,f0001b52 <ibex_mcause_read>
f0001250:              85aa                     mv      a1,a0
f0001252:              00002517                 auipc   a0,0x2
f0001256:              b9050513                 addi    a0,a0,-1136 # f0002de2 <kOttfTestConfig+0x636>
f000125a:              33d1                     jal     f000101e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f000125c:              0f1000ef                 jal     ra,f0001b4c <abort>

f0001260 <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f0001260:           00153693            seqz    a3,a0
f0001264:           00b035b3            snez    a1,a1
f0001268:           8dd5                        or      a1,a1,a3
f000126a:           00163693            seqz    a3,a2
f000126e:           8ecd                        or      a3,a3,a1
f0001270:           458d                        li      a1,3
f0001272:       /-- ea89                        bnez    a3,f0001284 <dif_rv_plic_irq_claim+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
f0001274:       |   4108                        lw      a0,0(a0)
f0001276:       |   002005b7            lui     a1,0x200
f000127a:       |   0591                        addi    a1,a1,4
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f000127c:       |   952e                        add     a0,a0,a1
f000127e:       |   4108                        lw      a0,0(a0)
f0001280:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
f0001282:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
f0001284:       \-> 852e                        mv      a0,a1
f0001286:           8082                        ret

f0001288 <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
f0001288:           00153693            seqz    a3,a0
f000128c:           00b035b3            snez    a1,a1
f0001290:           8ecd                        or      a3,a3,a1
f0001292:           458d                        li      a1,3
f0001294:       /-- ea81                        bnez    a3,f00012a4 <dif_rv_plic_irq_complete+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
f0001296:       |   4108                        lw      a0,0(a0)
f0001298:       |   4581                        li      a1,0
f000129a:       |   002006b7            lui     a3,0x200
f000129e:       |   0691                        addi    a3,a3,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00012a0:       |   9536                        add     a0,a0,a3
f00012a2:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
f00012a4:       \-> 852e                        mv      a0,a1
f00012a6:           8082                        ret

f00012a8 <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
f00012a8:                    7179                       addi    sp,sp,-48
f00012aa:                    d606                       sw      ra,44(sp)
f00012ac:                    d422                       sw      s0,40(sp)
f00012ae:                    d226                       sw      s1,36(sp)
f00012b0:                    d04a                       sw      s2,32(sp)
f00012b2:                    ce4e                       sw      s3,28(sp)
f00012b4:                    cc52                       sw      s4,24(sp)
f00012b6:                    ca56                       sw      s5,20(sp)
f00012b8:                    c85a                       sw      s6,16(sp)
f00012ba:                    c65e                       sw      s7,12(sp)
f00012bc:                    c462                       sw      s8,8(sp)
f00012be:                    c266                       sw      s9,4(sp)
f00012c0:                    8abe                       mv      s5,a5
f00012c2:                    8b3a                       mv      s6,a4
f00012c4:                    89b6                       mv      s3,a3
f00012c6:                    84ae                       mv      s1,a1
f00012c8:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
f00012ca:                    00261913           slli    s2,a2,0x2
f00012ce:                    854a                       mv      a0,s2
f00012d0:                    256d                       jal     f000197a <pvPortMalloc>
f00012d2:                    5bfd                       li      s7,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
f00012d4:       /----------- 1c050463           beqz    a0,f000149c <xTaskCreate+0x1f4>
f00012d8:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
f00012da:       |            04c00513           li      a0,76
f00012de:       |            2d71                       jal     f000197a <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
f00012e0:       |  /-------- c121                       beqz    a0,f0001320 <xTaskCreate+0x78>
f00012e2:       |  |         8c2a                       mv      s8,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
f00012e4:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
f00012e6:       |  |         00890533           add     a0,s2,s0
f00012ea:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
f00012ec:       |  |  /----- cc8d                       beqz    s1,f0001326 <xTaskCreate+0x7e>
f00012ee:       |  |  |      4601                       li      a2,0
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
f00012f0:       |  |  |      034c0593           addi    a1,s8,52
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
f00012f4:       |  |  |  /-> 00c486b3           add     a3,s1,a2
f00012f8:       |  |  |  |   00068703           lb      a4,0(a3)
f00012fc:       |  |  |  |   00c587b3           add     a5,a1,a2
f0001300:       |  |  |  |   00e78023           sb      a4,0(a5)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
f0001304:       |  |  |  |   0006c683           lbu     a3,0(a3)
f0001308:       |  |  |  |   0016b693           seqz    a3,a3
f000130c:       |  |  |  |   ff160713           addi    a4,a2,-15
f0001310:       |  |  |  |   0605                       addi    a2,a2,1
f0001312:       |  |  |  |   00173713           seqz    a4,a4
f0001316:       |  |  |  |   8ed9                       or      a3,a3,a4
f0001318:       |  |  |  \-- def1                       beqz    a3,f00012f4 <xTaskCreate+0x4c>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
f000131a:       |  |  |      040c01a3           sb      zero,67(s8)
f000131e:       |  |  |  /-- a031                       j       f000132a <xTaskCreate+0x82>
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
f0001320:       |  \--|--|-> 8522                       mv      a0,s0
f0001322:       |     |  |   2de9                       jal     f00019fc <vPortFree>
f0001324:       +-----|--|-- aaa5                       j       f000149c <xTaskCreate+0x1f4>
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
f0001326:       |     \--|-> 020c0a23           sb      zero,52(s8)
f000132a:       |        \-> 4591                       li      a1,4
f000132c:       |            ff057493           andi    s1,a0,-16
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
f0001330:       |        /-- 00bb6363           bltu    s6,a1,f0001336 <xTaskCreate+0x8e>
f0001334:       |        |   4b11                       li      s6,4
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
f0001336:       |        \-> 036c2623           sw      s6,44(s8)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
f000133a:       |            004c0913           addi    s2,s8,4
f000133e:       |            854a                       mv      a0,s2
f0001340:       |            2d09                       jal     f0001952 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
f0001342:       |            018c0513           addi    a0,s8,24
f0001346:       |            2531                       jal     f0001952 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
f0001348:       |            018c2823           sw      s8,16(s8)
f000134c:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f000134e:       |            41650533           sub     a0,a0,s6
f0001352:       |            00ac2c23           sw      a0,24(s8)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
f0001356:       |            038c2223           sw      s8,36(s8)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
f000135a:       |            040c2223           sw      zero,68(s8)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
f000135e:       |            040c0423           sb      zero,72(s8)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
f0001362:       |            8526                       mv      a0,s1
f0001364:       |            85d2                       mv      a1,s4
f0001366:       |            864e                       mv      a2,s3
f0001368:       |            a34ff0ef           jal     ra,f000059c <pxPortInitialiseStack>
f000136c:       |            00ac2023           sw      a0,0(s8)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
f0001370:       |        /-- 000a8463           beqz    s5,f0001378 <xTaskCreate+0xd0>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
f0001374:       |        |   018aa023           sw      s8,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
f0001378:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
f000137c:       |            f0001a97           auipc   s5,0xf0001
f0001380:       |            cfca8a93           addi    s5,s5,-772 # e0002078 <xSchedulerRunning>
f0001384:       |            000aa503           lw      a0,0(s5)
f0001388:       |            f0001b17           auipc   s6,0xf0001
f000138c:       |            cdcb0b13           addi    s6,s6,-804 # e0002064 <pxCurrentTCB>
f0001390:       |        /-- c901                       beqz    a0,f00013a0 <xTaskCreate+0xf8>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
f0001392:       |        |   000b2503           lw      a0,0(s6)
f0001396:       |        |   416c                       lw      a1,68(a0)
f0001398:       |        |   0585                       addi    a1,a1,1
f000139a:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f000139c:       |        |   000b2503           lw      a0,0(s6)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
f00013a0:       |        \-> f0001517           auipc   a0,0xf0001
f00013a4:       |            cd450513           addi    a0,a0,-812 # e0002074 <uxCurrentNumberOfTasks>
f00013a8:       |            410c                       lw      a1,0(a0)
f00013aa:       |            0585                       addi    a1,a1,1
f00013ac:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
f00013ae:       |            000b2583           lw      a1,0(s6)
f00013b2:       |            f0001c97           auipc   s9,0xf0001
f00013b6:       |            d1ac8c93           addi    s9,s9,-742 # e00020cc <pxReadyTasksLists>
f00013ba:       |        /-- cd91                       beqz    a1,f00013d6 <xTaskCreate+0x12e>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
f00013bc:       |        |   000aa503           lw      a0,0(s5)
f00013c0:       |     /--|-- e149                       bnez    a0,f0001442 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
f00013c2:       |     |  |   000b2503           lw      a0,0(s6)
f00013c6:       |     |  |   5548                       lw      a0,44(a0)
f00013c8:       |     |  |   02cc2583           lw      a1,44(s8)
f00013cc:       |     +--|-- 06a5eb63           bltu    a1,a0,f0001442 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
f00013d0:       |     |  |   018b2023           sw      s8,0(s6)
f00013d4:       |     +--|-- a0bd                       j       f0001442 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
f00013d6:       |     |  \-> 018b2023           sw      s8,0(s6)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
f00013da:       |     |      4108                       lw      a0,0(a0)
f00013dc:       |     |      4585                       li      a1,1
f00013de:       |     +----- 06b51263           bne     a0,a1,f0001442 <xTaskCreate+0x19a>
f00013e2:       |     |      4401                       li      s0,0
f00013e4:       |     |      06400493           li      s1,100
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
f00013e8:       |     |  /-> 01940533           add     a0,s0,s9
f00013ec:       |     |  |   2b89                       jal     f000193e <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
f00013ee:       |     |  |   0451                       addi    s0,s0,20
f00013f0:       |     |  \-- fe941ce3           bne     s0,s1,f00013e8 <xTaskCreate+0x140>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
f00013f4:       |     |      f0001997           auipc   s3,0xf0001
f00013f8:       |     |      d7898993           addi    s3,s3,-648 # e000216c <xDelayedTaskList1>
f00013fc:       |     |      854e                       mv      a0,s3
f00013fe:       |     |      2381                       jal     f000193e <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
f0001400:       |     |      f0001a17           auipc   s4,0xf0001
f0001404:       |     |      d80a0a13           addi    s4,s4,-640 # e0002180 <xDelayedTaskList2>
f0001408:       |     |      8552                       mv      a0,s4
f000140a:       |     |      2b15                       jal     f000193e <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
f000140c:       |     |      f0001517           auipc   a0,0xf0001
f0001410:       |     |      d4c50513           addi    a0,a0,-692 # e0002158 <xPendingReadyList>
f0001414:       |     |      232d                       jal     f000193e <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
f0001416:       |     |      f0001517           auipc   a0,0xf0001
f000141a:       |     |      d1a50513           addi    a0,a0,-742 # e0002130 <xTasksWaitingTermination>
f000141e:       |     |      2305                       jal     f000193e <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
f0001420:       |     |      f0001517           auipc   a0,0xf0001
f0001424:       |     |      d2450513           addi    a0,a0,-732 # e0002144 <xSuspendedTaskList>
f0001428:       |     |      2b19                       jal     f000193e <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
f000142a:       |     |      f0001517           auipc   a0,0xf0001
f000142e:       |     |      c5250513           addi    a0,a0,-942 # e000207c <pxDelayedTaskList>
f0001432:       |     |      01352023           sw      s3,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
f0001436:       |     |      f0001517           auipc   a0,0xf0001
f000143a:       |     |      c4a50513           addi    a0,a0,-950 # e0002080 <pxOverflowDelayedTaskList>
f000143e:       |     |      01452023           sw      s4,0(a0)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
f0001442:       |     \----> f0001517           auipc   a0,0xf0001
f0001446:       |            c2a50513           addi    a0,a0,-982 # e000206c <uxTaskNumber>
f000144a:       |            410c                       lw      a1,0(a0)
f000144c:       |            0585                       addi    a1,a1,1
f000144e:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
f0001450:       |            02cc2503           lw      a0,44(s8)
f0001454:       |            f0001597           auipc   a1,0xf0001
f0001458:       |            c1458593           addi    a1,a1,-1004 # e0002068 <uxTopReadyPriority>
f000145c:       |            4190                       lw      a2,0(a1)
f000145e:       |            4b85                       li      s7,1
f0001460:       |            00ab96b3           sll     a3,s7,a0
f0001464:       |            8e55                       or      a2,a2,a3
f0001466:       |            c190                       sw      a2,0(a1)
f0001468:       |            45d1                       li      a1,20
f000146a:       |            02b50533           mul     a0,a0,a1
f000146e:       |            9566                       add     a0,a0,s9
f0001470:       |            414c                       lw      a1,4(a0)
f0001472:       |            00bc2423           sw      a1,8(s8)
f0001476:       |            4590                       lw      a2,8(a1)
f0001478:       |            00cc2623           sw      a2,12(s8)
f000147c:       |            4590                       lw      a2,8(a1)
f000147e:       |            01262223           sw      s2,4(a2)
f0001482:       |            0125a423           sw      s2,8(a1)
f0001486:       |            00ac2a23           sw      a0,20(s8)
f000148a:       |            410c                       lw      a1,0(a0)
f000148c:       |            0585                       addi    a1,a1,1
f000148e:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
f0001490:       |            2025                       jal     f00014b8 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
f0001492:       |            000aa503           lw      a0,0(s5)
f0001496:       +----------- c119                       beqz    a0,f000149c <xTaskCreate+0x1f4>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
f0001498:       |            000b2503           lw      a0,0(s6)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
f000149c:       \----------> 855e                       mv      a0,s7
f000149e:                    4c92                       lw      s9,4(sp)
f00014a0:                    4c22                       lw      s8,8(sp)
f00014a2:                    4bb2                       lw      s7,12(sp)
f00014a4:                    4b42                       lw      s6,16(sp)
f00014a6:                    4ad2                       lw      s5,20(sp)
f00014a8:                    4a62                       lw      s4,24(sp)
f00014aa:                    49f2                       lw      s3,28(sp)
f00014ac:                    5902                       lw      s2,32(sp)
f00014ae:                    5492                       lw      s1,36(sp)
f00014b0:                    5422                       lw      s0,40(sp)
f00014b2:                    50b2                       lw      ra,44(sp)
f00014b4:                    6145                       addi    sp,sp,48
f00014b6:                    8082                       ret

f00014b8 <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
f00014b8:              f0001517                 auipc   a0,0xf0001
f00014bc:              bc050513                 addi    a0,a0,-1088 # e0002078 <xSchedulerRunning>
f00014c0:              4108                     lw      a0,0(a0)
f00014c2:       /----- cd19                     beqz    a0,f00014e0 <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
f00014c4:       |      f0001517                 auipc   a0,0xf0001
f00014c8:       |      ba050513                 addi    a0,a0,-1120 # e0002064 <pxCurrentTCB>
f00014cc:       |      410c                     lw      a1,0(a0)
f00014ce:       |      41ec                     lw      a1,68(a1)
f00014d0:       +----- c981                     beqz    a1,f00014e0 <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
f00014d2:       |      410c                     lw      a1,0(a0)
f00014d4:       |      41f0                     lw      a2,68(a1)
f00014d6:       |      167d                     addi    a2,a2,-1
f00014d8:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
f00014da:       |      4108                     lw      a0,0(a0)
f00014dc:       |      4168                     lw      a0,68(a0)
f00014de:       |  /-- c111                     beqz    a0,f00014e2 <vTaskExitCritical+0x2a>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
f00014e0:       \--|-> 8082                     ret
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
f00014e2:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
f00014e6:              8082                     ret

f00014e8 <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
f00014e8:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
f00014ea:              c606                     sw      ra,12(sp)
f00014ec:              c422                     sw      s0,8(sp)
f00014ee:              f0001517                 auipc   a0,0xf0001
f00014f2:              b9650513                 addi    a0,a0,-1130 # e0002084 <uxSchedulerSuspended>
f00014f6:              4108                     lw      a0,0(a0)
f00014f8:          /-- c901                     beqz    a0,f0001508 <vTaskSwitchContext+0x20>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
f00014fa:          |   f0001517                 auipc   a0,0xf0001
f00014fe:          |   b8e50513                 addi    a0,a0,-1138 # e0002088 <xYieldPending>
f0001502:          |   4585                     li      a1,1
f0001504:          |   c10c                     sw      a1,0(a0)
f0001506:       /--|-- a0d9                     j       f00015cc <vTaskSwitchContext+0xe4>
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
f0001508:       |  \-> f0001517                 auipc   a0,0xf0001
f000150c:       |      b8050513                 addi    a0,a0,-1152 # e0002088 <xYieldPending>
f0001510:       |      00052023                 sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
f0001514:       |      f0001417                 auipc   s0,0xf0001
f0001518:       |      b5040413                 addi    s0,s0,-1200 # e0002064 <pxCurrentTCB>
f000151c:       |      4008                     lw      a0,0(s0)
f000151e:       |      4108                     lw      a0,0(a0)
f0001520:       |      400c                     lw      a1,0(s0)
f0001522:       |      598c                     lw      a1,48(a1)
f0001524:       |  /-- 00a5e863                 bltu    a1,a0,f0001534 <vTaskSwitchContext+0x4c>
f0001528:       |  |   4008                     lw      a0,0(s0)
f000152a:       |  |   400c                     lw      a1,0(s0)
f000152c:       |  |   03458593                 addi    a1,a1,52
f0001530:       |  |   a41ff0ef                 jal     ra,f0000f70 <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0001534:       |  \-> f0001517                 auipc   a0,0xf0001
f0001538:       |      b3450513                 addi    a0,a0,-1228 # e0002068 <uxTopReadyPriority>
f000153c:       |      4108                     lw      a0,0(a0)
f000153e:       |      00155593                 srli    a1,a0,0x1
f0001542:       |      8d4d                     or      a0,a0,a1
f0001544:       |      00255593                 srli    a1,a0,0x2
f0001548:       |      8d4d                     or      a0,a0,a1
f000154a:       |      00455593                 srli    a1,a0,0x4
f000154e:       |      8d4d                     or      a0,a0,a1
f0001550:       |      00855593                 srli    a1,a0,0x8
f0001554:       |      8d4d                     or      a0,a0,a1
f0001556:       |      01055593                 srli    a1,a0,0x10
f000155a:       |      8d4d                     or      a0,a0,a1
f000155c:       |      fff54513                 not     a0,a0
f0001560:       |      00155593                 srli    a1,a0,0x1
f0001564:       |      55555637                 lui     a2,0x55555
f0001568:       |      55560613                 addi    a2,a2,1365 # 55555555 <_ottf_size+0x554d5555>
f000156c:       |      8df1                     and     a1,a1,a2
f000156e:       |      8d0d                     sub     a0,a0,a1
f0001570:       |      333335b7                 lui     a1,0x33333
f0001574:       |      33358593                 addi    a1,a1,819 # 33333333 <_ottf_size+0x332b3333>
f0001578:       |      00b57633                 and     a2,a0,a1
f000157c:       |      8109                     srli    a0,a0,0x2
f000157e:       |      8d6d                     and     a0,a0,a1
f0001580:       |      9532                     add     a0,a0,a2
f0001582:       |      00455593                 srli    a1,a0,0x4
f0001586:       |      952e                     add     a0,a0,a1
f0001588:       |      0f0f15b7                 lui     a1,0xf0f1
f000158c:       |      f0f58593                 addi    a1,a1,-241 # f0f0f0f <_ottf_size+0xf070f0f>
f0001590:       |      8d6d                     and     a0,a0,a1
f0001592:       |      010105b7                 lui     a1,0x1010
f0001596:       |      10158593                 addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f000159a:       |      02b50533                 mul     a0,a0,a1
f000159e:       |      8161                     srli    a0,a0,0x18
f00015a0:       |      01f54513                 xori    a0,a0,31
f00015a4:       |      45d1                     li      a1,20
f00015a6:       |      02b50533                 mul     a0,a0,a1
f00015aa:       |      f0001597                 auipc   a1,0xf0001
f00015ae:       |      b2258593                 addi    a1,a1,-1246 # e00020cc <pxReadyTasksLists>
f00015b2:       |      95aa                     add     a1,a1,a0
f00015b4:       |      41c8                     lw      a0,4(a1)
f00015b6:       |      4148                     lw      a0,4(a0)
f00015b8:       |      00858613                 addi    a2,a1,8
f00015bc:       |      c1c8                     sw      a0,4(a1)
f00015be:       |  /-- 00c51563                 bne     a0,a2,f00015c8 <vTaskSwitchContext+0xe0>
f00015c2:       |  |   4148                     lw      a0,4(a0)
f00015c4:       |  |   0591                     addi    a1,a1,4
f00015c6:       |  |   c188                     sw      a0,0(a1)
f00015c8:       |  \-> 4548                     lw      a0,12(a0)
f00015ca:       |      c008                     sw      a0,0(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
f00015cc:       \----> 4422                     lw      s0,8(sp)
f00015ce:              40b2                     lw      ra,12(sp)
f00015d0:              0141                     addi    sp,sp,16
f00015d2:              8082                     ret

f00015d4 <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
f00015d4:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
f00015d6:           c606                        sw      ra,12(sp)
f00015d8:           00000517            auipc   a0,0x0
f00015dc:           06250513            addi    a0,a0,98 # f000163a <prvIdleTask>
f00015e0:           00002597            auipc   a1,0x2
f00015e4:           8d058593            addi    a1,a1,-1840 # f0002eb0 <uxTopUsedPriority+0x4>
f00015e8:           f0001797            auipc   a5,0xf0001
f00015ec:           aa478793            addi    a5,a5,-1372 # e000208c <xIdleTaskHandle>
f00015f0:           10000613            li      a2,256
f00015f4:           4681                        li      a3,0
f00015f6:           4701                        li      a4,0
f00015f8:           3945                        jal     f00012a8 <xTaskCreate>
f00015fa:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
f00015fc:       /-- 02b51763            bne     a0,a1,f000162a <vTaskStartScheduler+0x56>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
f0001600:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
f0001604:       |   f0001517            auipc   a0,0xf0001
f0001608:       |   a8c50513            addi    a0,a0,-1396 # e0002090 <xNextTaskUnblockTime>
f000160c:       |   567d                        li      a2,-1
f000160e:       |   c110                        sw      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
f0001610:       |   f0001517            auipc   a0,0xf0001
f0001614:       |   a6850513            addi    a0,a0,-1432 # e0002078 <xSchedulerRunning>
f0001618:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
f000161a:       |   f0001517            auipc   a0,0xf0001
f000161e:       |   a7a50513            addi    a0,a0,-1414 # e0002094 <xTickCount>
f0001622:       |   00052023            sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
f0001626:       |   989ff0ef            jal     ra,f0000fae <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
f000162a:       \-> 00002517            auipc   a0,0x2
f000162e:           88250513            addi    a0,a0,-1918 # f0002eac <uxTopUsedPriority>
f0001632:           4108                        lw      a0,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2115
}
f0001634:           40b2                        lw      ra,12(sp)
f0001636:           0141                        addi    sp,sp,16
f0001638:           8082                        ret

f000163a <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
f000163a:                 1101                  addi    sp,sp,-32
f000163c:                 ce06                  sw      ra,28(sp)
f000163e:                 cc22                  sw      s0,24(sp)
f0001640:                 ca26                  sw      s1,20(sp)
f0001642:                 c84a                  sw      s2,16(sp)
f0001644:                 c64e                  sw      s3,12(sp)
f0001646:                 c452                  sw      s4,8(sp)
f0001648:                 c256                  sw      s5,4(sp)
f000164a:                 f0001497              auipc   s1,0xf0001
f000164e:                 a2648493              addi    s1,s1,-1498 # e0002070 <uxDeletedTasksWaitingCleanUp>
f0001652:                 f0001917              auipc   s2,0xf0001
f0001656:                 a2690913              addi    s2,s2,-1498 # e0002078 <xSchedulerRunning>
f000165a:                 f0001997              auipc   s3,0xf0001
f000165e:                 ad698993              addi    s3,s3,-1322 # e0002130 <xTasksWaitingTermination>
f0001662:                 f0001a17              auipc   s4,0xf0001
f0001666:                 a12a0a13              addi    s4,s4,-1518 # e0002074 <uxCurrentNumberOfTasks>
f000166a:                 f0001a97              auipc   s5,0xf0001
f000166e:                 9faa8a93              addi    s5,s5,-1542 # e0002064 <pxCurrentTCB>
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
f0001672:       /-------> 4088                  lw      a0,0(s1)
f0001674:       |  /----- c129                  beqz    a0,f00016b6 <prvIdleTask+0x7c>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0001676:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f000167a:       |  |      00092503              lw      a0,0(s2)
f000167e:       |  |  /-- c901                  beqz    a0,f000168e <prvIdleTask+0x54>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0001680:       |  |  |   000aa503              lw      a0,0(s5)
f0001684:       |  |  |   416c                  lw      a1,68(a0)
f0001686:       |  |  |   0585                  addi    a1,a1,1
f0001688:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f000168a:       |  |  |   000aa503              lw      a0,0(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f000168e:       |  |  \-> 00c9a503              lw      a0,12(s3)
f0001692:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
f0001694:       |  |      00440513              addi    a0,s0,4
f0001698:       |  |      24c1                  jal     f0001958 <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
f000169a:       |  |      000a2503              lw      a0,0(s4)
f000169e:       |  |      157d                  addi    a0,a0,-1
f00016a0:       |  |      00aa2023              sw      a0,0(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
f00016a4:       |  |      4088                  lw      a0,0(s1)
f00016a6:       |  |      157d                  addi    a0,a0,-1
f00016a8:       |  |      c088                  sw      a0,0(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
f00016aa:       |  |      3539                  jal     f00014b8 <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
f00016ac:       |  |      5808                  lw      a0,48(s0)
f00016ae:       |  |      26b9                  jal     f00019fc <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
f00016b0:       |  |      8522                  mv      a0,s0
f00016b2:       |  |      26a9                  jal     f00019fc <vPortFree>
f00016b4:       +--|----- bf7d                  j       f0001672 <prvIdleTask+0x38>
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
f00016b6:       |  \----> 00000073              ecall
f00016ba:       \-------- bf65                  j       f0001672 <prvIdleTask+0x38>

f00016bc <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
f00016bc:       f0001517                auipc   a0,0xf0001
f00016c0:       9c850513                addi    a0,a0,-1592 # e0002084 <uxSchedulerSuspended>
f00016c4:       410c                    lw      a1,0(a0)
f00016c6:       0585                    addi    a1,a1,1
f00016c8:       c10c                    sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
f00016ca:       8082                    ret

f00016cc <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
f00016cc:                    1141                       addi    sp,sp,-16
f00016ce:                    c606                       sw      ra,12(sp)
f00016d0:                    c422                       sw      s0,8(sp)
f00016d2:                    c226                       sw      s1,4(sp)
f00016d4:                    c04a                       sw      s2,0(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f00016d6:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f00016da:                    f0001517           auipc   a0,0xf0001
f00016de:                    99e50513           addi    a0,a0,-1634 # e0002078 <xSchedulerRunning>
f00016e2:                    4108                       lw      a0,0(a0)
f00016e4:                /-- c911                       beqz    a0,f00016f8 <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f00016e6:                |   f0001517           auipc   a0,0xf0001
f00016ea:                |   97e50513           addi    a0,a0,-1666 # e0002064 <pxCurrentTCB>
f00016ee:                |   410c                       lw      a1,0(a0)
f00016f0:                |   41f0                       lw      a2,68(a1)
f00016f2:                |   0605                       addi    a2,a2,1
f00016f4:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f00016f6:                |   4108                       lw      a0,0(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
f00016f8:                \-> f0001517           auipc   a0,0xf0001
f00016fc:                    98c50513           addi    a0,a0,-1652 # e0002084 <uxSchedulerSuspended>
f0001700:                    410c                       lw      a1,0(a0)
f0001702:                    15fd                       addi    a1,a1,-1
f0001704:                    c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f0001706:                    4108                       lw      a0,0(a0)
f0001708:       /----------- ed65                       bnez    a0,f0001800 <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
f000170a:       |            f0001517           auipc   a0,0xf0001
f000170e:       |            96a50513           addi    a0,a0,-1686 # e0002074 <uxCurrentNumberOfTasks>
f0001712:       |            4108                       lw      a0,0(a0)
f0001714:       +----------- c575                       beqz    a0,f0001800 <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f0001716:       |            f0001517           auipc   a0,0xf0001
f000171a:       |            a4250513           addi    a0,a0,-1470 # e0002158 <xPendingReadyList>
f000171e:       |            410c                       lw      a1,0(a0)
f0001720:       |            f0001917           auipc   s2,0xf0001
f0001724:       |            96890913           addi    s2,s2,-1688 # e0002088 <xYieldPending>
f0001728:       |  /-------- cddd                       beqz    a1,f00017e6 <xTaskResumeAll+0x11a>
f000172a:       |  |         4885                       li      a7,1
f000172c:       |  |         f0001617           auipc   a2,0xf0001
f0001730:       |  |         93c60613           addi    a2,a2,-1732 # e0002068 <uxTopReadyPriority>
f0001734:       |  |         4851                       li      a6,20
f0001736:       |  |         f0001297           auipc   t0,0xf0001
f000173a:       |  |         99628293           addi    t0,t0,-1642 # e00020cc <pxReadyTasksLists>
f000173e:       |  |         f0001317           auipc   t1,0xf0001
f0001742:       |  |         92630313           addi    t1,t1,-1754 # e0002064 <pxCurrentTCB>
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0001746:       |  |  /----> 454c                       lw      a1,12(a0)
f0001748:       |  |  |      45c0                       lw      s0,12(a1)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f000174a:       |  |  |      500c                       lw      a1,32(s0)
f000174c:       |  |  |      4c58                       lw      a4,28(s0)
f000174e:       |  |  |      5404                       lw      s1,40(s0)
f0001750:       |  |  |      c70c                       sw      a1,8(a4)
f0001752:       |  |  |      5014                       lw      a3,32(s0)
f0001754:       |  |  |      c2d8                       sw      a4,4(a3)
f0001756:       |  |  |      40cc                       lw      a1,4(s1)
f0001758:       |  |  |      01840713           addi    a4,s0,24
f000175c:       |  |  |  /-- 00e59363           bne     a1,a4,f0001762 <xTaskResumeAll+0x96>
f0001760:       |  |  |  |   c0d4                       sw      a3,4(s1)
f0001762:       |  |  |  \-> 02042423           sw      zero,40(s0)
f0001766:       |  |  |      408c                       lw      a1,0(s1)
f0001768:       |  |  |      15fd                       addi    a1,a1,-1
f000176a:       |  |  |      c08c                       sw      a1,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f000176c:       |  |  |      444c                       lw      a1,12(s0)
f000176e:       |  |  |      4418                       lw      a4,8(s0)
f0001770:       |  |  |      4854                       lw      a3,20(s0)
f0001772:       |  |  |      c70c                       sw      a1,8(a4)
f0001774:       |  |  |      444c                       lw      a1,12(s0)
f0001776:       |  |  |      c1d8                       sw      a4,4(a1)
f0001778:       |  |  |      42d8                       lw      a4,4(a3)
f000177a:       |  |  |      00440493           addi    s1,s0,4
f000177e:       |  |  |  /-- 00971363           bne     a4,s1,f0001784 <xTaskResumeAll+0xb8>
f0001782:       |  |  |  |   c2cc                       sw      a1,4(a3)
f0001784:       |  |  |  \-> 428c                       lw      a1,0(a3)
f0001786:       |  |  |      15fd                       addi    a1,a1,-1
f0001788:       |  |  |      c28c                       sw      a1,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
f000178a:       |  |  |      544c                       lw      a1,44(s0)
f000178c:       |  |  |      4214                       lw      a3,0(a2)
f000178e:       |  |  |      00b89733           sll     a4,a7,a1
f0001792:       |  |  |      8ed9                       or      a3,a3,a4
f0001794:       |  |  |      c214                       sw      a3,0(a2)
f0001796:       |  |  |      030586b3           mul     a3,a1,a6
f000179a:       |  |  |      9696                       add     a3,a3,t0
f000179c:       |  |  |      42d8                       lw      a4,4(a3)
f000179e:       |  |  |      c418                       sw      a4,8(s0)
f00017a0:       |  |  |      471c                       lw      a5,8(a4)
f00017a2:       |  |  |      c45c                       sw      a5,12(s0)
f00017a4:       |  |  |      471c                       lw      a5,8(a4)
f00017a6:       |  |  |      c3c4                       sw      s1,4(a5)
f00017a8:       |  |  |      c704                       sw      s1,8(a4)
f00017aa:       |  |  |      c854                       sw      a3,20(s0)
f00017ac:       |  |  |      4298                       lw      a4,0(a3)
f00017ae:       |  |  |      0705                       addi    a4,a4,1
f00017b0:       |  |  |      c298                       sw      a4,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
f00017b2:       |  |  |      00032683           lw      a3,0(t1)
f00017b6:       |  |  |      56d4                       lw      a3,44(a3)
f00017b8:       |  |  |  /-- 00d5e463           bltu    a1,a3,f00017c0 <xTaskResumeAll+0xf4>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
f00017bc:       |  |  |  |   01192023           sw      a7,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f00017c0:       |  |  |  \-> 410c                       lw      a1,0(a0)
f00017c2:       |  |  \----- f1d1                       bnez    a1,f0001746 <xTaskResumeAll+0x7a>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f00017c4:       |  |         f0001517           auipc   a0,0xf0001
f00017c8:       |  |         8b850513           addi    a0,a0,-1864 # e000207c <pxDelayedTaskList>
f00017cc:       |  |         410c                       lw      a1,0(a0)
f00017ce:       |  |         418c                       lw      a1,0(a1)
f00017d0:       |  |  /----- c589                       beqz    a1,f00017da <xTaskResumeAll+0x10e>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f00017d2:       |  |  |      4108                       lw      a0,0(a0)
f00017d4:       |  |  |      4548                       lw      a0,12(a0)
f00017d6:       |  |  |      4108                       lw      a0,0(a0)
f00017d8:       |  |  |  /-- a011                       j       f00017dc <xTaskResumeAll+0x110>
f00017da:       |  |  \--|-> 557d                       li      a0,-1
f00017dc:       |  |     \-> f0001597           auipc   a1,0xf0001
f00017e0:       |  |         8b458593           addi    a1,a1,-1868 # e0002090 <xNextTaskUnblockTime>
f00017e4:       |  |         c188                       sw      a0,0(a1)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
f00017e6:       |  \-------> f0001417           auipc   s0,0xf0001
f00017ea:       |            8b240413           addi    s0,s0,-1870 # e0002098 <xPendedTicks>
f00017ee:       |            4004                       lw      s1,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
f00017f0:       |     /----- c491                       beqz    s1,f00017fc <xTaskResumeAll+0x130>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
f00017f2:       |     |  /-> 2839                       jal     f0001810 <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
f00017f4:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
f00017f6:       |     |  \-- fcf5                       bnez    s1,f00017f2 <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
f00017f8:       |     |      00042023           sw      zero,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
f00017fc:       |     \----> 00092503           lw      a0,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
f0001800:       \----------> 3965                       jal     f00014b8 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
f0001802:                    4501                       li      a0,0
f0001804:                    4902                       lw      s2,0(sp)
f0001806:                    4492                       lw      s1,4(sp)
f0001808:                    4422                       lw      s0,8(sp)
f000180a:                    40b2                       lw      ra,12(sp)
f000180c:                    0141                       addi    sp,sp,16
f000180e:                    8082                       ret

f0001810 <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f0001810:                          f0001517             auipc   a0,0xf0001
f0001814:                          87450513             addi    a0,a0,-1932 # e0002084 <uxSchedulerSuspended>
f0001818:                          4108                 lw      a0,0(a0)
f000181a:                      /-- c909                 beqz    a0,f000182c <xTaskIncrementTick+0x1c>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
f000181c:                      |   f0001517             auipc   a0,0xf0001
f0001820:                      |   87c50513             addi    a0,a0,-1924 # e0002098 <xPendedTicks>
f0001824:                      |   410c                 lw      a1,0(a0)
f0001826:                      |   0585                 addi    a1,a1,1
f0001828:                      |   c10c                 sw      a1,0(a0)
f000182a:       /--------------|-- aa01                 j       f000193a <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
f000182c:       |              \-> f0001517             auipc   a0,0xf0001
f0001830:       |                  86850513             addi    a0,a0,-1944 # e0002094 <xTickCount>
f0001834:       |                  410c                 lw      a1,0(a0)
f0001836:       |                  00158393             addi    t2,a1,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
f000183a:       |                  00752023             sw      t2,0(a0)
f000183e:       |                  f0001e17             auipc   t3,0xf0001
f0001842:       |                  83ee0e13             addi    t3,t3,-1986 # e000207c <pxDelayedTaskList>
f0001846:       |                  f0001817             auipc   a6,0xf0001
f000184a:       |                  84a80813             addi    a6,a6,-1974 # e0002090 <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
f000184e:       |        /-------- 02b3ff63             bgeu    t2,a1,f000188c <xTaskIncrementTick+0x7c>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
f0001852:       |        |         000e2503             lw      a0,0(t3)
f0001856:       |        |         f0001597             auipc   a1,0xf0001
f000185a:       |        |         82a58593             addi    a1,a1,-2006 # e0002080 <pxOverflowDelayedTaskList>
f000185e:       |        |         4194                 lw      a3,0(a1)
f0001860:       |        |         00de2023             sw      a3,0(t3)
f0001864:       |        |         c188                 sw      a0,0(a1)
f0001866:       |        |         f0001517             auipc   a0,0xf0001
f000186a:       |        |         83650513             addi    a0,a0,-1994 # e000209c <xNumOfOverflows>
f000186e:       |        |         410c                 lw      a1,0(a0)
f0001870:       |        |         0585                 addi    a1,a1,1
f0001872:       |        |         c10c                 sw      a1,0(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0001874:       |        |         000e2503             lw      a0,0(t3)
f0001878:       |        |         4108                 lw      a0,0(a0)
f000187a:       |        |  /----- c511                 beqz    a0,f0001886 <xTaskIncrementTick+0x76>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f000187c:       |        |  |      000e2503             lw      a0,0(t3)
f0001880:       |        |  |      4548                 lw      a0,12(a0)
f0001882:       |        |  |      4108                 lw      a0,0(a0)
f0001884:       |        |  |  /-- a011                 j       f0001888 <xTaskIncrementTick+0x78>
f0001886:       |        |  \--|-> 557d                 li      a0,-1
f0001888:       |        |     \-> 00a82023             sw      a0,0(a6)
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
f000188c:       |        \-------> 00082503             lw      a0,0(a6)
f0001890:       +----------------- 0aa3e563             bltu    t2,a0,f000193a <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0001894:       |                  000e2503             lw      a0,0(t3)
f0001898:       |                  4108                 lw      a0,0(a0)
f000189a:       |  /-------------- cd49                 beqz    a0,f0001934 <xTaskIncrementTick+0x124>
f000189c:       |  |               4885                 li      a7,1
f000189e:       |  |               f0000e97             auipc   t4,0xf0000
f00018a2:       |  |               7cae8e93             addi    t4,t4,1994 # e0002068 <uxTopReadyPriority>
f00018a6:       |  |               42d1                 li      t0,20
f00018a8:       |  |               f0001317             auipc   t1,0xf0001
f00018ac:       |  |               82430313             addi    t1,t1,-2012 # e00020cc <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00018b0:       |  |  /----------> 000e2503             lw      a0,0(t3)
f00018b4:       |  |  |            4548                 lw      a0,12(a0)
f00018b6:       |  |  |            4554                 lw      a3,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
f00018b8:       |  |  |            42c8                 lw      a0,4(a3)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
f00018ba:       |  |  |  /-------- 06a3ee63             bltu    t2,a0,f0001936 <xTaskIncrementTick+0x126>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f00018be:       |  |  |  |         46cc                 lw      a1,12(a3)
f00018c0:       |  |  |  |         469c                 lw      a5,8(a3)
f00018c2:       |  |  |  |         4ac8                 lw      a0,20(a3)
f00018c4:       |  |  |  |         c78c                 sw      a1,8(a5)
f00018c6:       |  |  |  |         46cc                 lw      a1,12(a3)
f00018c8:       |  |  |  |         c1dc                 sw      a5,4(a1)
f00018ca:       |  |  |  |         4150                 lw      a2,4(a0)
f00018cc:       |  |  |  |         00468793             addi    a5,a3,4
f00018d0:       |  |  |  |     /-- 00f61363             bne     a2,a5,f00018d6 <xTaskIncrementTick+0xc6>
f00018d4:       |  |  |  |     |   c14c                 sw      a1,4(a0)
f00018d6:       |  |  |  |     \-> 410c                 lw      a1,0(a0)
f00018d8:       |  |  |  |         15fd                 addi    a1,a1,-1
f00018da:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f00018dc:       |  |  |  |         5688                 lw      a0,40(a3)
f00018de:       |  |  |  |  /----- c10d                 beqz    a0,f0001900 <xTaskIncrementTick+0xf0>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00018e0:       |  |  |  |  |      528c                 lw      a1,32(a3)
f00018e2:       |  |  |  |  |      4ed0                 lw      a2,28(a3)
f00018e4:       |  |  |  |  |      c60c                 sw      a1,8(a2)
f00018e6:       |  |  |  |  |      528c                 lw      a1,32(a3)
f00018e8:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
f00018ea:       |  |  |  |  |      4150                 lw      a2,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f00018ec:       |  |  |  |  |      01868713             addi    a4,a3,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00018f0:       |  |  |  |  |  /-- 00e61363             bne     a2,a4,f00018f6 <xTaskIncrementTick+0xe6>
f00018f4:       |  |  |  |  |  |   c14c                 sw      a1,4(a0)
f00018f6:       |  |  |  |  |  \-> 0206a423             sw      zero,40(a3)
f00018fa:       |  |  |  |  |      410c                 lw      a1,0(a0)
f00018fc:       |  |  |  |  |      15fd                 addi    a1,a1,-1
f00018fe:       |  |  |  |  |      c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
f0001900:       |  |  |  |  \----> 56c8                 lw      a0,44(a3)
f0001902:       |  |  |  |         000ea583             lw      a1,0(t4)
f0001906:       |  |  |  |         00a89633             sll     a2,a7,a0
f000190a:       |  |  |  |         8dd1                 or      a1,a1,a2
f000190c:       |  |  |  |         00bea023             sw      a1,0(t4)
f0001910:       |  |  |  |         02550533             mul     a0,a0,t0
f0001914:       |  |  |  |         951a                 add     a0,a0,t1
f0001916:       |  |  |  |         414c                 lw      a1,4(a0)
f0001918:       |  |  |  |         c68c                 sw      a1,8(a3)
f000191a:       |  |  |  |         4590                 lw      a2,8(a1)
f000191c:       |  |  |  |         c6d0                 sw      a2,12(a3)
f000191e:       |  |  |  |         4590                 lw      a2,8(a1)
f0001920:       |  |  |  |         c25c                 sw      a5,4(a2)
f0001922:       |  |  |  |         c59c                 sw      a5,8(a1)
f0001924:       |  |  |  |         cac8                 sw      a0,20(a3)
f0001926:       |  |  |  |         410c                 lw      a1,0(a0)
f0001928:       |  |  |  |         0585                 addi    a1,a1,1
f000192a:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f000192c:       |  |  |  |         000e2503             lw      a0,0(t3)
f0001930:       |  |  |  |         4108                 lw      a0,0(a0)
f0001932:       |  |  \--|-------- fd3d                 bnez    a0,f00018b0 <xTaskIncrementTick+0xa0>
f0001934:       |  \-----|-------> 557d                 li      a0,-1
f0001936:       |        \-------> 00a82023             sw      a0,0(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
f000193a:       \----------------> 4501                 li      a0,0
f000193c:                          8082                 ret

f000193e <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f000193e:       00850593                addi    a1,a0,8
f0001942:       c14c                    sw      a1,4(a0)
f0001944:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
f0001946:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0001948:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f000194a:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
f000194c:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
f0001950:       8082                    ret

f0001952 <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
f0001952:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
f0001956:       8082                    ret

f0001958 <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0001958:           4510                        lw      a2,8(a0)
f000195a:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
f000195c:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f000195e:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
f0001960:           4510                        lw      a2,8(a0)
f0001962:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
f0001964:           41d4                        lw      a3,4(a1)
f0001966:       /-- 00a69363            bne     a3,a0,f000196c <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
f000196a:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
f000196c:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
f0001970:           4188                        lw      a0,0(a1)
f0001972:           157d                        addi    a0,a0,-1
f0001974:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
f0001976:           4188                        lw      a0,0(a1)
f0001978:           8082                        ret

f000197a <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
f000197a:                 1141                  addi    sp,sp,-16
f000197c:                 c606                  sw      ra,12(sp)
f000197e:                 c422                  sw      s0,8(sp)
f0001980:                 c226                  sw      s1,4(sp)
f0001982:                 c04a                  sw      s2,0(sp)
f0001984:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
f0001986:                 9941                  andi    a0,a0,-16
f0001988:                 0541                  addi    a0,a0,16
f000198a:                 00f47593              andi    a1,s0,15
f000198e:          /----- 00a46363              bltu    s0,a0,f0001994 <pvPortMalloc+0x1a>
f0001992:          |      4501                  li      a0,0
f0001994:          \--/-X c191                  beqz    a1,f0001998 <pvPortMalloc+0x1e>
f0001996:             |   842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
f0001998:             \-> 3315                  jal     f00016bc <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
f000199a:                 f0000517              auipc   a0,0xf0000
f000199e:                 70650513              addi    a0,a0,1798 # e00020a0 <pvPortMalloc.pucAlignedHeap>
f00019a2:                 4104                  lw      s1,0(a0)
f00019a4:             /-- c099                  beqz    s1,f00019aa <pvPortMalloc+0x30>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
f00019a6:          /--|-- e819                  bnez    s0,f00019bc <pvPortMalloc+0x42>
f00019a8:       /--|--|-- a081                  j       f00019e8 <pvPortMalloc+0x6e>
f00019aa:       |  |  \-> f0000597              auipc   a1,0xf0000
f00019ae:       |  |      7ea58593              addi    a1,a1,2026 # e0002194 <ucHeap>
f00019b2:       |  |      05c1                  addi    a1,a1,16
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
f00019b4:       |  |      ff05f493              andi    s1,a1,-16
f00019b8:       |  |      c104                  sw      s1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
f00019ba:       +--|----- c41d                  beqz    s0,f00019e8 <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
f00019bc:       |  \----> f0000517              auipc   a0,0xf0000
f00019c0:       |         6e850513              addi    a0,a0,1768 # e00020a4 <xNextFreeByte>
f00019c4:       |         00052903              lw      s2,0(a0)
f00019c8:       |         008905b3              add     a1,s2,s0
f00019cc:       |         0045d613              srli    a2,a1,0x4
f00019d0:       |         7ff63613              sltiu   a2,a2,2047
f00019d4:       |         00b936b3              sltu    a3,s2,a1
f00019d8:       |         8e75                  and     a2,a2,a3
f00019da:       +-------- c619                  beqz    a2,f00019e8 <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
f00019dc:       |         c10c                  sw      a1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
f00019de:       |         31fd                  jal     f00016cc <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
f00019e0:       |     /-- c489                  beqz    s1,f00019ea <pvPortMalloc+0x70>
f00019e2:       |     |   01248533              add     a0,s1,s2
f00019e6:       |  /--|-- a029                  j       f00019f0 <pvPortMalloc+0x76>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
f00019e8:       \--|--|-> 31d5                  jal     f00016cc <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
f00019ea:          |  \-> d48ff0ef              jal     ra,f0000f32 <vApplicationMallocFailedHook>
f00019ee:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
f00019f0:          \----> 4902                  lw      s2,0(sp)
f00019f2:                 4492                  lw      s1,4(sp)
f00019f4:                 4422                  lw      s0,8(sp)
f00019f6:                 40b2                  lw      ra,12(sp)
f00019f8:                 0141                  addi    sp,sp,16
f00019fa:                 8082                  ret

f00019fc <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
f00019fc:       8082                    ret

f00019fe <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
f00019fe:       4505                    li      a0,1
f0001a00:       8082                    ret

f0001a02 <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
f0001a02:       4505                    li      a0,1
f0001a04:       8082                    ret

f0001a06 <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
f0001a06:                 1101                  addi    sp,sp,-32
f0001a08:                 ce06                  sw      ra,28(sp)
f0001a0a:                 cc22                  sw      s0,24(sp)
f0001a0c:                 ca26                  sw      s1,20(sp)
f0001a0e:                 84ae                  mv      s1,a1
f0001a10:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
f0001a12:       /-------- ed85                  bnez    a1,f0001a4a <rand_testutils_init+0x44>
f0001a14:       |         00002517              auipc   a0,0x2
f0001a18:       |         b5850513              addi    a0,a0,-1192 # f000356c <kDeviceLogBypassUartAddress>
f0001a1c:       |         4108                  lw      a0,0(a0)
f0001a1e:       |     /-- c901                  beqz    a0,f0001a2e <rand_testutils_init+0x28>
f0001a20:       |     |   1000e517              auipc   a0,0x1000e
f0001a24:       |     |   6d050513              addi    a0,a0,1744 # 100f0 <_non_volatile_scratch_end+0xff900f0>
f0001a28:       |     |   4581                  li      a1,0
f0001a2a:       |     |   2af1                  jal     f0001c06 <base_log_internal_dv>
f0001a2c:       |  /--|-- a819                  j       f0001a42 <rand_testutils_init+0x3c>
f0001a2e:       |  |  \-> 00001597              auipc   a1,0x1
f0001a32:       |  |      51258593              addi    a1,a1,1298 # f0002f40 <uxTopUsedPriority+0x94>
f0001a36:       |  |      850a                  mv      a0,sp
f0001a38:       |  |      4651                  li      a2,20
f0001a3a:       |  |      2a3000ef              jal     ra,f00024dc <memcpy>
f0001a3e:       |  |      850a                  mv      a0,sp
f0001a40:       |  |      2215                  jal     f0001b64 <base_log_internal_core>
f0001a42:       |  \----> 6531                  lui     a0,0xc
f0001a44:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001a48:       |         2899                  jal     f0001a9e <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0001a4a:       \-------> c004                  sw      s1,0(s0)
f0001a4c:                 6561                  lui     a0,0x18
f0001a4e:                 6a050513              addi    a0,a0,1696 # 186a0 <test_status_set.kLogFields.2+0x8560>
f0001a52:                 c048                  sw      a0,4(s0)
f0001a54:                 deadc537              lui     a0,0xdeadc
f0001a58:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xeea5beef>
f0001a5c:                 c408                  sw      a0,8(s0)
f0001a5e:                 80000537              lui     a0,0x80000
f0001a62:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x8ff80057>
f0001a66:                 c448                  sw      a0,12(s0)
f0001a68:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001a6c:                 00002597              auipc   a1,0x2
f0001a70:                 ae458593              addi    a1,a1,-1308 # f0003550 <kDeviceType>
f0001a74:                 418c                  lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0001a76:                 c808                  sw      a0,16(s0)
f0001a78:                 557d                  li      a0,-1
f0001a7a:                 4609                  li      a2,2
f0001a7c:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001a7e:             /-- 00c5e463              bltu    a1,a2,f0001a86 <rand_testutils_init+0x80>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
f0001a82:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
f0001a86:             \-> 44d2                  lw      s1,20(sp)
f0001a88:                 4462                  lw      s0,24(sp)
f0001a8a:                 40f2                  lw      ra,28(sp)
f0001a8c:                 6105                  addi    sp,sp,32
f0001a8e:                 8082                  ret

f0001a90 <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
f0001a90:       /----- c581                     beqz    a1,f0001a98 <dif_rv_core_ibex_init+0x8>
f0001a92:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
f0001a94:       |      c188                     sw      a0,0(a1)
f0001a96:       |  /-- a011                     j       f0001a9a <dif_rv_core_ibex_init+0xa>
f0001a98:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
f0001a9a:          \-> 8532                     mv      a0,a2
f0001a9c:              8082                     ret

f0001a9e <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
f0001a9e:                    1101                       addi    sp,sp,-32
f0001aa0:                    ce06                       sw      ra,28(sp)
f0001aa2:                    65b1                       lui     a1,0xc
f0001aa4:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
f0001aa8:             /----- 02b50063           beq     a0,a1,f0001ac8 <test_status_set+0x2a>
f0001aac:             |      65a5                       lui     a1,0x9
f0001aae:             |      05b5                       addi    a1,a1,13
f0001ab0:          /--|----- 02b50d63           beq     a0,a1,f0001aea <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001ab4:          |  |      00002597           auipc   a1,0x2
f0001ab8:          |  |      ab458593           addi    a1,a1,-1356 # f0003568 <kDeviceTestStatusAddress>
f0001abc:          |  |      418c                       lw      a1,0(a1)
f0001abe:          |  |  /-- c191                       beqz    a1,f0001ac2 <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001ac0:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
f0001ac2:          |  |  \-> 40f2                       lw      ra,28(sp)
f0001ac4:          |  |      6105                       addi    sp,sp,32
f0001ac6:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001ac8:          |  \----> 00002517           auipc   a0,0x2
f0001acc:          |         aa450513           addi    a0,a0,-1372 # f000356c <kDeviceLogBypassUartAddress>
f0001ad0:          |         4108                       lw      a0,0(a0)
f0001ad2:          |  /----- ed0d                       bnez    a0,f0001b0c <test_status_set+0x6e>
f0001ad4:          |  |      00001597           auipc   a1,0x1
f0001ad8:          |  |      7b858593           addi    a1,a1,1976 # f000328c <top_earlgrey_plic_interrupt_for_peripheral+0x338>
f0001adc:          |  |      0028                       addi    a0,sp,8
f0001ade:          |  |      4651                       li      a2,20
f0001ae0:          |  |      1fd000ef           jal     ra,f00024dc <memcpy>
f0001ae4:          |  |      0028                       addi    a0,sp,8
f0001ae6:          |  |      28bd                       jal     f0001b64 <base_log_internal_core>
f0001ae8:          |  |  /-- a805                       j       f0001b18 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001aea:          \--|--|-> 00002517           auipc   a0,0x2
f0001aee:             |  |   a8250513           addi    a0,a0,-1406 # f000356c <kDeviceLogBypassUartAddress>
f0001af2:             |  |   4108                       lw      a0,0(a0)
f0001af4:       /-----|--|-- ed05                       bnez    a0,f0001b2c <test_status_set+0x8e>
f0001af6:       |     |  |   00001597           auipc   a1,0x1
f0001afa:       |     |  |   78258593           addi    a1,a1,1922 # f0003278 <top_earlgrey_plic_interrupt_for_peripheral+0x324>
f0001afe:       |     |  |   0028                       addi    a0,sp,8
f0001b00:       |     |  |   4651                       li      a2,20
f0001b02:       |     |  |   1db000ef           jal     ra,f00024dc <memcpy>
f0001b06:       |     |  |   0028                       addi    a0,sp,8
f0001b08:       |     |  |   28b1                       jal     f0001b64 <base_log_internal_core>
f0001b0a:       |  /--|--|-- a03d                       j       f0001b38 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001b0c:       |  |  \--|-> 1000e517           auipc   a0,0x1000e
f0001b10:       |  |     |   63450513           addi    a0,a0,1588 # 10140 <_non_volatile_scratch_end+0xff90140>
f0001b14:       |  |     |   4581                       li      a1,0
f0001b16:       |  |     |   28c5                       jal     f0001c06 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001b18:       |  |     \-> 00002517           auipc   a0,0x2
f0001b1c:       |  |         a5050513           addi    a0,a0,-1456 # f0003568 <kDeviceTestStatusAddress>
f0001b20:       |  |         4108                       lw      a0,0(a0)
f0001b22:       |  |  /----- c505                       beqz    a0,f0001b4a <test_status_set+0xac>
f0001b24:       |  |  |      65b1                       lui     a1,0xc
f0001b26:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001b2a:       |  |  |  /-- a839                       j       f0001b48 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001b2c:       \--|--|--|-> 1000e517           auipc   a0,0x1000e
f0001b30:          |  |  |   60050513           addi    a0,a0,1536 # 1012c <_non_volatile_scratch_end+0xff9012c>
f0001b34:          |  |  |   4581                       li      a1,0
f0001b36:          |  |  |   28c1                       jal     f0001c06 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001b38:          \--|--|-> 00002517           auipc   a0,0x2
f0001b3c:             |  |   a3050513           addi    a0,a0,-1488 # f0003568 <kDeviceTestStatusAddress>
f0001b40:             |  |   4108                       lw      a0,0(a0)
f0001b42:             +--|-- c501                       beqz    a0,f0001b4a <test_status_set+0xac>
f0001b44:             |  |   65a5                       lui     a1,0x9
f0001b46:             |  |   05b5                       addi    a1,a1,13
f0001b48:             |  \-> c10c                       sw      a1,0(a0)
f0001b4a:             \----> 2009                       jal     f0001b4c <abort>

f0001b4c <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
f0001b4c:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
f0001b50:       \-- bff5                        j       f0001b4c <abort>

f0001b52 <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
f0001b52:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
f0001b56:       8082                    ret

f0001b58 <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
f0001b58:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
f0001b5c:       8082                    ret

f0001b5e <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
f0001b5e:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
f0001b62:       8082                    ret

f0001b64 <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
f0001b64:              7179                     addi    sp,sp,-48
f0001b66:              c606                     sw      ra,12(sp)
f0001b68:              c422                     sw      s0,8(sp)
f0001b6a:              c226                     sw      s1,4(sp)
f0001b6c:              842a                     mv      s0,a0
f0001b6e:              d646                     sw      a7,44(sp)
f0001b70:              d442                     sw      a6,40(sp)
f0001b72:              d23e                     sw      a5,36(sp)
f0001b74:              d03a                     sw      a4,32(sp)
f0001b76:              ce36                     sw      a3,28(sp)
f0001b78:              cc32                     sw      a2,24(sp)
f0001b7a:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
f0001b7c:              4148                     lw      a0,4(a0)
f0001b7e:              800005b7                 lui     a1,0x80000
f0001b82:              fff58613                 addi    a2,a1,-1 # 7fffffff <_non_volatile_scratch_end+0x8ff7ffff>
f0001b86:              4581                     li      a1,0
f0001b88:              23f000ef                 jal     ra,f00025c6 <memchr>
f0001b8c:              4054                     lw      a3,4(s0)
f0001b8e:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
f0001b92:              02f00593                 li      a1,47
f0001b96:              8536                     mv      a0,a3
f0001b98:              2dd000ef                 jal     ra,f0002674 <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
f0001b9c:       /----- c501                     beqz    a0,f0001ba4 <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
f0001b9e:       |      00150693                 addi    a3,a0,1
f0001ba2:       |  /-- a011                     j       f0001ba6 <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
f0001ba4:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001ba6:          \-> 4008                     lw      a0,0(s0)
f0001ba8:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
f0001baa:       /----- 00a5ea63                 bltu    a1,a0,f0001bbe <base_log_internal_core+0x5a>
f0001bae:       |      050a                     slli    a0,a0,0x2
f0001bb0:       |      00001597                 auipc   a1,0x1
f0001bb4:       |      70858593                 addi    a1,a1,1800 # f00032b8 <top_earlgrey_plic_interrupt_for_peripheral+0x364>
f0001bb8:       |      952e                     add     a0,a0,a1
f0001bba:       |      410c                     lw      a1,0(a0)
f0001bbc:       |  /-- a029                     j       f0001bc6 <base_log_internal_core+0x62>
f0001bbe:       \--|-> 00001597                 auipc   a1,0x1
f0001bc2:          |   6f758593                 addi    a1,a1,1783 # f00032b5 <top_earlgrey_plic_interrupt_for_peripheral+0x361>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
f0001bc6:          \-> f0000497                 auipc   s1,0xf0000
f0001bca:              4e248493                 addi    s1,s1,1250 # e00020a8 <base_log_internal_core.global_log_counter>
f0001bce:              0004d603                 lhu     a2,0(s1)
f0001bd2:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001bd4:              00001517                 auipc   a0,0x1
f0001bd8:              6cc50513                 addi    a0,a0,1740 # f00032a0 <top_earlgrey_plic_interrupt_for_peripheral+0x34c>
f0001bdc:              2865                     jal     f0001c94 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
f0001bde:              00049503                 lh      a0,0(s1)
f0001be2:              0505                     addi    a0,a0,1
f0001be4:              00a49023                 sh      a0,0(s1)
f0001be8:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
f0001bea:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
f0001bec:              4808                     lw      a0,16(s0)
f0001bee:              084c                     addi    a1,sp,20
f0001bf0:              28d9                     jal     f0001cc6 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
f0001bf2:              00001517                 auipc   a0,0x1
f0001bf6:              bb750513                 addi    a0,a0,-1097 # f00027a9 <_text_end+0x75>
f0001bfa:              2869                     jal     f0001c94 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
f0001bfc:              4492                     lw      s1,4(sp)
f0001bfe:              4422                     lw      s0,8(sp)
f0001c00:              40b2                     lw      ra,12(sp)
f0001c02:              6145                     addi    sp,sp,48
f0001c04:              8082                     ret

f0001c06 <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
f0001c06:              1101                     addi    sp,sp,-32
f0001c08:              ce46                     sw      a7,28(sp)
f0001c0a:              cc42                     sw      a6,24(sp)
f0001c0c:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
f0001c0e:              00002797                 auipc   a5,0x2
f0001c12:              95e78793                 addi    a5,a5,-1698 # f000356c <kDeviceLogBypassUartAddress>
f0001c16:              439c                     lw      a5,0(a5)
f0001c18:              c83a                     sw      a4,16(sp)
f0001c1a:              c636                     sw      a3,12(sp)
f0001c1c:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001c1e:              c388                     sw      a0,0(a5)
f0001c20:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
f0001c22:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001c24:       /----- c989                     beqz    a1,f0001c36 <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
f0001c26:       |  /-> 4512                     lw      a0,4(sp)
f0001c28:       |  |   00450613                 addi    a2,a0,4
f0001c2c:       |  |   c232                     sw      a2,4(sp)
f0001c2e:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001c30:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001c32:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
f0001c34:       |  \-- f9ed                     bnez    a1,f0001c26 <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
f0001c36:       \----> 6105                     addi    sp,sp,32
f0001c38:              8082                     ret

f0001c3a <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
f0001c3a:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
f0001c3c:       8082                    ret

f0001c3e <base_uart_stdout>:
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:79
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
f0001c3e:       f0000597                auipc   a1,0xf0000
f0001c42:       46e58593                addi    a1,a1,1134 # e00020ac <base_stdout>
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:66
  base_stdout = out;
f0001c46:       c188                    sw      a0,0(a1)
f0001c48:       00000517                auipc   a0,0x0
f0001c4c:       00c50513                addi    a0,a0,12 # f0001c54 <base_dev_uart>
f0001c50:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:82
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
f0001c52:       8082                    ret

f0001c54 <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:69
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
f0001c54:                 1101                  addi    sp,sp,-32
f0001c56:                 ce06                  sw      ra,28(sp)
f0001c58:                 cc22                  sw      s0,24(sp)
f0001c5a:                 ca26                  sw      s1,20(sp)
f0001c5c:                 c84a                  sw      s2,16(sp)
f0001c5e:                 c64e                  sw      s3,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001c60:       /-------- c20d                  beqz    a2,f0001c82 <base_dev_uart+0x2e>
f0001c62:       |         8432                  mv      s0,a2
f0001c64:       |         892e                  mv      s2,a1
f0001c66:       |         89aa                  mv      s3,a0
f0001c68:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:72
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
f0001c6a:       |  /----> 00990533              add     a0,s2,s1
f0001c6e:       |  |      00054583              lbu     a1,0(a0)
f0001c72:       |  |      854e                  mv      a0,s3
f0001c74:       |  |      2f59                  jal     f000240a <dif_uart_byte_send_polled>
f0001c76:       |  |  /-- e519                  bnez    a0,f0001c84 <base_dev_uart+0x30>
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001c78:       |  |  |   0485                  addi    s1,s1,1
f0001c7a:       |  \--|-- fe9418e3              bne     s0,s1,f0001c6a <base_dev_uart+0x16>
f0001c7e:       |     |   84a2                  mv      s1,s0
f0001c80:       |     +-- a011                  j       f0001c84 <base_dev_uart+0x30>
f0001c82:       \-----|-> 4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:77
}
f0001c84:             \-> 8526                  mv      a0,s1
f0001c86:                 49b2                  lw      s3,12(sp)
f0001c88:                 4942                  lw      s2,16(sp)
f0001c8a:                 44d2                  lw      s1,20(sp)
f0001c8c:                 4462                  lw      s0,24(sp)
f0001c8e:                 40f2                  lw      ra,28(sp)
f0001c90:                 6105                  addi    sp,sp,32
f0001c92:                 8082                  ret

f0001c94 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84

size_t base_printf(const char *format, ...) {
f0001c94:       7179                    addi    sp,sp,-48
f0001c96:       c606                    sw      ra,12(sp)
f0001c98:       d646                    sw      a7,44(sp)
f0001c9a:       d442                    sw      a6,40(sp)
f0001c9c:       d23e                    sw      a5,36(sp)
f0001c9e:       d03a                    sw      a4,32(sp)
f0001ca0:       ce36                    sw      a3,28(sp)
f0001ca2:       cc32                    sw      a2,24(sp)
f0001ca4:       ca2e                    sw      a1,20(sp)
f0001ca6:       f0000597                auipc   a1,0xf0000
f0001caa:       40658593                addi    a1,a1,1030 # e00020ac <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
f0001cae:       4190                    lw      a2,0(a1)
f0001cb0:       41cc                    lw      a1,4(a1)
f0001cb2:       872a                    mv      a4,a0
f0001cb4:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
f0001cb6:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001cb8:       0854                    addi    a3,sp,20
f0001cba:       8532                    mv      a0,a2
f0001cbc:       863a                    mv      a2,a4
f0001cbe:       200d                    jal     f0001ce0 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
f0001cc0:       40b2                    lw      ra,12(sp)
f0001cc2:       6145                    addi    sp,sp,48
f0001cc4:       8082                    ret

f0001cc6 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
f0001cc6:       f0000697                auipc   a3,0xf0000
f0001cca:       3e668693                addi    a3,a3,998 # e00020ac <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001cce:       4290                    lw      a2,0(a3)
f0001cd0:       42d4                    lw      a3,4(a3)
f0001cd2:       872e                    mv      a4,a1
f0001cd4:       87aa                    mv      a5,a0
f0001cd6:       8532                    mv      a0,a2
f0001cd8:       85b6                    mv      a1,a3
f0001cda:       863e                    mv      a2,a5
f0001cdc:       86ba                    mv      a3,a4
f0001cde:       a009                    j       f0001ce0 <base_vfprintf>

f0001ce0 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
f0001ce0:                                                                    715d                       addi    sp,sp,-80
f0001ce2:                                                                    c686                       sw      ra,76(sp)
f0001ce4:                                                                    c4a2                       sw      s0,72(sp)
f0001ce6:                                                                    c2a6                       sw      s1,68(sp)
f0001ce8:                                                                    c0ca                       sw      s2,64(sp)
f0001cea:                                                                    de4e                       sw      s3,60(sp)
f0001cec:                                                                    dc52                       sw      s4,56(sp)
f0001cee:                                                                    da56                       sw      s5,52(sp)
f0001cf0:                                                                    d85a                       sw      s6,48(sp)
f0001cf2:                                                                    d65e                       sw      s7,44(sp)
f0001cf4:                                                                    d462                       sw      s8,40(sp)
f0001cf6:                                                                    d266                       sw      s9,36(sp)
f0001cf8:                                                                    d06a                       sw      s10,32(sp)
f0001cfa:                                                                    ce6e                       sw      s11,28(sp)
f0001cfc:                                                                    8cb2                       mv      s9,a2
f0001cfe:                                                                    892a                       mv      s2,a0
f0001d00:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
f0001d02:                                                                /-- c199                       beqz    a1,f0001d08 <base_vfprintf+0x28>
f0001d04:                                                                |   89ae                       mv      s3,a1
f0001d06:                                                             /--|-- a029                       j       f0001d10 <base_vfprintf+0x30>
f0001d08:                                                             |  \-> 00000997           auipc   s3,0x0
f0001d0c:                                                             |      f3298993           addi    s3,s3,-206 # f0001c3a <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
f0001d10:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
f0001d12:                                                                    000cc503           lbu     a0,0(s9)
f0001d16:       /----------------------------------------------------------- 42050563           beqz    a0,f0002140 <base_vfprintf+0x460>
f0001d1a:       |                                                            4a81                       li      s5,0
f0001d1c:       |                                                            02500c13           li      s8,37
f0001d20:       |                                                            4d25                       li      s10,9
f0001d22:       |                                                            4a29                       li      s4,10
f0001d24:       |                                                            658d                       lui     a1,0x3
f0001d26:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_manifest_code_end+0x4ee>
f0001d2a:       |                                                            c02e                       sw      a1,0(sp)
f0001d2c:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
f0001d2e:       |        |                                               /-> 0ff57413           andi    s0,a0,255
f0001d32:       |        |                                            /--|-- 01840963           beq     s0,s8,f0001d44 <base_vfprintf+0x64>
f0001d36:       |        |                                            +--|-- c419                       beqz    s0,f0001d44 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
f0001d38:       |        |                                            |  |   009c8533           add     a0,s9,s1
f0001d3c:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
f0001d40:       |        |                                            |  |   0485                       addi    s1,s1,1
f0001d42:       |        |                                            |  \-- b7f5                       j       f0001d2e <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
f0001d44:       |        |                                            \--/-X c491                       beqz    s1,f0001d50 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
f0001d46:       |        |                                               |   854a                       mv      a0,s2
f0001d48:       |        |                                               |   85e6                       mv      a1,s9
f0001d4a:       |        |                                               |   8626                       mv      a2,s1
f0001d4c:       |        |                                               |   9982                       jalr    s3
f0001d4e:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
f0001d50:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,f0002142 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
f0001d54:       |  |     |                                                   009c8533           add     a0,s9,s1
f0001d58:       |  |     |                                                   00154603           lbu     a2,1(a0)
f0001d5c:       |  |     |                                                   02100713           li      a4,33
f0001d60:       |  |     |                                            /----- 00e61863           bne     a2,a4,f0001d70 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001d64:       |  |     |                                            |      00254583           lbu     a1,2(a0)
f0001d68:       |  |     |                                            |      00250693           addi    a3,a0,2
f0001d6c:       |  |     |                                            |      4b05                       li      s6,1
f0001d6e:       |  |     |                                            |  /-- a029                       j       f0001d78 <base_vfprintf+0x98>
f0001d70:       |  |     |                                            \--|-> 4b01                       li      s6,0
f0001d72:       |  |     |                                               |   00150693           addi    a3,a0,1
f0001d76:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001d78:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,f000212e <base_vfprintf+0x44e>
f0001d7c:       |  |  |  |                                                   4481                       li      s1,0
f0001d7e:       |  |  |  |                                                   4b81                       li      s7,0
f0001d80:       |  |  |  |                                                   4501                       li      a0,0
f0001d82:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
f0001d86:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
f0001d8a:       |  |  |  |                                                   00168c93           addi    s9,a3,1
f0001d8e:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
f0001d92:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001d96:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
f0001d9a:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,f0001dd0 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
f0001d9e:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
f0001da2:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,f0001db8 <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
f0001da4:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
f0001da8:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
f0001daa:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001dae:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001db2:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
f0001db4:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,f0001d8e <base_vfprintf+0xae>
f0001db6:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       f000212e <base_vfprintf+0x44e>
f0001db8:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
f0001dbc:       |  |  |  |                                   |     |  |      03000613           li      a2,48
f0001dc0:       |  |  |  |                                   |     |  |      02000513           li      a0,32
f0001dc4:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,f0001da4 <base_vfprintf+0xc4>
f0001dc8:       |  |  |  |                                   |     |         03000513           li      a0,48
f0001dcc:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
f0001dce:       |  |  |  |                                   |     \-------- b7c5                       j       f0001dae <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
f0001dd0:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,f0001dd8 <base_vfprintf+0xf8>
f0001dd2:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,f0001de0 <base_vfprintf+0x100>
f0001dd6:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       f0002162 <base_vfprintf+0x482>
f0001dd8:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
f0001ddc:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,f0002162 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001de0:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
f0001de4:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,f0001e36 <base_vfprintf+0x156>
f0001de8:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
f0001dea:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
f0001dee:       |  |  |  |  |                                         |      4de58593           addi    a1,a1,1246 # f00032c8 <top_earlgrey_plic_interrupt_for_peripheral+0x374>
f0001df2:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
f0001df4:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
f0001df6:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
f0001df8:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,f00020b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
f0001dfc:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
f0001dfe:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
f0001e02:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
f0001e04:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
f0001e08:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,f0001e20 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
f0001e0c:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
f0001e10:       |  |  |  |  |  |                                      |  |   55358593           addi    a1,a1,1363 # f000335f <top_earlgrey_plic_interrupt_for_peripheral+0x40b>
f0001e14:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
f0001e16:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
f0001e18:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
f0001e1a:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
f0001e1c:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001e20:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
f0001e24:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
f0001e28:       |  |  |  |  |  |                                      |      54e80813           addi    a6,a6,1358 # f0003372 <kDigitsLow>
f0001e2c:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
f0001e2e:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
f0001e30:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
f0001e32:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
f0001e34:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       f000207c <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001e36:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
f0001e3a:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,f0001e74 <base_vfprintf+0x194>
f0001e3e:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,f00020b0 <base_vfprintf+0x3d0>
f0001e42:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,f00020b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
f0001e46:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
f0001e4a:       |  |  |  |  |  |        |                                |   51758593           addi    a1,a1,1303 # f000335d <top_earlgrey_plic_interrupt_for_peripheral+0x409>
f0001e4e:       |  |  |  |  |  |        |                             /--|-- a851                       j       f0001ee2 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
f0001e50:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,f0001e74 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
f0001e54:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
f0001e56:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
f0001e5a:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001e5c:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
f0001e5e:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
f0001e62:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001e64:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001e66:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
f0001e6a:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
f0001e6e:       |  |  |  |  |  |        |                             |  |   53588893           addi    a7,a7,1333 # f000339f <kDigitsHigh>
f0001e72:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       f0002056 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
f0001e74:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
f0001e76:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
f0001e7a:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
f0001e7c:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
f0001e7e:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
f0001e82:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
f0001e86:       |  |  |  |  |  |        |           |                 |      51d80813           addi    a6,a6,1309 # f000339f <kDigitsHigh>
f0001e8a:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       f0002076 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
f0001e8c:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,f00020b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
f0001e90:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
f0001e92:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
f0001e96:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001e98:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
f0001e9a:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
f0001e9e:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001ea0:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001ea2:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
f0001ea6:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
f0001eaa:       |  |  |  |  |  |        |        |  |                 |      4f988893           addi    a7,a7,1273 # f000339f <kDigitsHigh>
f0001eae:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       f00020a4 <base_vfprintf+0x3c4>
f0001eb0:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
f0001eb2:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
f0001eb6:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
f0001eb8:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
f0001eba:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,f00020ca <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
f0001ebe:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,f0002122 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
f0001ec2:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
f0001ec6:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4a258593           addi    a1,a1,1186 # f0003364 <top_earlgrey_plic_interrupt_for_peripheral+0x410>
f0001eca:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
f0001ecc:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       f00020ba <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
f0001ece:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,f00020b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
f0001ed2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
f0001ed4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
f0001ed8:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
f0001eda:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
f0001edc:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
f0001ee0:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
f0001ee2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
f0001ee4:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       f00020ba <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
f0001ee6:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,f00020b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
f0001eea:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
f0001eec:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
f0001ef0:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
f0001ef2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
f0001ef4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
f0001ef8:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
f0001efc:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a80813           addi    a6,a6,1146 # f0003372 <kDigitsLow>
f0001f00:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
f0001f02:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       f0002078 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
f0001f04:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,f00020b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001f08:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
f0001f0c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     45958593           addi    a1,a1,1113 # f0003361 <top_earlgrey_plic_interrupt_for_peripheral+0x40d>
f0001f10:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
f0001f12:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001f14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
f0001f16:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
f0001f18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
f0001f1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
f0001f1e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001f20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
f0001f24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
f0001f28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     44e80813           addi    a6,a6,1102 # f0003372 <kDigitsLow>
f0001f2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
f0001f2e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
f0001f32:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
f0001f34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001f36:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
f0001f38:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     f0002252 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
f0001f3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
f0001f3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       f00020c0 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
f0001f40:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
f0001f42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
f0001f46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
f0001f48:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
f0001f4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
f0001f4c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
f0001f50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
f0001f54:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001f56:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
f0001f58:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
f0001f5a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
f0001f5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     f00022d0 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
f0001f60:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001f62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001f64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
f0001f68:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
f0001f6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001f6e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
f0001f70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,f0001f68 <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001f72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
f0001f76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f0001f7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3f358593           addi    a1,a1,1011 # f0003369 <top_earlgrey_plic_interrupt_for_peripheral+0x415>
f0001f7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001f80:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001f82:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001f84:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001f86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
f0001f8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001f8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001f8e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f0001f92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f0001f96:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3d858593           addi    a1,a1,984 # f000336a <top_earlgrey_plic_interrupt_for_peripheral+0x416>
f0001f9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001f9c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
f0001f9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001fa0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
f0001fa2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f0001fa6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3b258593           addi    a1,a1,946 # f0003354 <top_earlgrey_plic_interrupt_for_peripheral+0x400>
f0001faa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
f0001fac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001fae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001fb0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
f0001fb4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,f00020da <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
f0001fb8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
f0001fbc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               3b458593           addi    a1,a1,948 # f000336c <top_earlgrey_plic_interrupt_for_peripheral+0x418>
f0001fc0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001fc2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001fc4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001fc6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001fca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
f0001fcc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
f0001fce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001fd0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001fd2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001fd4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001fd6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
f0001fda:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               39c80813           addi    a6,a6,924 # f0003372 <kDigitsLow>
f0001fde:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
f0001fe0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001fe2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
f0001fe4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
f0001fe6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
f0001fe8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     f0002252 <write_digits>
f0001fea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
f0001fec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
f0001ff0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               38258593           addi    a1,a1,898 # f000336e <top_earlgrey_plic_interrupt_for_peripheral+0x41a>
f0001ff4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001ff6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001ff8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001ffa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
f0001ffc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       f00020f4 <base_vfprintf+0x414>
f0001ffe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
f0002000:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
f0002004:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
f0002006:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,f000210c <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
f000200a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f000200c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
f0002010:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0002012:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
f0002014:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       f00020ba <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
f0002016:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,f00020b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
f000201a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
f000201c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
f0002020:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0002022:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0002024:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
f0002028:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
f000202c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         34a80813           addi    a6,a6,842 # f0003372 <kDigitsLow>
f0002030:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
f0002032:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       f0002078 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
f0002034:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,f0002060 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
f0002038:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
f000203a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
f000203e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0002040:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
f0002042:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
f0002046:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0002048:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f000204a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
f000204e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
f0002052:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   32488893           addi    a7,a7,804 # f0003372 <kDigitsLow>
f0002056:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
f0002058:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
f000205a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
f000205c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
f000205e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       f00020ac <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
f0002060:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
f0002062:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
f0002066:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
f0002068:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
f000206a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
f000206e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
f0002072:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      30480813           addi    a6,a6,772 # f0003372 <kDigitsLow>
f0002076:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
f0002078:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
f000207a:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
f000207c:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
f000207e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     f0002252 <write_digits>
f0002080:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       f00020be <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
f0002082:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,f00020b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
f0002086:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
f0002088:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
f000208c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f000208e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
f0002090:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
f0002094:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0002096:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0002098:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
f000209c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
f00020a0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   2d688893           addi    a7,a7,726 # f0003372 <kDigitsLow>
f00020a4:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
f00020a6:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
f00020a8:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
f00020aa:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
f00020ac:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     f000216e <hex_dump>
f00020ae:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       f00020be <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
f00020b0:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
f00020b4:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   2ff58593           addi    a1,a1,767 # f00033af <kUnknownSpec>
f00020b8:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
f00020ba:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
f00020bc:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
f00020be:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
f00020c0:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
f00020c4:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,f0001d2c <base_vfprintf+0x4c>
f00020c8:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       f0002142 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
f00020ca:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
f00020ce:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
f00020d2:       |  |  |     |     |  |                 |  |  |  |  |         2a480813           addi    a6,a6,676 # f0003372 <kDigitsLow>
f00020d6:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
f00020d8:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       f0002078 <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f00020da:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
f00020dc:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
f00020e0:       |  |  |     |     |  |                    |     |  |         29680813           addi    a6,a6,662 # f0003372 <kDigitsLow>
f00020e4:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
f00020e6:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
f00020e8:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
f00020ea:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
f00020ec:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
f00020ee:       |  |  |     |     |  |                    |     |  |         2295                       jal     f0002252 <write_digits>
f00020f0:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
f00020f4:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
f00020f8:       |  |  |     |     |  |                    |     |            27c58593           addi    a1,a1,636 # f0003370 <top_earlgrey_plic_interrupt_for_peripheral+0x41c>
f00020fc:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
f00020fe:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
f0002100:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
f0002102:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
f0002106:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
f000210a:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       f00020c0 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f000210c:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
f000210e:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0002110:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
f0002114:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
f0002118:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f000211a:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,f0002110 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
f000211c:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
f0002120:       |  |  |     |     |  +-------------------------------------- bf69                       j       f00020ba <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
f0002122:       |  |  |     |     \--|-------------------------------------> 00000597           auipc   a1,0x0
f0002126:       |  |  |     |        |                                       7bd58593           addi    a1,a1,1981 # f00028df <kOttfTestConfig+0x133>
f000212a:       |  |  |     |        |                                       4615                       li      a2,5
f000212c:       |  |  |     |        \-------------------------------------- b779                       j       f00020ba <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
f000212e:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
f0002132:       |  |        |                                                25458593           addi    a1,a1,596 # f0003382 <kErrorNul>
f0002136:       |  |        |                                                4645                       li      a2,17
f0002138:       |  |        |                                            /-> 854a                       mv      a0,s2
f000213a:       |  |        |                                            |   9982                       jalr    s3
f000213c:       |  |        |                                            |   9aaa                       add     s5,s5,a0
f000213e:       |  +--------|--------------------------------------------|-- a011                       j       f0002142 <base_vfprintf+0x462>
f0002140:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
f0002142:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
f0002144:                   |                                            |   4df2                       lw      s11,28(sp)
f0002146:                   |                                            |   5d02                       lw      s10,32(sp)
f0002148:                   |                                            |   5c92                       lw      s9,36(sp)
f000214a:                   |                                            |   5c22                       lw      s8,40(sp)
f000214c:                   |                                            |   5bb2                       lw      s7,44(sp)
f000214e:                   |                                            |   5b42                       lw      s6,48(sp)
f0002150:                   |                                            |   5ad2                       lw      s5,52(sp)
f0002152:                   |                                            |   5a62                       lw      s4,56(sp)
f0002154:                   |                                            |   59f2                       lw      s3,60(sp)
f0002156:                   |                                            |   4906                       lw      s2,64(sp)
f0002158:                   |                                            |   4496                       lw      s1,68(sp)
f000215a:                   |                                            |   4426                       lw      s0,72(sp)
f000215c:                   |                                            |   40b6                       lw      ra,76(sp)
f000215e:                   |                                            |   6161                       addi    sp,sp,80
f0002160:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
f0002162:                   \--------------------------------------------|-> 00001597           auipc   a1,0x1
f0002166:                                                                |   23158593           addi    a1,a1,561 # f0003393 <kErrorTooWide>
f000216a:                                                                |   4631                       li      a2,12
f000216c:                                                                \-- b7f1                       j       f0002138 <base_vfprintf+0x458>

f000216e <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
f000216e:                    715d                       addi    sp,sp,-80
f0002170:                    c686                       sw      ra,76(sp)
f0002172:                    c4a2                       sw      s0,72(sp)
f0002174:                    c2a6                       sw      s1,68(sp)
f0002176:                    c0ca                       sw      s2,64(sp)
f0002178:                    de4e                       sw      s3,60(sp)
f000217a:                    dc52                       sw      s4,56(sp)
f000217c:                    da56                       sw      s5,52(sp)
f000217e:                    d85a                       sw      s6,48(sp)
f0002180:                    d65e                       sw      s7,44(sp)
f0002182:                    d462                       sw      s8,40(sp)
f0002184:                    d266                       sw      s9,36(sp)
f0002186:                    d06a                       sw      s10,32(sp)
f0002188:                    8bc6                       mv      s7,a7
f000218a:                    8a42                       mv      s4,a6
f000218c:                    8b36                       mv      s6,a3
f000218e:                    8ab2                       mv      s5,a2
f0002190:                    892e                       mv      s2,a1
f0002192:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
f0002194:          /-------- 02e6fc63           bgeu    a3,a4,f00021cc <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
f0002198:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
f000219c:          |         850a                       mv      a0,sp
f000219e:          |         02000613           li      a2,32
f00021a2:          |         85be                       mv      a1,a5
f00021a4:          |         26c1                       jal     f0002564 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f00021a6:          +-------- c09d                       beqz    s1,f00021cc <hex_dump+0x5e>
f00021a8:          |         4c01                       li      s8,0
f00021aa:          |  /----> 02000513           li      a0,32
f00021ae:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
f00021b0:          |  |  /-- 00a4e463           bltu    s1,a0,f00021b8 <hex_dump+0x4a>
f00021b4:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f00021b8:          |  |  \-> 858a                       mv      a1,sp
f00021ba:          |  |      854e                       mv      a0,s3
f00021bc:          |  |      8622                       mv      a2,s0
f00021be:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
f00021c0:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f00021c2:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f00021c4:          |  \----- f0fd                       bnez    s1,f00021aa <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f00021c6:          |     /-- 000b1663           bnez    s6,f00021d2 <hex_dump+0x64>
f00021ca:       /--|-----|-- a0ad                       j       f0002234 <hex_dump+0xc6>
f00021cc:       |  \-----|-> 4c01                       li      s8,0
f00021ce:       +--------|-- 060b0363           beqz    s6,f0002234 <hex_dump+0xc6>
f00021d2:       |        \-> 4401                       li      s0,0
f00021d4:       |            4601                       li      a2,0
f00021d6:       |            fffb0493           addi    s1,s6,-1
f00021da:       |            8b0a                       mv      s6,sp
f00021dc:       |            02000c93           li      s9,32
f00021e0:       |            5d7d                       li      s10,-1
f00021e2:       |     /----> 8526                       mv      a0,s1
f00021e4:       |     |  /-- 000a1363           bnez    s4,f00021ea <hex_dump+0x7c>
f00021e8:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
f00021ea:       |     |  \-> 9556                       add     a0,a0,s5
f00021ec:       |     |      00054503           lbu     a0,0(a0)
f00021f0:       |     |      00455593           srli    a1,a0,0x4
f00021f4:       |     |      95de                       add     a1,a1,s7
f00021f6:       |     |      00058583           lb      a1,0(a1)
f00021fa:       |     |      00cb06b3           add     a3,s6,a2
f00021fe:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0002202:       |     |      893d                       andi    a0,a0,15
f0002204:       |     |      955e                       add     a0,a0,s7
f0002206:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
f000220a:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f000220c:       |     |      00a680a3           sb      a0,1(a3)
f0002210:       |     |  /-- 01961963           bne     a2,s9,f0002222 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
f0002214:       |     |  |   858a                       mv      a1,sp
f0002216:       |     |  |   02000613           li      a2,32
f000221a:       |     |  |   854e                       mv      a0,s3
f000221c:       |     |  |   9902                       jalr    s2
f000221e:       |     |  |   4601                       li      a2,0
f0002220:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0002222:       |     |  \-> 14fd                       addi    s1,s1,-1
f0002224:       |     |      0405                       addi    s0,s0,1
f0002226:       |     \----- fba49ee3           bne     s1,s10,f00021e2 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
f000222a:       +----------- c609                       beqz    a2,f0002234 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
f000222c:       |            858a                       mv      a1,sp
f000222e:       |            854e                       mv      a0,s3
f0002230:       |            9902                       jalr    s2
f0002232:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
f0002234:       \----------> 8562                       mv      a0,s8
f0002236:                    5d02                       lw      s10,32(sp)
f0002238:                    5c92                       lw      s9,36(sp)
f000223a:                    5c22                       lw      s8,40(sp)
f000223c:                    5bb2                       lw      s7,44(sp)
f000223e:                    5b42                       lw      s6,48(sp)
f0002240:                    5ad2                       lw      s5,52(sp)
f0002242:                    5a62                       lw      s4,56(sp)
f0002244:                    59f2                       lw      s3,60(sp)
f0002246:                    4906                       lw      s2,64(sp)
f0002248:                    4496                       lw      s1,68(sp)
f000224a:                    4426                       lw      s0,72(sp)
f000224c:                    40b6                       lw      ra,76(sp)
f000224e:                    6161                       addi    sp,sp,80
f0002250:                    8082                       ret

f0002252 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
f0002252:              7179                     addi    sp,sp,-48
f0002254:              d606                     sw      ra,44(sp)
f0002256:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
f0002258:       /----- ca05                     beqz    a2,f0002288 <write_digits+0x36>
f000225a:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f000225c:       |      02b10293                 addi    t0,sp,43
f0002260:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
f0002262:       |  |   02f65633                 divu    a2,a2,a5
f0002266:       |  |   02f605b3                 mul     a1,a2,a5
f000226a:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
f000226e:       |  |   95c2                     add     a1,a1,a6
f0002270:       |  |   00058e03                 lb      t3,0(a1)
f0002274:       |  |   007285b3                 add     a1,t0,t2
f0002278:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f000227c:       |  |   13fd                     addi    t2,t2,-1
f000227e:       |  \-- fef371e3                 bgeu    t1,a5,f0002260 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0002282:       |      40700633                 neg     a2,t2
f0002286:       |  /-- a031                     j       f0002292 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
f0002288:       \--|-> 00080583                 lb      a1,0(a6)
f000228c:          |   02b105a3                 sb      a1,43(sp)
f0002290:          |   4605                     li      a2,1
f0002292:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0002294:          /-- c291                     beqz    a3,f0002298 <write_digits+0x46>
f0002296:          |   85b6                     mv      a1,a3
f0002298:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
f000229c:          /-- 00d5e463                 bltu    a1,a3,f00022a4 <write_digits+0x52>
f00022a0:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f00022a4:       /--\-X 00b67e63                 bgeu    a2,a1,f00022c0 <write_digits+0x6e>
f00022a8:       |      40c586b3                 sub     a3,a1,a2
f00022ac:       |      007c                     addi    a5,sp,12
f00022ae:       |      40c78633                 sub     a2,a5,a2
f00022b2:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
f00022b4:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f00022b8:       |  |   16fd                     addi    a3,a3,-1
f00022ba:       |  |   167d                     addi    a2,a2,-1
f00022bc:       |  \-- fee5                     bnez    a3,f00022b4 <write_digits+0x62>
f00022be:       |      862e                     mv      a2,a1
f00022c0:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
f00022c2:              8d91                     sub     a1,a1,a2
f00022c4:              02058593                 addi    a1,a1,32
f00022c8:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
f00022ca:              50b2                     lw      ra,44(sp)
f00022cc:              6145                     addi    sp,sp,48
f00022ce:              8082                     ret

f00022d0 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
f00022d0:              00052813                 slti    a6,a0,0
f00022d4:              41f55793                 srai    a5,a0,0x1f
f00022d8:              8fe9                     and     a5,a5,a0
f00022da:              8bfd                     andi    a5,a5,31
f00022dc:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
f00022e0:              00e87833                 and     a6,a6,a4
f00022e4:              02000713                 li      a4,32
f00022e8:          /-- 00081363                 bnez    a6,f00022ee <status_extract+0x1e>
f00022ec:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
f00022ee:          \-> 00271813                 slli    a6,a4,0x2
f00022f2:              f0000797                 auipc   a5,0xf0000
f00022f6:              ce278793                 addi    a5,a5,-798 # e0001fd4 <status_codes>
f00022fa:              97c2                     add     a5,a5,a6
f00022fc:              439c                     lw      a5,0(a5)
f00022fe:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f0002300:              00173593                 seqz    a1,a4
f0002304:       /----- cb1d                     beqz    a4,f000233a <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
 * @return Zero-extended `field` from `bitfield`.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_read(uint32_t bitfield,
                                      bitfield_field32_t field) {
  return (bitfield >> field.index) & field.mask;
f0002306:       |      00555713                 srli    a4,a0,0x5
f000230a:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
f000230e:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f0002310:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
f0002314:       |      8a7d                     andi    a2,a2,31
f0002316:       |      04066613                 ori     a2,a2,64
f000231a:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
f000231e:       |      01555613                 srli    a2,a0,0x15
f0002322:       |      8a7d                     andi    a2,a2,31
f0002324:       |      04066613                 ori     a2,a2,64
f0002328:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
f000232c:       |      8169                     srli    a0,a0,0x1a
f000232e:       |      897d                     andi    a0,a0,31
f0002330:       |      04056513                 ori     a0,a0,64
f0002334:       |      00a68123                 sb      a0,2(a3)
f0002338:       |  /-- a011                     j       f000233c <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
f000233a:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
f000233c:          \-> 0015c513                 xori    a0,a1,1
f0002340:              8082                     ret

f0002342 <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
f0002342:       /----- c581                     beqz    a1,f000234a <dif_uart_init+0x8>
f0002344:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
f0002346:       |      c188                     sw      a0,0(a1)
f0002348:       |  /-- a011                     j       f000234c <dif_uart_init+0xa>
f000234a:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
f000234c:          \-> 8532                     mv      a0,a2
f000234e:              8082                     ret

f0002350 <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:91

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
f0002350:              1101                     addi    sp,sp,-32
f0002352:              ce06                     sw      ra,28(sp)
f0002354:              cc22                     sw      s0,24(sp)
f0002356:              ca26                     sw      s1,20(sp)
f0002358:              c84a                     sw      s2,16(sp)
f000235a:              c64e                     sw      s3,12(sp)
f000235c:              448d                     li      s1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL) {
f000235e:       /----- cd51                     beqz    a0,f00023fa <dif_uart_configure+0xaa>
f0002360:       |      892e                     mv      s2,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:96
    return kDifBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
f0002362:       |      4194                     lw      a3,0(a1)
f0002364:       +----- cad9                     beqz    a3,f00023fa <dif_uart_configure+0xaa>
f0002366:       |      00492603                 lw      a2,4(s2)
f000236a:       +----- ca41                     beqz    a2,f00023fa <dif_uart_configure+0xaa>
f000236c:       |      842a                     mv      s0,a0
f000236e:       |      0016e537                 lui     a0,0x16e
f0002372:       |      36050513                 addi    a0,a0,864 # 16e360 <_ottf_size+0xee360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:118
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
f0002376:       |      8d35                     xor     a0,a0,a3
f0002378:       |      016e35b7                 lui     a1,0x16e3
f000237c:       |      60058593                 addi    a1,a1,1536 # 16e3600 <_ottf_size+0x1663600>
f0002380:       |      8db1                     xor     a1,a1,a2
f0002382:       |      00b56733                 or      a4,a0,a1
f0002386:       |      6541                     lui     a0,0x10
f0002388:       |      fff50993                 addi    s3,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
f000238c:       |      4581                     li      a1,0
f000238e:       |      854e                     mv      a0,s3
f0002390:       |  /-- cb01                     beqz    a4,f00023a0 <dif_uart_configure+0x50>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:120
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
f0002392:       |  |   01469513                 slli    a0,a3,0x14
f0002396:       |  |   00c6d593                 srli    a1,a3,0xc
f000239a:       |  |   4681                     li      a3,0
f000239c:       |  |   4701                     li      a4,0
f000239e:       |  |   2079                     jal     f000242c <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:122
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
f00023a0:       |  \-> 01357633                 and     a2,a0,s3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:125

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
f00023a4:       |      8d31                     xor     a0,a0,a2
f00023a6:       |      8d4d                     or      a0,a0,a1
f00023a8:       +----- e929                     bnez    a0,f00023fa <dif_uart_configure+0xaa>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:47
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
f00023aa:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023ac:       |      00052823                 sw      zero,16(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:53
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
f00023b0:       |      4008                     lw      a0,0(s0)
f00023b2:       |      458d                     li      a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023b4:       |      d10c                     sw      a1,32(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:55
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
f00023b6:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023b8:       |      02052423                 sw      zero,40(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
f00023bc:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023be:       |      02052823                 sw      zero,48(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f00023c2:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023c4:       |      00052223                 sw      zero,4(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
f00023c8:       |      4008                     lw      a0,0(s0)
f00023ca:       |      55fd                     li      a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023cc:       |      c10c                     sw      a1,0(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifToggleEnabled) {
f00023ce:       |      00892683                 lw      a3,8(s2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
f00023d2:       |      01061513                 slli    a0,a2,0x10
f00023d6:       |      4605                     li      a2,1
f00023d8:       |      04300593                 li      a1,67
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
f00023dc:       |  /-- 00c68363                 beq     a3,a2,f00023e2 <dif_uart_configure+0x92>
f00023e0:       |  |   458d                     li      a1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
f00023e2:       |  \-> 00c92603                 lw      a2,12(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  if (config.parity_enable == kDifToggleEnabled) {
f00023e6:       |      8d4d                     or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
  if (config.parity == kDifUartParityOdd) {
f00023e8:       |  /-- e219                     bnez    a2,f00023ee <dif_uart_configure+0x9e>
f00023ea:       |  |   08056513                 ori     a0,a0,128
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:143
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
f00023ee:       |  \-> 400c                     lw      a1,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023f0:       |      c988                     sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:146

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f00023f2:       |      4008                     lw      a0,0(s0)
f00023f4:       |      4481                     li      s1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023f6:       |      00052223                 sw      zero,4(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:149

  return kDifOk;
}
f00023fa:       \----> 8526                     mv      a0,s1
f00023fc:              49b2                     lw      s3,12(sp)
f00023fe:              4942                     lw      s2,16(sp)
f0002400:              44d2                     lw      s1,20(sp)
f0002402:              4462                     lw      s0,24(sp)
f0002404:              40f2                     lw      ra,28(sp)
f0002406:              6105                     addi    sp,sp,32
f0002408:              8082                     ret

f000240a <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:256

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
f000240a:       /----- cd19                     beqz    a0,f0002428 <dif_uart_byte_send_polled+0x1e>
f000240c:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f000240e:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0002410:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:261
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
f0002412:       |  \-- fef5                     bnez    a3,f000240e <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0002414:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0002416:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f0002418:       |  /-- e299                     bnez    a3,f000241e <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f000241a:       |  |   ce4c                     sw      a1,28(a2)
f000241c:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f000241e:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0002420:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:268

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
f0002422:       |  \-- dd75                     beqz    a0,f000241e <dif_uart_byte_send_polled+0x14>
f0002424:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:272
  }

  return kDifOk;
}
f0002426:       |      8082                     ret
f0002428:       \----> 450d                     li      a0,3
f000242a:              8082                     ret

f000242c <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
f000242c:                 1141                  addi    sp,sp,-16
f000242e:                 c622                  sw      s0,12(sp)
f0002430:                 c426                  sw      s1,8(sp)
f0002432:                 c24a                  sw      s2,4(sp)
f0002434:                 4881                  li      a7,0
f0002436:                 4801                  li      a6,0
f0002438:                 4e01                  li      t3,0
f000243a:                 4e81                  li      t4,0
f000243c:                 03f00793              li      a5,63
f0002440:                 42fd                  li      t0,31
f0002442:                 00159313              slli    t1,a1,0x1
f0002446:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
f0002448:       /-------> fe078493              addi    s1,a5,-32
f000244c:       |     /-- 0004c563              bltz    s1,f0002456 <udiv64_slow+0x2a>
f0002450:       |     |   0095df33              srl     t5,a1,s1
f0002454:       |  /--|-- a809                  j       f0002466 <udiv64_slow+0x3a>
f0002456:       |  |  \-> 00f554b3              srl     s1,a0,a5
f000245a:       |  |      40f28433              sub     s0,t0,a5
f000245e:       |  |      00831433              sll     s0,t1,s0
f0002462:       |  |      0084ef33              or      t5,s1,s0
f0002466:       |  \----> 01fe5493              srli    s1,t3,0x1f
f000246a:       |         001e9413              slli    s0,t4,0x1
f000246e:       |         00946eb3              or      t4,s0,s1
f0002472:       |         001e1493              slli    s1,t3,0x1
f0002476:       |         001f7413              andi    s0,t5,1
f000247a:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
f000247e:       |  /----- 00de8563              beq     t4,a3,f0002488 <udiv64_slow+0x5c>
f0002482:       |  |      00debe33              sltu    t3,t4,a3
f0002486:       |  |  /-- a019                  j       f000248c <udiv64_slow+0x60>
f0002488:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
f000248c:       |     \-> 001e4f93              xori    t6,t3,1
f0002490:       |         4901                  li      s2,0
f0002492:       |         4481                  li      s1,0
f0002494:       |     /-- 000e1463              bnez    t3,f000249c <udiv64_slow+0x70>
f0002498:       |     |   8936                  mv      s2,a3
f000249a:       |     |   84b2                  mv      s1,a2
f000249c:       |     \-> 01f8de13              srli    t3,a7,0x1f
f00024a0:       |         00181413              slli    s0,a6,0x1
f00024a4:       |         01c46833              or      a6,s0,t3
f00024a8:       |         0886                  slli    a7,a7,0x1
f00024aa:       |         409f0e33              sub     t3,t5,s1
f00024ae:       |         009f34b3              sltu    s1,t5,s1
f00024b2:       |         412e8433              sub     s0,t4,s2
f00024b6:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f00024ba:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
f00024bc:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f00024c0:       \-------- f87794e3              bne     a5,t2,f0002448 <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
f00024c4:             /-- c709                  beqz    a4,f00024ce <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
f00024c6:             |   01c72023              sw      t3,0(a4)
f00024ca:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
f00024ce:             \-> 8546                  mv      a0,a7
f00024d0:                 85c2                  mv      a1,a6
f00024d2:                 4912                  lw      s2,4(sp)
f00024d4:                 44a2                  lw      s1,8(sp)
f00024d6:                 4432                  lw      s0,12(sp)
f00024d8:                 0141                  addi    sp,sp,16
f00024da:                 8082                  ret

f00024dc <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
f00024dc:                       00153693                seqz    a3,a0
f00024e0:                       0015b713                seqz    a4,a1
f00024e4:                       8ed9                    or      a3,a3,a4
f00024e6:       /-------------- eab5                    bnez    a3,f000255a <memcpy+0x7e>
f00024e8:       |               4711                    li      a4,4
f00024ea:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00024ec:       |        /----- 00e66c63                bltu    a2,a4,f0002504 <memcpy+0x28>
f00024f0:       |        |      00a5c6b3                xor     a3,a1,a0
f00024f4:       |        |      0036f793                andi    a5,a3,3
f00024f8:       |        |      8832                    mv      a6,a2
f00024fa:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
f00024fc:       |        |  /-- eb91                    bnez    a5,f0002510 <memcpy+0x34>
f00024fe:       |        |  |   40a006b3                neg     a3,a0
f0002502:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002504:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002508:       |           |   9b71                    andi    a4,a4,-4
f000250a:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f000250e:       |  /--------|-- c6b9                    beqz    a3,f000255c <memcpy+0x80>
f0002510:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f0002512:       |  |        /-> 00f58733                add     a4,a1,a5
f0002516:       |  |        |   00070883                lb      a7,0(a4)
f000251a:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f000251e:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f0002520:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f0002524:       |  |        \-- fef697e3                bne     a3,a5,f0002512 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002528:       |  |  /-------- 0106fb63                bgeu    a3,a6,f000253e <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  // the pointer points to four bytes of four-byte-aligned memory.
  //
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f000252c:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0002530:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002532:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f0002536:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f0002538:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f000253a:       |  |  |  +----- ff06e9e3                bltu    a3,a6,f000252c <memcpy+0x50>
f000253e:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,f000255a <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
f0002542:       |  |  |  |      8e15                    sub     a2,a2,a3
f0002544:       |  |  |  |      00d50733                add     a4,a0,a3
f0002548:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
f000254a:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
f000254e:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
f0002552:       |  |  |  |  |   167d                    addi    a2,a2,-1
f0002554:       |  |  |  |  |   0705                    addi    a4,a4,1
f0002556:       |  |  |  |  |   0585                    addi    a1,a1,1
f0002558:       |  |  |  |  \-- fa6d                    bnez    a2,f000254a <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
f000255a:       \--|--|--|----> 8082                    ret
f000255c:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f000255e:             |  \----- fd06e7e3                bltu    a3,a6,f000252c <memcpy+0x50>
f0002562:             \-------- bff1                    j       f000253e <memcpy+0x62>

f0002564 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
f0002564:                 4691                  li      a3,4
f0002566:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002568:             /-- 00d66663              bltu    a2,a3,f0002574 <memset+0x10>
f000256c:             |   40a006b3              neg     a3,a0
f0002570:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002574:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002578:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f000257c:          /----- cb01                  beqz    a4,f000258c <memset+0x28>
f000257e:          |      87aa                  mv      a5,a0
f0002580:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
f0002582:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
f0002586:          |  |   16fd                  addi    a3,a3,-1
f0002588:          |  |   0785                  addi    a5,a5,1
f000258a:          |  \-- fee5                  bnez    a3,f0002582 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f000258c:       /--\----X 02080263              beqz    a6,f00025b0 <memset+0x4c>
f0002590:       |         00e808b3              add     a7,a6,a4
f0002594:       |         0ff5f813              andi    a6,a1,255
f0002598:       |         010107b7              lui     a5,0x1010
f000259c:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xf90101>
f00025a0:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00025a4:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f00025a8:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f00025aa:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f00025ac:       |     \-- ff176ce3              bltu    a4,a7,f00025a4 <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
f00025b0:       \--/----X 00c77a63              bgeu    a4,a2,f00025c4 <memset+0x60>
f00025b4:          |      8e19                  sub     a2,a2,a4
f00025b6:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
f00025ba:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
f00025be:          |  |   167d                  addi    a2,a2,-1
f00025c0:          |  |   0685                  addi    a3,a3,1
f00025c2:          |  \-- fe65                  bnez    a2,f00025ba <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
f00025c4:          \----> 8082                  ret

f00025c6 <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
f00025c6:                             4691                      li      a3,4
f00025c8:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00025ca:                         /-- 00d66663                  bltu    a2,a3,f00025d6 <memchr+0x10>
f00025ce:                         |   40a006b3                  neg     a3,a0
f00025d2:                         |   0036fe93                  andi    t4,a3,3
f00025d6:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f00025da:                      /----- 000e8b63                  beqz    t4,f00025f0 <memchr+0x2a>
f00025de:                      |      85aa                      mv      a1,a0
f00025e0:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
f00025e2:                      |  /-> 0005c683                  lbu     a3,0(a1)
f00025e6:       /--------------|--|-- 09c68563                  beq     a3,t3,f0002670 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
f00025ea:       |              |  |   17fd                      addi    a5,a5,-1
f00025ec:       |              |  |   0585                      addi    a1,a1,1
f00025ee:       |              |  \-- fbf5                      bnez    a5,f00025e2 <memchr+0x1c>
f00025f0:       |              \----> 41d605b3                  sub     a1,a2,t4
f00025f4:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00025f6:       |  /----------------- c9a9                      beqz    a1,f0002648 <memchr+0x82>
f00025f8:       |  |                  01d58833                  add     a6,a1,t4
f00025fc:       |  |                  010105b7                  lui     a1,0x1010
f0002600:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f0002604:       |  |                  02be02b3                  mul     t0,t3,a1
f0002608:       |  |                  0ff00893                  li      a7,255
f000260c:       |  |                  65c1                      lui     a1,0x10
f000260e:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f0002612:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002616:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f000261a:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
f000261c:       |  |              |   0056c7b3                  xor     a5,a3,t0
f0002620:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f0002624:       |  |              |   0ff6f713                  andi    a4,a3,255
f0002628:       +--|--------------|-- 05170463                  beq     a4,a7,f0002670 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f000262c:       |  |              |   0076f733                  and     a4,a3,t2
f0002630:       |  |  /-----------|-- 02770b63                  beq     a4,t2,f0002666 <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f0002634:       |  |  |           |   0066f6b3                  and     a3,a3,t1
f0002638:       |  |  |  /--------|-- 02668963                  beq     a3,t1,f000266a <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f000263c:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
f0002640:       |  |  |  |  /-----|-- c69d                      beqz    a3,f000266e <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002642:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
f0002644:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,f0002616 <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
f0002648:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,f0002662 <memchr+0x9c>
f000264c:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
f0002650:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
f0002654:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
f0002658:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,f0002670 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
f000265c:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
f000265e:       |     |  |  |  |  |   0585                      addi    a1,a1,1
f0002660:       |     |  |  |  |  \-- fa75                      bnez    a2,f0002654 <memchr+0x8e>
f0002662:       |     |  |  |  \----> 4581                      li      a1,0
f0002664:       +-----|--|--|-------- a031                      j       f0002670 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
f0002666:       |     \--|--|-------> 0585                      addi    a1,a1,1
f0002668:       +--------|--|-------- a021                      j       f0002670 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
f000266a:       |        \--|-------> 0589                      addi    a1,a1,2
f000266c:       +-----------|-------- a011                      j       f0002670 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
f000266e:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f0002670:       \-------------------> 852e                      mv      a0,a1
f0002672:                             8082                      ret

f0002674 <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
f0002674:                          4691                 li      a3,4
f0002676:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002678:                      /-- 00d66663             bltu    a2,a3,f0002684 <memrchr+0x10>
f000267c:                      |   40a006b3             neg     a3,a0
f0002680:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002684:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002688:                          9af1                 andi    a3,a3,-4
f000268a:                          006687b3             add     a5,a3,t1
f000268e:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
f0002690:                      /-- 00f66363             bltu    a2,a5,f0002696 <memrchr+0x22>
f0002694:                      |   86be                 mv      a3,a5
f0002696:                      \-> 0ff5f393             andi    t2,a1,255
f000269a:                   /--/-X 00c7fd63             bgeu    a5,a2,f00026b4 <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
f000269e:                   |  |   00c50733             add     a4,a0,a2
f00026a2:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
f00026a6:                   |  |   fff60713             addi    a4,a2,-1
f00026aa:                   |  |   863a                 mv      a2,a4
f00026ac:                   |  \-- fe7597e3             bne     a1,t2,f000269a <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f00026b0:                   |      953a                 add     a0,a0,a4
f00026b2:                   |      8082                 ret
f00026b4:                   \----> 010105b7             lui     a1,0x1010
f00026b8:                          10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
f00026bc:                          02b382b3             mul     t0,t2,a1
f00026c0:                          00ff0837             lui     a6,0xff0
f00026c4:                          65c1                 lui     a1,0x10
f00026c6:                          f0058793             addi    a5,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f00026ca:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
f00026ce:       /--------------/-X 04d37563             bgeu    t1,a3,f0002718 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00026d2:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00026d6:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
f00026da:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f00026de:       |              |   01875593             srli    a1,a4,0x18
f00026e2:       |  /-----------|-- cd95                 beqz    a1,f000271e <memrchr+0xaa>
f00026e4:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f00026e8:       |  |           |   010775b3             and     a1,a4,a6
f00026ec:       |  |  /--------|-- 03058c63             beq     a1,a6,f0002724 <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f00026f0:       |  |  |        |   00f775b3             and     a1,a4,a5
f00026f4:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,f000272a <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f00026f8:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
f00026fc:       |  |  |  |     |   16f1                 addi    a3,a3,-4
f00026fe:       |  |  |  |     \-- fd1598e3             bne     a1,a7,f00026ce <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002702:       |  |  |  |         9536                 add     a0,a0,a3
f0002704:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
f0002706:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
f000270a:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
f000270e:       |  |  |  |     |   fff68613             addi    a2,a3,-1
f0002712:       |  |  |  |     |   86b2                 mv      a3,a2
f0002714:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,f0002730 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
f0002718:       \--|--|--|--|--\-X f6fd                 bnez    a3,f0002706 <memrchr+0x92>
f000271a:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000271c:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
f000271e:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002722:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
f0002724:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002728:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
f000272a:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000272e:                   |      8082                 ret
f0002730:                   \----> 9532                 add     a0,a0,a2
f0002732:                          8082                 ret
