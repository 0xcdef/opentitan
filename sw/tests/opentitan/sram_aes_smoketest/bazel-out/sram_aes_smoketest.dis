
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xe0000080

Program Header:
    LOAD off    0x00001000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00002434 memsz 0x00002434 flags rwx
    LOAD off    0x00000000 vaddr 0xe0008000 paddr 0xe0008000 align 2**12
         filesz 0x00000000 memsz 0x00002000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .vectors          00000084  e0000000  e0000000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             000017ce  e0000084  e0000084  00001084  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000009a8  e0001858  e0001858  00002858  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data             00000084  e0002200  e0002200  00003200  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss              0000000c  e0002284  e0002284  00003284  2**2  ALLOC
  5 .logs.fields      000001a4  e0002290  e0002290  00003290  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .stack            00002000  e0008000  e0008000  00004000  2**0  ALLOC
  7 .debug_loc        00004f60  00000000  00000000  00003434  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev     000013ec  00000000  00000000  00008394  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info       000063ef  00000000  00000000  00009780  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges     00000708  00000000  00000000  0000fb6f  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str        000018b5  00000000  00000000  00010277  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment          00000074  00000000  00000000  00011b2c  2**0  CONTENTS, READONLY
 13 .riscv.attributes 00000026  00000000  00000000  00011ba0  2**0  CONTENTS, READONLY
 14 .debug_frame      00000668  00000000  00000000  00011bc8  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line       0000457e  00000000  00000000  00012230  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges    00000028  00000000  00000000  000167ae  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
e0000000 l    d  .vectors       00000000 .vectors
e0000084 l    d  .text  00000000 .text
e0001858 l    d  .rodata        00000000 .rodata
e0002200 l    d  .data  00000000 .data
e0002284 l    d  .bss   00000000 .bss
e0002290 l    d  .logs.fields   00000000 .logs.fields
e0008000 l    d  .stack 00000000 .stack
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .comment       00000000 .comment
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    df *ABS*  00000000 crt0.o
e0000084 l       .text  00000000 default_exc_handler
e0000084 l       .text  00000000 
e00000fe l       .text  00000000 sleep_loop
e0000084 l       .text  00000000 
e0000086 l       .text  00000000 reset_handler
e0000086 l       .text  00000000 
e0000086 l       .text  00000000 
e00000cc l       .text  00000000 
e00000ea l       .text  00000000 zero_loop_end
e00000e0 l       .text  00000000 zero_loop
e00000e0 l       .text  00000000 
e00000ea l       .text  00000000 
e00000ea l       .text  00000000 main_entry
e00000ea l       .text  00000000 
e00000ee l       .text  00000000 
e00000f2 l       .text  00000000 
e00000fe l       .text  00000000 
e0000102 l       .text  00000000 
e0000000 l       .vectors       00000000 
e000002c l       .vectors       00000000 
e0000030 l       .vectors       00000000 
e000007c l       .vectors       00000000 
e0000080 l       .vectors       00000000 
00001a5e l       .debug_info    00000000 
000004be l       .debug_abbrev  00000000 
e0000104 l       .text  00000000 
e0000084 l       .vectors       00000000 
00000158 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 sram_aes_smoketest.c
e0000104 l       .text  00000000 
e0000104 l       .text  00000000 
e0000104 l       .text  00000000 
e0000106 l       .text  00000000 
e0000128 l       .text  00000000 
e000012c l       .text  00000000 
e0000134 l       .text  00000000 
e0000134 l       .text  00000000 
e0000138 l       .text  00000000 
e0000142 l       .text  00000000 
e000014e l       .text  00000000 
e0000150 l       .text  00000000 
e0000150 l       .text  00000000 
e000015a l       .text  00000000 
e000015a l       .text  00000000 
e0000162 l       .text  00000000 
e0000164 l       .text  00000000 
e0000164 l       .text  00000000 
e0000166 l       .text  00000000 
e0000166 l       .text  00000000 
e0000168 l       .text  00000000 
e000016a l       .text  00000000 
e0002290 l     O .logs.fields   00000014 main.kLogFields
e000016a l       .text  00000000 
e000017a l       .text  00000000 
e000017a l       .text  00000000 
e000017c l       .text  00000000 
e000017c l       .text  00000000 
e0000194 l       .text  00000000 
e0000194 l       .text  00000000 
e000019a l       .text  00000000 
e000019e l       .text  00000000 
e000019e l       .text  00000000 
e00001a4 l       .text  00000000 
e00001a6 l       .text  00000000 
e00001a8 l       .text  00000000 
e00001a8 l       .text  00000000 
e00001aa l       .text  00000000 
e00001ac l       .text  00000000 
e00022a4 l     O .logs.fields   00000014 main.kLogFields.2
e00001ac l       .text  00000000 
e00001bc l       .text  00000000 
e00001bc l       .text  00000000 
e00001be l       .text  00000000 
e00001be l       .text  00000000 
e00001d6 l       .text  00000000 
e00001d6 l       .text  00000000 
e00001dc l       .text  00000000 
e00001e0 l       .text  00000000 
e00001e0 l       .text  00000000 
e0001c84 l     O .rodata        00000020 kAesModesKey256
e0001ca4 l     O .rodata        00000020 kKeyShare1
e00001f8 l       .text  00000000 
e00001f8 l       .text  00000000 
e0000200 l       .text  00000000 
e0000208 l       .text  00000000 
e000020a l       .text  00000000 
e000020e l       .text  00000000 
e0000210 l       .text  00000000 
e0000214 l       .text  00000000 
e0000218 l       .text  00000000 
e0000218 l       .text  00000000 
e0000224 l       .text  00000000 
e0000224 l       .text  00000000 
e0000226 l       .text  00000000 
e0000236 l       .text  00000000 
e0000236 l       .text  00000000 
e0000246 l       .text  00000000 
e0000246 l       .text  00000000 
e0000252 l       .text  00000000 
e0000252 l       .text  00000000 
e0000256 l       .text  00000000 
e0000256 l       .text  00000000 
e0000258 l       .text  00000000 
e000025a l       .text  00000000 
e000025a l       .text  00000000 
e000025e l       .text  00000000 
e00022b8 l     O .logs.fields   00000014 main.kLogFields.5
e000025e l       .text  00000000 
e000026e l       .text  00000000 
e000026e l       .text  00000000 
e0000270 l       .text  00000000 
e0000270 l       .text  00000000 
e0000288 l       .text  00000000 
e0000288 l       .text  00000000 
e000028e l       .text  00000000 
e0000292 l       .text  00000000 
e0001cf4 l     O .rodata        00000040 kAesModesPlainText
e0000292 l       .text  00000000 
e00002a4 l       .text  00000000 
e00002a4 l       .text  00000000 
e00002ac l       .text  00000000 
e00002ac l       .text  00000000 
e00002b8 l       .text  00000000 
e00002ca l       .text  00000000 
e00002d4 l       .text  00000000 
e00002d6 l       .text  00000000 
e00002d8 l       .text  00000000 
e00002d8 l       .text  00000000 
e00002e8 l       .text  00000000 
e00002e8 l       .text  00000000 
e00002f0 l       .text  00000000 
e00002f4 l       .text  00000000 
e00002f6 l       .text  00000000 
e00002fa l       .text  00000000 
e00022cc l     O .logs.fields   00000014 main.kLogFields.8
e00023f8 l     O .logs.fields   00000014 aes_testutils_get_status.kLogFields
e0000320 l       .text  00000000 
e0000320 l       .text  00000000 
e000032a l       .text  00000000 
e000032c l       .text  00000000 
e000032e l       .text  00000000 
e000032e l       .text  00000000 
e0000332 l       .text  00000000 
e000033c l       .text  00000000 
e000033c l       .text  00000000 
e000033e l       .text  00000000 
e0000350 l       .text  00000000 
e0000350 l       .text  00000000 
e0000356 l       .text  00000000 
e0000356 l       .text  00000000 
e000035a l       .text  00000000 
e000035a l       .text  00000000 
e000035c l       .text  00000000 
e000035c l       .text  00000000 
e000036c l       .text  00000000 
e000036c l       .text  00000000 
e000036e l       .text  00000000 
e0000374 l       .text  00000000 
e0000374 l       .text  00000000 
e0000376 l       .text  00000000 
e0000376 l       .text  00000000 
e000037a l       .text  00000000 
e000037a l       .text  00000000 
e0000388 l       .text  00000000 
e000038a l       .text  00000000 
e000038e l       .text  00000000 
e000039a l       .text  00000000 
e000039a l       .text  00000000 
e000039c l       .text  00000000 
e000039c l       .text  00000000 
e00003b0 l       .text  00000000 
e00003b0 l       .text  00000000 
e00003b6 l       .text  00000000 
e00003b6 l       .text  00000000 
e00003b8 l       .text  00000000 
e00003b8 l       .text  00000000 
e00003d0 l       .text  00000000 
e00003d2 l       .text  00000000 
e00003d4 l       .text  00000000 
e00003d4 l       .text  00000000 
e00003d8 l       .text  00000000 
e00022e0 l     O .logs.fields   00000014 main.kLogFields.11
e00003d8 l       .text  00000000 
e00003e8 l       .text  00000000 
e00003e8 l       .text  00000000 
e00003ea l       .text  00000000 
e00003ea l       .text  00000000 
e0000402 l       .text  00000000 
e0000402 l       .text  00000000 
e0000408 l       .text  00000000 
e000040c l       .text  00000000 
e000040c l       .text  00000000 
e0000414 l       .text  00000000 
e0000414 l       .text  00000000 
e0000422 l       .text  00000000 
e0000424 l       .text  00000000 
e0000426 l       .text  00000000 
e0000426 l       .text  00000000 
e0000436 l       .text  00000000 
e0000436 l       .text  00000000 
e000043c l       .text  00000000 
e000043c l       .text  00000000 
e0000440 l       .text  00000000 
e0000444 l       .text  00000000 
e0000448 l       .text  00000000 
e00022f4 l     O .logs.fields   00000014 main.kLogFields.14
e000046e l       .text  00000000 
e000046e l       .text  00000000 
e0000478 l       .text  00000000 
e000047a l       .text  00000000 
e000047c l       .text  00000000 
e000047c l       .text  00000000 
e0000480 l       .text  00000000 
e000048a l       .text  00000000 
e000048a l       .text  00000000 
e000048c l       .text  00000000 
e000049e l       .text  00000000 
e000049e l       .text  00000000 
e00004a4 l       .text  00000000 
e00004a4 l       .text  00000000 
e00004a8 l       .text  00000000 
e00004a8 l       .text  00000000 
e00004aa l       .text  00000000 
e00004aa l       .text  00000000 
e00004ba l       .text  00000000 
e00004ba l       .text  00000000 
e00004bc l       .text  00000000 
e00004c2 l       .text  00000000 
e00004c2 l       .text  00000000 
e00004c4 l       .text  00000000 
e00004c4 l       .text  00000000 
e00004c8 l       .text  00000000 
e00004c8 l       .text  00000000 
e00004d6 l       .text  00000000 
e00004d8 l       .text  00000000 
e00004dc l       .text  00000000 
e00004e8 l       .text  00000000 
e00004e8 l       .text  00000000 
e00004ea l       .text  00000000 
e00004ea l       .text  00000000 
e00004fe l       .text  00000000 
e00004fe l       .text  00000000 
e0000504 l       .text  00000000 
e0000504 l       .text  00000000 
e0000506 l       .text  00000000 
e0000506 l       .text  00000000 
e000050e l       .text  00000000 
e0000510 l       .text  00000000 
e0000512 l       .text  00000000 
e0000512 l       .text  00000000 
e0000516 l       .text  00000000 
e0002308 l     O .logs.fields   00000014 main.kLogFields.17
e0000516 l       .text  00000000 
e0000526 l       .text  00000000 
e0000526 l       .text  00000000 
e0000528 l       .text  00000000 
e0000528 l       .text  00000000 
e0000540 l       .text  00000000 
e0000540 l       .text  00000000 
e0000546 l       .text  00000000 
e000054a l       .text  00000000 
e000054a l       .text  00000000 
e0000550 l       .text  00000000 
e0000552 l       .text  00000000 
e0000554 l       .text  00000000 
e0000554 l       .text  00000000 
e0000558 l       .text  00000000 
e000231c l     O .logs.fields   00000014 main.kLogFields.20
e0000558 l       .text  00000000 
e0000568 l       .text  00000000 
e0000568 l       .text  00000000 
e000056a l       .text  00000000 
e000056a l       .text  00000000 
e0000582 l       .text  00000000 
e0000582 l       .text  00000000 
e0000588 l       .text  00000000 
e000058c l       .text  00000000 
e000058c l       .text  00000000 
e0001d98 l     O .rodata        00000040 kAesModesCipherTextEcb256
e0002344 l     O .logs.fields   00000014 main.kLogFields.26
e0002330 l     O .logs.fields   00000014 main.kLogFields.23
e00005be l       .text  00000000 
e00005be l       .text  00000000 
e00005ce l       .text  00000000 
e00005d2 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005dc l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e8 l       .text  00000000 
e00005e8 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005fa l       .text  00000000 
e00005fa l       .text  00000000 
e000060a l       .text  00000000 
e000060a l       .text  00000000 
e0000624 l       .text  00000000 
e0000624 l       .text  00000000 
e0000626 l       .text  00000000 
e0000628 l       .text  00000000 
e000062c l       .text  00000000 
e000062c l       .text  00000000 
e0000630 l       .text  00000000 
e0000636 l       .text  00000000 
e000063a l       .text  00000000 
e000063a l       .text  00000000 
e000063c l       .text  00000000 
e000063e l       .text  00000000 
e000063e l       .text  00000000 
e0000648 l       .text  00000000 
e000064a l       .text  00000000 
e000064c l       .text  00000000 
e000064c l       .text  00000000 
e0000650 l       .text  00000000 
e0002358 l     O .logs.fields   00000014 main.kLogFields.29
e0000650 l       .text  00000000 
e0000660 l       .text  00000000 
e0000660 l       .text  00000000 
e0000662 l       .text  00000000 
e0000662 l       .text  00000000 
e000067a l       .text  00000000 
e000067a l       .text  00000000 
e0000680 l       .text  00000000 
e0000684 l       .text  00000000 
e0000684 l       .text  00000000 
e000068c l       .text  00000000 
e000068c l       .text  00000000 
e000069a l       .text  00000000 
e000069c l       .text  00000000 
e000069e l       .text  00000000 
e000069e l       .text  00000000 
e00006ae l       .text  00000000 
e00006ae l       .text  00000000 
e00006b4 l       .text  00000000 
e00006b4 l       .text  00000000 
e00006b8 l       .text  00000000 
e00006bc l       .text  00000000 
e00006c0 l       .text  00000000 
e000236c l     O .logs.fields   00000014 main.kLogFields.31
e00006e6 l       .text  00000000 
e00006e6 l       .text  00000000 
e00006f0 l       .text  00000000 
e00006f2 l       .text  00000000 
e00006f4 l       .text  00000000 
e00006f4 l       .text  00000000 
e00006f8 l       .text  00000000 
e0000702 l       .text  00000000 
e0000702 l       .text  00000000 
e0000704 l       .text  00000000 
e0000716 l       .text  00000000 
e0000716 l       .text  00000000 
e000071a l       .text  00000000 
e000071a l       .text  00000000 
e000071e l       .text  00000000 
e000071e l       .text  00000000 
e0000720 l       .text  00000000 
e0000720 l       .text  00000000 
e0000730 l       .text  00000000 
e0000730 l       .text  00000000 
e0000732 l       .text  00000000 
e0000738 l       .text  00000000 
e0000738 l       .text  00000000 
e000073a l       .text  00000000 
e000073a l       .text  00000000 
e000073e l       .text  00000000 
e000073e l       .text  00000000 
e000074c l       .text  00000000 
e000074e l       .text  00000000 
e0000752 l       .text  00000000 
e000075e l       .text  00000000 
e000075e l       .text  00000000 
e0000760 l       .text  00000000 
e0000760 l       .text  00000000 
e0000774 l       .text  00000000 
e0000774 l       .text  00000000 
e0000778 l       .text  00000000 
e0000778 l       .text  00000000 
e000077a l       .text  00000000 
e000077a l       .text  00000000 
e0000790 l       .text  00000000 
e0000792 l       .text  00000000 
e0000794 l       .text  00000000 
e0000794 l       .text  00000000 
e0000798 l       .text  00000000 
e0002380 l     O .logs.fields   00000014 main.kLogFields.33
e0000798 l       .text  00000000 
e00007a8 l       .text  00000000 
e00007a8 l       .text  00000000 
e00007aa l       .text  00000000 
e00007aa l       .text  00000000 
e00007c2 l       .text  00000000 
e00007c2 l       .text  00000000 
e00007c8 l       .text  00000000 
e00007ca l       .text  00000000 
e00007ca l       .text  00000000 
e00007d2 l       .text  00000000 
e00007d2 l       .text  00000000 
e00007e0 l       .text  00000000 
e00007e2 l       .text  00000000 
e00007e4 l       .text  00000000 
e00007e4 l       .text  00000000 
e00007f4 l       .text  00000000 
e00007f4 l       .text  00000000 
e00007fa l       .text  00000000 
e00007fa l       .text  00000000 
e00007fe l       .text  00000000 
e0000802 l       .text  00000000 
e0000806 l       .text  00000000 
e0002394 l     O .logs.fields   00000014 main.kLogFields.36
e000082c l       .text  00000000 
e000082c l       .text  00000000 
e0000836 l       .text  00000000 
e0000838 l       .text  00000000 
e000083a l       .text  00000000 
e000083a l       .text  00000000 
e000083e l       .text  00000000 
e0000848 l       .text  00000000 
e0000848 l       .text  00000000 
e000084a l       .text  00000000 
e000085a l       .text  00000000 
e000085a l       .text  00000000 
e000085e l       .text  00000000 
e000085e l       .text  00000000 
e0000862 l       .text  00000000 
e0000862 l       .text  00000000 
e0000864 l       .text  00000000 
e0000864 l       .text  00000000 
e0000874 l       .text  00000000 
e0000874 l       .text  00000000 
e0000876 l       .text  00000000 
e000087c l       .text  00000000 
e000087c l       .text  00000000 
e000087e l       .text  00000000 
e000087e l       .text  00000000 
e0000882 l       .text  00000000 
e0000882 l       .text  00000000 
e0000890 l       .text  00000000 
e0000892 l       .text  00000000 
e0000896 l       .text  00000000 
e00008a0 l       .text  00000000 
e00008a0 l       .text  00000000 
e00008a2 l       .text  00000000 
e00008a2 l       .text  00000000 
e00008b4 l       .text  00000000 
e00008b4 l       .text  00000000 
e00008b8 l       .text  00000000 
e00008b8 l       .text  00000000 
e00008ba l       .text  00000000 
e00008ba l       .text  00000000 
e00008c0 l       .text  00000000 
e00008c0 l       .text  00000000 
e00008c2 l       .text  00000000 
e00008c4 l       .text  00000000 
e00008c6 l       .text  00000000 
e00008c6 l       .text  00000000 
e00008ca l       .text  00000000 
e00023a8 l     O .logs.fields   00000014 main.kLogFields.38
e00008ca l       .text  00000000 
e00008d8 l       .text  00000000 
e00008d8 l       .text  00000000 
e00008da l       .text  00000000 
e00008da l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f6 l       .text  00000000 
e00008f8 l       .text  00000000 
e00008f8 l       .text  00000000 
e00008fc l       .text  00000000 
e00008fe l       .text  00000000 
e0000900 l       .text  00000000 
e0000900 l       .text  00000000 
e0000904 l       .text  00000000 
e00023bc l     O .logs.fields   00000014 main.kLogFields.40
e0000904 l       .text  00000000 
e0000912 l       .text  00000000 
e0000912 l       .text  00000000 
e0000914 l       .text  00000000 
e0000914 l       .text  00000000 
e000092a l       .text  00000000 
e000092a l       .text  00000000 
e0000930 l       .text  00000000 
e0000932 l       .text  00000000 
e0000932 l       .text  00000000 
e00023e4 l     O .logs.fields   00000014 main.kLogFields.45
e00023d0 l     O .logs.fields   00000014 main.kLogFields.42
e000095c l       .text  00000000 
e000095c l       .text  00000000 
e000096c l       .text  00000000 
e0000970 l       .text  00000000 
e0000974 l       .text  00000000 
e000097a l       .text  00000000 
e000097e l       .text  00000000 
e0000984 l       .text  00000000 
e0000984 l       .text  00000000 
e0000992 l       .text  00000000 
e0000992 l       .text  00000000 
e0000994 l       .text  00000000 
e0000994 l       .text  00000000 
e00009a2 l       .text  00000000 
e00009a2 l       .text  00000000 
e00009ba l       .text  00000000 
e00009ba l       .text  00000000 
e00009bc l       .text  00000000 
e00009be l       .text  00000000 
e00009c2 l       .text  00000000 
e00009c2 l       .text  00000000 
e00009c6 l       .text  00000000 
e00009cc l       .text  00000000 
e00009ce l       .text  00000000 
e00009ce l       .text  00000000 
e00009f6 l       .text  00000000 
e00009f6 l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000001b l       .debug_loc     00000000 
00000036 l       .debug_loc     00000000 
00000067 l       .debug_loc     00000000 
00000098 l       .debug_loc     00000000 
000000c9 l       .debug_loc     00000000 
0000011f l       .debug_loc     00000000 
0000013b l       .debug_loc     00000000 
00000162 l       .debug_loc     00000000 
00000189 l       .debug_loc     00000000 
000001b0 l       .debug_loc     00000000 
000001d6 l       .debug_loc     00000000 
000001fd l       .debug_loc     00000000 
00000224 l       .debug_loc     00000000 
00000240 l       .debug_loc     00000000 
00000271 l       .debug_loc     00000000 
000002c7 l       .debug_loc     00000000 
000002e3 l       .debug_loc     00000000 
0000030a l       .debug_loc     00000000 
00000331 l       .debug_loc     00000000 
00000358 l       .debug_loc     00000000 
0000037e l       .debug_loc     00000000 
000003a5 l       .debug_loc     00000000 
000003cc l       .debug_loc     00000000 
000003e8 l       .debug_loc     00000000 
00000419 l       .debug_loc     00000000 
0000044a l       .debug_loc     00000000 
0000047b l       .debug_loc     00000000 
000004d1 l       .debug_loc     00000000 
000004ed l       .debug_loc     00000000 
00000514 l       .debug_loc     00000000 
0000053b l       .debug_loc     00000000 
00000563 l       .debug_loc     00000000 
00000589 l       .debug_loc     00000000 
000005b0 l       .debug_loc     00000000 
000005d7 l       .debug_loc     00000000 
000005f3 l       .debug_loc     00000000 
00000624 l       .debug_loc     00000000 
0000067a l       .debug_loc     00000000 
00000696 l       .debug_loc     00000000 
000006bd l       .debug_loc     00000000 
000006e4 l       .debug_loc     00000000 
0000070c l       .debug_loc     00000000 
00000732 l       .debug_loc     00000000 
00000759 l       .debug_loc     00000000 
00000780 l       .debug_loc     00000000 
0000079c l       .debug_loc     00000000 
000007cd l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00000858 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
000008bc l       .debug_str     00000000 
000008c1 l       .debug_str     00000000 
00000658 l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
00000868 l       .debug_str     00000000 
000007ca l       .debug_str     00000000 
00000896 l       .debug_str     00000000 
000008b3 l       .debug_str     00000000 
0000057e l       .debug_str     00000000 
00000238 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
000008c6 l       .debug_str     00000000 
000008d8 l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
0000104a l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00000173 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000195 l       .debug_str     00000000 
000001a0 l       .debug_str     00000000 
000001a8 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001fc l       .debug_str     00000000 
0000020c l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000022a l       .debug_str     00000000 
000002b8 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
00000258 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000283 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a6 l       .debug_str     00000000 
000002f4 l       .debug_str     00000000 
000002c4 l       .debug_str     00000000 
000002dc l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000306 l       .debug_str     00000000 
00000315 l       .debug_str     00000000 
00000324 l       .debug_str     00000000 
00000333 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000388 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
0000036c l       .debug_str     00000000 
0000037a l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
0000039b l       .debug_str     00000000 
000003b6 l       .debug_str     00000000 
0000041a l       .debug_str     00000000 
000003ec l       .debug_str     00000000 
00000407 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
0000042f l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
0000045d l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
0000048c l       .debug_str     00000000 
0000049e l       .debug_str     00000000 
000004b1 l       .debug_str     00000000 
000004c9 l       .debug_str     00000000 
000004e2 l       .debug_str     00000000 
000004fa l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
0000056b l       .debug_str     00000000 
00000589 l       .debug_str     00000000 
00000596 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
000005a9 l       .debug_str     00000000 
000005d7 l       .debug_str     00000000 
000005c8 l       .debug_str     00000000 
000005bb l       .debug_str     00000000 
00000ea4 l       .debug_str     00000000 
00000702 l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
000005f5 l       .debug_str     00000000 
00000602 l       .debug_str     00000000 
0000060d l       .debug_str     00000000 
00000617 l       .debug_str     00000000 
00000666 l       .debug_str     00000000 
00001225 l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
0000066b l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
00000689 l       .debug_str     00000000 
000005c0 l       .debug_str     00000000 
0000069c l       .debug_str     00000000 
000006a9 l       .debug_str     00000000 
000006be l       .debug_str     00000000 
000006d5 l       .debug_str     00000000 
000006e5 l       .debug_str     00000000 
000006f3 l       .debug_str     00000000 
000006fa l       .debug_str     00000000 
000007c2 l       .debug_str     00000000 
000003e2 l       .debug_str     00000000 
00000359 l       .debug_str     00000000 
0000072b l       .debug_str     00000000 
000003db l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
0000047d l       .debug_str     00000000 
00000793 l       .debug_str     00000000 
000007a8 l       .debug_str     00000000 
000007b4 l       .debug_str     00000000 
00000708 l       .debug_str     00000000 
0000071c l       .debug_str     00000000 
00000733 l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00000763 l       .debug_str     00000000 
0000077a l       .debug_str     00000000 
000007dd l       .debug_str     00000000 
00000861 l       .debug_str     00000000 
000007d6 l       .debug_str     00000000 
000007ef l       .debug_str     00000000 
00000dbb l       .debug_str     00000000 
000007fa l       .debug_str     00000000 
00000806 l       .debug_str     00000000 
00000819 l       .debug_str     00000000 
0000082b l       .debug_str     00000000 
00000826 l       .debug_str     00000000 
00000838 l       .debug_str     00000000 
0000084c l       .debug_str     00000000 
0000086c l       .debug_str     00000000 
00000880 l       .debug_str     00000000 
000008a4 l       .debug_str     00000000 
000008d1 l       .debug_str     00000000 
000008cf l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
e00009f6 l       .text  00000000 
00000000 l    df *ABS*  00000000 utils.c
e00009f6 l       .text  00000000 
e00009f6 l       .text  00000000 
e00009f6 l       .text  00000000 
e00009f8 l       .text  00000000 
e00009f8 l       .text  00000000 
e0000a06 l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a10 l       .text  00000000 
e0000a14 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a24 l       .text  00000000 
e0000a26 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a2a l       .text  00000000 
e0000a2a l       .text  00000000 
e0000a2c l       .text  00000000 
e0000a2c l       .text  00000000 
e0000a2e l       .text  00000000 
e0000a2e l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a3a l       .text  00000000 
e0000a3c l       .text  00000000 
e0000a3c l       .text  00000000 
e0000a3e l       .text  00000000 
e0000a3e l       .text  00000000 
e0000a54 l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a5a l       .text  00000000 
e0000a5c l       .text  00000000 
e0000a5c l       .text  00000000 
e0000a5e l       .text  00000000 
e0000a62 l       .text  00000000 
e0000a64 l       .text  00000000 
e0000a70 l       .text  00000000 
e0000a70 l       .text  00000000 
000007fe l       .debug_loc     00000000 
00000824 l       .debug_loc     00000000 
0000084c l       .debug_loc     00000000 
00000872 l       .debug_loc     00000000 
000008cf l       .debug_loc     00000000 
000008f7 l       .debug_loc     00000000 
0000091d l       .debug_loc     00000000 
00000952 l       .debug_loc     00000000 
00000992 l       .debug_loc     00000000 
000009ad l       .debug_loc     00000000 
000009ce l       .debug_loc     00000000 
000009e9 l       .debug_loc     00000000 
00000a04 l       .debug_loc     00000000 
00000a1f l       .debug_loc     00000000 
00000a3a l       .debug_loc     00000000 
00000a62 l       .debug_loc     00000000 
00000a93 l       .debug_loc     00000000 
00000ac8 l       .debug_loc     00000000 
00000af0 l       .debug_loc     00000000 
00000b0c l       .debug_loc     00000000 
00000b27 l       .debug_loc     00000000 
00000b42 l       .debug_loc     00000000 
00000b5d l       .debug_loc     00000000 
00000b78 l       .debug_loc     00000000 
00000b93 l       .debug_loc     00000000 
00000bae l       .debug_loc     00000000 
00000bc9 l       .debug_loc     00000000 
00000c26 l       .debug_loc     00000000 
00000c4c l       .debug_loc     00000000 
00000c8c l       .debug_loc     00000000 
00000cb4 l       .debug_loc     00000000 
00000cda l       .debug_loc     00000000 
00000d1a l       .debug_loc     00000000 
00000d4c l       .debug_loc     00000000 
00000d78 l       .debug_loc     00000000 
00000d93 l       .debug_loc     00000000 
00000dae l       .debug_loc     00000000 
00000dcf l       .debug_loc     00000000 
00000dea l       .debug_loc     00000000 
00000e10 l       .debug_loc     00000000 
00000e4c l       .debug_loc     00000000 
00000e72 l       .debug_loc     00000000 
00000eb9 l       .debug_loc     00000000 
00000f00 l       .debug_loc     00000000 
00000f3c l       .debug_loc     00000000 
00000f64 l       .debug_loc     00000000 
00000fc1 l       .debug_loc     00000000 
00000feb l       .debug_loc     00000000 
0000102d l       .debug_loc     00000000 
000010b6 l       .debug_loc     00000000 
000010d1 l       .debug_loc     00000000 
000010f7 l       .debug_loc     00000000 
0000111d l       .debug_loc     00000000 
0000113a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000008dd l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000000f0 l       .debug_ranges  00000000 
000008ff l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
0000096c l       .debug_str     00000000 
00000f41 l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
00000913 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
000015ac l       .debug_str     00000000 
00000928 l       .debug_str     00000000 
0000092f l       .debug_str     00000000 
00000935 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000920 l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
00000efb l       .debug_str     00000000 
00000947 l       .debug_str     00000000 
0000094f l       .debug_str     00000000 
0000095a l       .debug_str     00000000 
000009cf l       .debug_str     00000000 
00000a46 l       .debug_str     00000000 
00000a4d l       .debug_str     00000000 
00000a55 l       .debug_str     00000000 
00001200 l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000060 l       .debug_ranges  00000000 
00000078 l       .debug_ranges  00000000 
00000090 l       .debug_ranges  00000000 
000000a8 l       .debug_ranges  00000000 
000000c0 l       .debug_ranges  00000000 
000009d7 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00000313 l       .debug_str     00000000 
00000a63 l       .debug_str     00000000 
00000a66 l       .debug_str     00000000 
00000a59 l       .debug_str     00000000 
00000a6e l       .debug_str     00000000 
00000a70 l       .debug_str     00000000 
000015f6 l       .debug_str     00000000 
000000d8 l       .debug_ranges  00000000 
0000097f l       .debug_str     00000000 
000009df l       .debug_str     00000000 
000009e6 l       .debug_str     00000000 
0000098c l       .debug_str     00000000 
00000996 l       .debug_str     00000000 
000009a3 l       .debug_str     00000000 
000009b5 l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
00000030 l       .debug_ranges  00000000 
000009ba l       .debug_str     00000000 
00000a0a l       .debug_str     00000000 
00000a12 l       .debug_str     00000000 
00000829 l       .debug_str     00000000 
000013f1 l       .debug_str     00000000 
00000f7a l       .debug_str     00000000 
00000a18 l       .debug_str     00000000 
00000a1f l       .debug_str     00000000 
00000a2a l       .debug_str     00000000 
00000a31 l       .debug_str     00000000 
00000a38 l       .debug_str     00000000 
00000a3f l       .debug_str     00000000 
0000095e l       .debug_str     00000000 
000013af l       .debug_str     00000000 
00000965 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
00000c11 l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
000009f2 l       .debug_str     00000000 
00000054 l       .debug_frame   00000000 
e0000a70 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_aes_autogen.c
e0000a70 l       .text  00000000 
e0000a70 l       .text  00000000 
e0000a70 l       .text  00000000 
e0000a70 l       .text  00000000 
e0000a72 l       .text  00000000 
e0000a74 l       .text  00000000 
e0000a78 l       .text  00000000 
e0000a7a l       .text  00000000 
e0000a7c l       .text  00000000 
e0000a7e l       .text  00000000 
e0000a7e l       .text  00000000 
0000115b l       .debug_loc     00000000 
00001176 l       .debug_loc     00000000 
00001191 l       .debug_loc     00000000 
000011ac l       .debug_loc     00000000 
000011c7 l       .debug_loc     00000000 
000011e8 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000a74 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
00000238 l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001fc l       .debug_str     00000000 
0000020c l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000022a l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00000ad6 l       .debug_str     00000000 
00000aa0 l       .debug_str     00000000 
00000abf l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
0000069c l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000658 l       .debug_str     00000000 
00000ae4 l       .debug_str     00000000 
00000afb l       .debug_str     00000000 
00000afe l       .debug_str     00000000 
00000b2d l       .debug_str     00000000 
00000b1a l       .debug_str     00000000 
00000b09 l       .debug_str     00000000 
00000b04 l       .debug_str     00000000 
00000b4c l       .debug_str     00000000 
00000b33 l       .debug_str     00000000 
00000b48 l       .debug_str     00000000 
00000b52 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
00000b69 l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
00000d1d l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000b87 l       .debug_str     00000000 
00000ade l       .debug_str     00000000 
00000bab l       .debug_str     00000000 
00000bb5 l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
00000b9b l       .debug_str     00000000 
00000164 l       .debug_frame   00000000 
e0000a7e l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_aes.c
e0000a7e l       .text  00000000 
e0000a7e l       .text  00000000 
e0000a7e l       .text  00000000 
e0000a7e l       .text  00000000 
e0000a80 l       .text  00000000 
e0000a82 l       .text  00000000 
e0000a82 l       .text  00000000 
e0000a86 l       .text  00000000 
e0000a86 l       .text  00000000 
e0000a88 l       .text  00000000 
e0000a88 l       .text  00000000 
e0000a8a l       .text  00000000 
e0000a8a l       .text  00000000 
e0000a8c l       .text  00000000 
e0000a8c l       .text  00000000 
e0000a8e l       .text  00000000 
e0000a8e l       .text  00000000 
e0000a90 l       .text  00000000 
e0000a90 l       .text  00000000 
e0000a92 l       .text  00000000 
e0000a94 l       .text  00000000 
e0000a94 l       .text  00000000 
e0000a9a l       .text  00000000 
e0000a9a l       .text  00000000 
e0000a9e l       .text  00000000 
e0000a9e l       .text  00000000 
e0000aa0 l       .text  00000000 
e0000aa0 l       .text  00000000 
e0000aa2 l       .text  00000000 
e0000aa2 l       .text  00000000 
e0000aa8 l       .text  00000000 
e0000aa8 l       .text  00000000 
e0000aaa l       .text  00000000 
e0000aaa l       .text  00000000 
e0000aac l       .text  00000000 
e0000aac l       .text  00000000 
e0000aae l       .text  00000000 
e0000aae l       .text  00000000 
e0000ab0 l       .text  00000000 
e0000ab0 l       .text  00000000 
e0000ab2 l       .text  00000000 
e0000ab2 l       .text  00000000 
e0000ab2 l       .text  00000000 
e0000ab2 l       .text  00000000 
e0000ab2 l       .text  00000000 
e0000ab2 l       .text  00000000 
e0000aba l       .text  00000000 
e0000ac2 l       .text  00000000 
e0000ac4 l       .text  00000000 
e0000aca l       .text  00000000 
e0000ace l       .text  00000000 
e0000ad0 l       .text  00000000 
e0000ad2 l       .text  00000000 
e0000ad4 l       .text  00000000 
e0000ad4 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000adc l       .text  00000000 
e0000adc l       .text  00000000 
e0000ae2 l       .text  00000000 
e0000ae2 l       .text  00000000 
e0000ae4 l       .text  00000000 
e0000ae4 l       .text  00000000 
e0000ae6 l       .text  00000000 
e0000aea l       .text  00000000 
e0000aea l       .text  00000000 
e0000aee l       .text  00000000 
e0000aee l       .text  00000000 
e0000af0 l       .text  00000000 
e0000af0 l       .text  00000000 
e0000af8 l       .text  00000000 
e0000afc l       .text  00000000 
e0000afc l       .text  00000000 
e0000afe l       .text  00000000 
e0000afe l       .text  00000000 
e0000b02 l       .text  00000000 
e0000b02 l       .text  00000000 
e0000b06 l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0c l       .text  00000000 
e0000b0c l       .text  00000000 
e0000b10 l       .text  00000000 
e0000b12 l       .text  00000000 
e0000b16 l       .text  00000000 
e0000b16 l       .text  00000000 
e0000b18 l       .text  00000000 
e0000b1c l       .text  00000000 
e0000b20 l       .text  00000000 
e0000b20 l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b24 l       .text  00000000 
e0000b24 l       .text  00000000 
e0000b2c l       .text  00000000 
e0000b2c l       .text  00000000 
e0000b2e l       .text  00000000 
e0000b2e l       .text  00000000 
e0000b30 l       .text  00000000 
e0000b30 l       .text  00000000 
e0000b34 l       .text  00000000 
e0000b34 l       .text  00000000 
e0000b38 l       .text  00000000 
e0000b38 l       .text  00000000 
e0000b3a l       .text  00000000 
e0000b3a l       .text  00000000 
e0000b3c l       .text  00000000 
e0000b3c l       .text  00000000 
e0000b3e l       .text  00000000 
e0000b3e l       .text  00000000 
e0000b42 l       .text  00000000 
e0000b42 l       .text  00000000 
e0000b46 l       .text  00000000 
e0000b46 l       .text  00000000 
e0000b48 l       .text  00000000 
e0000b4c l       .text  00000000 
e0000b50 l       .text  00000000 
e0000b50 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b54 l       .text  00000000 
e0000b54 l       .text  00000000 
e0000b58 l       .text  00000000 
e0000b58 l       .text  00000000 
e0000b5a l       .text  00000000 
e0000b5e l       .text  00000000 
e0000b5e l       .text  00000000 
e0000b60 l       .text  00000000 
e0000b60 l       .text  00000000 
e0000b64 l       .text  00000000 
e0000b6a l       .text  00000000 
e0000b6a l       .text  00000000 
e0000b6c l       .text  00000000 
e0000b72 l       .text  00000000 
e0000b72 l       .text  00000000 
e0000b74 l       .text  00000000 
e0000b74 l       .text  00000000 
e0000b76 l       .text  00000000 
e0000b76 l       .text  00000000 
e0000b78 l       .text  00000000 
e0000b78 l       .text  00000000 
e0000b7c l       .text  00000000 
e0000b7c l       .text  00000000 
e0000b7e l       .text  00000000 
e0000b7e l       .text  00000000 
e0000b82 l       .text  00000000 
e0000b82 l       .text  00000000 
e0000b86 l       .text  00000000 
e0000b86 l       .text  00000000 
e0000b88 l       .text  00000000 
e0000b8e l       .text  00000000 
e0000b8e l       .text  00000000 
e0000b90 l       .text  00000000 
e0000b90 l       .text  00000000 
e0000b92 l       .text  00000000 
e0000b92 l       .text  00000000 
e0000b94 l       .text  00000000 
e0000b94 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b9a l       .text  00000000 
e0000b9e l       .text  00000000 
e0000ba0 l       .text  00000000 
e0000ba0 l       .text  00000000 
e0000ba4 l       .text  00000000 
e0000ba4 l       .text  00000000 
e0000ba6 l       .text  00000000 
e0000ba6 l       .text  00000000 
e0000ba8 l       .text  00000000 
e0000ba8 l       .text  00000000 
e0000bac l       .text  00000000 
e0000bac l       .text  00000000 
e0000bae l       .text  00000000 
e0000bae l       .text  00000000 
e0000bb2 l       .text  00000000 
e0000bb2 l       .text  00000000 
e0000bb4 l       .text  00000000 
e0000bb4 l       .text  00000000 
e0000bb6 l       .text  00000000 
e0000bb6 l       .text  00000000 
e0000bbc l       .text  00000000 
e0000bbc l       .text  00000000 
e0000bbe l       .text  00000000 
e0000bbe l       .text  00000000 
e0000bc0 l       .text  00000000 
e0000bc0 l       .text  00000000 
e0000bc2 l       .text  00000000 
e0000bc2 l       .text  00000000 
e0000bc6 l       .text  00000000 
e0000bc6 l       .text  00000000 
e0000bc8 l       .text  00000000 
e0000bca l       .text  00000000 
e0000bcc l       .text  00000000 
e0000bcc l       .text  00000000 
e0000bce l       .text  00000000 
e0000bce l       .text  00000000 
e0000bd2 l       .text  00000000 
e0000bd8 l       .text  00000000 
e0000bdc l       .text  00000000 
e0000be0 l       .text  00000000 
e0000be0 l       .text  00000000 
e0000be2 l       .text  00000000 
e0000be4 l       .text  00000000 
e0000bea l       .text  00000000 
e0000bea l       .text  00000000 
e0000bea l       .text  00000000 
e0000bea l       .text  00000000 
e0000bea l       .text  00000000 
e0000bea l       .text  00000000 
e0000bea l       .text  00000000 
e0000bec l       .text  00000000 
e0000bec l       .text  00000000 
e0000bee l       .text  00000000 
e0000bee l       .text  00000000 
e0000bf2 l       .text  00000000 
e0000bf2 l       .text  00000000 
e0000bf8 l       .text  00000000 
e0000bf8 l       .text  00000000 
e0000bfa l       .text  00000000 
e0000bfa l       .text  00000000 
e0000bfe l       .text  00000000 
e0000bfe l       .text  00000000 
e0000c00 l       .text  00000000 
e0000c00 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c04 l       .text  00000000 
e0000c04 l       .text  00000000 
e0000c06 l       .text  00000000 
e0000c06 l       .text  00000000 
e0000c08 l       .text  00000000 
e0000c08 l       .text  00000000 
e0000c0c l       .text  00000000 
e0000c0c l       .text  00000000 
e0000c12 l       .text  00000000 
e0000c12 l       .text  00000000 
e0000c16 l       .text  00000000 
e0000c16 l       .text  00000000 
e0000c18 l       .text  00000000 
e0000c18 l       .text  00000000 
e0000c1a l       .text  00000000 
e0000c1a l       .text  00000000 
e0000c1e l       .text  00000000 
e0000c20 l       .text  00000000 
e0000c20 l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c26 l       .text  00000000 
e0000c26 l       .text  00000000 
e0000c28 l       .text  00000000 
e0000c28 l       .text  00000000 
e0000c2c l       .text  00000000 
e0000c2c l       .text  00000000 
e0000c32 l       .text  00000000 
e0000c32 l       .text  00000000 
e0000c34 l       .text  00000000 
e0000c34 l       .text  00000000 
e0000c38 l       .text  00000000 
e0000c38 l       .text  00000000 
e0000c3a l       .text  00000000 
e0000c3a l       .text  00000000 
e0000c3c l       .text  00000000 
e0000c3c l       .text  00000000 
e0000c3e l       .text  00000000 
e0000c3e l       .text  00000000 
e0000c40 l       .text  00000000 
e0000c40 l       .text  00000000 
e0000c46 l       .text  00000000 
e0000c46 l       .text  00000000 
e0000c48 l       .text  00000000 
e0000c48 l       .text  00000000 
e0000c4a l       .text  00000000 
e0000c4a l       .text  00000000 
e0000c4c l       .text  00000000 
e0000c4c l       .text  00000000 
e0000c50 l       .text  00000000 
e0000c50 l       .text  00000000 
e0000c54 l       .text  00000000 
e0000c56 l       .text  00000000 
e0000c56 l       .text  00000000 
e0000c58 l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c62 l       .text  00000000 
e0000c68 l       .text  00000000 
e0000c68 l       .text  00000000 
e0000c6a l       .text  00000000 
e0000c6a l       .text  00000000 
e0000c6e l       .text  00000000 
e0000c6e l       .text  00000000 
e0000c74 l       .text  00000000 
e0000c74 l       .text  00000000 
e0000c76 l       .text  00000000 
e0000c76 l       .text  00000000 
e0000c78 l       .text  00000000 
e0000c78 l       .text  00000000 
e0000c7a l       .text  00000000 
e0000c7a l       .text  00000000 
e0000c7c l       .text  00000000 
e0000c7c l       .text  00000000 
e0000c7e l       .text  00000000 
e0000c7e l       .text  00000000 
e0000c80 l       .text  00000000 
e0000c80 l       .text  00000000 
e0000c82 l       .text  00000000 
e0000c82 l       .text  00000000 
e0000c84 l       .text  00000000 
e0000c86 l       .text  00000000 
e0000c86 l       .text  00000000 
e0000c8a l       .text  00000000 
e0000c8a l       .text  00000000 
e0000c8c l       .text  00000000 
e0000c8c l       .text  00000000 
e0000c8e l       .text  00000000 
e0000c8e l       .text  00000000 
e0000c92 l       .text  00000000 
e0000c92 l       .text  00000000 
e0000c94 l       .text  00000000 
e0000c96 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000ca0 l       .text  00000000 
e0000ca6 l       .text  00000000 
e0000ca8 l       .text  00000000 
e0000cac l       .text  00000000 
e0000cae l       .text  00000000 
e0000cbc l       .text  00000000 
e0000cbc l       .text  00000000 
e0000cbe l       .text  00000000 
e0000cbe l       .text  00000000 
e0000cc2 l       .text  00000000 
e0000cc2 l       .text  00000000 
e0000cc4 l       .text  00000000 
e0000cc8 l       .text  00000000 
e0000cc8 l       .text  00000000 
e0000cca l       .text  00000000 
e0000cca l       .text  00000000 
e0000cce l       .text  00000000 
e0000cce l       .text  00000000 
e0000cd2 l       .text  00000000 
e0000cd2 l       .text  00000000 
e0000cd4 l       .text  00000000 
e0000cd4 l       .text  00000000 
e0000cd8 l       .text  00000000 
e0000cd8 l       .text  00000000 
e0000cdc l       .text  00000000 
e0000cdc l       .text  00000000 
e0000cde l       .text  00000000 
e0000cde l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce6 l       .text  00000000 
e0000ce6 l       .text  00000000 
e0000ce8 l       .text  00000000 
e0000ce8 l       .text  00000000 
e0000cec l       .text  00000000 
e0000cec l       .text  00000000 
e0000cf0 l       .text  00000000 
e0000cf0 l       .text  00000000 
e0000cf2 l       .text  00000000 
e0000cf2 l       .text  00000000 
e0000cf6 l       .text  00000000 
e0000cf6 l       .text  00000000 
e0000cfa l       .text  00000000 
e0000cfa l       .text  00000000 
e0000cfc l       .text  00000000 
e0000cfc l       .text  00000000 
e0000d00 l       .text  00000000 
e0000d00 l       .text  00000000 
e0000d02 l       .text  00000000 
e0000d0a l       .text  00000000 
e0000d0e l       .text  00000000 
e0000d0e l       .text  00000000 
00001203 l       .debug_loc     00000000 
00001229 l       .debug_loc     00000000 
00001244 l       .debug_loc     00000000 
00001263 l       .debug_loc     00000000 
0000127f l       .debug_loc     00000000 
0000129d l       .debug_loc     00000000 
000012c3 l       .debug_loc     00000000 
000012e9 l       .debug_loc     00000000 
0000130f l       .debug_loc     00000000 
00001335 l       .debug_loc     00000000 
00001350 l       .debug_loc     00000000 
00001377 l       .debug_loc     00000000 
00001399 l       .debug_loc     00000000 
000013d5 l       .debug_loc     00000000 
000013f0 l       .debug_loc     00000000 
00001413 l       .debug_loc     00000000 
00001435 l       .debug_loc     00000000 
00001450 l       .debug_loc     00000000 
0000146b l       .debug_loc     00000000 
0000148d l       .debug_loc     00000000 
000014af l       .debug_loc     00000000 
000014cf l       .debug_loc     00000000 
000014ef l       .debug_loc     00000000 
0000151f l       .debug_loc     00000000 
00001541 l       .debug_loc     00000000 
00001561 l       .debug_loc     00000000 
00001581 l       .debug_loc     00000000 
000015a7 l       .debug_loc     00000000 
000015cd l       .debug_loc     00000000 
000015f5 l       .debug_loc     00000000 
00001642 l       .debug_loc     00000000 
0000165d l       .debug_loc     00000000 
0000167f l       .debug_loc     00000000 
000016a0 l       .debug_loc     00000000 
000016d3 l       .debug_loc     00000000 
000016f9 l       .debug_loc     00000000 
00001714 l       .debug_loc     00000000 
0000173a l       .debug_loc     00000000 
0000176d l       .debug_loc     00000000 
00001793 l       .debug_loc     00000000 
000017ae l       .debug_loc     00000000 
000017d4 l       .debug_loc     00000000 
00001824 l       .debug_loc     00000000 
00001858 l       .debug_loc     00000000 
0000187e l       .debug_loc     00000000 
000018b2 l       .debug_loc     00000000 
000018d8 l       .debug_loc     00000000 
000018fe l       .debug_loc     00000000 
0000191d l       .debug_loc     00000000 
00001939 l       .debug_loc     00000000 
00001954 l       .debug_loc     00000000 
0000197c l       .debug_loc     00000000 
000019cc l       .debug_loc     00000000 
00001a00 l       .debug_loc     00000000 
00001a26 l       .debug_loc     00000000 
00001a5a l       .debug_loc     00000000 
00001a80 l       .debug_loc     00000000 
00001a9b l       .debug_loc     00000000 
00001ab6 l       .debug_loc     00000000 
00001b06 l       .debug_loc     00000000 
00001b3a l       .debug_loc     00000000 
00001b6e l       .debug_loc     00000000 
00001b94 l       .debug_loc     00000000 
00001bc5 l       .debug_loc     00000000 
00001beb l       .debug_loc     00000000 
00001c1c l       .debug_loc     00000000 
00001c42 l       .debug_loc     00000000 
00001c5d l       .debug_loc     00000000 
00001c90 l       .debug_loc     00000000 
00001cab l       .debug_loc     00000000 
00001cdc l       .debug_loc     00000000 
00001d0f l       .debug_loc     00000000 
00001d36 l       .debug_loc     00000000 
00001d51 l       .debug_loc     00000000 
00001d78 l       .debug_loc     00000000 
00001d93 l       .debug_loc     00000000 
00001dd6 l       .debug_loc     00000000 
00001e0a l       .debug_loc     00000000 
00001e3e l       .debug_loc     00000000 
00001e64 l       .debug_loc     00000000 
00001e8a l       .debug_loc     00000000 
00001eb0 l       .debug_loc     00000000 
00001edf l       .debug_loc     00000000 
00001efa l       .debug_loc     00000000 
00001f62 l       .debug_loc     00000000 
00001f88 l       .debug_loc     00000000 
00001fae l       .debug_loc     00000000 
00001fc9 l       .debug_loc     00000000 
00001fe4 l       .debug_loc     00000000 
00001fff l       .debug_loc     00000000 
0000201a l       .debug_loc     00000000 
00002035 l       .debug_loc     00000000 
00002050 l       .debug_loc     00000000 
0000206b l       .debug_loc     00000000 
00002086 l       .debug_loc     00000000 
000020a1 l       .debug_loc     00000000 
000020bc l       .debug_loc     00000000 
000020d7 l       .debug_loc     00000000 
00002127 l       .debug_loc     00000000 
0000215b l       .debug_loc     00000000 
0000218f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000bc4 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000378 l       .debug_ranges  00000000 
00000238 l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001fc l       .debug_str     00000000 
0000020c l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000022a l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
000002f4 l       .debug_str     00000000 
000002c4 l       .debug_str     00000000 
000002dc l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000306 l       .debug_str     00000000 
00000315 l       .debug_str     00000000 
00000324 l       .debug_str     00000000 
00000333 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000388 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
0000036c l       .debug_str     00000000 
0000037a l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
0000039b l       .debug_str     00000000 
000003b6 l       .debug_str     00000000 
0000041a l       .debug_str     00000000 
000003ec l       .debug_str     00000000 
00000407 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
0000042f l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
0000045d l       .debug_str     00000000 
00000c47 l       .debug_str     00000000 
00000be0 l       .debug_str     00000000 
00000bf4 l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000c2e l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
0000048c l       .debug_str     00000000 
0000049e l       .debug_str     00000000 
000004b1 l       .debug_str     00000000 
000004c9 l       .debug_str     00000000 
000004e2 l       .debug_str     00000000 
000004fa l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000c57 l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
00000d1d l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000c6a l       .debug_str     00000000 
00000b48 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
00000c80 l       .debug_str     00000000 
00000658 l       .debug_str     00000000 
00000c99 l       .debug_str     00000000 
00000ca2 l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000cae l       .debug_str     00000000 
00000afb l       .debug_str     00000000 
00000b52 l       .debug_str     00000000 
00000b69 l       .debug_str     00000000 
00000b2d l       .debug_str     00000000 
00000cc2 l       .debug_str     00000000 
000006e5 l       .debug_str     00000000 
00000c9e l       .debug_str     00000000 
00000cd5 l       .debug_str     00000000 
00000cde l       .debug_str     00000000 
000007ca l       .debug_str     00000000 
00000666 l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
00000880 l       .debug_str     00000000 
000007c2 l       .debug_str     00000000 
000003e2 l       .debug_str     00000000 
00000359 l       .debug_str     00000000 
0000072b l       .debug_str     00000000 
000003db l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
0000047d l       .debug_str     00000000 
00000793 l       .debug_str     00000000 
000007a8 l       .debug_str     00000000 
000007b4 l       .debug_str     00000000 
00000708 l       .debug_str     00000000 
0000071c l       .debug_str     00000000 
00000733 l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00000763 l       .debug_str     00000000 
0000077a l       .debug_str     00000000 
00000ae4 l       .debug_str     00000000 
00000afe l       .debug_str     00000000 
00000b1a l       .debug_str     00000000 
00000b09 l       .debug_str     00000000 
00000b04 l       .debug_str     00000000 
00000b4c l       .debug_str     00000000 
00000b33 l       .debug_str     00000000 
00000ce8 l       .debug_str     00000000 
00000cf6 l       .debug_str     00000000 
00000cfe l       .debug_str     00000000 
00000826 l       .debug_str     00000000 
00000d0f l       .debug_str     00000000 
00000d18 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
000008d1 l       .debug_str     00000000 
000006fa l       .debug_str     00000000 
00000868 l       .debug_str     00000000 
00000dbb l       .debug_str     00000000 
0000023c l       .debug_str     00000000 
00000198 l       .debug_ranges  00000000 
000001b0 l       .debug_ranges  00000000 
000001e0 l       .debug_ranges  00000000 
000001c8 l       .debug_ranges  00000000 
00000210 l       .debug_ranges  00000000 
000001f8 l       .debug_ranges  00000000 
00000248 l       .debug_ranges  00000000 
00000228 l       .debug_ranges  00000000 
0000084c l       .debug_str     00000000 
00000d24 l       .debug_str     00000000 
00000819 l       .debug_str     00000000 
00000288 l       .debug_ranges  00000000 
00000268 l       .debug_ranges  00000000 
00000d34 l       .debug_str     00000000 
00000d45 l       .debug_str     00000000 
00000838 l       .debug_str     00000000 
000002c0 l       .debug_ranges  00000000 
000002a8 l       .debug_ranges  00000000 
00000d99 l       .debug_str     00000000 
00000dcb l       .debug_str     00000000 
00000dd6 l       .debug_str     00000000 
00000de2 l       .debug_str     00000000 
00000dee l       .debug_str     00000000 
000002f8 l       .debug_ranges  00000000 
000002e0 l       .debug_ranges  00000000 
00000328 l       .debug_ranges  00000000 
00000310 l       .debug_ranges  00000000 
00000c4f l       .debug_str     00000000 
00000d57 l       .debug_str     00000000 
00000d63 l       .debug_str     00000000 
00000d73 l       .debug_str     00000000 
00000d83 l       .debug_str     00000000 
00000806 l       .debug_str     00000000 
000006e1 l       .debug_str     00000000 
00000dae l       .debug_str     00000000 
00000358 l       .debug_ranges  00000000 
00000340 l       .debug_ranges  00000000 
0000086c l       .debug_str     00000000 
000007dd l       .debug_str     00000000 
00000861 l       .debug_str     00000000 
000007d6 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000dbe l       .debug_str     00000000 
000007ef l       .debug_str     00000000 
000008a4 l       .debug_str     00000000 
0000082b l       .debug_str     00000000 
00000dfb l       .debug_str     00000000 
0000066b l       .debug_str     00000000 
00000198 l       .debug_frame   00000000 
e0000ab2 l       .text  00000000 
e0000bea l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c98 l       .text  00000000 
e0000d0e l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0000d0e l       .text  00000000 
e0000d0e l       .text  00000000 
e0000d0e l       .text  00000000 
e0000d10 l       .text  00000000 
e0000d12 l       .text  00000000 
e0000d18 l       .text  00000000 
e0000d1c l       .text  00000000 
e0000d20 l       .text  00000000 
e0000d24 l       .text  00000000 
e0000d24 l       .text  00000000 
e0000d2e l       .text  00000000 
e0000d30 l       .text  00000000 
e0000d30 l       .text  00000000 
e0000d32 l       .text  00000000 
e0000d32 l       .text  00000000 
e0000d38 l       .text  00000000 
e0000d38 l       .text  00000000 
e0000d42 l       .text  00000000 
e0000d44 l       .text  00000000 
e0000d44 l       .text  00000000 
e0000d58 l       .text  00000000 
e0000d58 l       .text  00000000 
e0000d5a l       .text  00000000 
e0000d5a l       .text  00000000 
e0000d64 l       .text  00000000 
e0000d66 l       .text  00000000 
e0000d66 l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d7c l       .text  00000000 
e0002420 l     O .logs.fields   00000014 test_status_set.kLogFields.2
e0000d7c l       .text  00000000 
e0000d88 l       .text  00000000 
e0000d88 l       .text  00000000 
e0000d92 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d94 l       .text  00000000 
e000240c l     O .logs.fields   00000014 test_status_set.kLogFields
e0000d9c l       .text  00000000 
e0000da8 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000db2 l       .text  00000000 
e0000db4 l       .text  00000000 
e0000db4 l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dbc l       .text  00000000 
000021b5 l       .debug_loc     00000000 
000021d3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000e0d l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000006d5 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
000002b8 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
0000104a l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
00000258 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000283 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a6 l       .debug_str     00000000 
00000e3b l       .debug_str     00000000 
00000e62 l       .debug_str     00000000 
00000e54 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
00000b69 l       .debug_str     00000000 
00000d1d l       .debug_str     00000000 
00000b2d l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
000006be l       .debug_str     00000000 
000006a9 l       .debug_str     00000000 
00000e7a l       .debug_str     00000000 
00000248 l       .debug_frame   00000000 
e0000dbc l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
e0000dbc l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dc0 l       .text  00000000 
e0000dc0 l       .text  00000000 
e0000dc2 l       .text  00000000 
e0000dc2 l       .text  00000000 
000021e6 l       .debug_loc     00000000 
00002201 l       .debug_loc     00000000 
00002228 l       .debug_loc     00000000 
0000224f l       .debug_loc     00000000 
0000226b l       .debug_loc     00000000 
00002298 l       .debug_loc     00000000 
000022bf l       .debug_loc     00000000 
000022e6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000e80 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000003c8 l       .debug_ranges  00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
0000060d l       .debug_str     00000000 
00000602 l       .debug_str     00000000 
000005f5 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00000ebe l       .debug_str     00000000 
000005df l       .debug_str     00000000 
00000702 l       .debug_str     00000000 
00000ea4 l       .debug_str     00000000 
00000e9d l       .debug_str     00000000 
00000eab l       .debug_str     00000000 
00000e7a l       .debug_str     00000000 
00000ecf l       .debug_str     00000000 
00000274 l       .debug_frame   00000000 
e0000dc2 l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
e0000dc2 l       .text  00000000 
e0000dc2 l       .text  00000000 
e0000dc2 l       .text  00000000 
e0000dc4 l       .text  00000000 
e0000dca l       .text  00000000 
e0000dcc l       .text  00000000 
e0000dda l       .text  00000000 
e0000de4 l       .text  00000000 
e0000dea l       .text  00000000 
e0000dea l       .text  00000000 
e0000dec l       .text  00000000 
e0000df0 l       .text  00000000 
e0000df0 l       .text  00000000 
e0000dfa l       .text  00000000 
e0000dfa l       .text  00000000 
e0000dfc l       .text  00000000 
e0000e00 l       .text  00000000 
e0000e00 l       .text  00000000 
e0000e02 l       .text  00000000 
e0000e02 l       .text  00000000 
e0000e04 l       .text  00000000 
e0000e04 l       .text  00000000 
e0000e08 l       .text  00000000 
e0000e08 l       .text  00000000 
e0000e0e l       .text  00000000 
e0000e1c l       .text  00000000 
e0000e1c l       .text  00000000 
e0002284 l     O .bss   00000002 base_log_internal_core.global_log_counter
e0000e24 l       .text  00000000 
e0000e30 l       .text  00000000 
e0000e32 l       .text  00000000 
e0000e3c l       .text  00000000 
e0000e3c l       .text  00000000 
e0000e48 l       .text  00000000 
e0000e48 l       .text  00000000 
e0000e4a l       .text  00000000 
e0000e4c l       .text  00000000 
e0000e50 l       .text  00000000 
e0000e50 l       .text  00000000 
e0000e5a l       .text  00000000 
e0000e5a l       .text  00000000 
e0000e64 l       .text  00000000 
e0000e64 l       .text  00000000 
e0000e64 l       .text  00000000 
e0000e64 l       .text  00000000 
e0000e64 l       .text  00000000 
e0000e66 l       .text  00000000 
e0000e6c l       .text  00000000 
e0000e6c l       .text  00000000 
e0000e76 l       .text  00000000 
e0000e76 l       .text  00000000 
e0000e7c l       .text  00000000 
e0000e7c l       .text  00000000 
e0000e80 l       .text  00000000 
e0000e80 l       .text  00000000 
e0000e82 l       .text  00000000 
e0000e82 l       .text  00000000 
e0000e84 l       .text  00000000 
e0000e84 l       .text  00000000 
e0000e86 l       .text  00000000 
e0000e8a l       .text  00000000 
e0000e8e l       .text  00000000 
e0000e90 l       .text  00000000 
e0000e90 l       .text  00000000 
e0000e92 l       .text  00000000 
e0000e92 l       .text  00000000 
e0000e94 l       .text  00000000 
e0000e94 l       .text  00000000 
e0000e98 l       .text  00000000 
e0000e98 l       .text  00000000 
00002302 l       .debug_loc     00000000 
0000232a l       .debug_loc     00000000 
00002345 l       .debug_loc     00000000 
00002381 l       .debug_loc     00000000 
0000239d l       .debug_loc     00000000 
000023b8 l       .debug_loc     00000000 
000023d3 l       .debug_loc     00000000 
000023ee l       .debug_loc     00000000 
0000242c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000ee1 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000003f0 l       .debug_ranges  00000000 
000006be l       .debug_str     00000000 
00000efd l       .debug_str     00000000 
00000f55 l       .debug_str     00000000 
00000f59 l       .debug_str     00000000 
00000f67 l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000a01 l       .debug_str     00000000 
000009f2 l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000f10 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000f1a l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
00000f2d l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000f34 l       .debug_str     00000000 
00000f3c l       .debug_str     00000000 
000008d1 l       .debug_str     00000000 
00000f48 l       .debug_str     00000000 
00000b69 l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
00000d1d l       .debug_str     00000000 
00000b2d l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
000006a9 l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00000f71 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
0000104a l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
00000920 l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
000002d4 l       .debug_frame   00000000 
e0000e64 l       .text  00000000 
e0000e98 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
e0000e98 l     F .text  00000004 base_dev_null
e0002288 l     O .bss   00000008 base_stdout
e0000e98 l       .text  00000000 
e0000e98 l       .text  00000000 
e0000e98 l       .text  00000000 
e0000e9a l       .text  00000000 
e0000e9a l       .text  00000000 
e0000e9c l       .text  00000000 
e0000e9c l       .text  00000000 
e0000e9c l       .text  00000000 
e0000e9c l       .text  00000000 
e0000e9c l       .text  00000000 
e0000e9e l       .text  00000000 
e0000ea0 l       .text  00000000 
e0000eae l       .text  00000000 
e0000eb6 l       .text  00000000 
e0000eb6 l       .text  00000000 
e0000ebc l       .text  00000000 
e0000ebc l       .text  00000000 
e0000ebe l       .text  00000000 
e0000ebe l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec4 l       .text  00000000 
e0000ec6 l       .text  00000000 
e0000ec8 l       .text  00000000 
e0000ec8 l       .text  00000000 
e0000ece l       .text  00000000 
e0000ece l       .text  00000000 
e0000ece l       .text  00000000 
e0000ece l       .text  00000000 
e0000ece l       .text  00000000 
e0000ed6 l       .text  00000000 
e0000edc l       .text  00000000 
e0000edc l       .text  00000000 
e0000ede l       .text  00000000 
e0000ede l       .text  00000000 
e0000ee4 l       .text  00000000 
e0000ee6 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000eea l       .text  00000000 
e0000f04 l       .text  00000000 
e0000f06 l       .text  00000000 
e0000f08 l       .text  00000000 
e0000f0a l       .text  00000000 
e0000f0c l       .text  00000000 
e0000f0e l       .text  00000000 
e0000f10 l       .text  00000000 
e0000f18 l       .text  00000000 
e0000f18 l       .text  00000000 
e0000f1a l       .text  00000000 
e0000f1a l       .text  00000000 
e0000f1e l       .text  00000000 
e0000f22 l       .text  00000000 
e0000f36 l       .text  00000000 
e0000f36 l       .text  00000000 
e0000f40 l       .text  00000000 
e0000f44 l       .text  00000000 
e0000f48 l       .text  00000000 
e0000f4a l       .text  00000000 
e0000f4c l       .text  00000000 
e0000f4c l       .text  00000000 
e0000f4e l       .text  00000000 
e0000f50 l       .text  00000000 
e0000f56 l       .text  00000000 
e0000f56 l       .text  00000000 
e0000f58 l       .text  00000000 
e0000f58 l       .text  00000000 
e0000f5c l       .text  00000000 
e0000f5c l       .text  00000000 
e0000f68 l       .text  00000000 
e0000f6c l       .text  00000000 
e0000f6c l       .text  00000000 
e0000f78 l       .text  00000000 
e0000f78 l       .text  00000000 
e0000f80 l       .text  00000000 
e0000f80 l       .text  00000000 
e0000f84 l       .text  00000000 
e0000f84 l       .text  00000000 
e0000f92 l       .text  00000000 
e0000f92 l       .text  00000000 
e0000f96 l       .text  00000000 
e0000f9e l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa6 l       .text  00000000 
e0000fac l       .text  00000000 
e0000fb0 l       .text  00000000 
e0000fb2 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fba l       .text  00000000 
e0000fc0 l       .text  00000000 
e0000fc0 l       .text  00000000 
e0000fc4 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fda l       .text  00000000 
e0000fe0 l       .text  00000000 
e0000fe4 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0000ff0 l       .text  00000000 
e0000ff2 l       .text  00000000 
e0001000 l       .text  00000000 
e0001000 l       .text  00000000 
e0001004 l       .text  00000000 
e0001010 l       .text  00000000 
e0001010 l       .text  00000000 
e0001014 l       .text  00000000 
e0001014 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001024 l       .text  00000000 
e0001028 l       .text  00000000 
e0001028 l       .text  00000000 
e000102c l       .text  00000000 
e0002010 l     O .rodata        00000010 kDigitsLow
e000103e l       .text  00000000 
e000103e l       .text  00000000 
e0001046 l       .text  00000000 
e000104e l       .text  00000000 
e000104e l       .text  00000000 
e0001058 l       .text  00000000 
e0001058 l       .text  00000000 
e000105c l       .text  00000000 
e000105c l       .text  00000000 
e0001066 l       .text  00000000 
e0001066 l       .text  00000000 
e000106e l       .text  00000000 
e000106e l       .text  00000000 
e0001072 l       .text  00000000 
e000203d l     O .rodata        00000010 kDigitsHigh
e000107c l       .text  00000000 
e000107c l       .text  00000000 
e0001086 l       .text  00000000 
e0001086 l       .text  00000000 
e000108a l       .text  00000000 
e0001094 l       .text  00000000 
e0001094 l       .text  00000000 
e0001098 l       .text  00000000 
e00010a2 l       .text  00000000 
e00010a2 l       .text  00000000 
e00010aa l       .text  00000000 
e00010aa l       .text  00000000 
e00010ae l       .text  00000000 
e00010b8 l       .text  00000000 
e00010b8 l       .text  00000000 
e00010c2 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010ca l       .text  00000000 
e00010ca l       .text  00000000 
e00010d6 l       .text  00000000 
e00010d6 l       .text  00000000 
e00010da l       .text  00000000 
e00010e4 l       .text  00000000 
e00010e8 l       .text  00000000 
e00010e8 l       .text  00000000 
e00010ea l       .text  00000000 
e00010ea l       .text  00000000 
e00010ee l       .text  00000000 
e00010ee l       .text  00000000 
e00010f2 l       .text  00000000 
e00010fc l       .text  00000000 
e00010fc l       .text  00000000 
e0001100 l       .text  00000000 
e000110c l       .text  00000000 
e000110c l       .text  00000000 
e0001110 l       .text  00000000 
e0001110 l       .text  00000000 
e000111e l       .text  00000000 
e000111e l       .text  00000000 
e0001128 l       .text  00000000 
e0001128 l       .text  00000000 
e000112c l       .text  00000000 
e000112c l       .text  00000000 
e000145a l     F .text  0000007e write_digits
e0001142 l       .text  00000000 
e0001142 l       .text  00000000 
e0001148 l       .text  00000000 
e0001148 l       .text  00000000 
e0001152 l       .text  00000000 
e0001152 l       .text  00000000 
e0001154 l       .text  00000000 
e000115e l       .text  00000000 
e000115e l       .text  00000000 
e0001168 l       .text  00000000 
e0001168 l       .text  00000000 
e000116a l       .text  00000000 
e000116a l       .text  00000000 
e000116c l       .text  00000000 
e000116c l       .text  00000000 
e0001170 l       .text  00000000 
e0001170 l       .text  00000000 
e0001174 l       .text  00000000 
e0001176 l       .text  00000000 
e000117a l       .text  00000000 
e000117a l       .text  00000000 
e000117e l       .text  00000000 
e000117e l       .text  00000000 
e000118a l       .text  00000000 
e000118a l       .text  00000000 
e000118c l       .text  00000000 
e000118c l       .text  00000000 
e000118e l       .text  00000000 
e000118e l       .text  00000000 
e0001196 l       .text  00000000 
e0001196 l       .text  00000000 
e000119a l       .text  00000000 
e000119a l       .text  00000000 
e00011a8 l       .text  00000000 
e00011a8 l       .text  00000000 
e00011aa l       .text  00000000 
e00011b8 l       .text  00000000 
e00011b8 l       .text  00000000 
e00011bc l       .text  00000000 
e00011bc l       .text  00000000 
e00011c0 l       .text  00000000 
e00011c0 l       .text  00000000 
e00011ce l       .text  00000000 
e00011ce l       .text  00000000 
e00011d2 l       .text  00000000 
e00011d2 l       .text  00000000 
e00011da l       .text  00000000 
e00011da l       .text  00000000 
e00011dc l       .text  00000000 
e00011dc l       .text  00000000 
e00011de l       .text  00000000 
e00011de l       .text  00000000 
e00011f2 l       .text  00000000 
e00011f2 l       .text  00000000 
e00011f4 l       .text  00000000 
e0001202 l       .text  00000000 
e0001202 l       .text  00000000 
e0001204 l       .text  00000000 
e0001204 l       .text  00000000 
e0001206 l       .text  00000000 
e000120e l       .text  00000000 
e0001212 l       .text  00000000 
e0001214 l       .text  00000000 
e000121e l       .text  00000000 
e000121e l       .text  00000000 
e0001222 l       .text  00000000 
e000122c l       .text  00000000 
e000122c l       .text  00000000 
e0001230 l       .text  00000000 
e000123c l       .text  00000000 
e000123c l       .text  00000000 
e0001240 l       .text  00000000 
e0001240 l       .text  00000000 
e000124a l       .text  00000000 
e000124a l       .text  00000000 
e0001252 l       .text  00000000 
e0001252 l       .text  00000000 
e0001256 l       .text  00000000 
e000125e l       .text  00000000 
e000125e l       .text  00000000 
e0001268 l       .text  00000000 
e0001268 l       .text  00000000 
e0001272 l       .text  00000000 
e0001272 l       .text  00000000 
e0001276 l       .text  00000000 
e000127e l       .text  00000000 
e000127e l       .text  00000000 
e0001288 l       .text  00000000 
e000128a l       .text  00000000 
e000128a l       .text  00000000 
e000128e l       .text  00000000 
e0001298 l       .text  00000000 
e0001298 l       .text  00000000 
e00012a0 l       .text  00000000 
e00012a0 l       .text  00000000 
e00012a4 l       .text  00000000 
e00012ac l       .text  00000000 
e00012ac l       .text  00000000 
e0001376 l     F .text  000000e4 hex_dump
e00012b6 l       .text  00000000 
e00012b8 l       .text  00000000 
e000204d l     O .rodata        0000000f kUnknownSpec
e00012b8 l       .text  00000000 
e00012c2 l       .text  00000000 
e00012c2 l       .text  00000000 
e00012c6 l       .text  00000000 
e00012c8 l       .text  00000000 
e00012c8 l       .text  00000000 
e00012cc l       .text  00000000 
e00012d2 l       .text  00000000 
e00012d2 l       .text  00000000 
e00012d6 l       .text  00000000 
e00012e2 l       .text  00000000 
e00012e2 l       .text  00000000 
e00012e4 l       .text  00000000 
e00012e4 l       .text  00000000 
e00012f8 l       .text  00000000 
e00012f8 l       .text  00000000 
e00012fc l       .text  00000000 
e000130a l       .text  00000000 
e000130a l       .text  00000000 
e000130e l       .text  00000000 
e000130e l       .text  00000000 
e0001314 l       .text  00000000 
e0001314 l       .text  00000000 
e0001316 l       .text  00000000 
e0001316 l       .text  00000000 
e0001318 l       .text  00000000 
e0001318 l       .text  00000000 
e0001320 l       .text  00000000 
e0001322 l       .text  00000000 
e0001324 l       .text  00000000 
e000132a l       .text  00000000 
e000132a l       .text  00000000 
e0001336 l       .text  00000000 
e0002020 l     O .rodata        00000011 kErrorNul
e0001336 l       .text  00000000 
e0001340 l       .text  00000000 
e0001340 l       .text  00000000 
e0001344 l       .text  00000000 
e0001348 l       .text  00000000 
e000134a l       .text  00000000 
e000134a l       .text  00000000 
e000135a l       .text  00000000 
e000135e l       .text  00000000 
e000136a l       .text  00000000 
e0002031 l     O .rodata        0000000c kErrorTooWide
e000136a l       .text  00000000 
e0001376 l       .text  00000000 
e0001376 l       .text  00000000 
e0001376 l       .text  00000000 
e0001376 l       .text  00000000 
e0001376 l       .text  00000000 
e0001376 l       .text  00000000 
e0001378 l       .text  00000000 
e0001390 l       .text  00000000 
e0001392 l       .text  00000000 
e0001394 l       .text  00000000 
e0001396 l       .text  00000000 
e0001398 l       .text  00000000 
e000139c l       .text  00000000 
e000139c l       .text  00000000 
e00013a0 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013ae l       .text  00000000 
e00013ae l       .text  00000000 
e00013b0 l       .text  00000000 
e00013b2 l       .text  00000000 
e00013b8 l       .text  00000000 
e00013b8 l       .text  00000000 
e00013bc l       .text  00000000 
e00013c0 l       .text  00000000 
e00013c0 l       .text  00000000 
e00013c8 l       .text  00000000 
e00013c8 l       .text  00000000 
e00013ca l       .text  00000000 
e00013cc l       .text  00000000 
e00013cc l       .text  00000000 
e00013ce l       .text  00000000 
e00013ce l       .text  00000000 
e00013d4 l       .text  00000000 
e00013d4 l       .text  00000000 
e00013d6 l       .text  00000000 
e00013d6 l       .text  00000000 
e00013da l       .text  00000000 
e00013de l       .text  00000000 
e00013e4 l       .text  00000000 
e00013e4 l       .text  00000000 
e00013ea l       .text  00000000 
e00013f2 l       .text  00000000 
e00013f2 l       .text  00000000 
e00013f4 l       .text  00000000 
e00013f8 l       .text  00000000 
e00013fc l       .text  00000000 
e0001402 l       .text  00000000 
e0001406 l       .text  00000000 
e000140a l       .text  00000000 
e000140c l       .text  00000000 
e0001412 l       .text  00000000 
e0001414 l       .text  00000000 
e000141c l       .text  00000000 
e0001422 l       .text  00000000 
e0001426 l       .text  00000000 
e0001426 l       .text  00000000 
e0001428 l       .text  00000000 
e000142a l       .text  00000000 
e000142a l       .text  00000000 
e000142c l       .text  00000000 
e000142e l       .text  00000000 
e0001432 l       .text  00000000 
e0001432 l       .text  00000000 
e0001434 l       .text  00000000 
e000143a l       .text  00000000 
e000143a l       .text  00000000 
e000143c l       .text  00000000 
e0001444 l       .text  00000000 
e0001446 l       .text  00000000 
e000144a l       .text  00000000 
e000144c l       .text  00000000 
e000144e l       .text  00000000 
e0001450 l       .text  00000000 
e000145a l       .text  00000000 
e000145a l       .text  00000000 
e000145a l       .text  00000000 
e000145a l       .text  00000000 
e000145a l       .text  00000000 
e000145c l       .text  00000000 
e000145e l       .text  00000000 
e0001460 l       .text  00000000 
e0001460 l       .text  00000000 
e0001462 l       .text  00000000 
e0001464 l       .text  00000000 
e0001468 l       .text  00000000 
e0001468 l       .text  00000000 
e000146a l       .text  00000000 
e000146a l       .text  00000000 
e0001476 l       .text  00000000 
e0001476 l       .text  00000000 
e0001478 l       .text  00000000 
e000147c l       .text  00000000 
e0001484 l       .text  00000000 
e0001484 l       .text  00000000 
e0001486 l       .text  00000000 
e000148a l       .text  00000000 
e000148e l       .text  00000000 
e000148e l       .text  00000000 
e0001490 l       .text  00000000 
e0001490 l       .text  00000000 
e0001494 l       .text  00000000 
e000149a l       .text  00000000 
e000149a l       .text  00000000 
e000149c l       .text  00000000 
e000149e l       .text  00000000 
e00014a0 l       .text  00000000 
e00014a4 l       .text  00000000 
e00014a8 l       .text  00000000 
e00014ac l       .text  00000000 
e00014ac l       .text  00000000 
e00014b6 l       .text  00000000 
e00014ba l       .text  00000000 
e00014bc l       .text  00000000 
e00014c0 l       .text  00000000 
e00014c4 l       .text  00000000 
e00014c6 l       .text  00000000 
e00014c8 l       .text  00000000 
e00014ca l       .text  00000000 
e00014ca l       .text  00000000 
e00014d0 l       .text  00000000 
e00014d2 l       .text  00000000 
e00014d2 l       .text  00000000 
e00014d8 l       .text  00000000 
e00014d8 l       .text  00000000 
00002449 l       .debug_loc     00000000 
00002475 l       .debug_loc     00000000 
00002490 l       .debug_loc     00000000 
000024b6 l       .debug_loc     00000000 
000024e2 l       .debug_loc     00000000 
00002513 l       .debug_loc     00000000 
00002544 l       .debug_loc     00000000 
00002580 l       .debug_loc     00000000 
000025b1 l       .debug_loc     00000000 
000025d8 l       .debug_loc     00000000 
00002609 l       .debug_loc     00000000 
00002624 l       .debug_loc     00000000 
00002640 l       .debug_loc     00000000 
0000265b l       .debug_loc     00000000 
00002681 l       .debug_loc     00000000 
000026a7 l       .debug_loc     00000000 
000026e3 l       .debug_loc     00000000 
000027ee l       .debug_loc     00000000 
00002948 l       .debug_loc     00000000 
00002a48 l       .debug_loc     00000000 
00002b53 l       .debug_loc     00000000 
00002b73 l       .debug_loc     00000000 
00002b99 l       .debug_loc     00000000 
00002bc9 l       .debug_loc     00000000 
00002e01 l       .debug_loc     00000000 
00002e1d l       .debug_loc     00000000 
00002e38 l       .debug_loc     00000000 
00002fad l       .debug_loc     00000000 
000030fd l       .debug_loc     00000000 
00003211 l       .debug_loc     00000000 
00003237 l       .debug_loc     00000000 
00003252 l       .debug_loc     00000000 
0000326d l       .debug_loc     00000000 
00003288 l       .debug_loc     00000000 
000032a3 l       .debug_loc     00000000 
000032be l       .debug_loc     00000000 
000032da l       .debug_loc     00000000 
000032f5 l       .debug_loc     00000000 
00003310 l       .debug_loc     00000000 
0000332b l       .debug_loc     00000000 
00003346 l       .debug_loc     00000000 
00003378 l       .debug_loc     00000000 
000033ab l       .debug_loc     00000000 
000033c6 l       .debug_loc     00000000 
00003419 l       .debug_loc     00000000 
0000344c l       .debug_loc     00000000 
00003467 l       .debug_loc     00000000 
00003482 l       .debug_loc     00000000 
0000349d l       .debug_loc     00000000 
000034b8 l       .debug_loc     00000000 
000034d3 l       .debug_loc     00000000 
000034ee l       .debug_loc     00000000 
00003509 l       .debug_loc     00000000 
00003524 l       .debug_loc     00000000 
0000353f l       .debug_loc     00000000 
0000355a l       .debug_loc     00000000 
00003575 l       .debug_loc     00000000 
00003591 l       .debug_loc     00000000 
000035b0 l       .debug_loc     00000000 
000035cb l       .debug_loc     00000000 
000035fc l       .debug_loc     00000000 
00003622 l       .debug_loc     00000000 
00003653 l       .debug_loc     00000000 
00003684 l       .debug_loc     00000000 
0000369f l       .debug_loc     00000000 
000036ba l       .debug_loc     00000000 
000036d5 l       .debug_loc     00000000 
00003706 l       .debug_loc     00000000 
00003721 l       .debug_loc     00000000 
0000373c l       .debug_loc     00000000 
00003758 l       .debug_loc     00000000 
0000377e l       .debug_loc     00000000 
000037af l       .debug_loc     00000000 
000037ca l       .debug_loc     00000000 
000037e5 l       .debug_loc     00000000 
0000380b l       .debug_loc     00000000 
00003831 l       .debug_loc     00000000 
0000384c l       .debug_loc     00000000 
00003867 l       .debug_loc     00000000 
00003882 l       .debug_loc     00000000 
0000389d l       .debug_loc     00000000 
000038bc l       .debug_loc     00000000 
000038d7 l       .debug_loc     00000000 
000038f2 l       .debug_loc     00000000 
0000390e l       .debug_loc     00000000 
00003929 l       .debug_loc     00000000 
00003944 l       .debug_loc     00000000 
00003963 l       .debug_loc     00000000 
00003989 l       .debug_loc     00000000 
000039ba l       .debug_loc     00000000 
00003a12 l       .debug_loc     00000000 
00003a5c l       .debug_loc     00000000 
00003aae l       .debug_loc     00000000 
00003aeb l       .debug_loc     00000000 
00003b27 l       .debug_loc     00000000 
00003b91 l       .debug_loc     00000000 
00003bda l       .debug_loc     00000000 
00003c44 l       .debug_loc     00000000 
00003c6a l       .debug_loc     00000000 
00003c85 l       .debug_loc     00000000 
00003ca0 l       .debug_loc     00000000 
00003cc7 l       .debug_loc     00000000 
00003d0f l       .debug_loc     00000000 
00003d35 l       .debug_loc     00000000 
00003d5b l       .debug_loc     00000000 
00003d81 l       .debug_loc     00000000 
00003d9c l       .debug_loc     00000000 
00003dcc l       .debug_loc     00000000 
00003df2 l       .debug_loc     00000000 
00003e24 l       .debug_loc     00000000 
00003e62 l       .debug_loc     00000000 
00003e91 l       .debug_loc     00000000 
00003eac l       .debug_loc     00000000 
00003edf l       .debug_loc     00000000 
00003efa l       .debug_loc     00000000 
00003f36 l       .debug_loc     00000000 
00003f5c l       .debug_loc     00000000 
00003f77 l       .debug_loc     00000000 
00003f92 l       .debug_loc     00000000 
00003fad l       .debug_loc     00000000 
00004003 l       .debug_loc     00000000 
00004032 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000f7c l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000540 l       .debug_ranges  00000000 
00000f9a l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000fb9 l       .debug_str     00000000 
00000fd1 l       .debug_str     00000000 
00000fc5 l       .debug_str     00000000 
00000826 l       .debug_str     00000000 
000012d2 l       .debug_str     00000000 
000008d1 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00000fdf l       .debug_str     00000000 
00000fe9 l       .debug_str     00000000 
0000132a l       .debug_str     00000000 
00000ff7 l       .debug_str     00000000 
000015ac l       .debug_str     00000000 
00000b2d l       .debug_str     00000000 
0000092f l       .debug_str     00000000 
000011d6 l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
000013b1 l       .debug_str     00000000 
00001357 l       .debug_str     00000000 
00001200 l       .debug_str     00000000 
000013c1 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00001001 l       .debug_str     00000000 
0000100d l       .debug_str     00000000 
0000101a l       .debug_str     00000000 
00001069 l       .debug_str     00000000 
00001058 l       .debug_str     00000000 
00001031 l       .debug_str     00000000 
00001040 l       .debug_str     00000000 
0000104f l       .debug_str     00000000 
0000107c l       .debug_str     00000000 
00000238 l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001fc l       .debug_str     00000000 
0000020c l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000022a l       .debug_str     00000000 
00001087 l       .debug_str     00000000 
00001090 l       .debug_str     00000000 
0000109b l       .debug_str     00000000 
000010a3 l       .debug_str     00000000 
000010af l       .debug_str     00000000 
000010bb l       .debug_str     00000000 
000010c8 l       .debug_str     00000000 
000010d8 l       .debug_str     00000000 
000010e9 l       .debug_str     00000000 
000010f6 l       .debug_str     00000000 
000010ff l       .debug_str     00000000 
00001109 l       .debug_str     00000000 
00001113 l       .debug_str     00000000 
0000111e l       .debug_str     00000000 
00001128 l       .debug_str     00000000 
00001133 l       .debug_str     00000000 
000008cf l       .debug_str     00000000 
000001a0 l       .debug_str     00000000 
00000173 l       .debug_str     00000000 
0000114a l       .debug_str     00000000 
00001141 l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00001160 l       .debug_str     00000000 
00000a5f l       .debug_str     00000000 
00001155 l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00001280 l       .debug_str     00000000 
00001174 l       .debug_str     00000000 
0000128e l       .debug_str     00000000 
00001145 l       .debug_str     00000000 
0000129f l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00001184 l       .debug_str     00000000 
00000f48 l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000920 l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
00000f3c l       .debug_str     00000000 
00000408 l       .debug_ranges  00000000 
000012ad l       .debug_str     00000000 
00001337 l       .debug_str     00000000 
00001372 l       .debug_str     00000000 
000004e8 l       .debug_ranges  00000000 
0000121a l       .debug_str     00000000 
00000420 l       .debug_ranges  00000000 
00000448 l       .debug_ranges  00000000 
00000468 l       .debug_ranges  00000000 
00000480 l       .debug_ranges  00000000 
000004b8 l       .debug_ranges  00000000 
000004a0 l       .debug_ranges  00000000 
000004d0 l       .debug_ranges  00000000 
0000119e l       .debug_str     00000000 
000011b4 l       .debug_str     00000000 
00000efb l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
000011bd l       .debug_str     00000000 
000011fb l       .debug_str     00000000 
000011e8 l       .debug_str     00000000 
000011c5 l       .debug_str     00000000 
00001797 l       .debug_str     00000000 
000011de l       .debug_str     00000000 
00001204 l       .debug_str     00000000 
00001216 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000f10 l       .debug_str     00000000 
00001537 l       .debug_str     00000000 
00001225 l       .debug_str     00000000 
0000121f l       .debug_str     00000000 
0000122c l       .debug_str     00000000 
00001234 l       .debug_str     00000000 
00000702 l       .debug_str     00000000 
00001238 l       .debug_str     00000000 
00000854 l       .debug_str     00000000 
00001555 l       .debug_str     00000000 
0000123c l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
0000160c l       .debug_str     00000000 
000013a6 l       .debug_str     00000000 
0000139d l       .debug_str     00000000 
000013b8 l       .debug_str     00000000 
00000bb1 l       .debug_str     00000000 
000012bb l       .debug_str     00000000 
000012c9 l       .debug_str     00000000 
00001341 l       .debug_str     00000000 
000006f3 l       .debug_str     00000000 
000012d7 l       .debug_str     00000000 
0000124b l       .debug_str     00000000 
00001065 l       .debug_str     00000000 
000012e4 l       .debug_str     00000000 
0000130e l       .debug_str     00000000 
0000135e l       .debug_str     00000000 
0000104a l       .debug_str     00000000 
00000528 l       .debug_ranges  00000000 
00001351 l       .debug_str     00000000 
0000136d l       .debug_str     00000000 
00001380 l       .debug_str     00000000 
0000103b l       .debug_str     00000000 
00000508 l       .debug_ranges  00000000 
0000134a l       .debug_str     00000000 
0000138f l       .debug_str     00000000 
00001398 l       .debug_str     00000000 
0000125d l       .debug_str     00000000 
00001271 l       .debug_str     00000000 
000012f1 l       .debug_str     00000000 
00001300 l       .debug_str     00000000 
00001279 l       .debug_str     00000000 
00000318 l       .debug_frame   00000000 
e0000e9c l       .text  00000000 
e0000ece l       .text  00000000 
e0000ee8 l       .text  00000000 
e0001376 l       .text  00000000 
e000145a l       .text  00000000 
e00014d8 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e00014d8 l       .text  00000000 
e00014d8 l       .text  00000000 
e00014d8 l       .text  00000000 
e00014d8 l       .text  00000000 
e00014dc l       .text  00000000 
e00014e4 l       .text  00000000 
e00014e4 l       .text  00000000 
e00014e8 l       .text  00000000 
e00014e8 l       .text  00000000 
e00014f4 l       .text  00000000 
e00014f6 l       .text  00000000 
e00014f6 l       .text  00000000 
e00014fa l       .text  00000000 
e0001506 l       .text  00000000 
e0001508 l       .text  00000000 
e000150c l       .text  00000000 
e000150e l       .text  00000000 
e000150e l       .text  00000000 
e0001512 l       .text  00000000 
e0001512 l       .text  00000000 
e0001516 l       .text  00000000 
e0001516 l       .text  00000000 
e0001518 l       .text  00000000 
e0001518 l       .text  00000000 
e000151c l       .text  00000000 
e000151c l       .text  00000000 
e000151e l       .text  00000000 
e0001522 l       .text  00000000 
e0001522 l       .text  00000000 
e0001526 l       .text  00000000 
e000152a l       .text  00000000 
e0001530 l       .text  00000000 
e0001530 l       .text  00000000 
e0001534 l       .text  00000000 
e0001536 l       .text  00000000 
e0001536 l       .text  00000000 
e000153c l       .text  00000000 
e000153c l       .text  00000000 
e0001542 l       .text  00000000 
e0001542 l       .text  00000000 
e0001544 l       .text  00000000 
e0001544 l       .text  00000000 
e000154a l       .text  00000000 
e000154a l       .text  00000000 
0000404d l       .debug_loc     00000000 
00004068 l       .debug_loc     00000000 
00004099 l       .debug_loc     00000000 
000040bf l       .debug_loc     00000000 
000040e5 l       .debug_loc     00000000 
00004100 l       .debug_loc     00000000 
00004122 l       .debug_loc     00000000 
00004149 l       .debug_loc     00000000 
00004170 l       .debug_loc     00000000 
00004194 l       .debug_loc     00000000 
000041c5 l       .debug_loc     00000000 
000041e0 l       .debug_loc     00000000 
00004211 l       .debug_loc     00000000 
0000426b l       .debug_loc     00000000 
000042a7 l       .debug_loc     00000000 
000042cb l       .debug_loc     00000000 
000042f0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000013c7 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000005f0 l       .debug_ranges  00000000 
000013e3 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
000013f3 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00001521 l       .debug_str     00000000 
00001400 l       .debug_str     00000000 
00001404 l       .debug_str     00000000 
0000140f l       .debug_str     00000000 
00001418 l       .debug_str     00000000 
00001429 l       .debug_str     00000000 
0000143b l       .debug_str     00000000 
00001445 l       .debug_str     00000000 
00001454 l       .debug_str     00000000 
00001466 l       .debug_str     00000000 
00001479 l       .debug_str     00000000 
0000148d l       .debug_str     00000000 
00001496 l       .debug_str     00000000 
000014a2 l       .debug_str     00000000 
000014b1 l       .debug_str     00000000 
000014bb l       .debug_str     00000000 
000014c8 l       .debug_str     00000000 
000014d2 l       .debug_str     00000000 
000014e3 l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
000008d1 l       .debug_str     00000000 
000008cf l       .debug_str     00000000 
00001532 l       .debug_str     00000000 
00001540 l       .debug_str     00000000 
00001549 l       .debug_str     00000000 
000016a8 l       .debug_str     00000000 
00000ae4 l       .debug_str     00000000 
00000afb l       .debug_str     00000000 
00000afe l       .debug_str     00000000 
00000b2d l       .debug_str     00000000 
00000b1a l       .debug_str     00000000 
00000b09 l       .debug_str     00000000 
00000b04 l       .debug_str     00000000 
00000b4c l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
0000152d l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00001238 l       .debug_str     00000000 
000005d8 l       .debug_ranges  00000000 
0000154e l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00001537 l       .debug_str     00000000 
00001225 l       .debug_str     00000000 
00001559 l       .debug_str     00000000 
0000123c l       .debug_str     00000000 
00001587 l       .debug_str     00000000 
00001555 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
0000050c l       .debug_frame   00000000 
e000154a l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
e000154a l       .text  00000000 
e000154a l       .text  00000000 
e000154a l       .text  00000000 
e000154c l       .text  00000000 
e0001552 l       .text  00000000 
e000155e l       .text  00000000 
e0001566 l       .text  00000000 
e0001566 l       .text  00000000 
e000156e l       .text  00000000 
e0001590 l       .text  00000000 
e0001594 l       .text  00000000 
e0001594 l       .text  00000000 
e0001598 l       .text  00000000 
e000159c l       .text  00000000 
e000159c l       .text  00000000 
e00015a0 l       .text  00000000 
e00015b2 l       .text  00000000 
e00015b6 l       .text  00000000 
e00015c6 l       .text  00000000 
e00015c8 l       .text  00000000 
e00015c8 l       .text  00000000 
e00015d8 l       .text  00000000 
e00015da l       .text  00000000 
e00015da l       .text  00000000 
e00015de l       .text  00000000 
e00015de l       .text  00000000 
e00015e2 l       .text  00000000 
e00015e2 l       .text  00000000 
e00015e4 l       .text  00000000 
e00015ec l       .text  00000000 
e00015ee l       .text  00000000 
e00015f0 l       .text  00000000 
e00015fa l       .text  00000000 
e00015fa l       .text  00000000 
00004312 l       .debug_loc     00000000 
0000432a l       .debug_loc     00000000 
00004351 l       .debug_loc     00000000 
00004382 l       .debug_loc     00000000 
000043d5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000158e l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000007fa l       .debug_str     00000000 
00000829 l       .debug_str     00000000 
00000313 l       .debug_str     00000000 
000015a8 l       .debug_str     00000000 
000015b0 l       .debug_str     00000000 
000015b5 l       .debug_str     00000000 
000015b9 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
000008d1 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00000540 l       .debug_frame   00000000 
e00015fa l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
e00015fa l       .text  00000000 
e00015fa l       .text  00000000 
e00015fa l       .text  00000000 
e00015fa l       .text  00000000 
e0001602 l       .text  00000000 
e0001606 l       .text  00000000 
e0001606 l       .text  00000000 
e000160a l       .text  00000000 
e000160a l       .text  00000000 
e000160e l       .text  00000000 
e000160e l       .text  00000000 
e000161a l       .text  00000000 
e000161c l       .text  00000000 
e000161c l       .text  00000000 
e0001622 l       .text  00000000 
e0001622 l       .text  00000000 
e0001626 l       .text  00000000 
e0001628 l       .text  00000000 
e000162c l       .text  00000000 
e000162c l       .text  00000000 
e000162e l       .text  00000000 
e000162e l       .text  00000000 
e0001630 l       .text  00000000 
e0001630 l       .text  00000000 
e0001638 l       .text  00000000 
e000163c l       .text  00000000 
e000163e l       .text  00000000 
e0001642 l       .text  00000000 
e0001646 l       .text  00000000 
e0001646 l       .text  00000000 
e000164a l       .text  00000000 
e000164a l       .text  00000000 
e000164e l       .text  00000000 
e0001650 l       .text  00000000 
e0001650 l       .text  00000000 
e0001654 l       .text  00000000 
e0001654 l       .text  00000000 
e0001656 l       .text  00000000 
e0001656 l       .text  00000000 
e0001658 l       .text  00000000 
e0001658 l       .text  00000000 
e000165c l       .text  00000000 
e000165c l       .text  00000000 
e0001660 l       .text  00000000 
e0001662 l       .text  00000000 
e0001668 l       .text  00000000 
e0001668 l       .text  00000000 
e000166c l       .text  00000000 
e0001670 l       .text  00000000 
e0001678 l       .text  00000000 
e0001678 l       .text  00000000 
e000167a l       .text  00000000 
e000167a l       .text  00000000 
e000167c l       .text  00000000 
e000167c l       .text  00000000 
e0001682 l       .text  00000000 
e0001682 l       .text  00000000 
e0001682 l       .text  00000000 
e0001682 l       .text  00000000 
e0001682 l       .text  00000000 
e0001686 l       .text  00000000 
e0001686 l       .text  00000000 
e000168a l       .text  00000000 
e000168a l       .text  00000000 
e0001692 l       .text  00000000 
e0001692 l       .text  00000000 
e0001696 l       .text  00000000 
e000169a l       .text  00000000 
e000169a l       .text  00000000 
e000169c l       .text  00000000 
e000169c l       .text  00000000 
e00016a0 l       .text  00000000 
e00016a0 l       .text  00000000 
e00016a4 l       .text  00000000 
e00016a4 l       .text  00000000 
e00016a6 l       .text  00000000 
e00016a8 l       .text  00000000 
e00016aa l       .text  00000000 
e00016aa l       .text  00000000 
e00016ae l       .text  00000000 
e00016b2 l       .text  00000000 
e00016c2 l       .text  00000000 
e00016c2 l       .text  00000000 
e00016c6 l       .text  00000000 
e00016c6 l       .text  00000000 
e00016c8 l       .text  00000000 
e00016c8 l       .text  00000000 
e00016ca l       .text  00000000 
e00016ca l       .text  00000000 
e00016ce l       .text  00000000 
e00016ce l       .text  00000000 
e00016d4 l       .text  00000000 
e00016d8 l       .text  00000000 
e00016d8 l       .text  00000000 
e00016dc l       .text  00000000 
e00016e0 l       .text  00000000 
e00016e2 l       .text  00000000 
e00016e4 l       .text  00000000 
e00016e4 l       .text  00000000 
e00016e4 l       .text  00000000 
e00016e4 l       .text  00000000 
e00016e4 l       .text  00000000 
e00016e8 l       .text  00000000 
e00016e8 l       .text  00000000 
e00016ec l       .text  00000000 
e00016ec l       .text  00000000 
e00016f4 l       .text  00000000 
e00016f8 l       .text  00000000 
e00016fc l       .text  00000000 
e00016fe l       .text  00000000 
e0001700 l       .text  00000000 
e0001700 l       .text  00000000 
e0001704 l       .text  00000000 
e0001708 l       .text  00000000 
e0001708 l       .text  00000000 
e000170a l       .text  00000000 
e000170c l       .text  00000000 
e000170e l       .text  00000000 
e0001714 l       .text  00000000 
e0001714 l       .text  00000000 
e0001716 l       .text  00000000 
e000171a l       .text  00000000 
e0001726 l       .text  00000000 
e0001734 l       .text  00000000 
e0001734 l       .text  00000000 
e0001738 l       .text  00000000 
e000173a l       .text  00000000 
e000173a l       .text  00000000 
e000173e l       .text  00000000 
e0001742 l       .text  00000000 
e0001742 l       .text  00000000 
e0001746 l       .text  00000000 
e000174a l       .text  00000000 
e000174e l       .text  00000000 
e0001752 l       .text  00000000 
e0001756 l       .text  00000000 
e0001756 l       .text  00000000 
e000175a l       .text  00000000 
e000175e l       .text  00000000 
e0001760 l       .text  00000000 
e0001760 l       .text  00000000 
e0001762 l       .text  00000000 
e0001766 l       .text  00000000 
e0001766 l       .text  00000000 
e000176e l       .text  00000000 
e0001772 l       .text  00000000 
e0001772 l       .text  00000000 
e0001776 l       .text  00000000 
e000177a l       .text  00000000 
e000177e l       .text  00000000 
e0001780 l       .text  00000000 
e0001784 l       .text  00000000 
e0001784 l       .text  00000000 
e0001788 l       .text  00000000 
e0001788 l       .text  00000000 
e000178c l       .text  00000000 
e000178e l       .text  00000000 
e000178e l       .text  00000000 
e0001792 l       .text  00000000 
e0001792 l       .text  00000000 
e0001792 l       .text  00000000 
e0001792 l       .text  00000000 
e0001792 l       .text  00000000 
e0001796 l       .text  00000000 
e0001796 l       .text  00000000 
e000179a l       .text  00000000 
e000179a l       .text  00000000 
e00017a2 l       .text  00000000 
e00017a2 l       .text  00000000 
e00017a6 l       .text  00000000 
e00017a8 l       .text  00000000 
e00017ac l       .text  00000000 
e00017ac l       .text  00000000 
e00017ae l       .text  00000000 
e00017ae l       .text  00000000 
e00017b2 l       .text  00000000 
e00017b2 l       .text  00000000 
e00017b8 l       .text  00000000 
e00017b8 l       .text  00000000 
e00017bc l       .text  00000000 
e00017bc l       .text  00000000 
e00017c4 l       .text  00000000 
e00017c8 l       .text  00000000 
e00017c8 l       .text  00000000 
e00017ca l       .text  00000000 
e00017ce l       .text  00000000 
e00017ce l       .text  00000000 
e00017d0 l       .text  00000000 
e00017d2 l       .text  00000000 
e00017d2 l       .text  00000000 
e00017da l       .text  00000000 
e00017da l       .text  00000000 
e00017de l       .text  00000000 
e00017de l       .text  00000000 
e00017e8 l       .text  00000000 
e00017ec l       .text  00000000 
e00017ec l       .text  00000000 
e00017f0 l       .text  00000000 
e00017f0 l       .text  00000000 
e00017f4 l       .text  00000000 
e00017f8 l       .text  00000000 
e00017f8 l       .text  00000000 
e00017fc l       .text  00000000 
e0001800 l       .text  00000000 
e0001800 l       .text  00000000 
e0001802 l       .text  00000000 
e0001806 l       .text  00000000 
e0001806 l       .text  00000000 
e000180a l       .text  00000000 
e000180e l       .text  00000000 
e0001812 l       .text  00000000 
e0001816 l       .text  00000000 
e000181a l       .text  00000000 
e000181c l       .text  00000000 
e000181c l       .text  00000000 
e0001820 l       .text  00000000 
e0001820 l       .text  00000000 
e0001822 l       .text  00000000 
e0001824 l       .text  00000000 
e0001824 l       .text  00000000 
e000182c l       .text  00000000 
e0001830 l       .text  00000000 
e0001830 l       .text  00000000 
e0001832 l       .text  00000000 
e0001836 l       .text  00000000 
e0001836 l       .text  00000000 
e0001838 l       .text  00000000 
e000183a l       .text  00000000 
e000183a l       .text  00000000 
e000183c l       .text  00000000 
e000183c l       .text  00000000 
e0001840 l       .text  00000000 
e0001840 l       .text  00000000 
e0001842 l       .text  00000000 
e0001842 l       .text  00000000 
e0001846 l       .text  00000000 
e0001846 l       .text  00000000 
e0001848 l       .text  00000000 
e0001848 l       .text  00000000 
e000184c l       .text  00000000 
e000184c l       .text  00000000 
e000184e l       .text  00000000 
e000184e l       .text  00000000 
e0001850 l       .text  00000000 
e0001850 l       .text  00000000 
e0001852 l       .text  00000000 
e0001852 l       .text  00000000 
00004408 l       .debug_loc     00000000 
0000442e l       .debug_loc     00000000 
00004454 l       .debug_loc     00000000 
0000447a l       .debug_loc     00000000 
000044a0 l       .debug_loc     00000000 
000044bf l       .debug_loc     00000000 
000044de l       .debug_loc     00000000 
00004504 l       .debug_loc     00000000 
0000451f l       .debug_loc     00000000 
00004568 l       .debug_loc     00000000 
0000458e l       .debug_loc     00000000 
000045b0 l       .debug_loc     00000000 
000045cb l       .debug_loc     00000000 
000045e6 l       .debug_loc     00000000 
00004601 l       .debug_loc     00000000 
0000461c l       .debug_loc     00000000 
00004637 l       .debug_loc     00000000 
00004652 l       .debug_loc     00000000 
000046a2 l       .debug_loc     00000000 
000046bd l       .debug_loc     00000000 
000046d8 l       .debug_loc     00000000 
000046fa l       .debug_loc     00000000 
00004715 l       .debug_loc     00000000 
00004730 l       .debug_loc     00000000 
0000474b l       .debug_loc     00000000 
00004766 l       .debug_loc     00000000 
00004781 l       .debug_loc     00000000 
000047a0 l       .debug_loc     00000000 
000047bf l       .debug_loc     00000000 
000047e5 l       .debug_loc     00000000 
00004800 l       .debug_loc     00000000 
00004849 l       .debug_loc     00000000 
0000486f l       .debug_loc     00000000 
0000488a l       .debug_loc     00000000 
000048a5 l       .debug_loc     00000000 
000048c0 l       .debug_loc     00000000 
000048db l       .debug_loc     00000000 
000048f6 l       .debug_loc     00000000 
00004911 l       .debug_loc     00000000 
0000492c l       .debug_loc     00000000 
0000494b l       .debug_loc     00000000 
0000496a l       .debug_loc     00000000 
00004985 l       .debug_loc     00000000 
000049cc l       .debug_loc     00000000 
000049e7 l       .debug_loc     00000000 
00004a02 l       .debug_loc     00000000 
00004a28 l       .debug_loc     00000000 
00004a43 l       .debug_loc     00000000 
00004a5e l       .debug_loc     00000000 
00004a79 l       .debug_loc     00000000 
00004a94 l       .debug_loc     00000000 
00004aaf l       .debug_loc     00000000 
00004ad5 l       .debug_loc     00000000 
00004af0 l       .debug_loc     00000000 
00004b16 l       .debug_loc     00000000 
00004b3c l       .debug_loc     00000000 
00004b59 l       .debug_loc     00000000 
00004bb4 l       .debug_loc     00000000 
00004bcf l       .debug_loc     00000000 
00004bf5 l       .debug_loc     00000000 
00004c1b l       .debug_loc     00000000 
00004c36 l       .debug_loc     00000000 
00004c5c l       .debug_loc     00000000 
00004cb9 l       .debug_loc     00000000 
00004cd4 l       .debug_loc     00000000 
00004cef l       .debug_loc     00000000 
00004d4c l       .debug_loc     00000000 
00004d69 l       .debug_loc     00000000 
00004d84 l       .debug_loc     00000000 
00004dcb l       .debug_loc     00000000 
00004de6 l       .debug_loc     00000000 
00004e01 l       .debug_loc     00000000 
00004e1c l       .debug_loc     00000000 
00004e37 l       .debug_loc     00000000 
00004e52 l       .debug_loc     00000000 
00004e78 l       .debug_loc     00000000 
00004e93 l       .debug_loc     00000000 
00004eae l       .debug_loc     00000000 
00004ec9 l       .debug_loc     00000000 
00004ee4 l       .debug_loc     00000000 
00004f11 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000015be l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000690 l       .debug_ranges  00000000 
000015da l       .debug_str     00000000 
000015e4 l       .debug_str     00000000 
000015ee l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000173 l       .debug_str     00000000 
000001a0 l       .debug_str     00000000 
00000f10 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
000015f8 l       .debug_str     00000000 
000016f5 l       .debug_str     00000000 
000016ff l       .debug_str     00000000 
00001200 l       .debug_str     00000000 
00001612 l       .debug_str     00000000 
0000161d l       .debug_str     00000000 
000008d1 l       .debug_str     00000000 
000008cf l       .debug_str     00000000 
00001629 l       .debug_str     00000000 
0000163b l       .debug_str     00000000 
0000164b l       .debug_str     00000000 
00001600 l       .debug_str     00000000 
0000165b l       .debug_str     00000000 
00001665 l       .debug_str     00000000 
00000a55 l       .debug_str     00000000 
00000cfa l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
0000166d l       .debug_str     00000000 
00000b2d l       .debug_str     00000000 
000006f3 l       .debug_str     00000000 
000016bb l       .debug_str     00000000 
000016c0 l       .debug_str     00000000 
000016c4 l       .debug_str     00000000 
000016ca l       .debug_str     00000000 
0000163f l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
0000164f l       .debug_str     00000000 
00000620 l       .debug_ranges  00000000 
0000103b l       .debug_str     00000000 
00000608 l       .debug_ranges  00000000 
00001279 l       .debug_str     00000000 
000016cf l       .debug_str     00000000 
000016d6 l       .debug_str     00000000 
00000638 l       .debug_ranges  00000000 
00001689 l       .debug_str     00000000 
000016de l       .debug_str     00000000 
000016e2 l       .debug_str     00000000 
000016e6 l       .debug_str     00000000 
000016eb l       .debug_str     00000000 
000016f0 l       .debug_str     00000000 
000016fa l       .debug_str     00000000 
00001690 l       .debug_str     00000000 
00000854 l       .debug_str     00000000 
00000f2d l       .debug_str     00000000 
00001705 l       .debug_str     00000000 
00000650 l       .debug_ranges  00000000 
0000170a l       .debug_str     00000000 
00001676 l       .debug_str     00000000 
00001398 l       .debug_str     00000000 
00000f34 l       .debug_str     00000000 
00000668 l       .debug_ranges  00000000 
00001698 l       .debug_str     00000000 
00000e75 l       .debug_str     00000000 
000016aa l       .debug_str     00000000 
000016b2 l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
00000570 l       .debug_frame   00000000 
e0001682 l       .text  00000000 
e00016e4 l       .text  00000000 
e0001792 l       .text  00000000 
e0001852 l       .text  00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00004f31 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001712 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000006f0 l       .debug_ranges  00000000 
0000173c l       .debug_str     00000000 
0000179c l       .debug_str     00000000 
00001790 l       .debug_str     00000000 
00001748 l       .debug_str     00000000 
00001755 l       .debug_str     00000000 
00001769 l       .debug_str     00000000 
0000177a l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
000017aa l       .debug_str     00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
000017ba l       .debug_str     00000000 
000017d8 l       .debug_str     00000000 
000017ef l       .debug_str     00000000 
000017ff l       .debug_str     00000000 
0000180f l       .debug_str     00000000 
0000181d l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
0000182b l       .debug_str     00000000 
00001840 l       .debug_str     00000000 
00001857 l       .debug_str     00000000 
00000f10 l       .debug_str     00000000 
00001870 l       .debug_str     00000000 
0000188c l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
00000e9d l       .debug_str     00000000 
000005df l       .debug_str     00000000 
0000189b l       .debug_str     00000000 
00000634 l       .debug_frame   00000000 
e00009f6 g     F .text  0000007a external_irq_handler
e0000a7e g     F .text  00000034 dif_aes_reset
e0001792 g     F .text  000000c0 memrchr
00008000 g       *ABS*  00000000 _stack_len
e00015fa g     F .text  00000088 memcpy
e0000c24 g     F .text  00000036 dif_aes_load_data
e0002284 g       .bss   00000000 _bss_start
e0000e64 g     F .text  00000034 base_log_internal_dv
e0000ab2 g     F .text  00000138 dif_aes_start
e000a000 g       .stack 00000000 stack
e0000dbc g     F .text  00000006 abort
e0000080 g       *ABS*  00000000 _entry_point
e0002290 g       .bss   00000000 _bss_end
e0000c98 g     F .text  00000076 dif_aes_get_status
e0002200 g     O .data  00000084 status_codes
e00016e4 g     F .text  000000ae memchr
e00000cc g       .text  00000000 _start
e0000bea g     F .text  0000003a dif_aes_end
e0000ee8 g     F .text  0000048e base_vfprintf
e0000ece g     F .text  0000001a base_vprintf
e0001682 g     F .text  00000062 memset
e0000104 g     F .text  000008f2 main
e0000084 g       .vectors       00000000 _vectors_end
e0010000 g       .vectors       00000000 _stack_start
e00021f0 g     O .rodata        00000008 kClockFreqCpuHz
e0000a70 g     F .text  0000000e dif_aes_init
00002000 g       *ABS*  00000000 _min_stack
e00021f8 g     O .rodata        00000004 kDeviceTestStatusAddress
e000154a g     F .text  000000b0 udiv64_slow
e0000e9c g     F .text  00000032 base_printf
e0010010 g       *ABS*  00000000 fromhost
e00021fc g     O .rodata        00000004 kDeviceLogBypassUartAddress
00020008 g       *ABS*  00000000 tohost
e00014d8 g     F .text  00000072 status_extract
e000a000 g       .stack 00000000 _stack
e0000000 g       .vectors       00000000 _vectors_start
e0000d0e g     F .text  000000ae test_status_set
e0000dc2 g     F .text  000000a2 base_log_internal_core
e0000c5a g     F .text  0000003e dif_aes_read_output



Disassembly of section .vectors:

e0000000 <_vectors_start>:
e0000000:       0840006f                j       e0000084 <_vectors_end>
e0000004:       0800006f                j       e0000084 <_vectors_end>
e0000008:       07c0006f                j       e0000084 <_vectors_end>
e000000c:       0780006f                j       e0000084 <_vectors_end>
e0000010:       0740006f                j       e0000084 <_vectors_end>
e0000014:       0700006f                j       e0000084 <_vectors_end>
e0000018:       06c0006f                j       e0000084 <_vectors_end>
e000001c:       0680006f                j       e0000084 <_vectors_end>
e0000020:       0640006f                j       e0000084 <_vectors_end>
e0000024:       0600006f                j       e0000084 <_vectors_end>
e0000028:       05c0006f                j       e0000084 <_vectors_end>
e000002c:       1cb0006f                j       e00009f6 <external_irq_handler>
e0000030:       0540006f                j       e0000084 <_vectors_end>
e0000034:       0500006f                j       e0000084 <_vectors_end>
e0000038:       04c0006f                j       e0000084 <_vectors_end>
e000003c:       0480006f                j       e0000084 <_vectors_end>
e0000040:       0440006f                j       e0000084 <_vectors_end>
e0000044:       0400006f                j       e0000084 <_vectors_end>
e0000048:       03c0006f                j       e0000084 <_vectors_end>
e000004c:       0380006f                j       e0000084 <_vectors_end>
e0000050:       0340006f                j       e0000084 <_vectors_end>
e0000054:       0300006f                j       e0000084 <_vectors_end>
e0000058:       02c0006f                j       e0000084 <_vectors_end>
e000005c:       0280006f                j       e0000084 <_vectors_end>
e0000060:       0240006f                j       e0000084 <_vectors_end>
e0000064:       0200006f                j       e0000084 <_vectors_end>
e0000068:       01c0006f                j       e0000084 <_vectors_end>
e000006c:       0180006f                j       e0000084 <_vectors_end>
e0000070:       0140006f                j       e0000084 <_vectors_end>
e0000074:       0100006f                j       e0000084 <_vectors_end>
e0000078:       00c0006f                j       e0000084 <_vectors_end>
e000007c:       0080006f                j       e0000084 <_vectors_end>
e0000080:       0060006f                j       e0000086 <reset_handler>

Disassembly of section .text:

e0000084 <default_exc_handler>:
default_exc_handler():
e0000084:       a8ad                    j       e00000fe <sleep_loop>

e0000086 <reset_handler>:
reset_handler():
e0000086:       4081                    li      ra,0
e0000088:       8106                    mv      sp,ra
e000008a:       8186                    mv      gp,ra
e000008c:       8206                    mv      tp,ra
e000008e:       8286                    mv      t0,ra
e0000090:       8306                    mv      t1,ra
e0000092:       8386                    mv      t2,ra
e0000094:       8406                    mv      s0,ra
e0000096:       8486                    mv      s1,ra
e0000098:       8506                    mv      a0,ra
e000009a:       8586                    mv      a1,ra
e000009c:       8606                    mv      a2,ra
e000009e:       8686                    mv      a3,ra
e00000a0:       8706                    mv      a4,ra
e00000a2:       8786                    mv      a5,ra
e00000a4:       8806                    mv      a6,ra
e00000a6:       8886                    mv      a7,ra
e00000a8:       8906                    mv      s2,ra
e00000aa:       8986                    mv      s3,ra
e00000ac:       8a06                    mv      s4,ra
e00000ae:       8a86                    mv      s5,ra
e00000b0:       8b06                    mv      s6,ra
e00000b2:       8b86                    mv      s7,ra
e00000b4:       8c06                    mv      s8,ra
e00000b6:       8c86                    mv      s9,ra
e00000b8:       8d06                    mv      s10,ra
e00000ba:       8d86                    mv      s11,ra
e00000bc:       8e06                    mv      t3,ra
e00000be:       8e86                    mv      t4,ra
e00000c0:       8f06                    mv      t5,ra
e00000c2:       8f86                    mv      t6,ra
e00000c4:       00010117                auipc   sp,0x10
e00000c8:       f3c10113                addi    sp,sp,-196 # e0010000 <_stack_start>

e00000cc <_start>:
e00000cc:       00002d17                auipc   s10,0x2
e00000d0:       1b8d0d13                addi    s10,s10,440 # e0002284 <base_log_internal_core.global_log_counter>
e00000d4:       00002d97                auipc   s11,0x2
e00000d8:       1bcd8d93                addi    s11,s11,444 # e0002290 <main.kLogFields>
e00000dc:       01bd5763                bge     s10,s11,e00000ea <main_entry>

e00000e0 <zero_loop>:
zero_loop():
e00000e0:       /-> 000d2023            sw      zero,0(s10)
e00000e4:       |   0d11                        addi    s10,s10,4
e00000e6:       \-- ffaddde3            bge     s11,s10,e00000e0 <zero_loop>

e00000ea <main_entry>:
zero_loop_end():
e00000ea:       4501                    li      a0,0
e00000ec:       4581                    li      a1,0
e00000ee:       016000ef                jal     ra,e0000104 <main>
e00000f2:       c11c0537                lui     a0,0xc11c0
e00000f6:       0561                    addi    a0,a0,24
e00000f8:       4285                    li      t0,1
e00000fa:       00552023                sw      t0,0(a0) # c11c0000 <fromhost+0xe11afff0>

e00000fe <sleep_loop>:
sleep_loop():
e00000fe:       /-> 10500073            wfi
e0000102:       \-- bff5                        j       e00000fe <sleep_loop>

e0000104 <main>:
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:45
    0x0f, 0x1f, 0x2f, 0x3F, 0x4f, 0x5f, 0x6f, 0x7f, 0x8f, 0x9f, 0xaf,
    0xbf, 0xcf, 0xdf, 0xef, 0xff, 0x0a, 0x1a, 0x2a, 0x3a, 0x4a, 0x5a,
    0x6a, 0x7a, 0x8a, 0x9a, 0xaa, 0xba, 0xca, 0xda, 0xea, 0xfa,
};

int main(int argc, char **argv) {
e0000104:                          716d                 addi    sp,sp,-272
e0000106:                          10112623             sw      ra,268(sp)
e000010a:                          10812423             sw      s0,264(sp)
e000010e:                          10912223             sw      s1,260(sp)
e0000112:                          11212023             sw      s2,256(sp)
e0000116:                          dfce                 sw      s3,252(sp)
e0000118:                          ddd2                 sw      s4,248(sp)
e000011a:                          dbd6                 sw      s5,244(sp)
e000011c:                          d9da                 sw      s6,240(sp)
e000011e:                          d7de                 sw      s7,236(sp)
e0000120:                          d5e2                 sw      s8,232(sp)
e0000122:                          d3e6                 sw      s9,228(sp)
e0000124:                          d1ea                 sw      s10,224(sp)
e0000126:                          cfee                 sw      s11,220(sp)
e0000128:                          00909537             lui     a0,0x909
e000012c:                          09950513             addi    a0,a0,153 # 909099 <tohost+0x8e9091>
e0000130:                          c11605b7             lui     a1,0xc1160
entropy_init():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:22
 *entropy_src_enable = 0x00909099;
e0000134:                          d1c8                 sw      a0,36(a1)
e0000136:                          4519                 li      a0,6
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:25
 *entropy_src_enable = 0x6;
e0000138:                          d188                 sw      a0,32(a1)
e000013a:                          c1150537             lui     a0,0xc1150
e000013e:                          66600593             li      a1,1638
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:28
 *csrng_enable = 0x666;
e0000142:                          c94c                 sw      a1,20(a0)
e0000144:                          6529                 lui     a0,0xa
e0000146:                          96650513             addi    a0,a0,-1690 # 9966 <_stack_len+0x1966>
e000014a:                          c11705b7             lui     a1,0xc1170
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:31
 *edn_enable = 0x9966;
e000014e:                          c9c8                 sw      a0,20(a1)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:52
  int * edn_enable;

  entropy_init();

  // Initialise AES.
  CHECK_DIF_OK(
e0000150:                          c1100537             lui     a0,0xc1100
e0000154:                          192c                 addi    a1,sp,184
e0000156:                          11b000ef             jal     ra,e0000a70 <dif_aes_init>
e000015a:                          00002497             auipc   s1,0x2
e000015e:                          0a248493             addi    s1,s1,162 # e00021fc <kDeviceLogBypassUartAddress>
e0000162:                /-------- cd15                 beqz    a0,e000019e <main+0x9a>
e0000164:                |         842a                 mv      s0,a0
e0000166:                |         4088                 lw      a0,0(s1)
e0000168:                |     /-- c911                 beqz    a0,e000017c <main+0x78>
e000016a:                |     |   00002517             auipc   a0,0x2
e000016e:                |     |   12650513             addi    a0,a0,294 # e0002290 <main.kLogFields>
e0000172:                |     |   4585                 li      a1,1
e0000174:                |     |   8622                 mv      a2,s0
e0000176:                |     |   4ef000ef             jal     ra,e0000e64 <base_log_internal_dv>
e000017a:                |  /--|-- a829                 j       e0000194 <main+0x90>
e000017c:                |  |  \-> 00002597             auipc   a1,0x2
e0000180:                |  |      ae058593             addi    a1,a1,-1312 # e0001c5c <memrchr+0x4ca>
e0000184:                |  |      08a8                 addi    a0,sp,88
e0000186:                |  |      4651                 li      a2,20
e0000188:                |  |      472010ef             jal     ra,e00015fa <memcpy>
e000018c:                |  |      08a8                 addi    a0,sp,88
e000018e:                |  |      85a2                 mv      a1,s0
e0000190:                |  |      433000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000194:                |  \----> 6531                 lui     a0,0xc
e0000196:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e000019a:                |         375000ef             jal     ra,e0000d0e <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:54
      dif_aes_init(mmio_region_from_addr(TOP_EARLGREY_AES_BASE_ADDR), &aes));
  CHECK_DIF_OK(dif_aes_reset(&aes));
e000019e:                \-------> 1928                 addi    a0,sp,184
e00001a0:                          0df000ef             jal     ra,e0000a7e <dif_aes_reset>
e00001a4:                /-------- cd15                 beqz    a0,e00001e0 <main+0xdc>
e00001a6:                |         842a                 mv      s0,a0
e00001a8:                |         4088                 lw      a0,0(s1)
e00001aa:                |     /-- c911                 beqz    a0,e00001be <main+0xba>
e00001ac:                |     |   00002517             auipc   a0,0x2
e00001b0:                |     |   0f850513             addi    a0,a0,248 # e00022a4 <main.kLogFields.2>
e00001b4:                |     |   4585                 li      a1,1
e00001b6:                |     |   8622                 mv      a2,s0
e00001b8:                |     |   4ad000ef             jal     ra,e0000e64 <base_log_internal_dv>
e00001bc:                |  /--|-- a829                 j       e00001d6 <main+0xd2>
e00001be:                |  |  \-> 00002597             auipc   a1,0x2
e00001c2:                |  |      ab258593             addi    a1,a1,-1358 # e0001c70 <memrchr+0x4de>
e00001c6:                |  |      08a8                 addi    a0,sp,88
e00001c8:                |  |      4651                 li      a2,20
e00001ca:                |  |      430010ef             jal     ra,e00015fa <memcpy>
e00001ce:                |  |      08a8                 addi    a0,sp,88
e00001d0:                |  |      85a2                 mv      a1,s0
e00001d2:                |  |      3f1000ef             jal     ra,e0000dc2 <base_log_internal_core>
e00001d6:                |  \----> 6531                 lui     a0,0xc
e00001d8:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00001dc:                |         333000ef             jal     ra,e0000d0e <test_status_set>
e00001e0:                \-------> 4501                 li      a0,0
e00001e2:                          00002597             auipc   a1,0x2
e00001e6:                          aa258593             addi    a1,a1,-1374 # e0001c84 <kAesModesKey256>
e00001ea:                          00002617             auipc   a2,0x2
e00001ee:                          aba60613             addi    a2,a2,-1350 # e0001ca4 <kKeyShare1>
e00001f2:                          0934                 addi    a3,sp,152
e00001f4:                          02000713             li      a4,32
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:60

  // Mask the key. Note that this should not be done manually. Software is
  // expected to get the key in two shares right from the beginning.
  uint8_t key_share0[sizeof(kAesModesKey256)];
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
    key_share0[i] = kAesModesKey256[i] ^ kKeyShare1[i];
e00001f8:                      /-> 00b507b3             add     a5,a0,a1
e00001fc:                      |   00078783             lb      a5,0(a5)
e0000200:                      |   00c50433             add     s0,a0,a2
e0000204:                      |   00040403             lb      s0,0(s0)
e0000208:                      |   8fa1                 xor     a5,a5,s0
e000020a:                      |   00a68433             add     s0,a3,a0
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:59
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
e000020e:                      |   0505                 addi    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:60
    key_share0[i] = kAesModesKey256[i] ^ kKeyShare1[i];
e0000210:                      |   00f40023             sb      a5,0(s0)
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:59
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
e0000214:                      \-- fee512e3             bne     a0,a4,e00001f8 <main+0xf4>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:65
  }

  // "Convert" key share byte arrays to `dif_aes_key_share_t`.
  dif_aes_key_share_t key;
  memcpy(key.share0, key_share0, sizeof(key.share0));
e0000218:                          08a8                 addi    a0,sp,88
e000021a:                          092c                 addi    a1,sp,152
e000021c:                          02000613             li      a2,32
e0000220:                          3da010ef             jal     ra,e00015fa <memcpy>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:66
  memcpy(key.share1, kKeyShare1, sizeof(key.share1));
e0000224:                          18a8                 addi    a0,sp,120
e0000226:                          00002597             auipc   a1,0x2
e000022a:                          a7e58593             addi    a1,a1,-1410 # e0001ca4 <kKeyShare1>
e000022e:                          02000613             li      a2,32
e0000232:                          3c8010ef             jal     ra,e00015fa <memcpy>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:68
  // Setup ECB encryption transaction.
  dif_aes_transaction_t transaction = {
e0000236:                          00002597             auipc   a1,0x2
e000023a:                          a8e58593             addi    a1,a1,-1394 # e0001cc4 <kKeyShare1+0x20>
e000023e:                          1828                 addi    a0,sp,56
e0000240:                          4671                 li      a2,28
e0000242:                          3b8010ef             jal     ra,e00015fa <memcpy>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:78
      .mask_reseeding = kDifAesReseedPerBlock,
      .manual_operation = kDifAesManualOperationAuto,
      .reseed_on_key_change = false,
      .ctrl_aux_lock = false,
  };
  CHECK_DIF_OK(dif_aes_start(&aes, &transaction, &key, NULL));
e0000246:                          1928                 addi    a0,sp,184
e0000248:                          182c                 addi    a1,sp,56
e000024a:                          08b0                 addi    a2,sp,88
e000024c:                          4681                 li      a3,0
e000024e:                          065000ef             jal     ra,e0000ab2 <dif_aes_start>
e0000252:                          0004a903             lw      s2,0(s1)
e0000256:                /-------- cd15                 beqz    a0,e0000292 <main+0x18e>
e0000258:                |         842a                 mv      s0,a0
e000025a:                |     /-- 00090b63             beqz    s2,e0000270 <main+0x16c>
e000025e:                |     |   00002517             auipc   a0,0x2
e0000262:                |     |   05a50513             addi    a0,a0,90 # e00022b8 <main.kLogFields.5>
e0000266:                |     |   4585                 li      a1,1
e0000268:                |     |   8622                 mv      a2,s0
e000026a:                |     |   3fb000ef             jal     ra,e0000e64 <base_log_internal_dv>
e000026e:                |  /--|-- a829                 j       e0000288 <main+0x184>
e0000270:                |  |  \-> 00002597             auipc   a1,0x2
e0000274:                |  |      a7058593             addi    a1,a1,-1424 # e0001ce0 <kKeyShare1+0x3c>
e0000278:                |  |      0188                 addi    a0,sp,192
e000027a:                |  |      4651                 li      a2,20
e000027c:                |  |      37e010ef             jal     ra,e00015fa <memcpy>
e0000280:                |  |      0188                 addi    a0,sp,192
e0000282:                |  |      85a2                 mv      a1,s0
e0000284:                |  |      33f000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000288:                |  \----> 6531                 lui     a0,0xc
e000028a:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e000028e:                |         281000ef             jal     ra,e0000d0e <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:82

  // "Convert" plain data byte arrays to `dif_aes_data_t`.
  dif_aes_data_t in_data_plain;
  memcpy(in_data_plain.data, kAesModesPlainText, sizeof(in_data_plain.data));
e0000292:                \-------> 00002597             auipc   a1,0x2
e0000296:                          a6258593             addi    a1,a1,-1438 # e0001cf4 <kAesModesPlainText>
e000029a:                          1028                 addi    a0,sp,40
e000029c:                          4641                 li      a2,16
e000029e:                          c62e                 sw      a1,12(sp)
e00002a0:                          35a010ef             jal     ra,e00015fa <memcpy>
e00002a4:                          00002517             auipc   a0,0x2
e00002a8:                          f4c50513             addi    a0,a0,-180 # e00021f0 <kClockFreqCpuHz>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
 * @param timeout_usec Timeout in microseconds.
 * @return The initialized timeout value.
 */
inline ibex_timeout_t ibex_timeout_init(uint32_t timeout_usec) {
  return (ibex_timeout_t){
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e00002ac:                          414c                 lw      a1,4(a0)
e00002ae:                          4108                 lw      a0,0(a0)
e00002b0:                          000f4637             lui     a2,0xf4
e00002b4:                          24060a93             addi    s5,a2,576 # f4240 <tohost+0xd4238>
e00002b8:                          035585b3             mul     a1,a1,s5
e00002bc:                          03553633             mulhu   a2,a0,s5
e00002c0:                          95b2                 add     a1,a1,a2
e00002c2:                          03550533             mul     a0,a0,s5
e00002c6:                          c82a                 sw      a0,16(sp)
e00002c8:                          ca2e                 sw      a1,20(sp)
e00002ca:                          8656                 mv      a2,s5
e00002cc:                          4681                 li      a3,0
e00002ce:                          4701                 li      a4,0
e00002d0:                          27a010ef             jal     ra,e000154a <udiv64_slow>
e00002d4:                          8baa                 mv      s7,a0
e00002d6:                          84ae                 mv      s1,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e00002d8:                      /-> b8002573             csrr    a0,mcycleh
e00002dc:                      |   b00025f3             csrr    a1,mcycle
e00002e0:                      |   b8002673             csrr    a2,mcycleh
e00002e4:                      \-- fec51ae3             bne     a0,a2,e00002d8 <main+0x1d4>
e00002e8:                          00193a13             seqz    s4,s2
e00002ec:                          40b00933             neg     s2,a1
e00002f0:                          00b035b3             snez    a1,a1
e00002f4:                          952e                 add     a0,a0,a1
e00002f6:                          40a009b3             neg     s3,a0
main():
e00002fa:                          00002b17             auipc   s6,0x2
e00002fe:                          a3ab0b13             addi    s6,s6,-1478 # e0001d34 <kAesModesPlainText+0x40>
e0000302:                          6531                 lui     a0,0xc
e0000304:                          aad50d93             addi    s11,a0,-1363 # baad <_stack_len+0x3aad>
e0000308:                          00002c17             auipc   s8,0x2
e000030c:                          fc4c0c13             addi    s8,s8,-60 # e00022cc <main.kLogFields.8>
e0000310:                          00002c97             auipc   s9,0x2
e0000314:                          b90c8c93             addi    s9,s9,-1136 # e0001ea0 <kAesModesCipherTextEcb256+0x108>
e0000318:                          00002d17             auipc   s10,0x2
e000031c:                          0e0d0d13             addi    s10,s10,224 # e00023f8 <aes_testutils_get_status.kLogFields>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
 * @param aes An aes DIF handle.
 * @param flag Status flag to query.
 */
inline bool aes_testutils_get_status(dif_aes_t *aes, dif_aes_status_t flag) {
  bool status;
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
e0000320:             /----------> 1928                 addi    a0,sp,184
e0000322:             |            4591                 li      a1,4
e0000324:             |            0830                 addi    a2,sp,24
e0000326:             |            173000ef             jal     ra,e0000c98 <dif_aes_get_status>
e000032a:             |  /-------- c515                 beqz    a0,e0000356 <main+0x252>
e000032c:             |  |         842a                 mv      s0,a0
e000032e:             |  |     /-- 000a1863             bnez    s4,e000033e <main+0x23a>
e0000332:             |  |     |   4585                 li      a1,1
e0000334:             |  |     |   856a                 mv      a0,s10
e0000336:             |  |     |   8622                 mv      a2,s0
e0000338:             |  |     |   32d000ef             jal     ra,e0000e64 <base_log_internal_dv>
e000033c:             |  |  /--|-- a811                 j       e0000350 <main+0x24c>
e000033e:             |  |  |  \-> 0188                 addi    a0,sp,192
e0000340:             |  |  |      4651                 li      a2,20
e0000342:             |  |  |      85e6                 mv      a1,s9
e0000344:             |  |  |      2b6010ef             jal     ra,e00015fa <memcpy>
e0000348:             |  |  |      0188                 addi    a0,sp,192
e000034a:             |  |  |      85a2                 mv      a1,s0
e000034c:             |  |  |      277000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000350:             |  |  \----> 856e                 mv      a0,s11
e0000352:             |  |         1bd000ef             jal     ra,e0000d0e <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
e0000356:             |  \-------> 01814503             lbu     a0,24(sp)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:85

  // Load the plain text to trigger the encryption operation.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusInputReady, true, TIMEOUT);
e000035a:             |  /-------- ed39                 bnez    a0,e00003b8 <main+0x2b4>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
e000035c:             |  |     /-> b80025f3             csrr    a1,mcycleh
e0000360:             |  |     |   b0002573             csrr    a0,mcycle
e0000364:             |  |     |   b8002673             csrr    a2,mcycleh
e0000368:             |  |     \-- fec59ae3             bne     a1,a2,e000035c <main+0x258>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e000036c:             |  |         954a                 add     a0,a0,s2
e000036e:             |  |         01253633             sltu    a2,a0,s2
e0000372:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
 *
 * @param timeout Holds the counter start value.
 * @return True if the timeout has expired and false otherwise.
 */
inline bool ibex_timeout_check(const ibex_timeout_t *timeout) {
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e0000374:             |  |         95b2                 add     a1,a1,a2
e0000376:             |  |  /----- 00958563             beq     a1,s1,e0000380 <main+0x27c>
main():
e000037a:             |  |  |      00b4b533             sltu    a0,s1,a1
e000037e:             |  |  |  /-- a019                 j       e0000384 <main+0x280>
e0000380:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
e0000384:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:85
e0000388:             +--|-------- fd41                 bnez    a0,e0000320 <main+0x21c>
e000038a:             |  |     /-- 000a1963             bnez    s4,e000039c <main+0x298>
e000038e:             |  |     |   4589                 li      a1,2
e0000390:             |  |     |   8562                 mv      a0,s8
e0000392:             |  |     |   8656                 mv      a2,s5
e0000394:             |  |     |   86de                 mv      a3,s7
e0000396:             |  |     |   2cf000ef             jal     ra,e0000e64 <base_log_internal_dv>
e000039a:             |  |  /--|-- a819                 j       e00003b0 <main+0x2ac>
e000039c:             |  |  |  \-> 0188                 addi    a0,sp,192
e000039e:             |  |  |      4651                 li      a2,20
e00003a0:             |  |  |      85da                 mv      a1,s6
e00003a2:             |  |  |      258010ef             jal     ra,e00015fa <memcpy>
e00003a6:             |  |  |      0188                 addi    a0,sp,192
e00003a8:             |  |  |      85d6                 mv      a1,s5
e00003aa:             |  |  |      865e                 mv      a2,s7
e00003ac:             |  |  |      217000ef             jal     ra,e0000dc2 <base_log_internal_core>
e00003b0:             |  |  \----> 856e                 mv      a0,s11
e00003b2:             |  |         15d000ef             jal     ra,e0000d0e <test_status_set>
e00003b6:             \--|-------- b7ad                 j       e0000320 <main+0x21c>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:86
  CHECK_DIF_OK(dif_aes_load_data(&aes, in_data_plain));
e00003b8:                \-------> 5552                 lw      a0,52(sp)
e00003ba:                          55c2                 lw      a1,48(sp)
e00003bc:                          5632                 lw      a2,44(sp)
e00003be:                          56a2                 lw      a3,40(sp)
e00003c0:                          c7aa                 sw      a0,204(sp)
e00003c2:                          c5ae                 sw      a1,200(sp)
e00003c4:                          c3b2                 sw      a2,196(sp)
e00003c6:                          c1b6                 sw      a3,192(sp)
e00003c8:                          1928                 addi    a0,sp,184
e00003ca:                          018c                 addi    a1,sp,192
e00003cc:                          059000ef             jal     ra,e0000c24 <dif_aes_load_data>
e00003d0:                /-------- cd15                 beqz    a0,e000040c <main+0x308>
e00003d2:                |         842a                 mv      s0,a0
e00003d4:                |     /-- 000a1b63             bnez    s4,e00003ea <main+0x2e6>
e00003d8:                |     |   00002517             auipc   a0,0x2
e00003dc:                |     |   f0850513             addi    a0,a0,-248 # e00022e0 <main.kLogFields.11>
e00003e0:                |     |   4585                 li      a1,1
e00003e2:                |     |   8622                 mv      a2,s0
e00003e4:                |     |   281000ef             jal     ra,e0000e64 <base_log_internal_dv>
e00003e8:                |  /--|-- a829                 j       e0000402 <main+0x2fe>
e00003ea:                |  |  \-> 00002597             auipc   a1,0x2
e00003ee:                |  |      95e58593             addi    a1,a1,-1698 # e0001d48 <kAesModesPlainText+0x54>
e00003f2:                |  |      0188                 addi    a0,sp,192
e00003f4:                |  |      4651                 li      a2,20
e00003f6:                |  |      204010ef             jal     ra,e00015fa <memcpy>
e00003fa:                |  |      0188                 addi    a0,sp,192
e00003fc:                |  |      85a2                 mv      a1,s0
e00003fe:                |  |      1c5000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000402:                |  \----> 6531                 lui     a0,0xc
e0000404:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000408:                |         107000ef             jal     ra,e0000d0e <test_status_set>
e000040c:                \-------> 000f4537             lui     a0,0xf4
e0000410:                          24050a93             addi    s5,a0,576 # f4240 <tohost+0xd4238>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e0000414:                          4542                 lw      a0,16(sp)
e0000416:                          45d2                 lw      a1,20(sp)
e0000418:                          8656                 mv      a2,s5
e000041a:                          4681                 li      a3,0
e000041c:                          4701                 li      a4,0
e000041e:                          12c010ef             jal     ra,e000154a <udiv64_slow>
e0000422:                          8baa                 mv      s7,a0
e0000424:                          892e                 mv      s2,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e0000426:                      /-> b8002573             csrr    a0,mcycleh
e000042a:                      |   b00025f3             csrr    a1,mcycle
e000042e:                      |   b8002673             csrr    a2,mcycleh
e0000432:                      \-- fec51ae3             bne     a0,a2,e0000426 <main+0x322>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e0000436:                          567d                 li      a2,-1
e0000438:                          02c50533             mul     a0,a0,a2
e000043c:                          40b004b3             neg     s1,a1
e0000440:                          00b035b3             snez    a1,a1
e0000444:                          40b509b3             sub     s3,a0,a1
main():
e0000448:                          00002b17             auipc   s6,0x2
e000044c:                          914b0b13             addi    s6,s6,-1772 # e0001d5c <kAesModesPlainText+0x68>
e0000450:                          6531                 lui     a0,0xc
e0000452:                          aad50d93             addi    s11,a0,-1363 # baad <_stack_len+0x3aad>
e0000456:                          00002c17             auipc   s8,0x2
e000045a:                          e9ec0c13             addi    s8,s8,-354 # e00022f4 <main.kLogFields.14>
e000045e:                          00002c97             auipc   s9,0x2
e0000462:                          a42c8c93             addi    s9,s9,-1470 # e0001ea0 <kAesModesCipherTextEcb256+0x108>
e0000466:                          00002d17             auipc   s10,0x2
e000046a:                          f92d0d13             addi    s10,s10,-110 # e00023f8 <aes_testutils_get_status.kLogFields>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
e000046e:             /----------> 1928                 addi    a0,sp,184
e0000470:             |            458d                 li      a1,3
e0000472:             |            0830                 addi    a2,sp,24
e0000474:             |            025000ef             jal     ra,e0000c98 <dif_aes_get_status>
e0000478:             |  /-------- c515                 beqz    a0,e00004a4 <main+0x3a0>
e000047a:             |  |         842a                 mv      s0,a0
e000047c:             |  |     /-- 000a1863             bnez    s4,e000048c <main+0x388>
e0000480:             |  |     |   4585                 li      a1,1
e0000482:             |  |     |   856a                 mv      a0,s10
e0000484:             |  |     |   8622                 mv      a2,s0
e0000486:             |  |     |   1df000ef             jal     ra,e0000e64 <base_log_internal_dv>
e000048a:             |  |  /--|-- a811                 j       e000049e <main+0x39a>
e000048c:             |  |  |  \-> 0188                 addi    a0,sp,192
e000048e:             |  |  |      4651                 li      a2,20
e0000490:             |  |  |      85e6                 mv      a1,s9
e0000492:             |  |  |      168010ef             jal     ra,e00015fa <memcpy>
e0000496:             |  |  |      0188                 addi    a0,sp,192
e0000498:             |  |  |      85a2                 mv      a1,s0
e000049a:             |  |  |      129000ef             jal     ra,e0000dc2 <base_log_internal_core>
e000049e:             |  |  \----> 856e                 mv      a0,s11
e00004a0:             |  |         06f000ef             jal     ra,e0000d0e <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
e00004a4:             |  \-------> 01814503             lbu     a0,24(sp)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:91

  // Read out the produced cipher text.
  dif_aes_data_t out_data;

  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusOutputValid, true, TIMEOUT);
e00004a8:             |  /-------- ed39                 bnez    a0,e0000506 <main+0x402>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e00004aa:             |  |     /-> b80025f3             csrr    a1,mcycleh
e00004ae:             |  |     |   b0002573             csrr    a0,mcycle
e00004b2:             |  |     |   b8002673             csrr    a2,mcycleh
e00004b6:             |  |     \-- fec59ae3             bne     a1,a2,e00004aa <main+0x3a6>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e00004ba:             |  |         9526                 add     a0,a0,s1
e00004bc:             |  |         00953633             sltu    a2,a0,s1
e00004c0:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e00004c2:             |  |         95b2                 add     a1,a1,a2
e00004c4:             |  |  /----- 01258563             beq     a1,s2,e00004ce <main+0x3ca>
main():
e00004c8:             |  |  |      00b93533             sltu    a0,s2,a1
e00004cc:             |  |  |  /-- a019                 j       e00004d2 <main+0x3ce>
e00004ce:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
e00004d2:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:91
e00004d6:             +--|-------- fd41                 bnez    a0,e000046e <main+0x36a>
e00004d8:             |  |     /-- 000a1963             bnez    s4,e00004ea <main+0x3e6>
e00004dc:             |  |     |   4589                 li      a1,2
e00004de:             |  |     |   8562                 mv      a0,s8
e00004e0:             |  |     |   8656                 mv      a2,s5
e00004e2:             |  |     |   86de                 mv      a3,s7
e00004e4:             |  |     |   181000ef             jal     ra,e0000e64 <base_log_internal_dv>
e00004e8:             |  |  /--|-- a819                 j       e00004fe <main+0x3fa>
e00004ea:             |  |  |  \-> 0188                 addi    a0,sp,192
e00004ec:             |  |  |      4651                 li      a2,20
e00004ee:             |  |  |      85da                 mv      a1,s6
e00004f0:             |  |  |      10a010ef             jal     ra,e00015fa <memcpy>
e00004f4:             |  |  |      0188                 addi    a0,sp,192
e00004f6:             |  |  |      85d6                 mv      a1,s5
e00004f8:             |  |  |      865e                 mv      a2,s7
e00004fa:             |  |  |      0c9000ef             jal     ra,e0000dc2 <base_log_internal_core>
e00004fe:             |  |  \----> 856e                 mv      a0,s11
e0000500:             |  |         00f000ef             jal     ra,e0000d0e <test_status_set>
e0000504:             \--|-------- b7ad                 j       e000046e <main+0x36a>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:93

  CHECK_DIF_OK(dif_aes_read_output(&aes, &out_data));
e0000506:                \-------> 1928                 addi    a0,sp,184
e0000508:                          082c                 addi    a1,sp,24
e000050a:                          750000ef             jal     ra,e0000c5a <dif_aes_read_output>
e000050e:                /-------- cd15                 beqz    a0,e000054a <main+0x446>
e0000510:                |         842a                 mv      s0,a0
e0000512:                |     /-- 000a1b63             bnez    s4,e0000528 <main+0x424>
e0000516:                |     |   00002517             auipc   a0,0x2
e000051a:                |     |   df250513             addi    a0,a0,-526 # e0002308 <main.kLogFields.17>
e000051e:                |     |   4585                 li      a1,1
e0000520:                |     |   8622                 mv      a2,s0
e0000522:                |     |   143000ef             jal     ra,e0000e64 <base_log_internal_dv>
e0000526:                |  /--|-- a829                 j       e0000540 <main+0x43c>
e0000528:                |  |  \-> 00002597             auipc   a1,0x2
e000052c:                |  |      84858593             addi    a1,a1,-1976 # e0001d70 <kAesModesPlainText+0x7c>
e0000530:                |  |      0188                 addi    a0,sp,192
e0000532:                |  |      4651                 li      a2,20
e0000534:                |  |      0c6010ef             jal     ra,e00015fa <memcpy>
e0000538:                |  |      0188                 addi    a0,sp,192
e000053a:                |  |      85a2                 mv      a1,s0
e000053c:                |  |      087000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000540:                |  \----> 6531                 lui     a0,0xc
e0000542:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000546:                |         7c8000ef             jal     ra,e0000d0e <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:96

  // Finish the ECB encryption transaction.
  CHECK_DIF_OK(dif_aes_end(&aes));
e000054a:                \-------> 1928                 addi    a0,sp,184
e000054c:                          69e000ef             jal     ra,e0000bea <dif_aes_end>
e0000550:                /-------- cd15                 beqz    a0,e000058c <main+0x488>
e0000552:                |         842a                 mv      s0,a0
e0000554:                |     /-- 000a1b63             bnez    s4,e000056a <main+0x466>
e0000558:                |     |   00002517             auipc   a0,0x2
e000055c:                |     |   dc450513             addi    a0,a0,-572 # e000231c <main.kLogFields.20>
e0000560:                |     |   4585                 li      a1,1
e0000562:                |     |   8622                 mv      a2,s0
e0000564:                |     |   101000ef             jal     ra,e0000e64 <base_log_internal_dv>
e0000568:                |  /--|-- a829                 j       e0000582 <main+0x47e>
e000056a:                |  |  \-> 00002597             auipc   a1,0x2
e000056e:                |  |      81a58593             addi    a1,a1,-2022 # e0001d84 <kAesModesPlainText+0x90>
e0000572:                |  |      0188                 addi    a0,sp,192
e0000574:                |  |      4651                 li      a2,20
e0000576:                |  |      084010ef             jal     ra,e00015fa <memcpy>
e000057a:                |  |      0188                 addi    a0,sp,192
e000057c:                |  |      85a2                 mv      a1,s0
e000057e:                |  |      045000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000582:                |  \----> 6531                 lui     a0,0xc
e0000584:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000588:                |         786000ef             jal     ra,e0000d0e <test_status_set>
e000058c:                \-------> 4501                 li      a0,0
e000058e:                          4401                 li      s0,0
e0000590:                          01810913             addi    s2,sp,24
e0000594:                          00002997             auipc   s3,0x2
e0000598:                          80498993             addi    s3,s3,-2044 # e0001d98 <kAesModesCipherTextEcb256>
e000059c:                          4d41                 li      s10,16
e000059e:                          00002a97             auipc   s5,0x2
e00005a2:                          84ea8a93             addi    s5,s5,-1970 # e0001dec <kAesModesCipherTextEcb256+0x54>
e00005a6:                          00002c17             auipc   s8,0x2
e00005aa:                          d9ec0c13             addi    s8,s8,-610 # e0002344 <main.kLogFields.26>
e00005ae:                          00002b17             auipc   s6,0x2
e00005b2:                          82ab0b13             addi    s6,s6,-2006 # e0001dd8 <kAesModesCipherTextEcb256+0x40>
e00005b6:                          00002b97             auipc   s7,0x2
e00005ba:                          d7ab8b93             addi    s7,s7,-646 # e0002330 <main.kLogFields.23>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:98

  CHECK_ARRAYS_EQ((uint8_t *)out_data.data, kAesModesCipherTextEcb256,
e00005be:       /----------------> 008904b3             add     s1,s2,s0
e00005c2:       |                  0004c583             lbu     a1,0(s1)
e00005c6:       |                  01340633             add     a2,s0,s3
e00005ca:       |                  00064d83             lbu     s11,0(a2)
e00005ce:       |  /-------------- 05b58c63             beq     a1,s11,e0000626 <main+0x522>
e00005d2:       |  |               8905                 andi    a0,a0,1
e00005d4:       |  |           /-- c501                 beqz    a0,e00005dc <main+0x4d8>
e00005d6:       |  |        /--|-- 000a0963             beqz    s4,e00005e8 <main+0x4e4>
e00005da:       |  |  /-----|--|-- a805                 j       e000060a <main+0x506>
e00005dc:       |  |  |  /--|--\-X 000a1f63             bnez    s4,e00005fa <main+0x4f6>
e00005e0:       |  |  |  |  |      855e                 mv      a0,s7
e00005e2:       |  |  |  |  |      4581                 li      a1,0
e00005e4:       |  |  |  |  |      081000ef             jal     ra,e0000e64 <base_log_internal_dv>
e00005e8:       |  |  |  |  \----> 0004c683             lbu     a3,0(s1)
e00005ec:       |  |  |  |         458d                 li      a1,3
e00005ee:       |  |  |  |         8562                 mv      a0,s8
e00005f0:       |  |  |  |         8622                 mv      a2,s0
e00005f2:       |  |  |  |         876e                 mv      a4,s11
e00005f4:       |  |  |  |         071000ef             jal     ra,e0000e64 <base_log_internal_dv>
e00005f8:       |  |  |  |     /-- a035                 j       e0000624 <main+0x520>
e00005fa:       |  |  |  \-----|-> 0188                 addi    a0,sp,192
e00005fc:       |  |  |        |   4651                 li      a2,20
e00005fe:       |  |  |        |   85da                 mv      a1,s6
e0000600:       |  |  |        |   7fb000ef             jal     ra,e00015fa <memcpy>
e0000604:       |  |  |        |   0188                 addi    a0,sp,192
e0000606:       |  |  |        |   7bc000ef             jal     ra,e0000dc2 <base_log_internal_core>
e000060a:       |  |  \--------|-> 0004cc83             lbu     s9,0(s1)
e000060e:       |  |           |   0188                 addi    a0,sp,192
e0000610:       |  |           |   4651                 li      a2,20
e0000612:       |  |           |   85d6                 mv      a1,s5
e0000614:       |  |           |   7e7000ef             jal     ra,e00015fa <memcpy>
e0000618:       |  |           |   0188                 addi    a0,sp,192
e000061a:       |  |           |   85a2                 mv      a1,s0
e000061c:       |  |           |   8666                 mv      a2,s9
e000061e:       |  |           |   86ee                 mv      a3,s11
e0000620:       |  |           |   7a2000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000624:       |  |           \-> 4505                 li      a0,1
e0000626:       |  \-------------> 0405                 addi    s0,s0,1
e0000628:       \----------------- f9a41be3             bne     s0,s10,e00005be <main+0x4ba>
e000062c:                          8905                 andi    a0,a0,1
e000062e:                      /-- c511                 beqz    a0,e000063a <main+0x536>
e0000630:                      |   6531                 lui     a0,0xc
e0000632:                      |   aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000636:                      |   6d8000ef             jal     ra,e0000d0e <test_status_set>
e000063a:                      \-> 4509                 li      a0,2
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:102
                  sizeof(out_data.data));

  // Setup ECB decryption transaction.
  transaction.operation = kDifAesOperationDecrypt;
e000063c:                          dc2a                 sw      a0,56(sp)
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:103
  CHECK_DIF_OK(dif_aes_start(&aes, &transaction, &key, NULL));
e000063e:                          1928                 addi    a0,sp,184
e0000640:                          182c                 addi    a1,sp,56
e0000642:                          08b0                 addi    a2,sp,88
e0000644:                          4681                 li      a3,0
e0000646:                          21b5                 jal     e0000ab2 <dif_aes_start>
e0000648:                /-------- cd15                 beqz    a0,e0000684 <main+0x580>
e000064a:                |         842a                 mv      s0,a0
e000064c:                |     /-- 000a1b63             bnez    s4,e0000662 <main+0x55e>
e0000650:                |     |   00002517             auipc   a0,0x2
e0000654:                |     |   d0850513             addi    a0,a0,-760 # e0002358 <main.kLogFields.29>
e0000658:                |     |   4585                 li      a1,1
e000065a:                |     |   8622                 mv      a2,s0
e000065c:                |     |   009000ef             jal     ra,e0000e64 <base_log_internal_dv>
e0000660:                |  /--|-- a829                 j       e000067a <main+0x576>
e0000662:                |  |  \-> 00001597             auipc   a1,0x1
e0000666:                |  |      79e58593             addi    a1,a1,1950 # e0001e00 <kAesModesCipherTextEcb256+0x68>
e000066a:                |  |      0188                 addi    a0,sp,192
e000066c:                |  |      4651                 li      a2,20
e000066e:                |  |      78d000ef             jal     ra,e00015fa <memcpy>
e0000672:                |  |      0188                 addi    a0,sp,192
e0000674:                |  |      85a2                 mv      a1,s0
e0000676:                |  |      74c000ef             jal     ra,e0000dc2 <base_log_internal_core>
e000067a:                |  \----> 6531                 lui     a0,0xc
e000067c:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000680:                |         68e000ef             jal     ra,e0000d0e <test_status_set>
e0000684:                \-------> 000f4537             lui     a0,0xf4
e0000688:                          24050a93             addi    s5,a0,576 # f4240 <tohost+0xd4238>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e000068c:                          4542                 lw      a0,16(sp)
e000068e:                          45d2                 lw      a1,20(sp)
e0000690:                          8656                 mv      a2,s5
e0000692:                          4681                 li      a3,0
e0000694:                          4701                 li      a4,0
e0000696:                          6b5000ef             jal     ra,e000154a <udiv64_slow>
e000069a:                          8baa                 mv      s7,a0
e000069c:                          892e                 mv      s2,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e000069e:                      /-> b8002573             csrr    a0,mcycleh
e00006a2:                      |   b00025f3             csrr    a1,mcycle
e00006a6:                      |   b8002673             csrr    a2,mcycleh
e00006aa:                      \-- fec51ae3             bne     a0,a2,e000069e <main+0x59a>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e00006ae:                          567d                 li      a2,-1
e00006b0:                          02c50533             mul     a0,a0,a2
e00006b4:                          40b004b3             neg     s1,a1
e00006b8:                          00b035b3             snez    a1,a1
e00006bc:                          40b509b3             sub     s3,a0,a1
main():
e00006c0:                          00001b17             auipc   s6,0x1
e00006c4:                          754b0b13             addi    s6,s6,1876 # e0001e14 <kAesModesCipherTextEcb256+0x7c>
e00006c8:                          6531                 lui     a0,0xc
e00006ca:                          aad50d93             addi    s11,a0,-1363 # baad <_stack_len+0x3aad>
e00006ce:                          00002c17             auipc   s8,0x2
e00006d2:                          c9ec0c13             addi    s8,s8,-866 # e000236c <main.kLogFields.31>
e00006d6:                          00001c97             auipc   s9,0x1
e00006da:                          7cac8c93             addi    s9,s9,1994 # e0001ea0 <kAesModesCipherTextEcb256+0x108>
e00006de:                          00002d17             auipc   s10,0x2
e00006e2:                          d1ad0d13             addi    s10,s10,-742 # e00023f8 <aes_testutils_get_status.kLogFields>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
e00006e6:             /----------> 1928                 addi    a0,sp,184
e00006e8:             |            4591                 li      a1,4
e00006ea:             |            0db10613             addi    a2,sp,219
e00006ee:             |            236d                 jal     e0000c98 <dif_aes_get_status>
e00006f0:             |  /-------- c50d                 beqz    a0,e000071a <main+0x616>
e00006f2:             |  |         842a                 mv      s0,a0
e00006f4:             |  |     /-- 000a1863             bnez    s4,e0000704 <main+0x600>
e00006f8:             |  |     |   4585                 li      a1,1
e00006fa:             |  |     |   856a                 mv      a0,s10
e00006fc:             |  |     |   8622                 mv      a2,s0
e00006fe:             |  |     |   766000ef             jal     ra,e0000e64 <base_log_internal_dv>
e0000702:             |  |  /--|-- a811                 j       e0000716 <main+0x612>
e0000704:             |  |  |  \-> 0188                 addi    a0,sp,192
e0000706:             |  |  |      4651                 li      a2,20
e0000708:             |  |  |      85e6                 mv      a1,s9
e000070a:             |  |  |      6f1000ef             jal     ra,e00015fa <memcpy>
e000070e:             |  |  |      0188                 addi    a0,sp,192
e0000710:             |  |  |      85a2                 mv      a1,s0
e0000712:             |  |  |      6b0000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000716:             |  |  \----> 856e                 mv      a0,s11
e0000718:             |  |         2bdd                 jal     e0000d0e <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
e000071a:             |  \-------> 0db14503             lbu     a0,219(sp)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:106

  // Load the previously produced cipher text to start the decryption operation.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusInputReady, true, TIMEOUT);
e000071e:             |  /-------- ed31                 bnez    a0,e000077a <main+0x676>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e0000720:             |  |     /-> b80025f3             csrr    a1,mcycleh
e0000724:             |  |     |   b0002573             csrr    a0,mcycle
e0000728:             |  |     |   b8002673             csrr    a2,mcycleh
e000072c:             |  |     \-- fec59ae3             bne     a1,a2,e0000720 <main+0x61c>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e0000730:             |  |         9526                 add     a0,a0,s1
e0000732:             |  |         00953633             sltu    a2,a0,s1
e0000736:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e0000738:             |  |         95b2                 add     a1,a1,a2
e000073a:             |  |  /----- 01258563             beq     a1,s2,e0000744 <main+0x640>
main():
e000073e:             |  |  |      00b93533             sltu    a0,s2,a1
e0000742:             |  |  |  /-- a019                 j       e0000748 <main+0x644>
e0000744:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
e0000748:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:106
e000074c:             +--|-------- fd49                 bnez    a0,e00006e6 <main+0x5e2>
e000074e:             |  |     /-- 000a1963             bnez    s4,e0000760 <main+0x65c>
e0000752:             |  |     |   4589                 li      a1,2
e0000754:             |  |     |   8562                 mv      a0,s8
e0000756:             |  |     |   8656                 mv      a2,s5
e0000758:             |  |     |   86de                 mv      a3,s7
e000075a:             |  |     |   70a000ef             jal     ra,e0000e64 <base_log_internal_dv>
e000075e:             |  |  /--|-- a819                 j       e0000774 <main+0x670>
e0000760:             |  |  |  \-> 0188                 addi    a0,sp,192
e0000762:             |  |  |      4651                 li      a2,20
e0000764:             |  |  |      85da                 mv      a1,s6
e0000766:             |  |  |      695000ef             jal     ra,e00015fa <memcpy>
e000076a:             |  |  |      0188                 addi    a0,sp,192
e000076c:             |  |  |      85d6                 mv      a1,s5
e000076e:             |  |  |      865e                 mv      a2,s7
e0000770:             |  |  |      652000ef             jal     ra,e0000dc2 <base_log_internal_core>
e0000774:             |  |  \----> 856e                 mv      a0,s11
e0000776:             |  |         2b61                 jal     e0000d0e <test_status_set>
e0000778:             \--|-------- b7bd                 j       e00006e6 <main+0x5e2>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:107
  CHECK_DIF_OK(dif_aes_load_data(&aes, out_data));
e000077a:                \-------> 5512                 lw      a0,36(sp)
e000077c:                          5582                 lw      a1,32(sp)
e000077e:                          4672                 lw      a2,28(sp)
e0000780:                          46e2                 lw      a3,24(sp)
e0000782:                          c7aa                 sw      a0,204(sp)
e0000784:                          c5ae                 sw      a1,200(sp)
e0000786:                          c3b2                 sw      a2,196(sp)
e0000788:                          c1b6                 sw      a3,192(sp)
e000078a:                          1928                 addi    a0,sp,184
e000078c:                          018c                 addi    a1,sp,192
e000078e:                          2959                 jal     e0000c24 <dif_aes_load_data>
e0000790:                /-------- cd0d                 beqz    a0,e00007ca <main+0x6c6>
e0000792:                |         842a                 mv      s0,a0
e0000794:                |     /-- 000a1b63             bnez    s4,e00007aa <main+0x6a6>
e0000798:                |     |   00002517             auipc   a0,0x2
e000079c:                |     |   be850513             addi    a0,a0,-1048 # e0002380 <main.kLogFields.33>
e00007a0:                |     |   4585                 li      a1,1
e00007a2:                |     |   8622                 mv      a2,s0
e00007a4:                |     |   6c0000ef             jal     ra,e0000e64 <base_log_internal_dv>
e00007a8:                |  /--|-- a829                 j       e00007c2 <main+0x6be>
e00007aa:                |  |  \-> 00001597             auipc   a1,0x1
e00007ae:                |  |      67e58593             addi    a1,a1,1662 # e0001e28 <kAesModesCipherTextEcb256+0x90>
e00007b2:                |  |      0188                 addi    a0,sp,192
e00007b4:                |  |      4651                 li      a2,20
e00007b6:                |  |      645000ef             jal     ra,e00015fa <memcpy>
e00007ba:                |  |      0188                 addi    a0,sp,192
e00007bc:                |  |      85a2                 mv      a1,s0
e00007be:                |  |      604000ef             jal     ra,e0000dc2 <base_log_internal_core>
e00007c2:                |  \----> 6531                 lui     a0,0xc
e00007c4:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00007c8:                |         2399                 jal     e0000d0e <test_status_set>
e00007ca:                \-------> 000f4537             lui     a0,0xf4
e00007ce:                          24050a93             addi    s5,a0,576 # f4240 <tohost+0xd4238>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e00007d2:                          4542                 lw      a0,16(sp)
e00007d4:                          45d2                 lw      a1,20(sp)
e00007d6:                          8656                 mv      a2,s5
e00007d8:                          4681                 li      a3,0
e00007da:                          4701                 li      a4,0
e00007dc:                          56f000ef             jal     ra,e000154a <udiv64_slow>
e00007e0:                          89aa                 mv      s3,a0
e00007e2:                          8d2e                 mv      s10,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e00007e4:                      /-> b8002573             csrr    a0,mcycleh
e00007e8:                      |   b00025f3             csrr    a1,mcycle
e00007ec:                      |   b8002673             csrr    a2,mcycleh
e00007f0:                      \-- fec51ae3             bne     a0,a2,e00007e4 <main+0x6e0>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e00007f4:                          567d                 li      a2,-1
e00007f6:                          02c50533             mul     a0,a0,a2
e00007fa:                          40b004b3             neg     s1,a1
e00007fe:                          00b035b3             snez    a1,a1
e0000802:                          40b50db3             sub     s11,a0,a1
main():
e0000806:                          00001917             auipc   s2,0x1
e000080a:                          63690913             addi    s2,s2,1590 # e0001e3c <kAesModesCipherTextEcb256+0xa4>
e000080e:                          6531                 lui     a0,0xc
e0000810:                          aad50c93             addi    s9,a0,-1363 # baad <_stack_len+0x3aad>
e0000814:                          00002b17             auipc   s6,0x2
e0000818:                          b80b0b13             addi    s6,s6,-1152 # e0002394 <main.kLogFields.36>
e000081c:                          00001b97             auipc   s7,0x1
e0000820:                          684b8b93             addi    s7,s7,1668 # e0001ea0 <kAesModesCipherTextEcb256+0x108>
e0000824:                          00002c17             auipc   s8,0x2
e0000828:                          bd4c0c13             addi    s8,s8,-1068 # e00023f8 <aes_testutils_get_status.kLogFields>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
e000082c:             /----------> 1928                 addi    a0,sp,184
e000082e:             |            458d                 li      a1,3
e0000830:             |            0db10613             addi    a2,sp,219
e0000834:             |            2195                 jal     e0000c98 <dif_aes_get_status>
e0000836:             |  /-------- c505                 beqz    a0,e000085e <main+0x75a>
e0000838:             |  |         842a                 mv      s0,a0
e000083a:             |  |     /-- 000a1863             bnez    s4,e000084a <main+0x746>
e000083e:             |  |     |   4585                 li      a1,1
e0000840:             |  |     |   8562                 mv      a0,s8
e0000842:             |  |     |   8622                 mv      a2,s0
e0000844:             |  |     |   620000ef             jal     ra,e0000e64 <base_log_internal_dv>
e0000848:             |  |  /--|-- a809                 j       e000085a <main+0x756>
e000084a:             |  |  |  \-> 0188                 addi    a0,sp,192
e000084c:             |  |  |      4651                 li      a2,20
e000084e:             |  |  |      85de                 mv      a1,s7
e0000850:             |  |  |      5ab000ef             jal     ra,e00015fa <memcpy>
e0000854:             |  |  |      0188                 addi    a0,sp,192
e0000856:             |  |  |      85a2                 mv      a1,s0
e0000858:             |  |  |      23ad                 jal     e0000dc2 <base_log_internal_core>
e000085a:             |  |  \----> 8566                 mv      a0,s9
e000085c:             |  |         294d                 jal     e0000d0e <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
e000085e:             |  \-------> 0db14503             lbu     a0,219(sp)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:110

  // Read out the produced plain text.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusOutputValid, true, TIMEOUT);
e0000862:             |  /-------- ed21                 bnez    a0,e00008ba <main+0x7b6>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e0000864:             |  |     /-> b80025f3             csrr    a1,mcycleh
e0000868:             |  |     |   b0002573             csrr    a0,mcycle
e000086c:             |  |     |   b8002673             csrr    a2,mcycleh
e0000870:             |  |     \-- fec59ae3             bne     a1,a2,e0000864 <main+0x760>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e0000874:             |  |         9526                 add     a0,a0,s1
e0000876:             |  |         00953633             sltu    a2,a0,s1
e000087a:             |  |         966e                 add     a2,a2,s11
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e000087c:             |  |         95b2                 add     a1,a1,a2
e000087e:             |  |  /----- 01a58563             beq     a1,s10,e0000888 <main+0x784>
main():
e0000882:             |  |  |      00bd3533             sltu    a0,s10,a1
e0000886:             |  |  |  /-- a019                 j       e000088c <main+0x788>
e0000888:             |  |  \--|-> 00a9b533             sltu    a0,s3,a0
e000088c:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:110
e0000890:             +--|-------- fd51                 bnez    a0,e000082c <main+0x728>
e0000892:             |  |     /-- 000a1863             bnez    s4,e00008a2 <main+0x79e>
e0000896:             |  |     |   4589                 li      a1,2
e0000898:             |  |     |   855a                 mv      a0,s6
e000089a:             |  |     |   8656                 mv      a2,s5
e000089c:             |  |     |   86ce                 mv      a3,s3
e000089e:             |  |     |   23d9                 jal     e0000e64 <base_log_internal_dv>
e00008a0:             |  |  /--|-- a811                 j       e00008b4 <main+0x7b0>
e00008a2:             |  |  |  \-> 0188                 addi    a0,sp,192
e00008a4:             |  |  |      4651                 li      a2,20
e00008a6:             |  |  |      85ca                 mv      a1,s2
e00008a8:             |  |  |      553000ef             jal     ra,e00015fa <memcpy>
e00008ac:             |  |  |      0188                 addi    a0,sp,192
e00008ae:             |  |  |      85d6                 mv      a1,s5
e00008b0:             |  |  |      864e                 mv      a2,s3
e00008b2:             |  |  |      2b01                 jal     e0000dc2 <base_log_internal_core>
e00008b4:             |  |  \----> 8566                 mv      a0,s9
e00008b6:             |  |         29a1                 jal     e0000d0e <test_status_set>
e00008b8:             \--|-------- bf95                 j       e000082c <main+0x728>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:111
  CHECK_DIF_OK(dif_aes_read_output(&aes, &out_data));
e00008ba:                \-------> 1928                 addi    a0,sp,184
e00008bc:                          082c                 addi    a1,sp,24
e00008be:                          2e71                 jal     e0000c5a <dif_aes_read_output>
e00008c0:                          4db2                 lw      s11,12(sp)
e00008c2:                /-------- c91d                 beqz    a0,e00008f8 <main+0x7f4>
e00008c4:                |         842a                 mv      s0,a0
e00008c6:                |     /-- 000a1a63             bnez    s4,e00008da <main+0x7d6>
e00008ca:                |     |   00002517             auipc   a0,0x2
e00008ce:                |     |   ade50513             addi    a0,a0,-1314 # e00023a8 <main.kLogFields.38>
e00008d2:                |     |   4585                 li      a1,1
e00008d4:                |     |   8622                 mv      a2,s0
e00008d6:                |     |   2379                 jal     e0000e64 <base_log_internal_dv>
e00008d8:                |  /--|-- a821                 j       e00008f0 <main+0x7ec>
e00008da:                |  |  \-> 00001597             auipc   a1,0x1
e00008de:                |  |      57658593             addi    a1,a1,1398 # e0001e50 <kAesModesCipherTextEcb256+0xb8>
e00008e2:                |  |      0188                 addi    a0,sp,192
e00008e4:                |  |      4651                 li      a2,20
e00008e6:                |  |      515000ef             jal     ra,e00015fa <memcpy>
e00008ea:                |  |      0188                 addi    a0,sp,192
e00008ec:                |  |      85a2                 mv      a1,s0
e00008ee:                |  |      29d1                 jal     e0000dc2 <base_log_internal_core>
e00008f0:                |  \----> 6531                 lui     a0,0xc
e00008f2:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00008f6:                |         2921                 jal     e0000d0e <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:114

  // Finish the ECB encryption transaction.
  CHECK_DIF_OK(dif_aes_end(&aes));
e00008f8:                \-------> 1928                 addi    a0,sp,184
e00008fa:                          2cc5                 jal     e0000bea <dif_aes_end>
e00008fc:                /-------- c91d                 beqz    a0,e0000932 <main+0x82e>
e00008fe:                |         842a                 mv      s0,a0
e0000900:                |     /-- 000a1a63             bnez    s4,e0000914 <main+0x810>
e0000904:                |     |   00002517             auipc   a0,0x2
e0000908:                |     |   ab850513             addi    a0,a0,-1352 # e00023bc <main.kLogFields.40>
e000090c:                |     |   4585                 li      a1,1
e000090e:                |     |   8622                 mv      a2,s0
e0000910:                |     |   2b91                 jal     e0000e64 <base_log_internal_dv>
e0000912:                |  /--|-- a821                 j       e000092a <main+0x826>
e0000914:                |  |  \-> 00001597             auipc   a1,0x1
e0000918:                |  |      55058593             addi    a1,a1,1360 # e0001e64 <kAesModesCipherTextEcb256+0xcc>
e000091c:                |  |      0188                 addi    a0,sp,192
e000091e:                |  |      4651                 li      a2,20
e0000920:                |  |      4db000ef             jal     ra,e00015fa <memcpy>
e0000924:                |  |      0188                 addi    a0,sp,192
e0000926:                |  |      85a2                 mv      a1,s0
e0000928:                |  |      2969                 jal     e0000dc2 <base_log_internal_core>
e000092a:                |  \----> 6531                 lui     a0,0xc
e000092c:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000930:                |         2ef9                 jal     e0000d0e <test_status_set>
e0000932:                \-------> 4401                 li      s0,0
e0000934:                          4501                 li      a0,0
e0000936:                          01810c13             addi    s8,sp,24
e000093a:                          4cc1                 li      s9,16
e000093c:                          00001917             auipc   s2,0x1
e0000940:                          55090913             addi    s2,s2,1360 # e0001e8c <kAesModesCipherTextEcb256+0xf4>
e0000944:                          00002b17             auipc   s6,0x2
e0000948:                          aa0b0b13             addi    s6,s6,-1376 # e00023e4 <main.kLogFields.45>
e000094c:                          00001997             auipc   s3,0x1
e0000950:                          52c98993             addi    s3,s3,1324 # e0001e78 <kAesModesCipherTextEcb256+0xe0>
e0000954:                          00002a97             auipc   s5,0x2
e0000958:                          a7ca8a93             addi    s5,s5,-1412 # e00023d0 <main.kLogFields.42>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:116

  CHECK_ARRAYS_EQ((uint8_t *)out_data.data, kAesModesPlainText,
e000095c:       /----------------> 008c04b3             add     s1,s8,s0
e0000960:       |                  0004c583             lbu     a1,0(s1)
e0000964:       |                  01b40633             add     a2,s0,s11
e0000968:       |                  00064d03             lbu     s10,0(a2)
e000096c:       |  /-------------- 05a58863             beq     a1,s10,e00009bc <main+0x8b8>
e0000970:       |  |               8905                 andi    a0,a0,1
e0000972:       |  |           /-- c501                 beqz    a0,e000097a <main+0x876>
e0000974:       |  |        /--|-- 000a0863             beqz    s4,e0000984 <main+0x880>
e0000978:       |  |  /-----|--|-- a02d                 j       e00009a2 <main+0x89e>
e000097a:       |  |  |  /--|--\-X 000a1d63             bnez    s4,e0000994 <main+0x890>
e000097e:       |  |  |  |  |      8556                 mv      a0,s5
e0000980:       |  |  |  |  |      4581                 li      a1,0
e0000982:       |  |  |  |  |      21cd                 jal     e0000e64 <base_log_internal_dv>
e0000984:       |  |  |  |  \----> 0004c683             lbu     a3,0(s1)
e0000988:       |  |  |  |         458d                 li      a1,3
e000098a:       |  |  |  |         855a                 mv      a0,s6
e000098c:       |  |  |  |         8622                 mv      a2,s0
e000098e:       |  |  |  |         876a                 mv      a4,s10
e0000990:       |  |  |  |         29d1                 jal     e0000e64 <base_log_internal_dv>
e0000992:       |  |  |  |     /-- a025                 j       e00009ba <main+0x8b6>
e0000994:       |  |  |  \-----|-> 0188                 addi    a0,sp,192
e0000996:       |  |  |        |   4651                 li      a2,20
e0000998:       |  |  |        |   85ce                 mv      a1,s3
e000099a:       |  |  |        |   461000ef             jal     ra,e00015fa <memcpy>
e000099e:       |  |  |        |   0188                 addi    a0,sp,192
e00009a0:       |  |  |        |   210d                 jal     e0000dc2 <base_log_internal_core>
e00009a2:       |  |  \--------|-> 0004cb83             lbu     s7,0(s1)
e00009a6:       |  |           |   0188                 addi    a0,sp,192
e00009a8:       |  |           |   4651                 li      a2,20
e00009aa:       |  |           |   85ca                 mv      a1,s2
e00009ac:       |  |           |   44f000ef             jal     ra,e00015fa <memcpy>
e00009b0:       |  |           |   0188                 addi    a0,sp,192
e00009b2:       |  |           |   85a2                 mv      a1,s0
e00009b4:       |  |           |   865e                 mv      a2,s7
e00009b6:       |  |           |   86ea                 mv      a3,s10
e00009b8:       |  |           |   2129                 jal     e0000dc2 <base_log_internal_core>
e00009ba:       |  |           \-> 4505                 li      a0,1
e00009bc:       |  \-------------> 0405                 addi    s0,s0,1
e00009be:       \----------------- f9941fe3             bne     s0,s9,e000095c <main+0x858>
e00009c2:                          8905                 andi    a0,a0,1
e00009c4:                      /-- c509                 beqz    a0,e00009ce <main+0x8ca>
e00009c6:                      |   6531                 lui     a0,0xc
e00009c8:                      |   aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00009cc:                      |   2689                 jal     e0000d0e <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:118
                  sizeof(out_data.data));
  return 0;
e00009ce:                      \-> 4501                 li      a0,0
e00009d0:                          4dfe                 lw      s11,220(sp)
e00009d2:                          5d0e                 lw      s10,224(sp)
e00009d4:                          5c9e                 lw      s9,228(sp)
e00009d6:                          5c2e                 lw      s8,232(sp)
e00009d8:                          5bbe                 lw      s7,236(sp)
e00009da:                          5b4e                 lw      s6,240(sp)
e00009dc:                          5ade                 lw      s5,244(sp)
e00009de:                          5a6e                 lw      s4,248(sp)
e00009e0:                          59fe                 lw      s3,252(sp)
e00009e2:                          10012903             lw      s2,256(sp)
e00009e6:                          10412483             lw      s1,260(sp)
e00009ea:                          10812403             lw      s0,264(sp)
e00009ee:                          10c12083             lw      ra,268(sp)
e00009f2:                          6151                 addi    sp,sp,272
e00009f4:                          8082                 ret

e00009f6 <external_irq_handler>:
external_irq_handler():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:338
  putchar('\n');

  return i;
}

void external_irq_handler(void)  {
e00009f6:           1101                        addi    sp,sp,-32
e00009f8:           ce2a                        sw      a0,28(sp)
e00009fa:           cc2e                        sw      a1,24(sp)
e00009fc:           ca32                        sw      a2,20(sp)
e00009fe:           c836                        sw      a3,16(sp)
e0000a00:           c63a                        sw      a4,12(sp)
e0000a02:           c43e                        sw      a5,8(sp)
e0000a04:           c242                        sw      a6,4(sp)
e0000a06:           c8200537            lui     a0,0xc8200
e0000a0a:           09f00593            li      a1,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:355
  p_reg5 = (int *) 0x1040401C;

  // start of """Interrupt Service Routine"""
  
  plic_check = (int *) 0xC8200004;
  while(*plic_check != mbox_id);   //check wether the intr is the correct one
e0000a0e:       /-> 4150                        lw      a2,4(a0)
e0000a10:       \-- feb61fe3            bne     a2,a1,e0000a0e <external_irq_handler+0x18>
e0000a14:           10404537            lui     a0,0x10404
/proc/self/cwd/sw/tests/opentitan/common/utils.c:358
  
  p_reg = (int *) 0x10404020;
 *p_reg = 0x00000000;        //clearing the pending interrupt signal
e0000a18:           02052023            sw      zero,32(a0) # 10404020 <tohost+0x103e4018>
e0000a1c:           c82005b7            lui     a1,0xc8200
e0000a20:           09f00613            li      a2,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:360
 
 *plic_check = mbox_id;      //completing interrupt
e0000a24:           c1d0                        sw      a2,4(a1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:362
 
  a = *p_reg1;
e0000a26:           450c                        lw      a1,8(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:363
  b = *p_reg2;
e0000a28:           4910                        lw      a2,16(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:364
  c = *p_reg3;
e0000a2a:           4954                        lw      a3,20(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:365
  d = *p_reg4;
e0000a2c:           4d18                        lw      a4,24(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:366
  e = *p_reg5;
e0000a2e:           01c52803            lw      a6,28(a0)
e0000a32:           baadc7b7            lui     a5,0xbaadc
e0000a36:           0de78793            addi    a5,a5,222 # baadc0de <fromhost+0xdaacc0ce>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:369
  
  
  if( a == 0xBAADC0DE &&  b == 0xBAADC0DE && c == 0xBAADC0DE && d == 0xBAADC0DE && e == 0xBAADC0DE){
e0000a3a:           8dbd                        xor     a1,a1,a5
e0000a3c:           8e3d                        xor     a2,a2,a5
e0000a3e:           8dd1                        or      a1,a1,a2
e0000a40:           00f6c633            xor     a2,a3,a5
e0000a44:           8dd1                        or      a1,a1,a2
e0000a46:           00f74633            xor     a2,a4,a5
e0000a4a:           8dd1                        or      a1,a1,a2
e0000a4c:           00f84633            xor     a2,a6,a5
e0000a50:           8dd1                        or      a1,a1,a2
e0000a52:       /-- e589                        bnez    a1,e0000a5c <external_irq_handler+0x66>
e0000a54:       |   02450513            addi    a0,a0,36
e0000a58:       |   4585                        li      a1,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:371
      p_reg = (int *) 0x10404024; // completion interrupt to ariane agent
     *p_reg = 0x00000001;
e0000a5a:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:375
  }
  
  return;
}
e0000a5c:       \-> 4812                        lw      a6,4(sp)
e0000a5e:           47a2                        lw      a5,8(sp)
e0000a60:           4732                        lw      a4,12(sp)
e0000a62:           46c2                        lw      a3,16(sp)
e0000a64:           4652                        lw      a2,20(sp)
e0000a66:           45e2                        lw      a1,24(sp)
e0000a68:           4572                        lw      a0,28(sp)
e0000a6a:           6105                        addi    sp,sp,32
e0000a6c:           30200073            mret

e0000a70 <dif_aes_init>:
dif_aes_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:18

#include "aes_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_aes_init(mmio_region_t base_addr, dif_aes_t *aes) {
  if (aes == NULL) {
e0000a70:       /----- c581                     beqz    a1,e0000a78 <dif_aes_init+0x8>
e0000a72:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:22
    return kDifBadArg;
  }

  aes->base_addr = base_addr;
e0000a74:       |      c188                     sw      a0,0(a1)
e0000a76:       |  /-- a011                     j       e0000a7a <dif_aes_init+0xa>
e0000a78:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:25

  return kDifOk;
}
e0000a7a:          \-> 8532                     mv      a0,a2
e0000a7c:              8082                     ret

e0000a7e <dif_aes_reset>:
dif_aes_reset():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:192
    data[i] = mmio_region_read32(aes->base_addr, offset);
  }
}

dif_result_t dif_aes_reset(const dif_aes_t *aes) {
  if (aes == NULL) {
e0000a7e:       /----- c905                     beqz    a0,e0000aae <dif_aes_reset+0x30>
e0000a80:       |      410c                     lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000a82:       |  /-> 0845a603                 lw      a2,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e0000a86:       |  |   8a05                     andi    a2,a2,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:74
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0000a88:       |  \-- de6d                     beqz    a2,e0000a82 <dif_aes_reset+0x4>
e0000a8a:       |      6621                     lui     a2,0x8
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000a8c:       |      d9f0                     sw      a2,116(a1)
e0000a8e:       |      d9f0                     sw      a2,116(a1)
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:89
  mmio_region_write32(aes->base_addr, AES_TRIGGER_REG_OFFSET, trigger_reg);
e0000a90:       |      410c                     lw      a1,0(a0)
e0000a92:       |      4619                     li      a2,6
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000a94:       |      08c5a023                 sw      a2,128(a1)
e0000a98:       |      410c                     lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000a9a:       |  /-> 0845a503                 lw      a0,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000a9e:       |  |   8905                     andi    a0,a0,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:92
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0000aa0:       |  \-- dd6d                     beqz    a0,e0000a9a <dif_aes_reset+0x1c>
e0000aa2:       |      4501                     li      a0,0
e0000aa4:       |      78300613                 li      a2,1923
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000aa8:       |      d9f0                     sw      a2,116(a1)
e0000aaa:       |      d9f0                     sw      a2,116(a1)
dif_aes_reset():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:211
                               AES_CTRL_SHADOWED_KEY_LEN_MASK);

  aes_shadowed_write(aes->base_addr, AES_CTRL_SHADOWED_REG_OFFSET, reg);

  return kDifOk;
}
e0000aac:       |      8082                     ret
e0000aae:       \----> 450d                     li      a0,3
e0000ab0:              8082                     ret

e0000ab2 <dif_aes_start>:
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:217

dif_result_t dif_aes_start(const dif_aes_t *aes,
                           const dif_aes_transaction_t *transaction,
                           const dif_aes_key_share_t *key,
                           const dif_aes_iv_t *iv) {
  if (aes == NULL || transaction == NULL ||
e0000ab2:                       00153713                seqz    a4,a0
e0000ab6:                       0015b793                seqz    a5,a1
e0000aba:                       8fd9                    or      a5,a5,a4
e0000abc:                       470d                    li      a4,3
e0000abe:       /-------------- 10079563                bnez    a5,e0000bc8 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:218
      (iv == NULL && transaction->mode != kDifAesModeEcb) ||
e0000ac2:       |        /----- e691                    bnez    a3,e0000ace <dif_aes_start+0x1c>
e0000ac4:       |        |      0045a803                lw      a6,4(a1)
e0000ac8:       |        |      4785                    li      a5,1
e0000aca:       +--------|----- 0ef81f63                bne     a6,a5,e0000bc8 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:219
      (key == NULL &&
e0000ace:       |        \--/-X e219                    bnez    a2,e0000ad4 <dif_aes_start+0x22>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:220
       transaction->key_provider == kDifAesKeySoftwareProvided)) {
e0000ad0:       |           |   499c                    lw      a5,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:217
  if (aes == NULL || transaction == NULL ||
e0000ad2:       +-----------|-- cbfd                    beqz    a5,e0000bc8 <dif_aes_start+0x116>
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000ad4:       |           \-> 00052283                lw      t0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000ad8:       |               0842a703                lw      a4,132(t0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000adc:       |               00177793                andi    a5,a4,1
e0000ae0:       |               4739                    li      a4,14
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:224
    return kDifBadArg;
  }

  if (!aes_idle(aes)) {
e0000ae2:       +-------------- c3fd                    beqz    a5,e0000bc8 <dif_aes_start+0x116>
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:105
                                        transaction->operation);
e0000ae4:       |               4198                    lw      a4,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:108
                               transaction->mode);
e0000ae6:       |               0045a803                lw      a6,4(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000aea:       |               00377893                andi    a7,a4,3
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:111
                               transaction->key_len);
e0000aee:       |               459c                    lw      a5,8(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000af0:       |               00281713                slli    a4,a6,0x2
e0000af4:       |               0fc77713                andi    a4,a4,252
e0000af8:       |               01176733                or      a4,a4,a7
e0000afc:       |               07a2                    slli    a5,a5,0x8
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:114
                               transaction->mask_reseeding);
e0000afe:       |               0145a883                lw      a7,20(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000b02:       |               7007f793                andi    a5,a5,1792
e0000b06:       |               00f76333                or      t1,a4,a5
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
  bool flag = transaction->manual_operation == kDifAesManualOperationManual;
e0000b0a:       |               45dc                    lw      a5,12(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000b0c:       |               01d89713                slli    a4,a7,0x1d
e0000b10:       |               8345                    srli    a4,a4,0x11
e0000b12:       |               00e36733                or      a4,t1,a4
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
e0000b16:       |               17fd                    addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:119
  flag = transaction->key_provider == kDifAesKeySideload;
e0000b18:       |               0105a883                lw      a7,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
  bool flag = transaction->manual_operation == kDifAesManualOperationManual;
e0000b1c:       |               0017b793                seqz    a5,a5
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000b20:       |               07be                    slli    a5,a5,0xf
e0000b22:       |               8f5d                    or      a4,a4,a5
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:119
  flag = transaction->key_provider == kDifAesKeySideload;
e0000b24:       |               fff88793                addi    a5,a7,-1
e0000b28:       |               0017b793                seqz    a5,a5
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000b2c:       |               07ae                    slli    a5,a5,0xb
e0000b2e:       |               8f5d                    or      a4,a4,a5
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000b30:       |               06e2aa23                sw      a4,116(t0)
e0000b34:       |               06e2aa23                sw      a4,116(t0)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:138
      mmio_region_read32(aes->base_addr, AES_CTRL_AUX_REGWEN_REG_OFFSET);
e0000b38:       |               4118                    lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000b3a:       |               5f7c                    lw      a5,124(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:139
  if (!reg_val) {
e0000b3c:       |  /----------- cbc1                    beqz    a5,e0000bcc <dif_aes_start+0x11a>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:156
                                 transaction->force_masks);
e0000b3e:       |  |            01958783                lb      a5,25(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:154
                           transaction->reseed_on_key_change);
e0000b42:       |  |            0185c283                lbu     t0,24(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000b46:       |  |            0786                    slli    a5,a5,0x1
e0000b48:       |  |            0fe7f793                andi    a5,a5,254
e0000b4c:       |  |            0057e7b3                or      a5,a5,t0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000b50:       |  |            df3c                    sw      a5,120(a4)
e0000b52:       |  |            df3c                    sw      a5,120(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:159
  reg_val = transaction->ctrl_aux_lock == false;
e0000b54:       |  |            01a5c583                lbu     a1,26(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:160
  mmio_region_write32(aes->base_addr, AES_CTRL_AUX_REGWEN_REG_OFFSET, reg_val);
e0000b58:       |  |            4118                    lw      a4,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:159
  reg_val = transaction->ctrl_aux_lock == false;
e0000b5a:       |  |            0015c593                xori    a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000b5e:       |  |            df6c                    sw      a1,124(a4)
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:238
  result = configure_aux(aes, transaction);
  if (result != kDifOk) {
    return result;
  }

  if (transaction->key_provider == kDifAesKeySoftwareProvided) {
e0000b60:       |  |  /--/----X 02089c63                bnez    a7,e0000b98 <dif_aes_start+0xe6>
e0000b64:       |  |  |  |      4581                    li      a1,0
e0000b66:       |  |  |  |      02000893                li      a7,32
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000b6a:       |  |  |  |  /-> 411c                    lw      a5,0(a0)
e0000b6c:       |  |  |  |  |   00b60733                add     a4,a2,a1
e0000b70:       |  |  |  |  |   4318                    lw      a4,0(a4)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000b72:       |  |  |  |  |   97ae                    add     a5,a5,a1
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000b74:       |  |  |  |  |   0591                    addi    a1,a1,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000b76:       |  |  |  |  |   c3d8                    sw      a4,4(a5)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
e0000b78:       |  |  |  |  \-- ff1599e3                bne     a1,a7,e0000b6a <dif_aes_start+0xb8>
e0000b7c:       |  |  |  |      4581                    li      a1,0
e0000b7e:       |  |  |  |      02060613                addi    a2,a2,32
e0000b82:       |  |  |  |      02000893                li      a7,32
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000b86:       |  |  |  |  /-> 411c                    lw      a5,0(a0)
e0000b88:       |  |  |  |  |   00b60733                add     a4,a2,a1
e0000b8c:       |  |  |  |  |   4318                    lw      a4,0(a4)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000b8e:       |  |  |  |  |   97ae                    add     a5,a5,a1
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000b90:       |  |  |  |  |   0591                    addi    a1,a1,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000b92:       |  |  |  |  |   d3d8                    sw      a4,36(a5)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
e0000b94:       |  |  |  |  \-- ff1599e3                bne     a1,a7,e0000b86 <dif_aes_start+0xd4>
e0000b98:       |  |  |  \----> 4585                    li      a1,1
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:246

    aes_set_multireg(aes, &key->share1[0], AES_KEY_SHARE1_MULTIREG_COUNT,
                     AES_KEY_SHARE1_0_REG_OFFSET);
  }

  if (transaction->mode != kDifAesModeEcb) {
e0000b9a:       |  |  |  /----- 02b80663                beq     a6,a1,e0000bc6 <dif_aes_start+0x114>
e0000b9e:       |  |  |  |      410c                    lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000ba0:       |  |  |  |  /-> 0845a603                lw      a2,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e0000ba4:       |  |  |  |  |   8a05                    andi    a2,a2,1
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:250
    // Make sure AES is idle before providing the IV. Depending on the
    // configuration, updating the key might cause the AES to become non-idle
    // and reseed the internal PRNGs.
    AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0000ba6:       |  |  |  |  \-- de6d                    beqz    a2,e0000ba0 <dif_aes_start+0xee>
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000ba8:       |  |  |  |      4298                    lw      a4,0(a3)
e0000baa:       |  |  |  |      4601                    li      a2,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000bac:       |  |  |  |      c1f8                    sw      a4,68(a1)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000bae:       |  |  |  |      00468593                addi    a1,a3,4
e0000bb2:       |  |  |  |      46b1                    li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000bb4:       |  |  |  |  /-> 4118                    lw      a4,0(a0)
e0000bb6:       |  |  |  |  |   00c587b3                add     a5,a1,a2
e0000bba:       |  |  |  |  |   439c                    lw      a5,0(a5)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000bbc:       |  |  |  |  |   9732                    add     a4,a4,a2
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000bbe:       |  |  |  |  |   0611                    addi    a2,a2,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000bc0:       |  |  |  |  |   c73c                    sw      a5,72(a4)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
e0000bc2:       |  |  |  |  \-- fed619e3                bne     a2,a3,e0000bb4 <dif_aes_start+0x102>
e0000bc6:       |  |  |  \----> 4701                    li      a4,0
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:256
    aes_set_multireg(aes, &iv->iv[0], AES_IV_MULTIREG_COUNT,
                     AES_IV_0_REG_OFFSET);
  }

  return kDifOk;
}
e0000bc8:       >--|--|-------> 853a                    mv      a0,a4
e0000bca:       |  |  |         8082                    ret
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000bcc:       |  \--|-------> 5f3c                    lw      a5,120(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:144
            transaction->reseed_on_key_change ||
e0000bce:       |     |         0185c283                lbu     t0,24(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:143
            reg_val, AES_CTRL_AUX_SHADOWED_KEY_TOUCH_FORCES_RESEED_BIT) !=
e0000bd2:       |     |         0017f313                andi    t1,a5,1
e0000bd6:       |     |         4735                    li      a4,13
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:144
            transaction->reseed_on_key_change ||
e0000bd8:       +-----|-------- fe6298e3                bne     t0,t1,e0000bc8 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:146
            transaction->force_masks) {
e0000bdc:       |     |         0195c583                lbu     a1,25(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:145
        bitfield_bit32_read(reg_val, AES_CTRL_AUX_SHADOWED_FORCE_MASKS_BIT) !=
e0000be0:       |     |         8385                    srli    a5,a5,0x1
e0000be2:       |     |         8b85                    andi    a5,a5,1
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:142
    if (bitfield_bit32_read(
e0000be4:       |     \-------- f6f58ee3                beq     a1,a5,e0000b60 <dif_aes_start+0xae>
e0000be8:       \-------------- b7c5                    j       e0000bc8 <dif_aes_start+0x116>

e0000bea <dif_aes_end>:
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:259

dif_result_t dif_aes_end(const dif_aes_t *aes) {
  if (aes == NULL) {
e0000bea:       /-------- c915                  beqz    a0,e0000c1e <dif_aes_end+0x34>
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000bec:       |         4110                  lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000bee:       |         08462583              lw      a1,132(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000bf2:       |         0015f693              andi    a3,a1,1
e0000bf6:       |         45b9                  li      a1,14
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:263
    return kDifBadArg;
  }

  if (!aes_idle(aes)) {
e0000bf8:       |  /----- c685                  beqz    a3,e0000c20 <dif_aes_end+0x36>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000bfa:       |  |  /-> 08462583              lw      a1,132(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000bfe:       |  |  |   8985                  andi    a1,a1,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:74
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0000c00:       |  |  \-- dded                  beqz    a1,e0000bfa <dif_aes_end+0x10>
e0000c02:       |  |      65a1                  lui     a1,0x8
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000c04:       |  |      da6c                  sw      a1,116(a2)
e0000c06:       |  |      da6c                  sw      a1,116(a2)
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:89
  mmio_region_write32(aes->base_addr, AES_TRIGGER_REG_OFFSET, trigger_reg);
e0000c08:       |  |      410c                  lw      a1,0(a0)
e0000c0a:       |  |      4619                  li      a2,6
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000c0c:       |  |      08c5a023              sw      a2,128(a1) # 8080 <_stack_len+0x80>
e0000c10:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000c12:       |  |  /-> 08452583              lw      a1,132(a0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000c16:       |  |  |   8985                  andi    a1,a1,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:92
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0000c18:       |  |  \-- dded                  beqz    a1,e0000c12 <dif_aes_end+0x28>
e0000c1a:       |  |      4581                  li      a1,0
e0000c1c:       |  +----- a011                  j       e0000c20 <dif_aes_end+0x36>
e0000c1e:       \--|----> 458d                  li      a1,3
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:270
  }

  aes_clear_internal_state(aes);

  return kDifOk;
}
e0000c20:          \----> 852e                  mv      a0,a1
e0000c22:                 8082                  ret

e0000c24 <dif_aes_load_data>:
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:274

dif_result_t dif_aes_load_data(const dif_aes_t *aes,
                               const dif_aes_data_t data) {
  if (aes == NULL) {
e0000c24:       /-------- c905                  beqz    a0,e0000c54 <dif_aes_load_data+0x30>
aes_input_ready():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:52
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000c26:       |         4114                  lw      a3,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000c28:       |         0846a603              lw      a2,132(a3)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000c2c:       |         01067713              andi    a4,a2,16
e0000c30:       |         4639                  li      a2,14
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:278
    return kDifBadArg;
  }

  if (!aes_input_ready(aes)) {
e0000c32:       |  /----- c315                  beqz    a4,e0000c56 <dif_aes_load_data+0x32>
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000c34:       |  |      4198                  lw      a4,0(a1)
e0000c36:       |  |      4601                  li      a2,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000c38:       |  |      caf8                  sw      a4,84(a3)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000c3a:       |  |      0591                  addi    a1,a1,4
e0000c3c:       |  |      46b1                  li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000c3e:       |  |  /-> 4118                  lw      a4,0(a0)
e0000c40:       |  |  |   00c587b3              add     a5,a1,a2
e0000c44:       |  |  |   439c                  lw      a5,0(a5)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000c46:       |  |  |   9732                  add     a4,a4,a2
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000c48:       |  |  |   0611                  addi    a2,a2,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000c4a:       |  |  |   cf3c                  sw      a5,88(a4)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
e0000c4c:       |  |  \-- fed619e3              bne     a2,a3,e0000c3e <dif_aes_load_data+0x1a>
e0000c50:       |  |      4601                  li      a2,0
e0000c52:       |  +----- a011                  j       e0000c56 <dif_aes_load_data+0x32>
e0000c54:       \--|----> 460d                  li      a2,3
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:286

  aes_set_multireg(aes, &data.data[0], AES_DATA_IN_MULTIREG_COUNT,
                   AES_DATA_IN_0_REG_OFFSET);

  return kDifOk;
}
e0000c56:          \----> 8532                  mv      a0,a2
e0000c58:                 8082                  ret

e0000c5a <dif_aes_read_output>:
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:289

dif_result_t dif_aes_read_output(const dif_aes_t *aes, dif_aes_data_t *data) {
  if (aes == NULL || data == NULL) {
e0000c5a:              00153613                 seqz    a2,a0
e0000c5e:              0015b693                 seqz    a3,a1
e0000c62:              8ed1                     or      a3,a3,a2
e0000c64:              460d                     li      a2,3
e0000c66:       /----- e69d                     bnez    a3,e0000c94 <dif_aes_read_output+0x3a>
aes_output_valid():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:47
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000c68:       |      4114                     lw      a3,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000c6a:       |      0846a603                 lw      a2,132(a3)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000c6e:       |      00867713                 andi    a4,a2,8
e0000c72:       |      4635                     li      a2,13
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:293
    return kDifBadArg;
  }

  if (!aes_output_valid(aes)) {
e0000c74:       +----- c305                     beqz    a4,e0000c94 <dif_aes_read_output+0x3a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000c76:       |      52f4                     lw      a3,100(a3)
e0000c78:       |      4601                     li      a2,0
aes_read_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
e0000c7a:       |      c194                     sw      a3,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
e0000c7c:       |      0591                     addi    a1,a1,4
e0000c7e:       |      46b1                     li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
e0000c80:       |  /-> 4118                     lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000c82:       |  |   9732                     add     a4,a4,a2
e0000c84:       |  |   5738                     lw      a4,104(a4)
aes_read_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
e0000c86:       |  |   00c587b3                 add     a5,a1,a2
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
e0000c8a:       |  |   0611                     addi    a2,a2,4
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
e0000c8c:       |  |   c398                     sw      a4,0(a5)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
e0000c8e:       |  \-- fed619e3                 bne     a2,a3,e0000c80 <dif_aes_read_output+0x26>
e0000c92:       |      4601                     li      a2,0
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:301

  aes_read_multireg(aes, data->data, AES_DATA_OUT_MULTIREG_COUNT,
                    AES_DATA_OUT_0_REG_OFFSET);

  return kDifOk;
}
e0000c94:       \----> 8532                     mv      a0,a2
e0000c96:              8082                     ret

e0000c98 <dif_aes_get_status>:
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:370
  return kDifOk;
}

dif_result_t dif_aes_get_status(const dif_aes_t *aes, dif_aes_status_t flag,
                                bool *set) {
  if (aes == NULL || set == NULL) {
e0000c98:                 00153693              seqz    a3,a0
e0000c9c:                 00163713              seqz    a4,a2
e0000ca0:                 8f55                  or      a4,a4,a3
e0000ca2:                 468d                  li      a3,3
e0000ca4:       /-------- e33d                  bnez    a4,e0000d0a <dif_aes_get_status+0x72>
e0000ca6:       |         4699                  li      a3,6
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:374
    return kDifBadArg;
  }

  switch (flag) {
e0000ca8:       |     /-- 00b6ee63              bltu    a3,a1,e0000cc4 <dif_aes_get_status+0x2c>
e0000cac:       |     |   058a                  slli    a1,a1,0x2
e0000cae:       |     |   00001697              auipc   a3,0x1
e0000cb2:       |     |   20668693              addi    a3,a3,518 # e0001eb4 <kAesModesCipherTextEcb256+0x11c>
e0000cb6:       |     |   95b6                  add     a1,a1,a3
e0000cb8:       |     |   418c                  lw      a1,0(a1)
e0000cba:       |     |   8582                  jr      a1
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000cbc:       |     |   4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000cbe:       |     |   08452503              lw      a0,132(a0)
e0000cc2:       |  /--|-- a081                  j       e0000d02 <dif_aes_get_status+0x6a>
e0000cc4:       |  |  \-> 46b5                  li      a3,13
e0000cc6:       +--|----- a091                  j       e0000d0a <dif_aes_get_status+0x72>
aes_stalled():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:37
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000cc8:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000cca:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:379
    case kDifAesStatusIdle:
      *set = aes_idle(aes);
      break;
    case kDifAesStatusStall:
      *set = aes_stalled(aes);
e0000cce:       |  |      8105                  srli    a0,a0,0x1
e0000cd0:       |  +----- a80d                  j       e0000d02 <dif_aes_get_status+0x6a>
aes_output_lost():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:42
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000cd2:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000cd4:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:382
      break;
    case kDifAesStatusOutputLost:
      *set = aes_output_lost(aes);
e0000cd8:       |  |      8109                  srli    a0,a0,0x2
e0000cda:       |  +----- a025                  j       e0000d02 <dif_aes_get_status+0x6a>
aes_output_valid():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:47
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000cdc:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000cde:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:385
      break;
    case kDifAesStatusOutputValid:
      *set = aes_output_valid(aes);
e0000ce2:       |  |      810d                  srli    a0,a0,0x3
e0000ce4:       |  +----- a839                  j       e0000d02 <dif_aes_get_status+0x6a>
aes_input_ready():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:52
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000ce6:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000ce8:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:388
      break;
    case kDifAesStatusInputReady:
      *set = aes_input_ready(aes);
e0000cec:       |  |      8111                  srli    a0,a0,0x4
e0000cee:       |  +----- a811                  j       e0000d02 <dif_aes_get_status+0x6a>
aes_alert_fatal():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:57
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000cf0:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000cf2:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:391
      break;
    case kDifAesStatusAlertFatalFault:
      *set = aes_alert_fatal(aes);
e0000cf6:       |  |      8119                  srli    a0,a0,0x6
e0000cf8:       |  +----- a029                  j       e0000d02 <dif_aes_get_status+0x6a>
aes_alert_recoverable():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:62
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000cfa:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000cfc:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:394
      break;
    case kDifAesStatusAlertRecovCtrlUpdateErr:
      *set = aes_alert_recoverable(aes);
e0000d00:       |  |      8115                  srli    a0,a0,0x5
e0000d02:       |  \----> 4681                  li      a3,0
e0000d04:       |         8905                  andi    a0,a0,1
e0000d06:       |         00a60023              sb      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:401
    default:
      return kDifError;
  }

  return kDifOk;
}
e0000d0a:       \-------> 8536                  mv      a0,a3
e0000d0c:                 8082                  ret

e0000d0e <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
e0000d0e:                    1101                       addi    sp,sp,-32
e0000d10:                    ce06                       sw      ra,28(sp)
e0000d12:                    65b1                       lui     a1,0xc
e0000d14:                    aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
e0000d18:             /----- 02b50063           beq     a0,a1,e0000d38 <test_status_set+0x2a>
e0000d1c:             |      65a5                       lui     a1,0x9
e0000d1e:             |      05b5                       addi    a1,a1,13
e0000d20:          /--|----- 02b50d63           beq     a0,a1,e0000d5a <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000d24:          |  |      00001597           auipc   a1,0x1
e0000d28:          |  |      4d458593           addi    a1,a1,1236 # e00021f8 <kDeviceTestStatusAddress>
e0000d2c:          |  |      418c                       lw      a1,0(a1)
e0000d2e:          |  |  /-- c191                       beqz    a1,e0000d32 <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000d30:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
e0000d32:          |  |  \-> 40f2                       lw      ra,28(sp)
e0000d34:          |  |      6105                       addi    sp,sp,32
e0000d36:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000d38:          |  \----> 00001517           auipc   a0,0x1
e0000d3c:          |         4c450513           addi    a0,a0,1220 # e00021fc <kDeviceLogBypassUartAddress>
e0000d40:          |         4108                       lw      a0,0(a0)
e0000d42:          |  /----- ed0d                       bnez    a0,e0000d7c <test_status_set+0x6e>
e0000d44:          |  |      00001597           auipc   a1,0x1
e0000d48:          |  |      1dc58593           addi    a1,a1,476 # e0001f20 <kAesModesCipherTextEcb256+0x188>
e0000d4c:          |  |      0028                       addi    a0,sp,8
e0000d4e:          |  |      4651                       li      a2,20
e0000d50:          |  |      0ab000ef           jal     ra,e00015fa <memcpy>
e0000d54:          |  |      0028                       addi    a0,sp,8
e0000d56:          |  |      20b5                       jal     e0000dc2 <base_log_internal_core>
e0000d58:          |  |  /-- a805                       j       e0000d88 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0000d5a:          \--|--|-> 00001517           auipc   a0,0x1
e0000d5e:             |  |   4a250513           addi    a0,a0,1186 # e00021fc <kDeviceLogBypassUartAddress>
e0000d62:             |  |   4108                       lw      a0,0(a0)
e0000d64:       /-----|--|-- ed05                       bnez    a0,e0000d9c <test_status_set+0x8e>
e0000d66:       |     |  |   00001597           auipc   a1,0x1
e0000d6a:       |     |  |   1a658593           addi    a1,a1,422 # e0001f0c <kAesModesCipherTextEcb256+0x174>
e0000d6e:       |     |  |   0028                       addi    a0,sp,8
e0000d70:       |     |  |   4651                       li      a2,20
e0000d72:       |     |  |   089000ef           jal     ra,e00015fa <memcpy>
e0000d76:       |     |  |   0028                       addi    a0,sp,8
e0000d78:       |     |  |   20a9                       jal     e0000dc2 <base_log_internal_core>
e0000d7a:       |  /--|--|-- a03d                       j       e0000da8 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000d7c:       |  |  \--|-> 00001517           auipc   a0,0x1
e0000d80:       |  |     |   6a450513           addi    a0,a0,1700 # e0002420 <test_status_set.kLogFields.2>
e0000d84:       |  |     |   4581                       li      a1,0
e0000d86:       |  |     |   28f9                       jal     e0000e64 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000d88:       |  |     \-> 00001517           auipc   a0,0x1
e0000d8c:       |  |         47050513           addi    a0,a0,1136 # e00021f8 <kDeviceTestStatusAddress>
e0000d90:       |  |         4108                       lw      a0,0(a0)
e0000d92:       |  |  /----- c505                       beqz    a0,e0000dba <test_status_set+0xac>
e0000d94:       |  |  |      65b1                       lui     a1,0xc
e0000d96:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
e0000d9a:       |  |  |  /-- a839                       j       e0000db8 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0000d9c:       \--|--|--|-> 00001517           auipc   a0,0x1
e0000da0:          |  |  |   67050513           addi    a0,a0,1648 # e000240c <test_status_set.kLogFields>
e0000da4:          |  |  |   4581                       li      a1,0
e0000da6:          |  |  |   287d                       jal     e0000e64 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000da8:          \--|--|-> 00001517           auipc   a0,0x1
e0000dac:             |  |   45050513           addi    a0,a0,1104 # e00021f8 <kDeviceTestStatusAddress>
e0000db0:             |  |   4108                       lw      a0,0(a0)
e0000db2:             +--|-- c501                       beqz    a0,e0000dba <test_status_set+0xac>
e0000db4:             |  |   65a5                       lui     a1,0x9
e0000db6:             |  |   05b5                       addi    a1,a1,13
e0000db8:             |  \-> c10c                       sw      a1,0(a0)
e0000dba:             \----> 2009                       jal     e0000dbc <abort>

e0000dbc <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
e0000dbc:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
e0000dc0:       \-- bff5                        j       e0000dbc <abort>

e0000dc2 <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
e0000dc2:              7179                     addi    sp,sp,-48
e0000dc4:              c606                     sw      ra,12(sp)
e0000dc6:              c422                     sw      s0,8(sp)
e0000dc8:              c226                     sw      s1,4(sp)
e0000dca:              842a                     mv      s0,a0
e0000dcc:              d646                     sw      a7,44(sp)
e0000dce:              d442                     sw      a6,40(sp)
e0000dd0:              d23e                     sw      a5,36(sp)
e0000dd2:              d03a                     sw      a4,32(sp)
e0000dd4:              ce36                     sw      a3,28(sp)
e0000dd6:              cc32                     sw      a2,24(sp)
e0000dd8:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
e0000dda:              4148                     lw      a0,4(a0)
e0000ddc:              800005b7                 lui     a1,0x80000
e0000de0:              fff58613                 addi    a2,a1,-1 # 7fffffff <fromhost+0x9ffeffef>
e0000de4:              4581                     li      a1,0
e0000de6:              0ff000ef                 jal     ra,e00016e4 <memchr>
e0000dea:              4054                     lw      a3,4(s0)
e0000dec:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
e0000df0:              02f00593                 li      a1,47
e0000df4:              8536                     mv      a0,a3
e0000df6:              19d000ef                 jal     ra,e0001792 <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
e0000dfa:       /----- c501                     beqz    a0,e0000e02 <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
e0000dfc:       |      00150693                 addi    a3,a0,1
e0000e00:       |  /-- a011                     j       e0000e04 <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
e0000e02:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e0000e04:          \-> 4008                     lw      a0,0(s0)
e0000e06:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
e0000e08:       /----- 00a5ea63                 bltu    a1,a0,e0000e1c <base_log_internal_core+0x5a>
e0000e0c:       |      050a                     slli    a0,a0,0x2
e0000e0e:       |      00001597                 auipc   a1,0x1
e0000e12:       |      14258593                 addi    a1,a1,322 # e0001f50 <kAesModesCipherTextEcb256+0x1b8>
e0000e16:       |      952e                     add     a0,a0,a1
e0000e18:       |      410c                     lw      a1,0(a0)
e0000e1a:       |  /-- a029                     j       e0000e24 <base_log_internal_core+0x62>
e0000e1c:       \--|-> 00001597                 auipc   a1,0x1
e0000e20:          |   13258593                 addi    a1,a1,306 # e0001f4e <kAesModesCipherTextEcb256+0x1b6>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
e0000e24:          \-> 00001497                 auipc   s1,0x1
e0000e28:              46048493                 addi    s1,s1,1120 # e0002284 <base_log_internal_core.global_log_counter>
e0000e2c:              0004d603                 lhu     a2,0(s1)
e0000e30:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e0000e32:              00001517                 auipc   a0,0x1
e0000e36:              10250513                 addi    a0,a0,258 # e0001f34 <kAesModesCipherTextEcb256+0x19c>
e0000e3a:              208d                     jal     e0000e9c <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
e0000e3c:              00049503                 lh      a0,0(s1)
e0000e40:              0505                     addi    a0,a0,1
e0000e42:              00a49023                 sh      a0,0(s1)
e0000e46:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
e0000e48:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
e0000e4a:              4808                     lw      a0,16(s0)
e0000e4c:              084c                     addi    a1,sp,20
e0000e4e:              2041                     jal     e0000ece <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
e0000e50:              00001517                 auipc   a0,0x1
e0000e54:              0f350513                 addi    a0,a0,243 # e0001f43 <kAesModesCipherTextEcb256+0x1ab>
e0000e58:              2091                     jal     e0000e9c <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
e0000e5a:              4492                     lw      s1,4(sp)
e0000e5c:              4422                     lw      s0,8(sp)
e0000e5e:              40b2                     lw      ra,12(sp)
e0000e60:              6145                     addi    sp,sp,48
e0000e62:              8082                     ret

e0000e64 <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
e0000e64:              1101                     addi    sp,sp,-32
e0000e66:              ce46                     sw      a7,28(sp)
e0000e68:              cc42                     sw      a6,24(sp)
e0000e6a:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
e0000e6c:              00001797                 auipc   a5,0x1
e0000e70:              39078793                 addi    a5,a5,912 # e00021fc <kDeviceLogBypassUartAddress>
e0000e74:              439c                     lw      a5,0(a5)
e0000e76:              c83a                     sw      a4,16(sp)
e0000e78:              c636                     sw      a3,12(sp)
e0000e7a:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000e7c:              c388                     sw      a0,0(a5)
e0000e7e:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
e0000e80:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e0000e82:       /----- c989                     beqz    a1,e0000e94 <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
e0000e84:       |  /-> 4512                     lw      a0,4(sp)
e0000e86:       |  |   00450613                 addi    a2,a0,4
e0000e8a:       |  |   c232                     sw      a2,4(sp)
e0000e8c:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e0000e8e:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000e90:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
e0000e92:       |  \-- f9ed                     bnez    a1,e0000e84 <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
e0000e94:       \----> 6105                     addi    sp,sp,32
e0000e96:              8082                     ret

e0000e98 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
e0000e98:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
e0000e9a:       8082                    ret

e0000e9c <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84
void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}

size_t base_printf(const char *format, ...) {
e0000e9c:       7179                    addi    sp,sp,-48
e0000e9e:       c606                    sw      ra,12(sp)
e0000ea0:       d646                    sw      a7,44(sp)
e0000ea2:       d442                    sw      a6,40(sp)
e0000ea4:       d23e                    sw      a5,36(sp)
e0000ea6:       d03a                    sw      a4,32(sp)
e0000ea8:       ce36                    sw      a3,28(sp)
e0000eaa:       cc32                    sw      a2,24(sp)
e0000eac:       ca2e                    sw      a1,20(sp)
e0000eae:       00001597                auipc   a1,0x1
e0000eb2:       3da58593                addi    a1,a1,986 # e0002288 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
e0000eb6:       4190                    lw      a2,0(a1)
e0000eb8:       41cc                    lw      a1,4(a1)
e0000eba:       872a                    mv      a4,a0
e0000ebc:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
e0000ebe:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000ec0:       0854                    addi    a3,sp,20
e0000ec2:       8532                    mv      a0,a2
e0000ec4:       863a                    mv      a2,a4
e0000ec6:       200d                    jal     e0000ee8 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
e0000ec8:       40b2                    lw      ra,12(sp)
e0000eca:       6145                    addi    sp,sp,48
e0000ecc:       8082                    ret

e0000ece <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
e0000ece:       00001697                auipc   a3,0x1
e0000ed2:       3ba68693                addi    a3,a3,954 # e0002288 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000ed6:       4290                    lw      a2,0(a3)
e0000ed8:       42d4                    lw      a3,4(a3)
e0000eda:       872e                    mv      a4,a1
e0000edc:       87aa                    mv      a5,a0
e0000ede:       8532                    mv      a0,a2
e0000ee0:       85b6                    mv      a1,a3
e0000ee2:       863e                    mv      a2,a5
e0000ee4:       86ba                    mv      a3,a4
e0000ee6:       a009                    j       e0000ee8 <base_vfprintf>

e0000ee8 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
e0000ee8:                                                                    715d                       addi    sp,sp,-80
e0000eea:                                                                    c686                       sw      ra,76(sp)
e0000eec:                                                                    c4a2                       sw      s0,72(sp)
e0000eee:                                                                    c2a6                       sw      s1,68(sp)
e0000ef0:                                                                    c0ca                       sw      s2,64(sp)
e0000ef2:                                                                    de4e                       sw      s3,60(sp)
e0000ef4:                                                                    dc52                       sw      s4,56(sp)
e0000ef6:                                                                    da56                       sw      s5,52(sp)
e0000ef8:                                                                    d85a                       sw      s6,48(sp)
e0000efa:                                                                    d65e                       sw      s7,44(sp)
e0000efc:                                                                    d462                       sw      s8,40(sp)
e0000efe:                                                                    d266                       sw      s9,36(sp)
e0000f00:                                                                    d06a                       sw      s10,32(sp)
e0000f02:                                                                    ce6e                       sw      s11,28(sp)
e0000f04:                                                                    8cb2                       mv      s9,a2
e0000f06:                                                                    892a                       mv      s2,a0
e0000f08:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
e0000f0a:                                                                /-- c199                       beqz    a1,e0000f10 <base_vfprintf+0x28>
e0000f0c:                                                                |   89ae                       mv      s3,a1
e0000f0e:                                                             /--|-- a029                       j       e0000f18 <base_vfprintf+0x30>
e0000f10:                                                             |  \-> 00000997           auipc   s3,0x0
e0000f14:                                                             |      f8898993           addi    s3,s3,-120 # e0000e98 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
e0000f18:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
e0000f1a:                                                                    000cc503           lbu     a0,0(s9)
e0000f1e:       /----------------------------------------------------------- 42050563           beqz    a0,e0001348 <base_vfprintf+0x460>
e0000f22:       |                                                            4a81                       li      s5,0
e0000f24:       |                                                            02500c13           li      s8,37
e0000f28:       |                                                            4d25                       li      s10,9
e0000f2a:       |                                                            4a29                       li      s4,10
e0000f2c:       |                                                            658d                       lui     a1,0x3
e0000f2e:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_min_stack+0xc22>
e0000f32:       |                                                            c02e                       sw      a1,0(sp)
e0000f34:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
e0000f36:       |        |                                               /-> 0ff57413           andi    s0,a0,255
e0000f3a:       |        |                                            /--|-- 01840963           beq     s0,s8,e0000f4c <base_vfprintf+0x64>
e0000f3e:       |        |                                            +--|-- c419                       beqz    s0,e0000f4c <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
e0000f40:       |        |                                            |  |   009c8533           add     a0,s9,s1
e0000f44:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
e0000f48:       |        |                                            |  |   0485                       addi    s1,s1,1
e0000f4a:       |        |                                            |  \-- b7f5                       j       e0000f36 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
e0000f4c:       |        |                                            \--/-X c491                       beqz    s1,e0000f58 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
e0000f4e:       |        |                                               |   854a                       mv      a0,s2
e0000f50:       |        |                                               |   85e6                       mv      a1,s9
e0000f52:       |        |                                               |   8626                       mv      a2,s1
e0000f54:       |        |                                               |   9982                       jalr    s3
e0000f56:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
e0000f58:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,e000134a <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
e0000f5c:       |  |     |                                                   009c8533           add     a0,s9,s1
e0000f60:       |  |     |                                                   00154603           lbu     a2,1(a0)
e0000f64:       |  |     |                                                   02100713           li      a4,33
e0000f68:       |  |     |                                            /----- 00e61863           bne     a2,a4,e0000f78 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000f6c:       |  |     |                                            |      00254583           lbu     a1,2(a0)
e0000f70:       |  |     |                                            |      00250693           addi    a3,a0,2
e0000f74:       |  |     |                                            |      4b05                       li      s6,1
e0000f76:       |  |     |                                            |  /-- a029                       j       e0000f80 <base_vfprintf+0x98>
e0000f78:       |  |     |                                            \--|-> 4b01                       li      s6,0
e0000f7a:       |  |     |                                               |   00150693           addi    a3,a0,1
e0000f7e:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000f80:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,e0001336 <base_vfprintf+0x44e>
e0000f84:       |  |  |  |                                                   4481                       li      s1,0
e0000f86:       |  |  |  |                                                   4b81                       li      s7,0
e0000f88:       |  |  |  |                                                   4501                       li      a0,0
e0000f8a:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
e0000f8e:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
e0000f92:       |  |  |  |                                                   00168c93           addi    s9,a3,1
e0000f96:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
e0000f9a:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000f9e:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
e0000fa2:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,e0000fd8 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
e0000fa6:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
e0000faa:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,e0000fc0 <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
e0000fac:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
e0000fb0:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
e0000fb2:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000fb6:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000fba:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
e0000fbc:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,e0000f96 <base_vfprintf+0xae>
e0000fbe:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       e0001336 <base_vfprintf+0x44e>
e0000fc0:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
e0000fc4:       |  |  |  |                                   |     |  |      03000613           li      a2,48
e0000fc8:       |  |  |  |                                   |     |  |      02000513           li      a0,32
e0000fcc:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,e0000fac <base_vfprintf+0xc4>
e0000fd0:       |  |  |  |                                   |     |         03000513           li      a0,48
e0000fd4:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
e0000fd6:       |  |  |  |                                   |     \-------- b7c5                       j       e0000fb6 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
e0000fd8:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,e0000fe0 <base_vfprintf+0xf8>
e0000fda:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,e0000fe8 <base_vfprintf+0x100>
e0000fde:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       e000136a <base_vfprintf+0x482>
e0000fe0:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
e0000fe4:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,e000136a <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000fe8:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
e0000fec:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,e000103e <base_vfprintf+0x156>
e0000ff0:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
e0000ff2:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
e0000ff6:       |  |  |  |  |                                         |      f6e58593           addi    a1,a1,-146 # e0001f60 <kAesModesCipherTextEcb256+0x1c8>
e0000ffa:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
e0000ffc:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
e0000ffe:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
e0001000:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,e00012b8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
e0001004:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
e0001006:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
e000100a:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
e000100c:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
e0001010:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,e0001028 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
e0001014:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
e0001018:       |  |  |  |  |  |                                      |  |   fe358593           addi    a1,a1,-29 # e0001ff7 <kAesModesCipherTextEcb256+0x25f>
e000101c:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
e000101e:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
e0001020:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
e0001022:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
e0001024:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0001028:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
e000102c:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
e0001030:       |  |  |  |  |  |                                      |      fe480813           addi    a6,a6,-28 # e0002010 <kDigitsLow>
e0001034:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
e0001036:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
e0001038:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
e000103a:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
e000103c:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       e0001284 <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e000103e:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
e0001042:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,e000107c <base_vfprintf+0x194>
e0001046:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,e00012b8 <base_vfprintf+0x3d0>
e000104a:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,e00012b8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
e000104e:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
e0001052:       |  |  |  |  |  |        |                                |   fa758593           addi    a1,a1,-89 # e0001ff5 <kAesModesCipherTextEcb256+0x25d>
e0001056:       |  |  |  |  |  |        |                             /--|-- a851                       j       e00010ea <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
e0001058:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,e000107c <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
e000105c:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
e000105e:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
e0001062:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0001064:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
e0001066:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
e000106a:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e000106c:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e000106e:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
e0001072:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
e0001076:       |  |  |  |  |  |        |                             |  |   fcb88893           addi    a7,a7,-53 # e000203d <kDigitsHigh>
e000107a:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       e000125e <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
e000107c:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
e000107e:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
e0001082:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
e0001084:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
e0001086:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
e000108a:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
e000108e:       |  |  |  |  |  |        |           |                 |      fb380813           addi    a6,a6,-77 # e000203d <kDigitsHigh>
e0001092:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       e000127e <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
e0001094:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,e00012b8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
e0001098:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
e000109a:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
e000109e:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e00010a0:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
e00010a2:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
e00010a6:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e00010a8:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e00010aa:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
e00010ae:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
e00010b2:       |  |  |  |  |  |        |        |  |                 |      f8f88893           addi    a7,a7,-113 # e000203d <kDigitsHigh>
e00010b6:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       e00012ac <base_vfprintf+0x3c4>
e00010b8:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
e00010ba:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
e00010be:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
e00010c0:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
e00010c2:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,e00012d2 <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
e00010c6:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,e000132a <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
e00010ca:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
e00010ce:       |  |  |  |  |  |  |     |  |  |  |  |                 |      f3258593           addi    a1,a1,-206 # e0001ffc <kAesModesCipherTextEcb256+0x264>
e00010d2:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
e00010d4:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       e00012c2 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
e00010d6:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,e00012b8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
e00010da:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
e00010dc:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
e00010e0:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
e00010e2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
e00010e4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
e00010e8:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
e00010ea:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
e00010ec:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       e00012c2 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
e00010ee:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,e00012b8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
e00010f2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
e00010f4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
e00010f8:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
e00010fa:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
e00010fc:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
e0001100:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
e0001104:       |  |  |  |  |  |  |  |  |  |  |  |  |                        f1080813           addi    a6,a6,-240 # e0002010 <kDigitsLow>
e0001108:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
e000110a:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       e0001280 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
e000110c:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,e00012b8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0001110:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
e0001114:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     ee958593           addi    a1,a1,-279 # e0001ff9 <kAesModesCipherTextEcb256+0x261>
e0001118:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
e000111a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e000111c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
e000111e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
e0001120:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
e0001124:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
e0001126:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0001128:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
e000112c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
e0001130:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     ee480813           addi    a6,a6,-284 # e0002010 <kDigitsLow>
e0001134:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
e0001136:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
e000113a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
e000113c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e000113e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
e0001140:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     e000145a <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
e0001142:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
e0001146:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       e00012c8 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
e0001148:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
e000114a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
e000114e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
e0001150:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
e0001152:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
e0001154:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
e0001158:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
e000115c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e000115e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
e0001160:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
e0001162:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
e0001166:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     e00014d8 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
e0001168:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e000116a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e000116c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
e0001170:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
e0001174:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0001176:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
e0001178:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,e0001170 <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e000117a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
e000117e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0001182:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  e8958593           addi    a1,a1,-375 # e0002007 <kAesModesCipherTextEcb256+0x26f>
e0001186:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0001188:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e000118a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e000118c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e000118e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
e0001192:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0001194:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0001196:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
e000119a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e000119e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  e6e58593           addi    a1,a1,-402 # e0002008 <kAesModesCipherTextEcb256+0x270>
e00011a2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00011a4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
e00011a6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00011a8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
e00011aa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e00011ae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  e4258593           addi    a1,a1,-446 # e0001fec <kAesModesCipherTextEcb256+0x254>
e00011b2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
e00011b4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00011b6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00011b8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
e00011bc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,e00012e2 <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
e00011c0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e00011c4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               e4a58593           addi    a1,a1,-438 # e000200a <kAesModesCipherTextEcb256+0x272>
e00011c8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e00011ca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00011cc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e00011ce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e00011d2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
e00011d4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
e00011d6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00011d8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00011da:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e00011dc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00011de:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
e00011e2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               e3280813           addi    a6,a6,-462 # e0002010 <kDigitsLow>
e00011e6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
e00011e8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00011ea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
e00011ec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
e00011ee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
e00011f0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     e000145a <write_digits>
e00011f2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
e00011f4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e00011f8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               e1858593           addi    a1,a1,-488 # e000200c <kAesModesCipherTextEcb256+0x274>
e00011fc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e00011fe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0001200:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e0001202:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
e0001204:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       e00012fc <base_vfprintf+0x414>
e0001206:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
e0001208:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
e000120c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
e000120e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,e0001314 <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
e0001212:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e0001214:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
e0001218:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e000121a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
e000121c:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       e00012c2 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
e000121e:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,e00012b8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
e0001222:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
e0001224:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
e0001228:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e000122a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e000122c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
e0001230:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
e0001234:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         de080813           addi    a6,a6,-544 # e0002010 <kDigitsLow>
e0001238:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
e000123a:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       e0001280 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
e000123c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,e0001268 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
e0001240:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
e0001242:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
e0001246:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0001248:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
e000124a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
e000124e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0001250:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0001252:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
e0001256:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
e000125a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   dba88893           addi    a7,a7,-582 # e0002010 <kDigitsLow>
e000125e:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
e0001260:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
e0001262:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
e0001264:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
e0001266:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       e00012b4 <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
e0001268:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
e000126a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
e000126e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
e0001270:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
e0001272:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
e0001276:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
e000127a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      d9a80813           addi    a6,a6,-614 # e0002010 <kDigitsLow>
e000127e:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
e0001280:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
e0001282:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
e0001284:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
e0001286:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     e000145a <write_digits>
e0001288:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       e00012c6 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
e000128a:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,e00012b8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
e000128e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
e0001290:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
e0001294:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e0001296:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
e0001298:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
e000129c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e000129e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e00012a0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
e00012a4:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
e00012a8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   d6c88893           addi    a7,a7,-660 # e0002010 <kDigitsLow>
e00012ac:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
e00012ae:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
e00012b0:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
e00012b2:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
e00012b4:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     e0001376 <hex_dump>
e00012b6:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       e00012c6 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
e00012b8:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
e00012bc:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   d9558593           addi    a1,a1,-619 # e000204d <kUnknownSpec>
e00012c0:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
e00012c2:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
e00012c4:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
e00012c6:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
e00012c8:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
e00012cc:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,e0000f34 <base_vfprintf+0x4c>
e00012d0:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       e000134a <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
e00012d2:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
e00012d6:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
e00012da:       |  |  |     |     |  |                 |  |  |  |  |         d3a80813           addi    a6,a6,-710 # e0002010 <kDigitsLow>
e00012de:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
e00012e0:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       e0001280 <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00012e2:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
e00012e4:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
e00012e8:       |  |  |     |     |  |                    |     |  |         d2c80813           addi    a6,a6,-724 # e0002010 <kDigitsLow>
e00012ec:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
e00012ee:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
e00012f0:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
e00012f2:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
e00012f4:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
e00012f6:       |  |  |     |     |  |                    |     |  |         2295                       jal     e000145a <write_digits>
e00012f8:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
e00012fc:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
e0001300:       |  |  |     |     |  |                    |     |            d1258593           addi    a1,a1,-750 # e000200e <kAesModesCipherTextEcb256+0x276>
e0001304:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
e0001306:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
e0001308:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
e000130a:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
e000130e:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
e0001312:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       e00012c8 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e0001314:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
e0001316:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0001318:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
e000131c:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
e0001320:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0001322:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,e0001318 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
e0001324:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
e0001328:       |  |  |     |     |  +-------------------------------------- bf69                       j       e00012c2 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
e000132a:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
e000132e:       |  |  |     |        |                                       cd758593           addi    a1,a1,-809 # e0002001 <kAesModesCipherTextEcb256+0x269>
e0001332:       |  |  |     |        |                                       4615                       li      a2,5
e0001334:       |  |  |     |        \-------------------------------------- b779                       j       e00012c2 <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
e0001336:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
e000133a:       |  |        |                                                cea58593           addi    a1,a1,-790 # e0002020 <kErrorNul>
e000133e:       |  |        |                                                4645                       li      a2,17
e0001340:       |  |        |                                            /-> 854a                       mv      a0,s2
e0001342:       |  |        |                                            |   9982                       jalr    s3
e0001344:       |  |        |                                            |   9aaa                       add     s5,s5,a0
e0001346:       |  +--------|--------------------------------------------|-- a011                       j       e000134a <base_vfprintf+0x462>
e0001348:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
e000134a:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
e000134c:                   |                                            |   4df2                       lw      s11,28(sp)
e000134e:                   |                                            |   5d02                       lw      s10,32(sp)
e0001350:                   |                                            |   5c92                       lw      s9,36(sp)
e0001352:                   |                                            |   5c22                       lw      s8,40(sp)
e0001354:                   |                                            |   5bb2                       lw      s7,44(sp)
e0001356:                   |                                            |   5b42                       lw      s6,48(sp)
e0001358:                   |                                            |   5ad2                       lw      s5,52(sp)
e000135a:                   |                                            |   5a62                       lw      s4,56(sp)
e000135c:                   |                                            |   59f2                       lw      s3,60(sp)
e000135e:                   |                                            |   4906                       lw      s2,64(sp)
e0001360:                   |                                            |   4496                       lw      s1,68(sp)
e0001362:                   |                                            |   4426                       lw      s0,72(sp)
e0001364:                   |                                            |   40b6                       lw      ra,76(sp)
e0001366:                   |                                            |   6161                       addi    sp,sp,80
e0001368:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
e000136a:                   \--------------------------------------------|-> 00001597           auipc   a1,0x1
e000136e:                                                                |   cc758593           addi    a1,a1,-825 # e0002031 <kErrorTooWide>
e0001372:                                                                |   4631                       li      a2,12
e0001374:                                                                \-- b7f1                       j       e0001340 <base_vfprintf+0x458>

e0001376 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
e0001376:                    715d                       addi    sp,sp,-80
e0001378:                    c686                       sw      ra,76(sp)
e000137a:                    c4a2                       sw      s0,72(sp)
e000137c:                    c2a6                       sw      s1,68(sp)
e000137e:                    c0ca                       sw      s2,64(sp)
e0001380:                    de4e                       sw      s3,60(sp)
e0001382:                    dc52                       sw      s4,56(sp)
e0001384:                    da56                       sw      s5,52(sp)
e0001386:                    d85a                       sw      s6,48(sp)
e0001388:                    d65e                       sw      s7,44(sp)
e000138a:                    d462                       sw      s8,40(sp)
e000138c:                    d266                       sw      s9,36(sp)
e000138e:                    d06a                       sw      s10,32(sp)
e0001390:                    8bc6                       mv      s7,a7
e0001392:                    8a42                       mv      s4,a6
e0001394:                    8b36                       mv      s6,a3
e0001396:                    8ab2                       mv      s5,a2
e0001398:                    892e                       mv      s2,a1
e000139a:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
e000139c:          /-------- 02e6fc63           bgeu    a3,a4,e00013d4 <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
e00013a0:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
e00013a4:          |         850a                       mv      a0,sp
e00013a6:          |         02000613           li      a2,32
e00013aa:          |         85be                       mv      a1,a5
e00013ac:          |         2cd9                       jal     e0001682 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e00013ae:          +-------- c09d                       beqz    s1,e00013d4 <hex_dump+0x5e>
e00013b0:          |         4c01                       li      s8,0
e00013b2:          |  /----> 02000513           li      a0,32
e00013b6:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
e00013b8:          |  |  /-- 00a4e463           bltu    s1,a0,e00013c0 <hex_dump+0x4a>
e00013bc:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00013c0:          |  |  \-> 858a                       mv      a1,sp
e00013c2:          |  |      854e                       mv      a0,s3
e00013c4:          |  |      8622                       mv      a2,s0
e00013c6:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
e00013c8:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00013ca:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e00013cc:          |  \----- f0fd                       bnez    s1,e00013b2 <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e00013ce:          |     /-- 000b1663           bnez    s6,e00013da <hex_dump+0x64>
e00013d2:       /--|-----|-- a0ad                       j       e000143c <hex_dump+0xc6>
e00013d4:       |  \-----|-> 4c01                       li      s8,0
e00013d6:       +--------|-- 060b0363           beqz    s6,e000143c <hex_dump+0xc6>
e00013da:       |        \-> 4401                       li      s0,0
e00013dc:       |            4601                       li      a2,0
e00013de:       |            fffb0493           addi    s1,s6,-1
e00013e2:       |            8b0a                       mv      s6,sp
e00013e4:       |            02000c93           li      s9,32
e00013e8:       |            5d7d                       li      s10,-1
e00013ea:       |     /----> 8526                       mv      a0,s1
e00013ec:       |     |  /-- 000a1363           bnez    s4,e00013f2 <hex_dump+0x7c>
e00013f0:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
e00013f2:       |     |  \-> 9556                       add     a0,a0,s5
e00013f4:       |     |      00054503           lbu     a0,0(a0)
e00013f8:       |     |      00455593           srli    a1,a0,0x4
e00013fc:       |     |      95de                       add     a1,a1,s7
e00013fe:       |     |      00058583           lb      a1,0(a1)
e0001402:       |     |      00cb06b3           add     a3,s6,a2
e0001406:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e000140a:       |     |      893d                       andi    a0,a0,15
e000140c:       |     |      955e                       add     a0,a0,s7
e000140e:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
e0001412:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e0001414:       |     |      00a680a3           sb      a0,1(a3)
e0001418:       |     |  /-- 01961963           bne     a2,s9,e000142a <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
e000141c:       |     |  |   858a                       mv      a1,sp
e000141e:       |     |  |   02000613           li      a2,32
e0001422:       |     |  |   854e                       mv      a0,s3
e0001424:       |     |  |   9902                       jalr    s2
e0001426:       |     |  |   4601                       li      a2,0
e0001428:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e000142a:       |     |  \-> 14fd                       addi    s1,s1,-1
e000142c:       |     |      0405                       addi    s0,s0,1
e000142e:       |     \----- fba49ee3           bne     s1,s10,e00013ea <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
e0001432:       +----------- c609                       beqz    a2,e000143c <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
e0001434:       |            858a                       mv      a1,sp
e0001436:       |            854e                       mv      a0,s3
e0001438:       |            9902                       jalr    s2
e000143a:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
e000143c:       \----------> 8562                       mv      a0,s8
e000143e:                    5d02                       lw      s10,32(sp)
e0001440:                    5c92                       lw      s9,36(sp)
e0001442:                    5c22                       lw      s8,40(sp)
e0001444:                    5bb2                       lw      s7,44(sp)
e0001446:                    5b42                       lw      s6,48(sp)
e0001448:                    5ad2                       lw      s5,52(sp)
e000144a:                    5a62                       lw      s4,56(sp)
e000144c:                    59f2                       lw      s3,60(sp)
e000144e:                    4906                       lw      s2,64(sp)
e0001450:                    4496                       lw      s1,68(sp)
e0001452:                    4426                       lw      s0,72(sp)
e0001454:                    40b6                       lw      ra,76(sp)
e0001456:                    6161                       addi    sp,sp,80
e0001458:                    8082                       ret

e000145a <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
e000145a:              7179                     addi    sp,sp,-48
e000145c:              d606                     sw      ra,44(sp)
e000145e:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
e0001460:       /----- ca05                     beqz    a2,e0001490 <write_digits+0x36>
e0001462:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e0001464:       |      02b10293                 addi    t0,sp,43
e0001468:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
e000146a:       |  |   02f65633                 divu    a2,a2,a5
e000146e:       |  |   02f605b3                 mul     a1,a2,a5
e0001472:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
e0001476:       |  |   95c2                     add     a1,a1,a6
e0001478:       |  |   00058e03                 lb      t3,0(a1)
e000147c:       |  |   007285b3                 add     a1,t0,t2
e0001480:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e0001484:       |  |   13fd                     addi    t2,t2,-1
e0001486:       |  \-- fef371e3                 bgeu    t1,a5,e0001468 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e000148a:       |      40700633                 neg     a2,t2
e000148e:       |  /-- a031                     j       e000149a <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
e0001490:       \--|-> 00080583                 lb      a1,0(a6)
e0001494:          |   02b105a3                 sb      a1,43(sp)
e0001498:          |   4605                     li      a2,1
e000149a:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e000149c:          /-- c291                     beqz    a3,e00014a0 <write_digits+0x46>
e000149e:          |   85b6                     mv      a1,a3
e00014a0:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
e00014a4:          /-- 00d5e463                 bltu    a1,a3,e00014ac <write_digits+0x52>
e00014a8:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00014ac:       /--\-X 00b67e63                 bgeu    a2,a1,e00014c8 <write_digits+0x6e>
e00014b0:       |      40c586b3                 sub     a3,a1,a2
e00014b4:       |      007c                     addi    a5,sp,12
e00014b6:       |      40c78633                 sub     a2,a5,a2
e00014ba:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
e00014bc:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00014c0:       |  |   16fd                     addi    a3,a3,-1
e00014c2:       |  |   167d                     addi    a2,a2,-1
e00014c4:       |  \-- fee5                     bnez    a3,e00014bc <write_digits+0x62>
e00014c6:       |      862e                     mv      a2,a1
e00014c8:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
e00014ca:              8d91                     sub     a1,a1,a2
e00014cc:              02058593                 addi    a1,a1,32
e00014d0:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
e00014d2:              50b2                     lw      ra,44(sp)
e00014d4:              6145                     addi    sp,sp,48
e00014d6:              8082                     ret

e00014d8 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
e00014d8:              00052813                 slti    a6,a0,0
e00014dc:              41f55793                 srai    a5,a0,0x1f
e00014e0:              8fe9                     and     a5,a5,a0
e00014e2:              8bfd                     andi    a5,a5,31
e00014e4:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
e00014e8:              00e87833                 and     a6,a6,a4
e00014ec:              02000713                 li      a4,32
e00014f0:          /-- 00081363                 bnez    a6,e00014f6 <status_extract+0x1e>
e00014f4:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
e00014f6:          \-> 00271813                 slli    a6,a4,0x2
e00014fa:              00001797                 auipc   a5,0x1
e00014fe:              d0678793                 addi    a5,a5,-762 # e0002200 <status_codes>
e0001502:              97c2                     add     a5,a5,a6
e0001504:              439c                     lw      a5,0(a5)
e0001506:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
e0001508:              00173593                 seqz    a1,a4
e000150c:       /----- cb1d                     beqz    a4,e0001542 <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e000150e:       |      00555713                 srli    a4,a0,0x5
e0001512:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
e0001516:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0001518:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
e000151c:       |      8a7d                     andi    a2,a2,31
e000151e:       |      04066613                 ori     a2,a2,64
e0001522:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
e0001526:       |      01555613                 srli    a2,a0,0x15
e000152a:       |      8a7d                     andi    a2,a2,31
e000152c:       |      04066613                 ori     a2,a2,64
e0001530:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
e0001534:       |      8169                     srli    a0,a0,0x1a
e0001536:       |      897d                     andi    a0,a0,31
e0001538:       |      04056513                 ori     a0,a0,64
e000153c:       |      00a68123                 sb      a0,2(a3)
e0001540:       |  /-- a011                     j       e0001544 <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
e0001542:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
e0001544:          \-> 0015c513                 xori    a0,a1,1
e0001548:              8082                     ret

e000154a <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
e000154a:                 1141                  addi    sp,sp,-16
e000154c:                 c622                  sw      s0,12(sp)
e000154e:                 c426                  sw      s1,8(sp)
e0001550:                 c24a                  sw      s2,4(sp)
e0001552:                 4881                  li      a7,0
e0001554:                 4801                  li      a6,0
e0001556:                 4e01                  li      t3,0
e0001558:                 4e81                  li      t4,0
e000155a:                 03f00793              li      a5,63
e000155e:                 42fd                  li      t0,31
e0001560:                 00159313              slli    t1,a1,0x1
e0001564:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
e0001566:       /-------> fe078493              addi    s1,a5,-32
e000156a:       |     /-- 0004c563              bltz    s1,e0001574 <udiv64_slow+0x2a>
e000156e:       |     |   0095df33              srl     t5,a1,s1
e0001572:       |  /--|-- a809                  j       e0001584 <udiv64_slow+0x3a>
e0001574:       |  |  \-> 00f554b3              srl     s1,a0,a5
e0001578:       |  |      40f28433              sub     s0,t0,a5
e000157c:       |  |      00831433              sll     s0,t1,s0
e0001580:       |  |      0084ef33              or      t5,s1,s0
e0001584:       |  \----> 01fe5493              srli    s1,t3,0x1f
e0001588:       |         001e9413              slli    s0,t4,0x1
e000158c:       |         00946eb3              or      t4,s0,s1
e0001590:       |         001e1493              slli    s1,t3,0x1
e0001594:       |         001f7413              andi    s0,t5,1
e0001598:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
e000159c:       |  /----- 00de8563              beq     t4,a3,e00015a6 <udiv64_slow+0x5c>
e00015a0:       |  |      00debe33              sltu    t3,t4,a3
e00015a4:       |  |  /-- a019                  j       e00015aa <udiv64_slow+0x60>
e00015a6:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
e00015aa:       |     \-> 001e4f93              xori    t6,t3,1
e00015ae:       |         4901                  li      s2,0
e00015b0:       |         4481                  li      s1,0
e00015b2:       |     /-- 000e1463              bnez    t3,e00015ba <udiv64_slow+0x70>
e00015b6:       |     |   8936                  mv      s2,a3
e00015b8:       |     |   84b2                  mv      s1,a2
e00015ba:       |     \-> 01f8de13              srli    t3,a7,0x1f
e00015be:       |         00181413              slli    s0,a6,0x1
e00015c2:       |         01c46833              or      a6,s0,t3
e00015c6:       |         0886                  slli    a7,a7,0x1
e00015c8:       |         409f0e33              sub     t3,t5,s1
e00015cc:       |         009f34b3              sltu    s1,t5,s1
e00015d0:       |         412e8433              sub     s0,t4,s2
e00015d4:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
e00015d8:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
e00015da:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
e00015de:       \-------- f87794e3              bne     a5,t2,e0001566 <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
e00015e2:             /-- c709                  beqz    a4,e00015ec <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
e00015e4:             |   01c72023              sw      t3,0(a4)
e00015e8:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
e00015ec:             \-> 8546                  mv      a0,a7
e00015ee:                 85c2                  mv      a1,a6
e00015f0:                 4912                  lw      s2,4(sp)
e00015f2:                 44a2                  lw      s1,8(sp)
e00015f4:                 4432                  lw      s0,12(sp)
e00015f6:                 0141                  addi    sp,sp,16
e00015f8:                 8082                  ret

e00015fa <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
e00015fa:                       00153693                seqz    a3,a0
e00015fe:                       0015b713                seqz    a4,a1
e0001602:                       8ed9                    or      a3,a3,a4
e0001604:       /-------------- eab5                    bnez    a3,e0001678 <memcpy+0x7e>
e0001606:       |               4711                    li      a4,4
e0001608:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e000160a:       |        /----- 00e66c63                bltu    a2,a4,e0001622 <memcpy+0x28>
e000160e:       |        |      00a5c6b3                xor     a3,a1,a0
e0001612:       |        |      0036f793                andi    a5,a3,3
e0001616:       |        |      8832                    mv      a6,a2
e0001618:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
e000161a:       |        |  /-- eb91                    bnez    a5,e000162e <memcpy+0x34>
e000161c:       |        |  |   40a006b3                neg     a3,a0
e0001620:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e0001622:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001626:       |           |   9b71                    andi    a4,a4,-4
e0001628:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e000162c:       |  /--------|-- c6b9                    beqz    a3,e000167a <memcpy+0x80>
e000162e:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0001630:       |  |        /-> 00f58733                add     a4,a1,a5
e0001634:       |  |        |   00070883                lb      a7,0(a4)
e0001638:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e000163c:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e000163e:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e0001642:       |  |        \-- fef697e3                bne     a3,a5,e0001630 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001646:       |  |  /-------- 0106fb63                bgeu    a3,a6,e000165c <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  // the pointer points to four bytes of four-byte-aligned memory.
  //
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000164a:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e000164e:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001650:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e0001654:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001656:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e0001658:       |  |  |  +----- ff06e9e3                bltu    a3,a6,e000164a <memcpy+0x50>
e000165c:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,e0001678 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
e0001660:       |  |  |  |      8e15                    sub     a2,a2,a3
e0001662:       |  |  |  |      00d50733                add     a4,a0,a3
e0001666:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
e0001668:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
e000166c:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
e0001670:       |  |  |  |  |   167d                    addi    a2,a2,-1
e0001672:       |  |  |  |  |   0705                    addi    a4,a4,1
e0001674:       |  |  |  |  |   0585                    addi    a1,a1,1
e0001676:       |  |  |  |  \-- fa6d                    bnez    a2,e0001668 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
e0001678:       \--|--|--|----> 8082                    ret
e000167a:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e000167c:             |  \----- fd06e7e3                bltu    a3,a6,e000164a <memcpy+0x50>
e0001680:             \-------- bff1                    j       e000165c <memcpy+0x62>

e0001682 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
e0001682:                 4691                  li      a3,4
e0001684:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001686:             /-- 00d66663              bltu    a2,a3,e0001692 <memset+0x10>
e000168a:             |   40a006b3              neg     a3,a0
e000168e:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e0001692:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001696:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e000169a:          /----- cb01                  beqz    a4,e00016aa <memset+0x28>
e000169c:          |      87aa                  mv      a5,a0
e000169e:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
e00016a0:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
e00016a4:          |  |   16fd                  addi    a3,a3,-1
e00016a6:          |  |   0785                  addi    a5,a5,1
e00016a8:          |  \-- fee5                  bnez    a3,e00016a0 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00016aa:       /--\----X 02080263              beqz    a6,e00016ce <memset+0x4c>
e00016ae:       |         00e808b3              add     a7,a6,a4
e00016b2:       |         0ff5f813              andi    a6,a1,255
e00016b6:       |         010107b7              lui     a5,0x1010
e00016ba:       |         10178793              addi    a5,a5,257 # 1010101 <tohost+0xff00f9>
e00016be:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e00016c2:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e00016c6:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e00016c8:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e00016ca:       |     \-- ff176ce3              bltu    a4,a7,e00016c2 <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
e00016ce:       \--/----X 00c77a63              bgeu    a4,a2,e00016e2 <memset+0x60>
e00016d2:          |      8e19                  sub     a2,a2,a4
e00016d4:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
e00016d8:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
e00016dc:          |  |   167d                  addi    a2,a2,-1
e00016de:          |  |   0685                  addi    a3,a3,1
e00016e0:          |  \-- fe65                  bnez    a2,e00016d8 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
e00016e2:          \----> 8082                  ret

e00016e4 <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
e00016e4:                             4691                      li      a3,4
e00016e6:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e00016e8:                         /-- 00d66663                  bltu    a2,a3,e00016f4 <memchr+0x10>
e00016ec:                         |   40a006b3                  neg     a3,a0
e00016f0:                         |   0036fe93                  andi    t4,a3,3
e00016f4:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e00016f8:                      /----- 000e8b63                  beqz    t4,e000170e <memchr+0x2a>
e00016fc:                      |      85aa                      mv      a1,a0
e00016fe:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
e0001700:                      |  /-> 0005c683                  lbu     a3,0(a1)
e0001704:       /--------------|--|-- 09c68563                  beq     a3,t3,e000178e <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
e0001708:       |              |  |   17fd                      addi    a5,a5,-1
e000170a:       |              |  |   0585                      addi    a1,a1,1
e000170c:       |              |  \-- fbf5                      bnez    a5,e0001700 <memchr+0x1c>
e000170e:       |              \----> 41d605b3                  sub     a1,a2,t4
e0001712:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001714:       |  /----------------- c9a9                      beqz    a1,e0001766 <memchr+0x82>
e0001716:       |  |                  01d58833                  add     a6,a1,t4
e000171a:       |  |                  010105b7                  lui     a1,0x1010
e000171e:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
e0001722:       |  |                  02be02b3                  mul     t0,t3,a1
e0001726:       |  |                  0ff00893                  li      a7,255
e000172a:       |  |                  65c1                      lui     a1,0x10
e000172c:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_stack_len+0x7f00>
e0001730:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001734:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001738:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
e000173a:       |  |              |   0056c7b3                  xor     a5,a3,t0
e000173e:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e0001742:       |  |              |   0ff6f713                  andi    a4,a3,255
e0001746:       +--|--------------|-- 05170463                  beq     a4,a7,e000178e <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e000174a:       |  |              |   0076f733                  and     a4,a3,t2
e000174e:       |  |  /-----------|-- 02770b63                  beq     a4,t2,e0001784 <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e0001752:       |  |  |           |   0066f6b3                  and     a3,a3,t1
e0001756:       |  |  |  /--------|-- 02668963                  beq     a3,t1,e0001788 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e000175a:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
e000175e:       |  |  |  |  /-----|-- c69d                      beqz    a3,e000178c <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001760:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
e0001762:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,e0001734 <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
e0001766:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,e0001780 <memchr+0x9c>
e000176a:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
e000176e:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
e0001772:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
e0001776:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,e000178e <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
e000177a:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
e000177c:       |     |  |  |  |  |   0585                      addi    a1,a1,1
e000177e:       |     |  |  |  |  \-- fa75                      bnez    a2,e0001772 <memchr+0x8e>
e0001780:       |     |  |  |  \----> 4581                      li      a1,0
e0001782:       +-----|--|--|-------- a031                      j       e000178e <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
e0001784:       |     \--|--|-------> 0585                      addi    a1,a1,1
e0001786:       +--------|--|-------- a021                      j       e000178e <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
e0001788:       |        \--|-------> 0589                      addi    a1,a1,2
e000178a:       +-----------|-------- a011                      j       e000178e <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
e000178c:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e000178e:       \-------------------> 852e                      mv      a0,a1
e0001790:                             8082                      ret

e0001792 <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
e0001792:                          4691                 li      a3,4
e0001794:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001796:                      /-- 00d66663             bltu    a2,a3,e00017a2 <memrchr+0x10>
e000179a:                      |   40a006b3             neg     a3,a0
e000179e:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e00017a2:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e00017a6:                          9af1                 andi    a3,a3,-4
e00017a8:                          006687b3             add     a5,a3,t1
e00017ac:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
e00017ae:                      /-- 00f66363             bltu    a2,a5,e00017b4 <memrchr+0x22>
e00017b2:                      |   86be                 mv      a3,a5
e00017b4:                      \-> 0ff5f393             andi    t2,a1,255
e00017b8:                   /--/-X 00c7fd63             bgeu    a5,a2,e00017d2 <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
e00017bc:                   |  |   00c50733             add     a4,a0,a2
e00017c0:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
e00017c4:                   |  |   fff60713             addi    a4,a2,-1
e00017c8:                   |  |   863a                 mv      a2,a4
e00017ca:                   |  \-- fe7597e3             bne     a1,t2,e00017b8 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e00017ce:                   |      953a                 add     a0,a0,a4
e00017d0:                   |      8082                 ret
e00017d2:                   \----> 010105b7             lui     a1,0x1010
e00017d6:                          10158593             addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
e00017da:                          02b382b3             mul     t0,t2,a1
e00017de:                          00ff0837             lui     a6,0xff0
e00017e2:                          65c1                 lui     a1,0x10
e00017e4:                          f0058793             addi    a5,a1,-256 # ff00 <_stack_len+0x7f00>
e00017e8:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
e00017ec:       /--------------/-X 04d37563             bgeu    t1,a3,e0001836 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e00017f0:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e00017f4:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
e00017f8:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e00017fc:       |              |   01875593             srli    a1,a4,0x18
e0001800:       |  /-----------|-- cd95                 beqz    a1,e000183c <memrchr+0xaa>
e0001802:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e0001806:       |  |           |   010775b3             and     a1,a4,a6
e000180a:       |  |  /--------|-- 03058c63             beq     a1,a6,e0001842 <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e000180e:       |  |  |        |   00f775b3             and     a1,a4,a5
e0001812:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,e0001848 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e0001816:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
e000181a:       |  |  |  |     |   16f1                 addi    a3,a3,-4
e000181c:       |  |  |  |     \-- fd1598e3             bne     a1,a7,e00017ec <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001820:       |  |  |  |         9536                 add     a0,a0,a3
e0001822:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
e0001824:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
e0001828:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
e000182c:       |  |  |  |     |   fff68613             addi    a2,a3,-1
e0001830:       |  |  |  |     |   86b2                 mv      a3,a2
e0001832:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,e000184e <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
e0001836:       \--|--|--|--|--\-X f6fd                 bnez    a3,e0001824 <memrchr+0x92>
e0001838:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e000183a:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
e000183c:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001840:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
e0001842:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001846:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
e0001848:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e000184c:                   |      8082                 ret
e000184e:                   \----> 9532                 add     a0,a0,a2
e0001850:                          8082                 ret
