
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/spi_host_test/spi_host_test_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/spi_host_test/spi_host_test_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xe0000080

Program Header:
    LOAD off    0x00001000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00001998 memsz 0x00001998 flags rwx
    LOAD off    0x00000000 vaddr 0xe0008000 paddr 0xe0008000 align 2**12
         filesz 0x00000000 memsz 0x00002000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .vectors          00000084  e0000000  e0000000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00001268  e0000084  e0000084  00001084  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000578  e00012f0  e00012f0  000022f0  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data             00000084  e0001868  e0001868  00002868  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss              0000000c  e00018ec  e00018ec  000028ec  2**2  ALLOC
  5 .logs.fields      000000a0  e00018f8  e00018f8  000028f8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .stack            00002000  e0008000  e0008000  00003000  2**0  ALLOC
  7 .debug_loc        00004d1a  00000000  00000000  00002998  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev     0000140a  00000000  00000000  000076b2  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info       00005e80  00000000  00000000  00008abc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges     000006d8  00000000  00000000  0000e93c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str        000018c7  00000000  00000000  0000f014  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment          00000074  00000000  00000000  000108db  2**0  CONTENTS, READONLY
 13 .riscv.attributes 00000026  00000000  00000000  0001094f  2**0  CONTENTS, READONLY
 14 .debug_frame      000006c8  00000000  00000000  00010978  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line       0000428f  00000000  00000000  00011040  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges    00000028  00000000  00000000  000152cf  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
e0000000 l    d  .vectors       00000000 .vectors
e0000084 l    d  .text  00000000 .text
e00012f0 l    d  .rodata        00000000 .rodata
e0001868 l    d  .data  00000000 .data
e00018ec l    d  .bss   00000000 .bss
e00018f8 l    d  .logs.fields   00000000 .logs.fields
e0008000 l    d  .stack 00000000 .stack
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .comment       00000000 .comment
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    df *ABS*  00000000 crt0.o
e0000084 l       .text  00000000 default_exc_handler
e0000084 l       .text  00000000 
e00000f2 l       .text  00000000 sleep_loop
e0000084 l       .text  00000000 
e0000086 l       .text  00000000 reset_handler
e0000086 l       .text  00000000 
e0000086 l       .text  00000000 
e00000cc l       .text  00000000 
e00000ea l       .text  00000000 zero_loop_end
e00000e0 l       .text  00000000 zero_loop
e00000e0 l       .text  00000000 
e00000ea l       .text  00000000 
e00000ea l       .text  00000000 main_entry
e00000ea l       .text  00000000 
e00000ee l       .text  00000000 
e00000f2 l       .text  00000000 
e00000f2 l       .text  00000000 
e00000f6 l       .text  00000000 
e0000000 l       .vectors       00000000 
e000002c l       .vectors       00000000 
e0000030 l       .vectors       00000000 
e000007c l       .vectors       00000000 
e0000080 l       .vectors       00000000 
00000fc4 l       .debug_info    00000000 
00000477 l       .debug_abbrev  00000000 
e00000f8 l       .text  00000000 
e0000084 l       .vectors       00000000 
00000170 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 spi_host_test.c
e00000f8 l       .text  00000000 
e00000f8 l       .text  00000000 
e00000f8 l       .text  00000000 
e00000fa l       .text  00000000 
e00000fa l       .text  00000000 
e0000106 l       .text  00000000 
e000010e l       .text  00000000 
e0000114 l       .text  00000000 
e000011a l       .text  00000000 
e000011c l       .text  00000000 
e0000124 l       .text  00000000 
e0000126 l       .text  00000000 
e000012e l       .text  00000000 
e0000130 l       .text  00000000 
e000013c l       .text  00000000 
e000013c l       .text  00000000 
e0000144 l       .text  00000000 
e0000144 l       .text  00000000 
e000014e l       .text  00000000 
e000014e l       .text  00000000 
e0000150 l       .text  00000000 
e0000152 l       .text  00000000 
e0000152 l       .text  00000000 
e0000154 l       .text  00000000 
e00018f8 l     O .logs.fields   00000014 read_sfdp.kLogFields
e0000154 l       .text  00000000 
e0000164 l       .text  00000000 
e0000164 l       .text  00000000 
e0000166 l       .text  00000000 
e0000166 l       .text  00000000 
e000017e l       .text  00000000 
e000017e l       .text  00000000 
e0000184 l       .text  00000000 
e0000186 l       .text  00000000 
e0000186 l       .text  00000000 
e0000188 l       .text  00000000 
e0000188 l       .text  00000000 
e000018a l       .text  00000000 
e000190c l     O .logs.fields   00000014 read_sfdp.kLogFields.2
e000018a l       .text  00000000 
e000019a l       .text  00000000 
e000019a l       .text  00000000 
e00001a2 l       .text  00000000 
e0001920 l     O .logs.fields   00000014 read_sfdp.kLogFields.5
e00001a6 l       .text  00000000 
e00001b4 l       .text  00000000 
e00001b4 l       .text  00000000 
e00001b6 l       .text  00000000 
e00001b6 l       .text  00000000 
e00001ce l       .text  00000000 
e00001ce l       .text  00000000 
e00001d6 l       .text  00000000 
e00001d6 l       .text  00000000 
e00001da l       .text  00000000 
e00001da l       .text  00000000 
e00001ee l       .text  00000000 
e00001ee l       .text  00000000 
e00001f4 l       .text  00000000 
e00001f6 l       .text  00000000 
e00001f6 l       .text  00000000 
e00001fe l       .text  00000000 
e0000206 l       .text  00000000 
e0000206 l       .text  00000000 
e0000206 l       .text  00000000 
e0000206 l       .text  00000000 
e0000206 l       .text  00000000 
e0000208 l       .text  00000000 
e0000208 l       .text  00000000 
e0000208 l       .text  00000000 
e000020e l       .text  00000000 
e0000212 l       .text  00000000 
e0000214 l       .text  00000000 
e0000216 l       .text  00000000 
e0000216 l       .text  00000000 
e000021e l       .text  00000000 
e0000220 l       .text  00000000 
e0000220 l       .text  00000000 
e0000222 l       .text  00000000 
e0000222 l       .text  00000000 
e0000224 l       .text  00000000 
e0000226 l       .text  00000000 
e0001934 l     O .logs.fields   00000014 main.kLogFields
e0000226 l       .text  00000000 
e0000236 l       .text  00000000 
e0000236 l       .text  00000000 
e0000238 l       .text  00000000 
e0000238 l       .text  00000000 
e000024e l       .text  00000000 
e000024e l       .text  00000000 
e0000254 l       .text  00000000 
e0000256 l       .text  00000000 
e0000256 l       .text  00000000 
e000027e l       .text  00000000 
e0000280 l       .text  00000000 
e0000282 l       .text  00000000 
e0000282 l       .text  00000000 
e0001948 l     O .logs.fields   00000014 main.kLogFields.9
e0000284 l       .text  00000000 
e0000290 l       .text  00000000 
e0000290 l       .text  00000000 
e0000292 l       .text  00000000 
e0000292 l       .text  00000000 
e00002a6 l       .text  00000000 
e00002a6 l       .text  00000000 
e00002ac l       .text  00000000 
e00002ae l       .text  00000000 
e00002ae l       .text  00000000 
e00002b4 l       .text  00000000 
e00002b6 l       .text  00000000 
e00002b8 l       .text  00000000 
e00002b8 l       .text  00000000 
e00002ba l       .text  00000000 
e00002bc l       .text  00000000 
e000195c l     O .logs.fields   00000014 main.kLogFields.12
e00002bc l       .text  00000000 
e00002ca l       .text  00000000 
e00002ca l       .text  00000000 
e00002cc l       .text  00000000 
e00002cc l       .text  00000000 
e00002e2 l       .text  00000000 
e00002e2 l       .text  00000000 
e00002e8 l       .text  00000000 
e00002ea l       .text  00000000 
e00002ea l       .text  00000000 
e00002ee l       .text  00000000 
e00002ee l       .text  00000000 
e00002fa l       .text  00000000 
e00002fa l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000001b l       .debug_loc     00000000 
0000004c l       .debug_loc     00000000 
00000072 l       .debug_loc     00000000 
0000008d l       .debug_loc     00000000 
000000a8 l       .debug_loc     00000000 
000000d9 l       .debug_loc     00000000 
000000f4 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
00000592 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
000003f9 l       .debug_str     00000000 
00000773 l       .debug_str     00000000 
000005b5 l       .debug_str     00000000 
00000597 l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
0000031c l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
0000014c l       .debug_str     00000000 
00000109 l       .debug_str     00000000 
00000121 l       .debug_str     00000000 
000010d8 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
0000013a l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000105 l       .debug_str     00000000 
000000bf l       .debug_str     00000000 
000000d0 l       .debug_str     00000000 
000000e1 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
0000059c l       .debug_str     00000000 
000005f1 l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001c9 l       .debug_str     00000000 
000001e2 l       .debug_str     00000000 
00000263 l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000239 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
000002a2 l       .debug_str     00000000 
00000276 l       .debug_str     00000000 
0000028c l       .debug_str     00000000 
000002b9 l       .debug_str     00000000 
000002c0 l       .debug_str     00000000 
000002ca l       .debug_str     00000000 
000002d5 l       .debug_str     00000000 
000002e0 l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
000002ff l       .debug_str     00000000 
0000030e l       .debug_str     00000000 
0000039c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
0000033c l       .debug_str     00000000 
00000355 l       .debug_str     00000000 
00000367 l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
0000038a l       .debug_str     00000000 
000003a8 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003b4 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
000003d1 l       .debug_str     00000000 
000003e7 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
0000077d l       .debug_str     00000000 
0000048a l       .debug_str     00000000 
000017a9 l       .debug_str     00000000 
00000d7a l       .debug_str     00000000 
00000dc5 l       .debug_str     00000000 
00000270 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
00000de7 l       .debug_str     00000000 
00000462 l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
00000484 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
0000042c l       .debug_str     00000000 
0000041e l       .debug_str     00000000 
00000434 l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
0000046b l       .debug_str     00000000 
00000469 l       .debug_str     00000000 
0000049f l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004cb l       .debug_str     00000000 
000004db l       .debug_str     00000000 
000004ed l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000504 l       .debug_str     00000000 
0000050e l       .debug_str     00000000 
00000527 l       .debug_str     00000000 
00000533 l       .debug_str     00000000 
00000538 l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000543 l       .debug_str     00000000 
00000554 l       .debug_str     00000000 
00000559 l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
00000572 l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
000005be l       .debug_str     00000000 
000005d5 l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
e0000206 l       .text  00000000 
e00002fa l       .text  00000000 
00000000 l    df *ABS*  00000000 utils.c
e00002fa l       .text  00000000 
e00002fa l       .text  00000000 
e00002fa l       .text  00000000 
e00002fc l       .text  00000000 
e00002fc l       .text  00000000 
e000030a l       .text  00000000 
e0000312 l       .text  00000000 
e0000314 l       .text  00000000 
e0000318 l       .text  00000000 
e000031c l       .text  00000000 
e0000328 l       .text  00000000 
e000032a l       .text  00000000 
e000032c l       .text  00000000 
e000032c l       .text  00000000 
e000032e l       .text  00000000 
e000032e l       .text  00000000 
e0000330 l       .text  00000000 
e0000330 l       .text  00000000 
e0000332 l       .text  00000000 
e0000332 l       .text  00000000 
e0000336 l       .text  00000000 
e0000336 l       .text  00000000 
e000033e l       .text  00000000 
e0000340 l       .text  00000000 
e0000340 l       .text  00000000 
e0000342 l       .text  00000000 
e0000342 l       .text  00000000 
e0000358 l       .text  00000000 
e000035c l       .text  00000000 
e000035e l       .text  00000000 
e0000360 l       .text  00000000 
e0000360 l       .text  00000000 
e0000362 l       .text  00000000 
e0000366 l       .text  00000000 
e0000368 l       .text  00000000 
e0000374 l       .text  00000000 
e0000374 l       .text  00000000 
00000125 l       .debug_loc     00000000 
0000014b l       .debug_loc     00000000 
00000173 l       .debug_loc     00000000 
00000199 l       .debug_loc     00000000 
000001f6 l       .debug_loc     00000000 
0000021e l       .debug_loc     00000000 
00000244 l       .debug_loc     00000000 
00000279 l       .debug_loc     00000000 
000002b9 l       .debug_loc     00000000 
000002d4 l       .debug_loc     00000000 
000002f5 l       .debug_loc     00000000 
00000310 l       .debug_loc     00000000 
0000032b l       .debug_loc     00000000 
00000346 l       .debug_loc     00000000 
00000361 l       .debug_loc     00000000 
00000389 l       .debug_loc     00000000 
000003ba l       .debug_loc     00000000 
000003ef l       .debug_loc     00000000 
00000417 l       .debug_loc     00000000 
00000433 l       .debug_loc     00000000 
0000044e l       .debug_loc     00000000 
00000469 l       .debug_loc     00000000 
00000484 l       .debug_loc     00000000 
0000049f l       .debug_loc     00000000 
000004ba l       .debug_loc     00000000 
000004d5 l       .debug_loc     00000000 
000004f0 l       .debug_loc     00000000 
0000054d l       .debug_loc     00000000 
00000573 l       .debug_loc     00000000 
000005b3 l       .debug_loc     00000000 
000005db l       .debug_loc     00000000 
00000601 l       .debug_loc     00000000 
00000641 l       .debug_loc     00000000 
00000673 l       .debug_loc     00000000 
0000069f l       .debug_loc     00000000 
000006ba l       .debug_loc     00000000 
000006d5 l       .debug_loc     00000000 
000006f6 l       .debug_loc     00000000 
00000711 l       .debug_loc     00000000 
00000737 l       .debug_loc     00000000 
00000773 l       .debug_loc     00000000 
00000799 l       .debug_loc     00000000 
000007e0 l       .debug_loc     00000000 
00000827 l       .debug_loc     00000000 
00000863 l       .debug_loc     00000000 
0000088b l       .debug_loc     00000000 
000008e8 l       .debug_loc     00000000 
00000912 l       .debug_loc     00000000 
00000954 l       .debug_loc     00000000 
000009dd l       .debug_loc     00000000 
000009f8 l       .debug_loc     00000000 
00000a1e l       .debug_loc     00000000 
00000a44 l       .debug_loc     00000000 
00000a61 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000005fb l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000108 l       .debug_ranges  00000000 
0000061d l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
00000684 l       .debug_str     00000000 
00000fcf l       .debug_str     00000000 
0000013a l       .debug_str     00000000 
00000631 l       .debug_str     00000000 
0000064a l       .debug_str     00000000 
0000062a l       .debug_str     00000000 
00000907 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
00000270 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000634 l       .debug_str     00000000 
00000651 l       .debug_str     00000000 
00000f93 l       .debug_str     00000000 
0000065f l       .debug_str     00000000 
00000667 l       .debug_str     00000000 
00000672 l       .debug_str     00000000 
000006e7 l       .debug_str     00000000 
0000075e l       .debug_str     00000000 
00000765 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
0000128e l       .debug_str     00000000 
00000060 l       .debug_ranges  00000000 
00000078 l       .debug_ranges  00000000 
00000090 l       .debug_ranges  00000000 
000000a8 l       .debug_ranges  00000000 
000000c0 l       .debug_ranges  00000000 
000000d8 l       .debug_ranges  00000000 
000006ef l       .debug_str     00000000 
00000376 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000777 l       .debug_str     00000000 
0000077a l       .debug_str     00000000 
0000076d l       .debug_str     00000000 
00000782 l       .debug_str     00000000 
00000784 l       .debug_str     00000000 
00001640 l       .debug_str     00000000 
000000f0 l       .debug_ranges  00000000 
00000697 l       .debug_str     00000000 
000006f7 l       .debug_str     00000000 
000006fe l       .debug_str     00000000 
000006a4 l       .debug_str     00000000 
000006ae l       .debug_str     00000000 
000006bb l       .debug_str     00000000 
000006cd l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
00000048 l       .debug_ranges  00000000 
000006d2 l       .debug_str     00000000 
00000722 l       .debug_str     00000000 
0000072a l       .debug_str     00000000 
00000557 l       .debug_str     00000000 
00001481 l       .debug_str     00000000 
00001008 l       .debug_str     00000000 
00000730 l       .debug_str     00000000 
00000737 l       .debug_str     00000000 
00000742 l       .debug_str     00000000 
00000749 l       .debug_str     00000000 
00000750 l       .debug_str     00000000 
00000757 l       .debug_str     00000000 
00000676 l       .debug_str     00000000 
0000143f l       .debug_str     00000000 
0000067d l       .debug_str     00000000 
0000162c l       .debug_str     00000000 
0000042a l       .debug_str     00000000 
00000719 l       .debug_str     00000000 
0000070a l       .debug_str     00000000 
0000004c l       .debug_frame   00000000 
e0000374 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host_autogen.c
e0000374 l       .text  00000000 
e0000374 l       .text  00000000 
e0000374 l       .text  00000000 
e0000374 l       .text  00000000 
e0000376 l       .text  00000000 
e0000378 l       .text  00000000 
e000037c l       .text  00000000 
e000037e l       .text  00000000 
e0000380 l       .text  00000000 
e0000382 l       .text  00000000 
e0000382 l       .text  00000000 
00000a82 l       .debug_loc     00000000 
00000a9d l       .debug_loc     00000000 
00000ab8 l       .debug_loc     00000000 
00000ad3 l       .debug_loc     00000000 
00000aef l       .debug_loc     00000000 
00000b0b l       .debug_loc     00000000 
00000b26 l       .debug_loc     00000000 
00000b41 l       .debug_loc     00000000 
00000b5c l       .debug_loc     00000000 
00000b77 l       .debug_loc     00000000 
00000b92 l       .debug_loc     00000000 
00000bad l       .debug_loc     00000000 
00000bc8 l       .debug_loc     00000000 
00000be3 l       .debug_loc     00000000 
00000c09 l       .debug_loc     00000000 
00000c24 l       .debug_loc     00000000 
00000c3f l       .debug_loc     00000000 
00000c5d l       .debug_loc     00000000 
00000c84 l       .debug_loc     00000000 
00000c9f l       .debug_loc     00000000 
00000cba l       .debug_loc     00000000 
00000cd5 l       .debug_loc     00000000 
00000cf3 l       .debug_loc     00000000 
00000d1a l       .debug_loc     00000000 
00000d35 l       .debug_loc     00000000 
00000d50 l       .debug_loc     00000000 
00000d6b l       .debug_loc     00000000 
00000d86 l       .debug_loc     00000000 
00000dac l       .debug_loc     00000000 
00000dc7 l       .debug_loc     00000000 
00000de2 l       .debug_loc     00000000 
00000e08 l       .debug_loc     00000000 
00000e28 l       .debug_loc     00000000 
00000e4e l       .debug_loc     00000000 
00000e6c l       .debug_loc     00000000 
00000e87 l       .debug_loc     00000000 
00000ea2 l       .debug_loc     00000000 
00000ec2 l       .debug_loc     00000000 
00000ee8 l       .debug_loc     00000000 
00000f0e l       .debug_loc     00000000 
00000f29 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000788 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000198 l       .debug_ranges  00000000 
000007b9 l       .debug_str     00000000 
000007f3 l       .debug_str     00000000 
000007e6 l       .debug_str     00000000 
000007c3 l       .debug_str     00000000 
000007d4 l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
000002b9 l       .debug_str     00000000 
000002c0 l       .debug_str     00000000 
000002ca l       .debug_str     00000000 
000002d5 l       .debug_str     00000000 
000002e0 l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
000002ff l       .debug_str     00000000 
0000030e l       .debug_str     00000000 
0000081d l       .debug_str     00000000 
00000802 l       .debug_str     00000000 
0000085b l       .debug_str     00000000 
00000830 l       .debug_str     00000000 
00000844 l       .debug_str     00000000 
00000891 l       .debug_str     00000000 
0000086c l       .debug_str     00000000 
0000087f l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
000004db l       .debug_str     00000000 
000003d1 l       .debug_str     00000000 
000003f9 l       .debug_str     00000000 
0000089c l       .debug_str     00000000 
0000077d l       .debug_str     00000000 
0000169e l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000003e7 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
00000994 l       .debug_str     00000000 
0000082a l       .debug_str     00000000 
00000adc l       .debug_str     00000000 
00000ae6 l       .debug_str     00000000 
000009ad l       .debug_str     00000000 
00000868 l       .debug_str     00000000 
000017a9 l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
000009c7 l       .debug_str     00000000 
00000af5 l       .debug_str     00000000 
000008d3 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
000008ee l       .debug_str     00000000 
0000090b l       .debug_str     00000000 
00000922 l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
000008e4 l       .debug_str     00000000 
000009e2 l       .debug_str     00000000 
000009f3 l       .debug_str     00000000 
00000b20 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000009fe l       .debug_str     00000000 
0000093f l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
0000096c l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000956 l       .debug_str     00000000 
0000097f l       .debug_str     00000000 
00000a1f l       .debug_str     00000000 
00000a3c l       .debug_str     00000000 
000003b4 l       .debug_str     00000000 
00000b2f l       .debug_str     00000000 
00000a53 l       .debug_str     00000000 
000009dc l       .debug_str     00000000 
00000b4a l       .debug_str     00000000 
00000b5a l       .debug_str     00000000 
00000a70 l       .debug_str     00000000 
00000b65 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
00000aaa l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
000005d5 l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000ac7 l       .debug_str     00000000 
00000afe l       .debug_str     00000000 
00000b3d l       .debug_str     00000000 
00000b70 l       .debug_str     00000000 
0000015c l       .debug_frame   00000000 
e0000382 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host.c
e0000382 l       .text  00000000 
e0000382 l       .text  00000000 
e0000382 l       .text  00000000 
e0000384 l       .text  00000000 
e0000386 l       .text  00000000 
e000038e l       .text  00000000 
e0000392 l       .text  00000000 
e0000392 l       .text  00000000 
e0000396 l       .text  00000000 
e0000396 l       .text  00000000 
e000039a l       .text  00000000 
e00003a0 l       .text  00000000 
e00003a2 l       .text  00000000 
e00003a2 l       .text  00000000 
e00003ac l       .text  00000000 
e00003ae l       .text  00000000 
e00003ae l       .text  00000000 
e00003b0 l       .text  00000000 
e00003b0 l       .text  00000000 
e00003b4 l       .text  00000000 
e00003b4 l       .text  00000000 
e00003b8 l       .text  00000000 
e00003b8 l       .text  00000000 
e00003bc l       .text  00000000 
e00003bc l       .text  00000000 
e00003be l       .text  00000000 
e00003be l       .text  00000000 
e00003c4 l       .text  00000000 
e00003c4 l       .text  00000000 
e00003c8 l       .text  00000000 
e00003c8 l       .text  00000000 
e00003cc l       .text  00000000 
e00003d4 l       .text  00000000 
e00003d4 l       .text  00000000 
e00003d8 l       .text  00000000 
e00003d8 l       .text  00000000 
e00003da l       .text  00000000 
e00003da l       .text  00000000 
e00003e0 l       .text  00000000 
e00003e6 l       .text  00000000 
e00003ea l       .text  00000000 
e00003f2 l       .text  00000000 
e00003f2 l       .text  00000000 
e00003f4 l       .text  00000000 
e00003f4 l       .text  00000000 
e00003f8 l       .text  00000000 
e00003f8 l       .text  00000000 
e00003fc l       .text  00000000 
e00003fc l       .text  00000000 
e00003fe l       .text  00000000 
e00003fe l       .text  00000000 
e0000400 l       .text  00000000 
e0000400 l       .text  00000000 
e0000406 l       .text  00000000 
e0000406 l       .text  00000000 
e0000408 l       .text  00000000 
e000040c l       .text  00000000 
e0000410 l       .text  00000000 
e0000412 l       .text  00000000 
e000041e l       .text  00000000 
e000041e l       .text  00000000 
e0000420 l       .text  00000000 
e0000420 l       .text  00000000 
e0000424 l       .text  00000000 
e0000424 l       .text  00000000 
e0000428 l       .text  00000000 
e0000428 l       .text  00000000 
e000042c l       .text  00000000 
e000042c l       .text  00000000 
e0000430 l       .text  00000000 
e0000430 l       .text  00000000 
e0000436 l       .text  00000000 
e0000438 l       .text  00000000 
e000043a l       .text  00000000 
e000043c l       .text  00000000 
e000043e l       .text  00000000 
e0000440 l       .text  00000000 
e0000440 l       .text  00000000 
e0000440 l       .text  00000000 
e0000440 l       .text  00000000 
e0000440 l       .text  00000000 
e0000442 l       .text  00000000 
e0000450 l       .text  00000000 
e0000452 l       .text  00000000 
e0000454 l       .text  00000000 
e0000458 l       .text  00000000 
e000045a l       .text  00000000 
e000045c l       .text  00000000 
e000045c l       .text  00000000 
e0000464 l       .text  00000000 
e000046a l       .text  00000000 
e000046a l       .text  00000000 
e0000472 l       .text  00000000 
e0000482 l       .text  00000000 
e0000482 l       .text  00000000 
e0000486 l       .text  00000000 
e0000486 l       .text  00000000 
e000048a l       .text  00000000 
e0000494 l       .text  00000000 
e0000494 l       .text  00000000 
e0000496 l       .text  00000000 
e0000498 l       .text  00000000 
e0000498 l       .text  00000000 
e00004a2 l       .text  00000000 
e00004a6 l       .text  00000000 
e00004a6 l       .text  00000000 
e00004a8 l       .text  00000000 
e00004a8 l       .text  00000000 
e00004aa l       .text  00000000 
e00004aa l       .text  00000000 
e00004ac l       .text  00000000 
e00004ac l       .text  00000000 
e00004ae l       .text  00000000 
e00004ae l       .text  00000000 
e0000636 l     F .text  00000038 enqueue_word
e00004b2 l       .text  00000000 
e00004b2 l       .text  00000000 
e00004b4 l       .text  00000000 
e00004b4 l       .text  00000000 
e00004b6 l       .text  00000000 
e00004b8 l       .text  00000000 
e00004b8 l       .text  00000000 
e00004bc l       .text  00000000 
e00004bc l       .text  00000000 
e00004c2 l       .text  00000000 
e00004c6 l       .text  00000000 
e00004c6 l       .text  00000000 
e00004ca l       .text  00000000 
e00004ca l       .text  00000000 
e00004ce l       .text  00000000 
e00004ce l       .text  00000000 
e00004d2 l       .text  00000000 
e00004d4 l       .text  00000000 
e00004d4 l       .text  00000000 
e00004da l       .text  00000000 
e00004da l       .text  00000000 
e00004de l       .text  00000000 
e00004de l       .text  00000000 
e00004e2 l       .text  00000000 
e00004ea l       .text  00000000 
e00004ea l       .text  00000000 
e00004f2 l       .text  00000000 
e00004f2 l       .text  00000000 
e00004f6 l       .text  00000000 
e00004fc l       .text  00000000 
e0000500 l       .text  00000000 
e0000508 l       .text  00000000 
e000050e l       .text  00000000 
e0000512 l       .text  00000000 
e0000512 l       .text  00000000 
e0000514 l       .text  00000000 
e0000514 l       .text  00000000 
e0000516 l       .text  00000000 
e0000516 l       .text  00000000 
e0000518 l       .text  00000000 
e0000518 l       .text  00000000 
e000051a l       .text  00000000 
e000051a l       .text  00000000 
e000051e l       .text  00000000 
e000051e l       .text  00000000 
e0000520 l       .text  00000000 
e0000520 l       .text  00000000 
e0000522 l       .text  00000000 
e0000522 l       .text  00000000 
e0000524 l       .text  00000000 
e0000524 l       .text  00000000 
e0000526 l       .text  00000000 
e0000526 l       .text  00000000 
e000052a l       .text  00000000 
e000052a l       .text  00000000 
e000052c l       .text  00000000 
e000052c l       .text  00000000 
e0000532 l       .text  00000000 
e0000534 l       .text  00000000 
e0000538 l       .text  00000000 
e0000538 l       .text  00000000 
e000053e l       .text  00000000 
e0000542 l       .text  00000000 
e0000544 l       .text  00000000 
e0000544 l       .text  00000000 
e000054a l       .text  00000000 
e000054e l       .text  00000000 
e000054e l       .text  00000000 
e0000550 l       .text  00000000 
e0000550 l       .text  00000000 
e0000552 l       .text  00000000 
e0000552 l       .text  00000000 
e0000554 l       .text  00000000 
e0000554 l       .text  00000000 
e0000556 l       .text  00000000 
e0000556 l       .text  00000000 
e000055a l       .text  00000000 
e000055a l       .text  00000000 
e000055c l       .text  00000000 
e000055c l       .text  00000000 
e000055e l       .text  00000000 
e0000560 l       .text  00000000 
e0000560 l       .text  00000000 
e0000564 l       .text  00000000 
e0000564 l       .text  00000000 
e000056a l       .text  00000000 
e000056e l       .text  00000000 
e000056e l       .text  00000000 
e0000572 l       .text  00000000 
e0000572 l       .text  00000000 
e0000576 l       .text  00000000 
e0000576 l       .text  00000000 
e000057a l       .text  00000000 
e0000580 l       .text  00000000 
e0000582 l       .text  00000000 
e0000582 l       .text  00000000 
e0000584 l       .text  00000000 
e0000584 l       .text  00000000 
e0000586 l       .text  00000000 
e0000586 l       .text  00000000 
e000058e l       .text  00000000 
e0000598 l       .text  00000000 
e0000598 l       .text  00000000 
e0000598 l       .text  00000000 
e0000598 l       .text  00000000 
e0000598 l       .text  00000000 
e000059a l       .text  00000000 
e000059c l       .text  00000000 
e000059e l       .text  00000000 
e00005a0 l       .text  00000000 
e00005a2 l       .text  00000000 
e00005a4 l       .text  00000000 
e00005a8 l       .text  00000000 
e00005aa l       .text  00000000 
e00005ac l       .text  00000000 
e00005ac l       .text  00000000 
e00005b0 l       .text  00000000 
e00005b2 l       .text  00000000 
e00005b2 l       .text  00000000 
e00005b8 l       .text  00000000 
e00005b8 l       .text  00000000 
e00005bc l       .text  00000000 
e00005bc l       .text  00000000 
e00005be l       .text  00000000 
e00005be l       .text  00000000 
e00005c0 l       .text  00000000 
e00005c0 l       .text  00000000 
e00005c2 l       .text  00000000 
e00005c2 l       .text  00000000 
e00005c6 l       .text  00000000 
e00005c6 l       .text  00000000 
e00005c8 l       .text  00000000 
e00005c8 l       .text  00000000 
e00005ca l       .text  00000000 
e00005ca l       .text  00000000 
e00005cc l       .text  00000000 
e00005cc l       .text  00000000 
e00005d0 l       .text  00000000 
e00005d0 l       .text  00000000 
e00005d4 l       .text  00000000 
e00005d4 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d8 l       .text  00000000 
e00005dc l       .text  00000000 
e00005dc l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e4 l       .text  00000000 
e00005e4 l       .text  00000000 
e00005ea l       .text  00000000 
e00005ea l       .text  00000000 
e00005ec l       .text  00000000 
e00005ec l       .text  00000000 
e00005f0 l       .text  00000000 
e00005f0 l       .text  00000000 
e00005f2 l       .text  00000000 
e00005f4 l       .text  00000000 
e00005f4 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005fa l       .text  00000000 
e00005fa l       .text  00000000 
e00005fc l       .text  00000000 
e00005fc l       .text  00000000 
e0000600 l       .text  00000000 
e0000600 l       .text  00000000 
e0000602 l       .text  00000000 
e0000602 l       .text  00000000 
e0000604 l       .text  00000000 
e0000604 l       .text  00000000 
e0000606 l       .text  00000000 
e0000606 l       .text  00000000 
e0000608 l       .text  00000000 
e0000608 l       .text  00000000 
e000060a l       .text  00000000 
e000060a l       .text  00000000 
e000060c l       .text  00000000 
e000060c l       .text  00000000 
e000060e l       .text  00000000 
e000060e l       .text  00000000 
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
e0000616 l       .text  00000000 
e0000616 l       .text  00000000 
e000061a l       .text  00000000 
e000061a l       .text  00000000 
e000061a l       .text  00000000 
e000061a l       .text  00000000 
e000061a l       .text  00000000 
e000061a l       .text  00000000 
e000061c l       .text  00000000 
e000061e l       .text  00000000 
e000061e l       .text  00000000 
e0000620 l       .text  00000000 
e0000620 l       .text  00000000 
e0000622 l       .text  00000000 
e0000628 l       .text  00000000 
e0000628 l       .text  00000000 
e000062a l       .text  00000000 
e000062a l       .text  00000000 
e000062c l       .text  00000000 
e000062c l       .text  00000000 
e000062e l       .text  00000000 
e000062e l       .text  00000000 
e0000630 l       .text  00000000 
e0000630 l       .text  00000000 
e0000632 l       .text  00000000 
e0000632 l       .text  00000000 
e0000634 l       .text  00000000 
e0000634 l       .text  00000000 
e0000636 l       .text  00000000 
e0000636 l       .text  00000000 
e0000636 l       .text  00000000 
e0000636 l       .text  00000000 
e0000636 l       .text  00000000 
e0000636 l       .text  00000000 
e0000638 l       .text  00000000 
e000063c l       .text  00000000 
e000063e l       .text  00000000 
e000063e l       .text  00000000 
e0000644 l       .text  00000000 
e0000646 l       .text  00000000 
e000064c l       .text  00000000 
e000064c l       .text  00000000 
e000064e l       .text  00000000 
e000064e l       .text  00000000 
e0000650 l       .text  00000000 
e0000650 l       .text  00000000 
e0000656 l       .text  00000000 
e0000658 l       .text  00000000 
e0000658 l       .text  00000000 
e000065a l       .text  00000000 
e000065a l       .text  00000000 
e000065e l       .text  00000000 
e000065e l       .text  00000000 
e0000660 l       .text  00000000 
e0000660 l       .text  00000000 
e0000662 l       .text  00000000 
e0000662 l       .text  00000000 
e0000664 l       .text  00000000 
e0000664 l       .text  00000000 
e0000666 l       .text  00000000 
e0000666 l       .text  00000000 
e0000668 l       .text  00000000 
e000066c l       .text  00000000 
e000066e l       .text  00000000 
e000066e l       .text  00000000 
e000066e l       .text  00000000 
e000066e l       .text  00000000 
e000066e l       .text  00000000 
e0000670 l       .text  00000000 
e000068a l       .text  00000000 
e000068c l       .text  00000000 
e000068c l       .text  00000000 
e000068e l       .text  00000000 
e000068e l       .text  00000000 
e0000690 l       .text  00000000 
e0000690 l       .text  00000000 
e0000694 l       .text  00000000 
e0000696 l       .text  00000000 
e0000698 l       .text  00000000 
e00006ae l       .text  00000000 
e00006c4 l       .text  00000000 
e00006c6 l       .text  00000000 
e00006c6 l       .text  00000000 
e00006ca l       .text  00000000 
e00006ca l       .text  00000000 
e00006cc l       .text  00000000 
e00006cc l       .text  00000000 
e00006d0 l       .text  00000000 
e00006d0 l       .text  00000000 
e00006d8 l       .text  00000000 
e00006dc l       .text  00000000 
e00006ea l       .text  00000000 
e00006ec l       .text  00000000 
e00006ec l       .text  00000000 
e00006ee l       .text  00000000 
e00006ee l       .text  00000000 
e00006f2 l       .text  00000000 
e00006f2 l       .text  00000000 
e00006f6 l       .text  00000000 
e00006f6 l       .text  00000000 
e00006fa l       .text  00000000 
e00006fa l       .text  00000000 
e0000700 l       .text  00000000 
e0000700 l       .text  00000000 
e0000704 l       .text  00000000 
e0000704 l       .text  00000000 
e0000708 l       .text  00000000 
e0000708 l       .text  00000000 
e000070c l       .text  00000000 
e000070e l       .text  00000000 
e000070e l       .text  00000000 
e0000710 l       .text  00000000 
e0000710 l       .text  00000000 
e0000714 l       .text  00000000 
e0000714 l       .text  00000000 
e0000718 l       .text  00000000 
e0000718 l       .text  00000000 
e000071a l       .text  00000000 
e000071a l       .text  00000000 
e000072c l       .text  00000000 
e000072c l       .text  00000000 
e0000730 l       .text  00000000 
e0000730 l       .text  00000000 
e0000738 l       .text  00000000 
e000073c l       .text  00000000 
e000073c l       .text  00000000 
e0000742 l       .text  00000000 
e0000744 l       .text  00000000 
e0000746 l       .text  00000000 
e0000746 l       .text  00000000 
e000074a l       .text  00000000 
e000074a l       .text  00000000 
e000074e l       .text  00000000 
e0000750 l       .text  00000000 
e0000752 l       .text  00000000 
e000075a l       .text  00000000 
e000075c l       .text  00000000 
e000075c l       .text  00000000 
e0000760 l       .text  00000000 
e0000760 l       .text  00000000 
e0000764 l       .text  00000000 
e0000764 l       .text  00000000 
e0000768 l       .text  00000000 
e0000768 l       .text  00000000 
e000076e l       .text  00000000 
e000076e l       .text  00000000 
e0000770 l       .text  00000000 
e0000770 l       .text  00000000 
e0000772 l       .text  00000000 
e0000772 l       .text  00000000 
e0000774 l       .text  00000000 
e0000778 l       .text  00000000 
e0000778 l       .text  00000000 
e000077c l       .text  00000000 
e000077c l       .text  00000000 
e0000780 l       .text  00000000 
e0000782 l       .text  00000000 
e0000784 l       .text  00000000 
e0000788 l       .text  00000000 
e0000788 l       .text  00000000 
e000078a l       .text  00000000 
e000078a l       .text  00000000 
e000078c l       .text  00000000 
e000078c l       .text  00000000 
e0000790 l       .text  00000000 
e0000790 l       .text  00000000 
e0000794 l       .text  00000000 
e0000794 l       .text  00000000 
e0000796 l       .text  00000000 
e00007a0 l       .text  00000000 
e00007a4 l       .text  00000000 
e00007a4 l       .text  00000000 
e00007a8 l       .text  00000000 
e00007a8 l       .text  00000000 
e00007ac l       .text  00000000 
e00007ac l       .text  00000000 
e00007ae l       .text  00000000 
e00007b0 l       .text  00000000 
e00007b0 l       .text  00000000 
e00007b4 l       .text  00000000 
e00007b4 l       .text  00000000 
e00007b8 l       .text  00000000 
e00007b8 l       .text  00000000 
e00007ba l       .text  00000000 
e00007c4 l       .text  00000000 
e00007c6 l       .text  00000000 
e00007c6 l       .text  00000000 
e00007ce l       .text  00000000 
e00007ce l       .text  00000000 
e00007d2 l       .text  00000000 
e00007d2 l       .text  00000000 
e00007d6 l       .text  00000000 
e00007dc l       .text  00000000 
e00007e0 l       .text  00000000 
e00007e0 l       .text  00000000 
e00007e4 l       .text  00000000 
e00007e4 l       .text  00000000 
e00007e6 l       .text  00000000 
e00007e6 l       .text  00000000 
e00007e8 l       .text  00000000 
e00007e8 l       .text  00000000 
e00007ea l       .text  00000000 
e00007ea l       .text  00000000 
e00007ec l       .text  00000000 
e00007ec l       .text  00000000 
e00007f0 l       .text  00000000 
e00007f0 l       .text  00000000 
e00007f4 l       .text  00000000 
e00007f6 l       .text  00000000 
e0000800 l       .text  00000000 
e0000800 l       .text  00000000 
e0000808 l       .text  00000000 
e000080c l       .text  00000000 
e0000816 l       .text  00000000 
e000081a l       .text  00000000 
e0000820 l       .text  00000000 
e000082a l       .text  00000000 
e000082a l       .text  00000000 
e000082c l       .text  00000000 
e0000830 l       .text  00000000 
e0000834 l       .text  00000000 
e0000834 l       .text  00000000 
e0000836 l       .text  00000000 
e0000846 l       .text  00000000 
e0000854 l       .text  00000000 
e0000854 l       .text  00000000 
e0000858 l       .text  00000000 
e0000858 l       .text  00000000 
00000f44 l       .debug_loc     00000000 
00000f5f l       .debug_loc     00000000 
00000f7a l       .debug_loc     00000000 
00000fa0 l       .debug_loc     00000000 
00000fbb l       .debug_loc     00000000 
00000fd6 l       .debug_loc     00000000 
00000ffa l       .debug_loc     00000000 
00001015 l       .debug_loc     00000000 
00001030 l       .debug_loc     00000000 
0000104b l       .debug_loc     00000000 
0000106f l       .debug_loc     00000000 
0000108a l       .debug_loc     00000000 
000010a5 l       .debug_loc     00000000 
000010c0 l       .debug_loc     00000000 
000010db l       .debug_loc     00000000 
000010ff l       .debug_loc     00000000 
0000111a l       .debug_loc     00000000 
00001135 l       .debug_loc     00000000 
00001166 l       .debug_loc     00000000 
00001197 l       .debug_loc     00000000 
000011c8 l       .debug_loc     00000000 
000011e3 l       .debug_loc     00000000 
000011fe l       .debug_loc     00000000 
00001221 l       .debug_loc     00000000 
0000123c l       .debug_loc     00000000 
00001257 l       .debug_loc     00000000 
00001295 l       .debug_loc     00000000 
000012b4 l       .debug_loc     00000000 
000012cf l       .debug_loc     00000000 
000012fc l       .debug_loc     00000000 
0000131f l       .debug_loc     00000000 
0000133a l       .debug_loc     00000000 
00001355 l       .debug_loc     00000000 
00001378 l       .debug_loc     00000000 
00001393 l       .debug_loc     00000000 
000013ae l       .debug_loc     00000000 
000013ec l       .debug_loc     00000000 
0000140b l       .debug_loc     00000000 
00001426 l       .debug_loc     00000000 
00001446 l       .debug_loc     00000000 
00001461 l       .debug_loc     00000000 
0000147d l       .debug_loc     00000000 
00001498 l       .debug_loc     00000000 
000014b3 l       .debug_loc     00000000 
000014d6 l       .debug_loc     00000000 
000014f7 l       .debug_loc     00000000 
00001544 l       .debug_loc     00000000 
0000155f l       .debug_loc     00000000 
00001586 l       .debug_loc     00000000 
000015ab l       .debug_loc     00000000 
000015cd l       .debug_loc     00000000 
000015e8 l       .debug_loc     00000000 
0000160a l       .debug_loc     00000000 
0000162b l       .debug_loc     00000000 
00001646 l       .debug_loc     00000000 
00001666 l       .debug_loc     00000000 
00001682 l       .debug_loc     00000000 
0000169d l       .debug_loc     00000000 
000016bf l       .debug_loc     00000000 
000016da l       .debug_loc     00000000 
00001700 l       .debug_loc     00000000 
0000171c l       .debug_loc     00000000 
00001737 l       .debug_loc     00000000 
00001759 l       .debug_loc     00000000 
00001775 l       .debug_loc     00000000 
00001795 l       .debug_loc     00000000 
000017b7 l       .debug_loc     00000000 
000017d2 l       .debug_loc     00000000 
000017ed l       .debug_loc     00000000 
00001813 l       .debug_loc     00000000 
00001843 l       .debug_loc     00000000 
0000185e l       .debug_loc     00000000 
0000187e l       .debug_loc     00000000 
000018a0 l       .debug_loc     00000000 
000018c0 l       .debug_loc     00000000 
000018e6 l       .debug_loc     00000000 
00001901 l       .debug_loc     00000000 
00001936 l       .debug_loc     00000000 
0000197e l       .debug_loc     00000000 
000019ba l       .debug_loc     00000000 
000019d5 l       .debug_loc     00000000 
00001a11 l       .debug_loc     00000000 
00001a4d l       .debug_loc     00000000 
00001a74 l       .debug_loc     00000000 
00001a8f l       .debug_loc     00000000 
00001aaf l       .debug_loc     00000000 
00001ad1 l       .debug_loc     00000000 
00001af5 l       .debug_loc     00000000 
00001b10 l       .debug_loc     00000000 
00001b2b l       .debug_loc     00000000 
00001b4d l       .debug_loc     00000000 
00001b76 l       .debug_loc     00000000 
00001b9a l       .debug_loc     00000000 
00001bb5 l       .debug_loc     00000000 
00001bd0 l       .debug_loc     00000000 
00001beb l       .debug_loc     00000000 
00001c06 l       .debug_loc     00000000 
00001c21 l       .debug_loc     00000000 
00001c43 l       .debug_loc     00000000 
00001c5e l       .debug_loc     00000000 
00001c80 l       .debug_loc     00000000 
00001c9c l       .debug_loc     00000000 
00001cb7 l       .debug_loc     00000000 
00001cd2 l       .debug_loc     00000000 
00001ced l       .debug_loc     00000000 
00001d14 l       .debug_loc     00000000 
00001d39 l       .debug_loc     00000000 
00001d5d l       .debug_loc     00000000 
00001d84 l       .debug_loc     00000000 
00001db4 l       .debug_loc     00000000 
00001ddc l       .debug_loc     00000000 
00001df9 l       .debug_loc     00000000 
00001e1f l       .debug_loc     00000000 
00001e3a l       .debug_loc     00000000 
00001e55 l       .debug_loc     00000000 
00001e77 l       .debug_loc     00000000 
00001e99 l       .debug_loc     00000000 
00001eca l       .debug_loc     00000000 
00001f09 l       .debug_loc     00000000 
00001f3a l       .debug_loc     00000000 
00001f55 l       .debug_loc     00000000 
00001f71 l       .debug_loc     00000000 
00001f95 l       .debug_loc     00000000 
00001fbc l       .debug_loc     00000000 
00001fde l       .debug_loc     00000000 
00002000 l       .debug_loc     00000000 
00002022 l       .debug_loc     00000000 
0000203e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000b93 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000360 l       .debug_ranges  00000000 
0000031c l       .debug_str     00000000 
000002b9 l       .debug_str     00000000 
000002c0 l       .debug_str     00000000 
000002ca l       .debug_str     00000000 
000002d5 l       .debug_str     00000000 
000002e0 l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
000002ff l       .debug_str     00000000 
0000030e l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001c9 l       .debug_str     00000000 
000001e2 l       .debug_str     00000000 
00000263 l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000239 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
000002a2 l       .debug_str     00000000 
00000276 l       .debug_str     00000000 
0000028c l       .debug_str     00000000 
00000c1e l       .debug_str     00000000 
00000bb4 l       .debug_str     00000000 
00000bce l       .debug_str     00000000 
00000be5 l       .debug_str     00000000 
00000bfc l       .debug_str     00000000 
00000c35 l       .debug_str     00000000 
0000042c l       .debug_str     00000000 
0000041e l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000c3f l       .debug_str     00000000 
00000ecf l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
0000077d l       .debug_str     00000000 
0000169e l       .debug_str     00000000 
000003e7 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
00000c51 l       .debug_str     00000000 
000003f9 l       .debug_str     00000000 
00000c5e l       .debug_str     00000000 
00000d9c l       .debug_str     00000000 
000005d5 l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
000003d1 l       .debug_str     00000000 
00000c63 l       .debug_str     00000000 
00000c72 l       .debug_str     00000000 
00000c7a l       .debug_str     00000000 
00000c7e l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
0000096c l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000956 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
00000ca7 l       .debug_str     00000000 
000003b4 l       .debug_str     00000000 
000003a8 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
0000089c l       .debug_str     00000000 
00000dfe l       .debug_str     00000000 
0000128e l       .debug_str     00000000 
00000200 l       .debug_ranges  00000000 
00000218 l       .debug_ranges  00000000 
00000cb7 l       .debug_str     00000000 
00000cc4 l       .debug_str     00000000 
00000cc9 l       .debug_str     00000000 
00000cd6 l       .debug_str     00000000 
00000ce9 l       .debug_str     00000000 
00000ce1 l       .debug_str     00000000 
00000462 l       .debug_str     00000000 
00000cdc l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
00000d06 l       .debug_str     00000000 
00000cef l       .debug_str     00000000 
00000d0f l       .debug_str     00000000 
00000d17 l       .debug_str     00000000 
00000d20 l       .debug_str     00000000 
00000d2d l       .debug_str     00000000 
00000e16 l       .debug_str     00000000 
00000e3a l       .debug_str     00000000 
00000230 l       .debug_ranges  00000000 
00000248 l       .debug_ranges  00000000 
0000059a l       .debug_str     00000000 
00000e2d l       .debug_str     00000000 
00000376 l       .debug_str     00000000 
000002c0 l       .debug_ranges  00000000 
00000d36 l       .debug_str     00000000 
00000d45 l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
00000922 l       .debug_str     00000000 
000008e4 l       .debug_str     00000000 
0000090b l       .debug_str     00000000 
0000093f l       .debug_str     00000000 
0000097f l       .debug_str     00000000 
00000d4c l       .debug_str     00000000 
00000d55 l       .debug_str     00000000 
000004ed l       .debug_str     00000000 
0000056b l       .debug_str     00000000 
00000e54 l       .debug_str     00000000 
00000260 l       .debug_ranges  00000000 
00000278 l       .debug_ranges  00000000 
00000290 l       .debug_ranges  00000000 
000002a8 l       .debug_ranges  00000000 
00000572 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
00000d5c l       .debug_str     00000000 
00000d69 l       .debug_str     00000000 
00000d6e l       .debug_str     00000000 
00000d74 l       .debug_str     00000000 
00000d86 l       .debug_str     00000000 
00000d81 l       .debug_str     00000000 
000005be l       .debug_str     00000000 
0000048a l       .debug_str     00000000 
000017a9 l       .debug_str     00000000 
00000d7a l       .debug_str     00000000 
00000dc5 l       .debug_str     00000000 
00000270 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
00000de7 l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000773 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
00000484 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000434 l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
0000046b l       .debug_str     00000000 
00000d8e l       .debug_str     00000000 
00000da0 l       .debug_str     00000000 
00000c2b l       .debug_str     00000000 
00000719 l       .debug_str     00000000 
0000070a l       .debug_str     00000000 
00000da6 l       .debug_str     00000000 
00000dbf l       .debug_str     00000000 
00000dcd l       .debug_str     00000000 
00000de1 l       .debug_str     00000000 
00000ded l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
00000e5c l       .debug_str     00000000 
000005b5 l       .debug_str     00000000 
00000348 l       .debug_ranges  00000000 
000002e0 l       .debug_ranges  00000000 
000002f8 l       .debug_ranges  00000000 
00000310 l       .debug_ranges  00000000 
00000330 l       .debug_ranges  00000000 
00000e61 l       .debug_str     00000000 
00000e3e l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000504 l       .debug_str     00000000 
0000050e l       .debug_str     00000000 
00000527 l       .debug_str     00000000 
00000533 l       .debug_str     00000000 
00000538 l       .debug_str     00000000 
0000053e l       .debug_str     00000000 
00000543 l       .debug_str     00000000 
00000554 l       .debug_str     00000000 
00000559 l       .debug_str     00000000 
00000230 l       .debug_frame   00000000 
e0000440 l       .text  00000000 
e0000598 l       .text  00000000 
e000061a l       .text  00000000 
e0000636 l       .text  00000000 
e000066e l       .text  00000000 
e0000858 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0000858 l       .text  00000000 
e0000858 l       .text  00000000 
e0000858 l       .text  00000000 
e000085a l       .text  00000000 
e000085c l       .text  00000000 
e0000862 l       .text  00000000 
e0000866 l       .text  00000000 
e000086a l       .text  00000000 
e000086e l       .text  00000000 
e000086e l       .text  00000000 
e0000878 l       .text  00000000 
e000087a l       .text  00000000 
e000087a l       .text  00000000 
e000087c l       .text  00000000 
e000087c l       .text  00000000 
e0000882 l       .text  00000000 
e0000882 l       .text  00000000 
e000088c l       .text  00000000 
e000088e l       .text  00000000 
e000088e l       .text  00000000 
e00008a2 l       .text  00000000 
e00008a2 l       .text  00000000 
e00008a4 l       .text  00000000 
e00008a4 l       .text  00000000 
e00008ae l       .text  00000000 
e00008b0 l       .text  00000000 
e00008b0 l       .text  00000000 
e00008c4 l       .text  00000000 
e00008c4 l       .text  00000000 
e00008c6 l       .text  00000000 
e0001984 l     O .logs.fields   00000014 test_status_set.kLogFields.2
e00008c6 l       .text  00000000 
e00008d2 l       .text  00000000 
e00008d2 l       .text  00000000 
e00008dc l       .text  00000000 
e00008de l       .text  00000000 
e00008de l       .text  00000000 
e0001970 l     O .logs.fields   00000014 test_status_set.kLogFields
e00008e6 l       .text  00000000 
e00008f2 l       .text  00000000 
e00008f2 l       .text  00000000 
e00008fc l       .text  00000000 
e00008fe l       .text  00000000 
e00008fe l       .text  00000000 
e0000906 l       .text  00000000 
e0000906 l       .text  00000000 
e0000906 l       .text  00000000 
00002065 l       .debug_loc     00000000 
00002083 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000e67 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000004cb l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
0000039c l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
0000014c l       .debug_str     00000000 
00000109 l       .debug_str     00000000 
00000121 l       .debug_str     00000000 
000010d8 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
0000013a l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000105 l       .debug_str     00000000 
000000bf l       .debug_str     00000000 
000000d0 l       .debug_str     00000000 
000000e1 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
0000033c l       .debug_str     00000000 
00000355 l       .debug_str     00000000 
00000367 l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
0000038a l       .debug_str     00000000 
00000e95 l       .debug_str     00000000 
00000ebc l       .debug_str     00000000 
00000eae l       .debug_str     00000000 
000003e7 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
0000077d l       .debug_str     00000000 
0000089c l       .debug_str     00000000 
0000169e l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
0000049f l       .debug_str     00000000 
00000ed4 l       .debug_str     00000000 
000002d8 l       .debug_frame   00000000 
e0000906 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
e0000906 l       .text  00000000 
e0000906 l       .text  00000000 
e0000906 l       .text  00000000 
e0000906 l       .text  00000000 
e000090a l       .text  00000000 
e000090a l       .text  00000000 
e000090c l       .text  00000000 
e000090c l       .text  00000000 
00002096 l       .debug_loc     00000000 
000020b1 l       .debug_loc     00000000 
000020d8 l       .debug_loc     00000000 
000020ff l       .debug_loc     00000000 
0000211b l       .debug_loc     00000000 
00002148 l       .debug_loc     00000000 
0000216f l       .debug_loc     00000000 
00002196 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000eda l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000398 l       .debug_ranges  00000000 
00000d06 l       .debug_str     00000000 
00000cef l       .debug_str     00000000 
00000ef7 l       .debug_str     00000000 
00000f08 l       .debug_str     00000000 
00000f12 l       .debug_str     00000000 
00000f1d l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00000f4b l       .debug_str     00000000 
00000f6e l       .debug_str     00000000 
00000f73 l       .debug_str     00000000 
00000f31 l       .debug_str     00000000 
00000f2a l       .debug_str     00000000 
00000f38 l       .debug_str     00000000 
00000ed4 l       .debug_str     00000000 
00000f5c l       .debug_str     00000000 
00000304 l       .debug_frame   00000000 
e000090c l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
e000090c l       .text  00000000 
e000090c l       .text  00000000 
e000090c l       .text  00000000 
e000090e l       .text  00000000 
e0000914 l       .text  00000000 
e0000916 l       .text  00000000 
e0000924 l       .text  00000000 
e000092e l       .text  00000000 
e0000934 l       .text  00000000 
e0000934 l       .text  00000000 
e0000936 l       .text  00000000 
e000093a l       .text  00000000 
e000093a l       .text  00000000 
e0000944 l       .text  00000000 
e0000944 l       .text  00000000 
e0000946 l       .text  00000000 
e000094a l       .text  00000000 
e000094a l       .text  00000000 
e000094c l       .text  00000000 
e000094c l       .text  00000000 
e000094e l       .text  00000000 
e000094e l       .text  00000000 
e0000952 l       .text  00000000 
e0000952 l       .text  00000000 
e0000958 l       .text  00000000 
e0000966 l       .text  00000000 
e0000966 l       .text  00000000 
e00018ec l     O .bss   00000002 base_log_internal_core.global_log_counter
e000096e l       .text  00000000 
e000097a l       .text  00000000 
e000097c l       .text  00000000 
e0000986 l       .text  00000000 
e0000986 l       .text  00000000 
e0000992 l       .text  00000000 
e0000992 l       .text  00000000 
e0000994 l       .text  00000000 
e0000996 l       .text  00000000 
e000099a l       .text  00000000 
e000099a l       .text  00000000 
e00009a4 l       .text  00000000 
e00009a4 l       .text  00000000 
e00009ae l       .text  00000000 
e00009ae l       .text  00000000 
e00009ae l       .text  00000000 
e00009ae l       .text  00000000 
e00009ae l       .text  00000000 
e00009b0 l       .text  00000000 
e00009b6 l       .text  00000000 
e00009b6 l       .text  00000000 
e00009c0 l       .text  00000000 
e00009c0 l       .text  00000000 
e00009c6 l       .text  00000000 
e00009c6 l       .text  00000000 
e00009ca l       .text  00000000 
e00009ca l       .text  00000000 
e00009cc l       .text  00000000 
e00009cc l       .text  00000000 
e00009ce l       .text  00000000 
e00009ce l       .text  00000000 
e00009d0 l       .text  00000000 
e00009d4 l       .text  00000000 
e00009d8 l       .text  00000000 
e00009da l       .text  00000000 
e00009da l       .text  00000000 
e00009dc l       .text  00000000 
e00009dc l       .text  00000000 
e00009de l       .text  00000000 
e00009de l       .text  00000000 
e00009e2 l       .text  00000000 
e00009e2 l       .text  00000000 
000021b2 l       .debug_loc     00000000 
000021da l       .debug_loc     00000000 
000021f5 l       .debug_loc     00000000 
00002231 l       .debug_loc     00000000 
0000224d l       .debug_loc     00000000 
00002268 l       .debug_loc     00000000 
00002283 l       .debug_loc     00000000 
0000229e l       .debug_loc     00000000 
000022dc l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000f79 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000003c0 l       .debug_ranges  00000000 
000004b4 l       .debug_str     00000000 
00000f95 l       .debug_str     00000000 
00000fe3 l       .debug_str     00000000 
00000fe7 l       .debug_str     00000000 
00000ff5 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000719 l       .debug_str     00000000 
0000070a l       .debug_str     00000000 
00000105 l       .debug_str     00000000 
000000bf l       .debug_str     00000000 
000000d0 l       .debug_str     00000000 
000000e1 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
00000c35 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000fa8 l       .debug_str     00000000 
00000109 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000fbb l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
00000fc2 l       .debug_str     00000000 
00000fca l       .debug_str     00000000 
0000046b l       .debug_str     00000000 
00000fd6 l       .debug_str     00000000 
0000089c l       .debug_str     00000000 
0000077d l       .debug_str     00000000 
0000169e l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000003e7 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
0000049f l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000fff l       .debug_str     00000000 
00000376 l       .debug_str     00000000 
0000014c l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000121 l       .debug_str     00000000 
000010d8 l       .debug_str     00000000 
0000013a l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000634 l       .debug_str     00000000 
00000364 l       .debug_frame   00000000 
e00009ae l       .text  00000000 
e00009e2 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
e00009e2 l     F .text  00000004 base_dev_null
e00018f0 l     O .bss   00000008 base_stdout
e00009e2 l       .text  00000000 
e00009e2 l       .text  00000000 
e00009e2 l       .text  00000000 
e00009e4 l       .text  00000000 
e00009e4 l       .text  00000000 
e00009e6 l       .text  00000000 
e00009e6 l       .text  00000000 
e00009e6 l       .text  00000000 
e00009e6 l       .text  00000000 
e00009e6 l       .text  00000000 
e00009e8 l       .text  00000000 
e00009ea l       .text  00000000 
e00009f8 l       .text  00000000 
e0000a00 l       .text  00000000 
e0000a00 l       .text  00000000 
e0000a06 l       .text  00000000 
e0000a06 l       .text  00000000 
e0000a08 l       .text  00000000 
e0000a08 l       .text  00000000 
e0000a0a l       .text  00000000 
e0000a0a l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a10 l       .text  00000000 
e0000a12 l       .text  00000000 
e0000a12 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a20 l       .text  00000000 
e0000a26 l       .text  00000000 
e0000a26 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a2e l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a34 l       .text  00000000 
e0000a4e l       .text  00000000 
e0000a50 l       .text  00000000 
e0000a52 l       .text  00000000 
e0000a54 l       .text  00000000 
e0000a56 l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a5a l       .text  00000000 
e0000a62 l       .text  00000000 
e0000a62 l       .text  00000000 
e0000a64 l       .text  00000000 
e0000a64 l       .text  00000000 
e0000a68 l       .text  00000000 
e0000a6c l       .text  00000000 
e0000a80 l       .text  00000000 
e0000a80 l       .text  00000000 
e0000a8a l       .text  00000000 
e0000a8e l       .text  00000000 
e0000a92 l       .text  00000000 
e0000a94 l       .text  00000000 
e0000a96 l       .text  00000000 
e0000a96 l       .text  00000000 
e0000a98 l       .text  00000000 
e0000a9a l       .text  00000000 
e0000aa0 l       .text  00000000 
e0000aa0 l       .text  00000000 
e0000aa2 l       .text  00000000 
e0000aa2 l       .text  00000000 
e0000aa6 l       .text  00000000 
e0000aa6 l       .text  00000000 
e0000ab2 l       .text  00000000 
e0000ab6 l       .text  00000000 
e0000ab6 l       .text  00000000 
e0000ac2 l       .text  00000000 
e0000ac2 l       .text  00000000 
e0000aca l       .text  00000000 
e0000aca l       .text  00000000 
e0000ace l       .text  00000000 
e0000ace l       .text  00000000 
e0000adc l       .text  00000000 
e0000adc l       .text  00000000 
e0000ae0 l       .text  00000000 
e0000ae8 l       .text  00000000 
e0000aec l       .text  00000000 
e0000aec l       .text  00000000 
e0000af0 l       .text  00000000 
e0000af6 l       .text  00000000 
e0000afa l       .text  00000000 
e0000afc l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b04 l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0e l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b24 l       .text  00000000 
e0000b2a l       .text  00000000 
e0000b2e l       .text  00000000 
e0000b32 l       .text  00000000 
e0000b32 l       .text  00000000 
e0000b3a l       .text  00000000 
e0000b3c l       .text  00000000 
e0000b4a l       .text  00000000 
e0000b4a l       .text  00000000 
e0000b4e l       .text  00000000 
e0000b5a l       .text  00000000 
e0000b5a l       .text  00000000 
e0000b5e l       .text  00000000 
e0000b5e l       .text  00000000 
e0000b6c l       .text  00000000 
e0000b6c l       .text  00000000 
e0000b6e l       .text  00000000 
e0000b72 l       .text  00000000 
e0000b72 l       .text  00000000 
e0000b76 l       .text  00000000 
e0001680 l     O .rodata        00000010 kDigitsLow
e0000b88 l       .text  00000000 
e0000b88 l       .text  00000000 
e0000b90 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000ba2 l       .text  00000000 
e0000ba2 l       .text  00000000 
e0000ba6 l       .text  00000000 
e0000ba6 l       .text  00000000 
e0000bb0 l       .text  00000000 
e0000bb0 l       .text  00000000 
e0000bb8 l       .text  00000000 
e0000bb8 l       .text  00000000 
e0000bbc l       .text  00000000 
e00016ad l     O .rodata        00000010 kDigitsHigh
e0000bc6 l       .text  00000000 
e0000bc6 l       .text  00000000 
e0000bd0 l       .text  00000000 
e0000bd0 l       .text  00000000 
e0000bd4 l       .text  00000000 
e0000bde l       .text  00000000 
e0000bde l       .text  00000000 
e0000be2 l       .text  00000000 
e0000bec l       .text  00000000 
e0000bec l       .text  00000000 
e0000bf4 l       .text  00000000 
e0000bf4 l       .text  00000000 
e0000bf8 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c0c l       .text  00000000 
e0000c10 l       .text  00000000 
e0000c14 l       .text  00000000 
e0000c14 l       .text  00000000 
e0000c20 l       .text  00000000 
e0000c20 l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c2e l       .text  00000000 
e0000c32 l       .text  00000000 
e0000c32 l       .text  00000000 
e0000c34 l       .text  00000000 
e0000c34 l       .text  00000000 
e0000c38 l       .text  00000000 
e0000c38 l       .text  00000000 
e0000c3c l       .text  00000000 
e0000c46 l       .text  00000000 
e0000c46 l       .text  00000000 
e0000c4a l       .text  00000000 
e0000c56 l       .text  00000000 
e0000c56 l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c68 l       .text  00000000 
e0000c68 l       .text  00000000 
e0000c72 l       .text  00000000 
e0000c72 l       .text  00000000 
e0000c76 l       .text  00000000 
e0000c76 l       .text  00000000 
e0000fa4 l     F .text  0000007e write_digits
e0000c8c l       .text  00000000 
e0000c8c l       .text  00000000 
e0000c92 l       .text  00000000 
e0000c92 l       .text  00000000 
e0000c9c l       .text  00000000 
e0000c9c l       .text  00000000 
e0000c9e l       .text  00000000 
e0000ca8 l       .text  00000000 
e0000ca8 l       .text  00000000 
e0000cb2 l       .text  00000000 
e0000cb2 l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb6 l       .text  00000000 
e0000cb6 l       .text  00000000 
e0000cba l       .text  00000000 
e0000cba l       .text  00000000 
e0000cbe l       .text  00000000 
e0000cc0 l       .text  00000000 
e0000cc4 l       .text  00000000 
e0000cc4 l       .text  00000000 
e0000cc8 l       .text  00000000 
e0000cc8 l       .text  00000000 
e0000cd4 l       .text  00000000 
e0000cd4 l       .text  00000000 
e0000cd6 l       .text  00000000 
e0000cd6 l       .text  00000000 
e0000cd8 l       .text  00000000 
e0000cd8 l       .text  00000000 
e0000ce0 l       .text  00000000 
e0000ce0 l       .text  00000000 
e0000ce4 l       .text  00000000 
e0000ce4 l       .text  00000000 
e0000cf2 l       .text  00000000 
e0000cf2 l       .text  00000000 
e0000cf4 l       .text  00000000 
e0000d02 l       .text  00000000 
e0000d02 l       .text  00000000 
e0000d06 l       .text  00000000 
e0000d06 l       .text  00000000 
e0000d0a l       .text  00000000 
e0000d0a l       .text  00000000 
e0000d18 l       .text  00000000 
e0000d18 l       .text  00000000 
e0000d1c l       .text  00000000 
e0000d1c l       .text  00000000 
e0000d24 l       .text  00000000 
e0000d24 l       .text  00000000 
e0000d26 l       .text  00000000 
e0000d26 l       .text  00000000 
e0000d28 l       .text  00000000 
e0000d28 l       .text  00000000 
e0000d3c l       .text  00000000 
e0000d3c l       .text  00000000 
e0000d3e l       .text  00000000 
e0000d4c l       .text  00000000 
e0000d4c l       .text  00000000 
e0000d4e l       .text  00000000 
e0000d4e l       .text  00000000 
e0000d50 l       .text  00000000 
e0000d58 l       .text  00000000 
e0000d5c l       .text  00000000 
e0000d5e l       .text  00000000 
e0000d68 l       .text  00000000 
e0000d68 l       .text  00000000 
e0000d6c l       .text  00000000 
e0000d76 l       .text  00000000 
e0000d76 l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d9c l       .text  00000000 
e0000d9c l       .text  00000000 
e0000da0 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000db2 l       .text  00000000 
e0000db2 l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dc0 l       .text  00000000 
e0000dc8 l       .text  00000000 
e0000dc8 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd4 l       .text  00000000 
e0000dd4 l       .text  00000000 
e0000dd8 l       .text  00000000 
e0000de2 l       .text  00000000 
e0000de2 l       .text  00000000 
e0000dea l       .text  00000000 
e0000dea l       .text  00000000 
e0000dee l       .text  00000000 
e0000df6 l       .text  00000000 
e0000df6 l       .text  00000000 
e0000ec0 l     F .text  000000e4 hex_dump
e0000e00 l       .text  00000000 
e0000e02 l       .text  00000000 
e00016bd l     O .rodata        0000000f kUnknownSpec
e0000e02 l       .text  00000000 
e0000e0c l       .text  00000000 
e0000e0c l       .text  00000000 
e0000e10 l       .text  00000000 
e0000e12 l       .text  00000000 
e0000e12 l       .text  00000000 
e0000e16 l       .text  00000000 
e0000e1c l       .text  00000000 
e0000e1c l       .text  00000000 
e0000e20 l       .text  00000000 
e0000e2c l       .text  00000000 
e0000e2c l       .text  00000000 
e0000e2e l       .text  00000000 
e0000e2e l       .text  00000000 
e0000e42 l       .text  00000000 
e0000e42 l       .text  00000000 
e0000e46 l       .text  00000000 
e0000e54 l       .text  00000000 
e0000e54 l       .text  00000000 
e0000e58 l       .text  00000000 
e0000e58 l       .text  00000000 
e0000e5e l       .text  00000000 
e0000e5e l       .text  00000000 
e0000e60 l       .text  00000000 
e0000e60 l       .text  00000000 
e0000e62 l       .text  00000000 
e0000e62 l       .text  00000000 
e0000e6a l       .text  00000000 
e0000e6c l       .text  00000000 
e0000e6e l       .text  00000000 
e0000e74 l       .text  00000000 
e0000e74 l       .text  00000000 
e0000e80 l       .text  00000000 
e0001690 l     O .rodata        00000011 kErrorNul
e0000e80 l       .text  00000000 
e0000e8a l       .text  00000000 
e0000e8a l       .text  00000000 
e0000e8e l       .text  00000000 
e0000e92 l       .text  00000000 
e0000e94 l       .text  00000000 
e0000e94 l       .text  00000000 
e0000ea4 l       .text  00000000 
e0000ea8 l       .text  00000000 
e0000eb4 l       .text  00000000 
e00016a1 l     O .rodata        0000000c kErrorTooWide
e0000eb4 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000eda l       .text  00000000 
e0000edc l       .text  00000000 
e0000ede l       .text  00000000 
e0000ee0 l       .text  00000000 
e0000ee2 l       .text  00000000 
e0000ee6 l       .text  00000000 
e0000ee6 l       .text  00000000 
e0000eea l       .text  00000000 
e0000eee l       .text  00000000 
e0000eee l       .text  00000000 
e0000ef8 l       .text  00000000 
e0000ef8 l       .text  00000000 
e0000efa l       .text  00000000 
e0000efc l       .text  00000000 
e0000f02 l       .text  00000000 
e0000f02 l       .text  00000000 
e0000f06 l       .text  00000000 
e0000f0a l       .text  00000000 
e0000f0a l       .text  00000000 
e0000f12 l       .text  00000000 
e0000f12 l       .text  00000000 
e0000f14 l       .text  00000000 
e0000f16 l       .text  00000000 
e0000f16 l       .text  00000000 
e0000f18 l       .text  00000000 
e0000f18 l       .text  00000000 
e0000f1e l       .text  00000000 
e0000f1e l       .text  00000000 
e0000f20 l       .text  00000000 
e0000f20 l       .text  00000000 
e0000f24 l       .text  00000000 
e0000f28 l       .text  00000000 
e0000f2e l       .text  00000000 
e0000f2e l       .text  00000000 
e0000f34 l       .text  00000000 
e0000f3c l       .text  00000000 
e0000f3c l       .text  00000000 
e0000f3e l       .text  00000000 
e0000f42 l       .text  00000000 
e0000f46 l       .text  00000000 
e0000f4c l       .text  00000000 
e0000f50 l       .text  00000000 
e0000f54 l       .text  00000000 
e0000f56 l       .text  00000000 
e0000f5c l       .text  00000000 
e0000f5e l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f6c l       .text  00000000 
e0000f70 l       .text  00000000 
e0000f70 l       .text  00000000 
e0000f72 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f76 l       .text  00000000 
e0000f78 l       .text  00000000 
e0000f7c l       .text  00000000 
e0000f7c l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f84 l       .text  00000000 
e0000f84 l       .text  00000000 
e0000f86 l       .text  00000000 
e0000f8e l       .text  00000000 
e0000f90 l       .text  00000000 
e0000f94 l       .text  00000000 
e0000f96 l       .text  00000000 
e0000f98 l       .text  00000000 
e0000f9a l       .text  00000000 
e0000fa4 l       .text  00000000 
e0000fa4 l       .text  00000000 
e0000fa4 l       .text  00000000 
e0000fa4 l       .text  00000000 
e0000fa4 l       .text  00000000 
e0000fa6 l       .text  00000000 
e0000fa8 l       .text  00000000 
e0000faa l       .text  00000000 
e0000faa l       .text  00000000 
e0000fac l       .text  00000000 
e0000fae l       .text  00000000 
e0000fb2 l       .text  00000000 
e0000fb2 l       .text  00000000 
e0000fb4 l       .text  00000000 
e0000fb4 l       .text  00000000 
e0000fc0 l       .text  00000000 
e0000fc0 l       .text  00000000 
e0000fc2 l       .text  00000000 
e0000fc6 l       .text  00000000 
e0000fce l       .text  00000000 
e0000fce l       .text  00000000 
e0000fd0 l       .text  00000000 
e0000fd4 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fda l       .text  00000000 
e0000fda l       .text  00000000 
e0000fde l       .text  00000000 
e0000fe4 l       .text  00000000 
e0000fe4 l       .text  00000000 
e0000fe6 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0000fea l       .text  00000000 
e0000fee l       .text  00000000 
e0000ff2 l       .text  00000000 
e0000ff6 l       .text  00000000 
e0000ff6 l       .text  00000000 
e0001000 l       .text  00000000 
e0001004 l       .text  00000000 
e0001006 l       .text  00000000 
e000100a l       .text  00000000 
e000100e l       .text  00000000 
e0001010 l       .text  00000000 
e0001012 l       .text  00000000 
e0001014 l       .text  00000000 
e0001014 l       .text  00000000 
e000101a l       .text  00000000 
e000101c l       .text  00000000 
e000101c l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
000022f9 l       .debug_loc     00000000 
00002325 l       .debug_loc     00000000 
00002340 l       .debug_loc     00000000 
00002366 l       .debug_loc     00000000 
00002392 l       .debug_loc     00000000 
000023c3 l       .debug_loc     00000000 
000023f4 l       .debug_loc     00000000 
00002430 l       .debug_loc     00000000 
00002461 l       .debug_loc     00000000 
00002488 l       .debug_loc     00000000 
000024b9 l       .debug_loc     00000000 
000024d4 l       .debug_loc     00000000 
000024f0 l       .debug_loc     00000000 
0000250b l       .debug_loc     00000000 
00002531 l       .debug_loc     00000000 
00002557 l       .debug_loc     00000000 
00002593 l       .debug_loc     00000000 
0000269e l       .debug_loc     00000000 
000027f8 l       .debug_loc     00000000 
000028f8 l       .debug_loc     00000000 
00002a03 l       .debug_loc     00000000 
00002a23 l       .debug_loc     00000000 
00002a49 l       .debug_loc     00000000 
00002a79 l       .debug_loc     00000000 
00002cb1 l       .debug_loc     00000000 
00002ccd l       .debug_loc     00000000 
00002ce8 l       .debug_loc     00000000 
00002e5d l       .debug_loc     00000000 
00002fad l       .debug_loc     00000000 
000030c1 l       .debug_loc     00000000 
000030e7 l       .debug_loc     00000000 
00003102 l       .debug_loc     00000000 
0000311d l       .debug_loc     00000000 
00003138 l       .debug_loc     00000000 
00003153 l       .debug_loc     00000000 
0000316e l       .debug_loc     00000000 
0000318a l       .debug_loc     00000000 
000031a5 l       .debug_loc     00000000 
000031c0 l       .debug_loc     00000000 
000031db l       .debug_loc     00000000 
000031f6 l       .debug_loc     00000000 
00003228 l       .debug_loc     00000000 
0000325b l       .debug_loc     00000000 
00003276 l       .debug_loc     00000000 
000032c9 l       .debug_loc     00000000 
000032fc l       .debug_loc     00000000 
00003317 l       .debug_loc     00000000 
00003332 l       .debug_loc     00000000 
0000334d l       .debug_loc     00000000 
00003368 l       .debug_loc     00000000 
00003383 l       .debug_loc     00000000 
0000339e l       .debug_loc     00000000 
000033b9 l       .debug_loc     00000000 
000033d4 l       .debug_loc     00000000 
000033ef l       .debug_loc     00000000 
0000340a l       .debug_loc     00000000 
00003425 l       .debug_loc     00000000 
00003441 l       .debug_loc     00000000 
00003460 l       .debug_loc     00000000 
0000347b l       .debug_loc     00000000 
000034ac l       .debug_loc     00000000 
000034d2 l       .debug_loc     00000000 
00003503 l       .debug_loc     00000000 
00003534 l       .debug_loc     00000000 
0000354f l       .debug_loc     00000000 
0000356a l       .debug_loc     00000000 
00003585 l       .debug_loc     00000000 
000035b6 l       .debug_loc     00000000 
000035d1 l       .debug_loc     00000000 
000035ec l       .debug_loc     00000000 
00003608 l       .debug_loc     00000000 
0000362e l       .debug_loc     00000000 
0000365f l       .debug_loc     00000000 
0000367a l       .debug_loc     00000000 
00003695 l       .debug_loc     00000000 
000036bb l       .debug_loc     00000000 
000036e1 l       .debug_loc     00000000 
000036fc l       .debug_loc     00000000 
00003717 l       .debug_loc     00000000 
00003732 l       .debug_loc     00000000 
0000374d l       .debug_loc     00000000 
0000376c l       .debug_loc     00000000 
00003787 l       .debug_loc     00000000 
000037a2 l       .debug_loc     00000000 
000037be l       .debug_loc     00000000 
000037d9 l       .debug_loc     00000000 
000037f4 l       .debug_loc     00000000 
00003813 l       .debug_loc     00000000 
00003839 l       .debug_loc     00000000 
0000386a l       .debug_loc     00000000 
000038c2 l       .debug_loc     00000000 
0000390c l       .debug_loc     00000000 
0000395e l       .debug_loc     00000000 
0000399b l       .debug_loc     00000000 
000039d7 l       .debug_loc     00000000 
00003a41 l       .debug_loc     00000000 
00003a8a l       .debug_loc     00000000 
00003af4 l       .debug_loc     00000000 
00003b1a l       .debug_loc     00000000 
00003b35 l       .debug_loc     00000000 
00003b50 l       .debug_loc     00000000 
00003b77 l       .debug_loc     00000000 
00003bbf l       .debug_loc     00000000 
00003be5 l       .debug_loc     00000000 
00003c0b l       .debug_loc     00000000 
00003c31 l       .debug_loc     00000000 
00003c4c l       .debug_loc     00000000 
00003c7c l       .debug_loc     00000000 
00003ca2 l       .debug_loc     00000000 
00003cd4 l       .debug_loc     00000000 
00003d12 l       .debug_loc     00000000 
00003d41 l       .debug_loc     00000000 
00003d5c l       .debug_loc     00000000 
00003d8f l       .debug_loc     00000000 
00003daa l       .debug_loc     00000000 
00003de6 l       .debug_loc     00000000 
00003e0c l       .debug_loc     00000000 
00003e27 l       .debug_loc     00000000 
00003e42 l       .debug_loc     00000000 
00003e5d l       .debug_loc     00000000 
00003eb3 l       .debug_loc     00000000 
00003ee2 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000100a l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000510 l       .debug_ranges  00000000 
00001028 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
00001047 l       .debug_str     00000000 
0000105f l       .debug_str     00000000 
00001053 l       .debug_str     00000000 
00000cdc l       .debug_str     00000000 
00001367 l       .debug_str     00000000 
0000046b l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
0000106d l       .debug_str     00000000 
00001077 l       .debug_str     00000000 
000013bf l       .debug_str     00000000 
00001085 l       .debug_str     00000000 
00000907 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
00000270 l       .debug_str     00000000 
00001264 l       .debug_str     00000000 
0000077d l       .debug_str     00000000 
00001441 l       .debug_str     00000000 
000013ec l       .debug_str     00000000 
0000128e l       .debug_str     00000000 
00001451 l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
0000108f l       .debug_str     00000000 
0000109b l       .debug_str     00000000 
000010a8 l       .debug_str     00000000 
000010f7 l       .debug_str     00000000 
000010e6 l       .debug_str     00000000 
000010bf l       .debug_str     00000000 
000010ce l       .debug_str     00000000 
000010dd l       .debug_str     00000000 
0000110a l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
000002b9 l       .debug_str     00000000 
000002c0 l       .debug_str     00000000 
000002ca l       .debug_str     00000000 
000002d5 l       .debug_str     00000000 
000002e0 l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
000002ff l       .debug_str     00000000 
0000030e l       .debug_str     00000000 
00001115 l       .debug_str     00000000 
0000111e l       .debug_str     00000000 
00001129 l       .debug_str     00000000 
00001131 l       .debug_str     00000000 
0000113d l       .debug_str     00000000 
00001149 l       .debug_str     00000000 
00001156 l       .debug_str     00000000 
00001166 l       .debug_str     00000000 
00001177 l       .debug_str     00000000 
00001184 l       .debug_str     00000000 
0000118d l       .debug_str     00000000 
00001197 l       .debug_str     00000000 
000011a1 l       .debug_str     00000000 
000011ac l       .debug_str     00000000 
000011b6 l       .debug_str     00000000 
000011c1 l       .debug_str     00000000 
00000469 l       .debug_str     00000000 
0000042c l       .debug_str     00000000 
0000041e l       .debug_str     00000000 
000011d8 l       .debug_str     00000000 
000011cf l       .debug_str     00000000 
000003d1 l       .debug_str     00000000 
000003e7 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
000011ee l       .debug_str     00000000 
00000773 l       .debug_str     00000000 
000011e3 l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
00001315 l       .debug_str     00000000 
00001202 l       .debug_str     00000000 
00001323 l       .debug_str     00000000 
000011d3 l       .debug_str     00000000 
00001334 l       .debug_str     00000000 
00000376 l       .debug_str     00000000 
00001212 l       .debug_str     00000000 
00000fd6 l       .debug_str     00000000 
0000013a l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000634 l       .debug_str     00000000 
00000fca l       .debug_str     00000000 
000003d8 l       .debug_ranges  00000000 
00001342 l       .debug_str     00000000 
000013cc l       .debug_str     00000000 
00001407 l       .debug_str     00000000 
000004b8 l       .debug_ranges  00000000 
000012a8 l       .debug_str     00000000 
000003f0 l       .debug_ranges  00000000 
00000418 l       .debug_ranges  00000000 
00000438 l       .debug_ranges  00000000 
00000450 l       .debug_ranges  00000000 
00000488 l       .debug_ranges  00000000 
00000470 l       .debug_ranges  00000000 
000004a0 l       .debug_ranges  00000000 
0000122c l       .debug_str     00000000 
00001242 l       .debug_str     00000000 
00000f93 l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
0000124b l       .debug_str     00000000 
00001289 l       .debug_str     00000000 
00001276 l       .debug_str     00000000 
00001253 l       .debug_str     00000000 
000017a9 l       .debug_str     00000000 
0000126c l       .debug_str     00000000 
00001292 l       .debug_str     00000000 
000012a4 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000c35 l       .debug_str     00000000 
000015c7 l       .debug_str     00000000 
000012b3 l       .debug_str     00000000 
000012ad l       .debug_str     00000000 
000012ba l       .debug_str     00000000 
000012c2 l       .debug_str     00000000 
00000f73 l       .debug_str     00000000 
000012c6 l       .debug_str     00000000 
000006aa l       .debug_str     00000000 
000015e5 l       .debug_str     00000000 
000012ca l       .debug_str     00000000 
000013b6 l       .debug_str     00000000 
00001656 l       .debug_str     00000000 
00001436 l       .debug_str     00000000 
0000142d l       .debug_str     00000000 
00001448 l       .debug_str     00000000 
00000ae2 l       .debug_str     00000000 
00001350 l       .debug_str     00000000 
0000135e l       .debug_str     00000000 
000013d6 l       .debug_str     00000000 
000012d9 l       .debug_str     00000000 
0000136c l       .debug_str     00000000 
000012e0 l       .debug_str     00000000 
000010f3 l       .debug_str     00000000 
00001379 l       .debug_str     00000000 
000013a3 l       .debug_str     00000000 
000013f3 l       .debug_str     00000000 
000010d8 l       .debug_str     00000000 
000004f8 l       .debug_ranges  00000000 
000013e6 l       .debug_str     00000000 
00001402 l       .debug_str     00000000 
00001415 l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
000004d8 l       .debug_ranges  00000000 
000013df l       .debug_str     00000000 
00001424 l       .debug_str     00000000 
00000cd1 l       .debug_str     00000000 
000012f2 l       .debug_str     00000000 
00001306 l       .debug_str     00000000 
00001386 l       .debug_str     00000000 
00001395 l       .debug_str     00000000 
0000130e l       .debug_str     00000000 
000003a8 l       .debug_frame   00000000 
e00009e6 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000fa4 l       .text  00000000 
e0001022 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001026 l       .text  00000000 
e000102e l       .text  00000000 
e000102e l       .text  00000000 
e0001032 l       .text  00000000 
e0001032 l       .text  00000000 
e000103e l       .text  00000000 
e0001040 l       .text  00000000 
e0001040 l       .text  00000000 
e0001044 l       .text  00000000 
e0001050 l       .text  00000000 
e0001052 l       .text  00000000 
e0001056 l       .text  00000000 
e0001058 l       .text  00000000 
e0001058 l       .text  00000000 
e000105c l       .text  00000000 
e000105c l       .text  00000000 
e0001060 l       .text  00000000 
e0001060 l       .text  00000000 
e0001062 l       .text  00000000 
e0001062 l       .text  00000000 
e0001066 l       .text  00000000 
e0001066 l       .text  00000000 
e0001068 l       .text  00000000 
e000106c l       .text  00000000 
e000106c l       .text  00000000 
e0001070 l       .text  00000000 
e0001074 l       .text  00000000 
e000107a l       .text  00000000 
e000107a l       .text  00000000 
e000107e l       .text  00000000 
e0001080 l       .text  00000000 
e0001080 l       .text  00000000 
e0001086 l       .text  00000000 
e0001086 l       .text  00000000 
e000108c l       .text  00000000 
e000108c l       .text  00000000 
e000108e l       .text  00000000 
e000108e l       .text  00000000 
e0001094 l       .text  00000000 
e0001094 l       .text  00000000 
00003efd l       .debug_loc     00000000 
00003f18 l       .debug_loc     00000000 
00003f49 l       .debug_loc     00000000 
00003f6f l       .debug_loc     00000000 
00003f95 l       .debug_loc     00000000 
00003fb0 l       .debug_loc     00000000 
00003fd2 l       .debug_loc     00000000 
00003ff9 l       .debug_loc     00000000 
00004020 l       .debug_loc     00000000 
00004044 l       .debug_loc     00000000 
00004075 l       .debug_loc     00000000 
00004090 l       .debug_loc     00000000 
000040c1 l       .debug_loc     00000000 
0000411b l       .debug_loc     00000000 
00004157 l       .debug_loc     00000000 
0000417b l       .debug_loc     00000000 
000041a0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000005c0 l       .debug_ranges  00000000 
00001473 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00001483 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
000015b1 l       .debug_str     00000000 
00001490 l       .debug_str     00000000 
00001494 l       .debug_str     00000000 
0000149f l       .debug_str     00000000 
000014a8 l       .debug_str     00000000 
000014b9 l       .debug_str     00000000 
000014cb l       .debug_str     00000000 
000014d5 l       .debug_str     00000000 
000014e4 l       .debug_str     00000000 
000014f6 l       .debug_str     00000000 
00001509 l       .debug_str     00000000 
0000151d l       .debug_str     00000000 
00001526 l       .debug_str     00000000 
00001532 l       .debug_str     00000000 
00001541 l       .debug_str     00000000 
0000154b l       .debug_str     00000000 
00001558 l       .debug_str     00000000 
00001562 l       .debug_str     00000000 
00001573 l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
0000046b l       .debug_str     00000000 
00000469 l       .debug_str     00000000 
000015c2 l       .debug_str     00000000 
000015d0 l       .debug_str     00000000 
000015d9 l       .debug_str     00000000 
00000c4f l       .debug_str     00000000 
0000093f l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
0000096c l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000956 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000015e9 l       .debug_str     00000000 
000015bd l       .debug_str     00000000 
000015f7 l       .debug_str     00000000 
000012c6 l       .debug_str     00000000 
000005a8 l       .debug_ranges  00000000 
000015de l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
000015c7 l       .debug_str     00000000 
000012b3 l       .debug_str     00000000 
00000c7e l       .debug_str     00000000 
000012ca l       .debug_str     00000000 
00001601 l       .debug_str     00000000 
000015e5 l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
0000059c l       .debug_frame   00000000 
e0001094 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
e0001094 l       .text  00000000 
e0001094 l       .text  00000000 
e0001094 l       .text  00000000 
e0001094 l       .text  00000000 
e000109c l       .text  00000000 
e00010a0 l       .text  00000000 
e00010a0 l       .text  00000000 
e00010a4 l       .text  00000000 
e00010a4 l       .text  00000000 
e00010a8 l       .text  00000000 
e00010a8 l       .text  00000000 
e00010b4 l       .text  00000000 
e00010b6 l       .text  00000000 
e00010b6 l       .text  00000000 
e00010bc l       .text  00000000 
e00010bc l       .text  00000000 
e00010c0 l       .text  00000000 
e00010c2 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010c8 l       .text  00000000 
e00010c8 l       .text  00000000 
e00010ca l       .text  00000000 
e00010ca l       .text  00000000 
e00010d2 l       .text  00000000 
e00010d6 l       .text  00000000 
e00010d8 l       .text  00000000 
e00010dc l       .text  00000000 
e00010e0 l       .text  00000000 
e00010e0 l       .text  00000000 
e00010e4 l       .text  00000000 
e00010e4 l       .text  00000000 
e00010e8 l       .text  00000000 
e00010ea l       .text  00000000 
e00010ea l       .text  00000000 
e00010ee l       .text  00000000 
e00010ee l       .text  00000000 
e00010f0 l       .text  00000000 
e00010f0 l       .text  00000000 
e00010f2 l       .text  00000000 
e00010f2 l       .text  00000000 
e00010f6 l       .text  00000000 
e00010f6 l       .text  00000000 
e00010fa l       .text  00000000 
e00010fc l       .text  00000000 
e0001102 l       .text  00000000 
e0001102 l       .text  00000000 
e0001106 l       .text  00000000 
e000110a l       .text  00000000 
e0001112 l       .text  00000000 
e0001112 l       .text  00000000 
e0001114 l       .text  00000000 
e0001114 l       .text  00000000 
e0001116 l       .text  00000000 
e0001116 l       .text  00000000 
e000111c l       .text  00000000 
e000111c l       .text  00000000 
e000111c l       .text  00000000 
e000111c l       .text  00000000 
e000111c l       .text  00000000 
e0001120 l       .text  00000000 
e0001120 l       .text  00000000 
e0001124 l       .text  00000000 
e0001124 l       .text  00000000 
e000112c l       .text  00000000 
e000112c l       .text  00000000 
e0001130 l       .text  00000000 
e0001134 l       .text  00000000 
e0001134 l       .text  00000000 
e0001136 l       .text  00000000 
e0001136 l       .text  00000000 
e000113a l       .text  00000000 
e000113a l       .text  00000000 
e000113e l       .text  00000000 
e000113e l       .text  00000000 
e0001140 l       .text  00000000 
e0001142 l       .text  00000000 
e0001144 l       .text  00000000 
e0001144 l       .text  00000000 
e0001148 l       .text  00000000 
e000114c l       .text  00000000 
e000115c l       .text  00000000 
e000115c l       .text  00000000 
e0001160 l       .text  00000000 
e0001160 l       .text  00000000 
e0001162 l       .text  00000000 
e0001162 l       .text  00000000 
e0001164 l       .text  00000000 
e0001164 l       .text  00000000 
e0001168 l       .text  00000000 
e0001168 l       .text  00000000 
e000116e l       .text  00000000 
e0001172 l       .text  00000000 
e0001172 l       .text  00000000 
e0001176 l       .text  00000000 
e000117a l       .text  00000000 
e000117c l       .text  00000000 
e000117e l       .text  00000000 
e000117e l       .text  00000000 
e000117e l       .text  00000000 
e000117e l       .text  00000000 
e000117e l       .text  00000000 
e0001182 l       .text  00000000 
e0001182 l       .text  00000000 
e0001186 l       .text  00000000 
e0001186 l       .text  00000000 
e000118e l       .text  00000000 
e0001192 l       .text  00000000 
e0001196 l       .text  00000000 
e0001198 l       .text  00000000 
e000119a l       .text  00000000 
e000119a l       .text  00000000 
e000119e l       .text  00000000 
e00011a2 l       .text  00000000 
e00011a2 l       .text  00000000 
e00011a4 l       .text  00000000 
e00011a6 l       .text  00000000 
e00011a8 l       .text  00000000 
e00011ae l       .text  00000000 
e00011ae l       .text  00000000 
e00011b0 l       .text  00000000 
e00011b4 l       .text  00000000 
e00011c0 l       .text  00000000 
e00011ce l       .text  00000000 
e00011ce l       .text  00000000 
e00011d2 l       .text  00000000 
e00011d4 l       .text  00000000 
e00011d4 l       .text  00000000 
e00011d8 l       .text  00000000 
e00011dc l       .text  00000000 
e00011dc l       .text  00000000 
e00011e0 l       .text  00000000 
e00011e4 l       .text  00000000 
e00011e8 l       .text  00000000 
e00011ec l       .text  00000000 
e00011f0 l       .text  00000000 
e00011f0 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f8 l       .text  00000000 
e00011fa l       .text  00000000 
e00011fa l       .text  00000000 
e00011fc l       .text  00000000 
e0001200 l       .text  00000000 
e0001200 l       .text  00000000 
e0001208 l       .text  00000000 
e000120c l       .text  00000000 
e000120c l       .text  00000000 
e0001210 l       .text  00000000 
e0001214 l       .text  00000000 
e0001218 l       .text  00000000 
e000121a l       .text  00000000 
e000121e l       .text  00000000 
e000121e l       .text  00000000 
e0001222 l       .text  00000000 
e0001222 l       .text  00000000 
e0001226 l       .text  00000000 
e0001228 l       .text  00000000 
e0001228 l       .text  00000000 
e000122c l       .text  00000000 
e000122c l       .text  00000000 
e000122c l       .text  00000000 
e000122c l       .text  00000000 
e000122c l       .text  00000000 
e0001230 l       .text  00000000 
e0001230 l       .text  00000000 
e0001234 l       .text  00000000 
e0001234 l       .text  00000000 
e000123c l       .text  00000000 
e000123c l       .text  00000000 
e0001240 l       .text  00000000 
e0001242 l       .text  00000000 
e0001246 l       .text  00000000 
e0001246 l       .text  00000000 
e0001248 l       .text  00000000 
e0001248 l       .text  00000000 
e000124c l       .text  00000000 
e000124c l       .text  00000000 
e0001252 l       .text  00000000 
e0001252 l       .text  00000000 
e0001256 l       .text  00000000 
e0001256 l       .text  00000000 
e000125e l       .text  00000000 
e0001262 l       .text  00000000 
e0001262 l       .text  00000000 
e0001264 l       .text  00000000 
e0001268 l       .text  00000000 
e0001268 l       .text  00000000 
e000126a l       .text  00000000 
e000126c l       .text  00000000 
e000126c l       .text  00000000 
e0001274 l       .text  00000000 
e0001274 l       .text  00000000 
e0001278 l       .text  00000000 
e0001278 l       .text  00000000 
e0001282 l       .text  00000000 
e0001286 l       .text  00000000 
e0001286 l       .text  00000000 
e000128a l       .text  00000000 
e000128a l       .text  00000000 
e000128e l       .text  00000000 
e0001292 l       .text  00000000 
e0001292 l       .text  00000000 
e0001296 l       .text  00000000 
e000129a l       .text  00000000 
e000129a l       .text  00000000 
e000129c l       .text  00000000 
e00012a0 l       .text  00000000 
e00012a0 l       .text  00000000 
e00012a4 l       .text  00000000 
e00012a8 l       .text  00000000 
e00012ac l       .text  00000000 
e00012b0 l       .text  00000000 
e00012b4 l       .text  00000000 
e00012b6 l       .text  00000000 
e00012b6 l       .text  00000000 
e00012ba l       .text  00000000 
e00012ba l       .text  00000000 
e00012bc l       .text  00000000 
e00012be l       .text  00000000 
e00012be l       .text  00000000 
e00012c6 l       .text  00000000 
e00012ca l       .text  00000000 
e00012ca l       .text  00000000 
e00012cc l       .text  00000000 
e00012d0 l       .text  00000000 
e00012d0 l       .text  00000000 
e00012d2 l       .text  00000000 
e00012d4 l       .text  00000000 
e00012d4 l       .text  00000000 
e00012d6 l       .text  00000000 
e00012d6 l       .text  00000000 
e00012da l       .text  00000000 
e00012da l       .text  00000000 
e00012dc l       .text  00000000 
e00012dc l       .text  00000000 
e00012e0 l       .text  00000000 
e00012e0 l       .text  00000000 
e00012e2 l       .text  00000000 
e00012e2 l       .text  00000000 
e00012e6 l       .text  00000000 
e00012e6 l       .text  00000000 
e00012e8 l       .text  00000000 
e00012e8 l       .text  00000000 
e00012ea l       .text  00000000 
e00012ea l       .text  00000000 
e00012ec l       .text  00000000 
e00012ec l       .text  00000000 
000041c2 l       .debug_loc     00000000 
000041e8 l       .debug_loc     00000000 
0000420e l       .debug_loc     00000000 
00004234 l       .debug_loc     00000000 
0000425a l       .debug_loc     00000000 
00004279 l       .debug_loc     00000000 
00004298 l       .debug_loc     00000000 
000042be l       .debug_loc     00000000 
000042d9 l       .debug_loc     00000000 
00004322 l       .debug_loc     00000000 
00004348 l       .debug_loc     00000000 
0000436a l       .debug_loc     00000000 
00004385 l       .debug_loc     00000000 
000043a0 l       .debug_loc     00000000 
000043bb l       .debug_loc     00000000 
000043d6 l       .debug_loc     00000000 
000043f1 l       .debug_loc     00000000 
0000440c l       .debug_loc     00000000 
0000445c l       .debug_loc     00000000 
00004477 l       .debug_loc     00000000 
00004492 l       .debug_loc     00000000 
000044b4 l       .debug_loc     00000000 
000044cf l       .debug_loc     00000000 
000044ea l       .debug_loc     00000000 
00004505 l       .debug_loc     00000000 
00004520 l       .debug_loc     00000000 
0000453b l       .debug_loc     00000000 
0000455a l       .debug_loc     00000000 
00004579 l       .debug_loc     00000000 
0000459f l       .debug_loc     00000000 
000045ba l       .debug_loc     00000000 
00004603 l       .debug_loc     00000000 
00004629 l       .debug_loc     00000000 
00004644 l       .debug_loc     00000000 
0000465f l       .debug_loc     00000000 
0000467a l       .debug_loc     00000000 
00004695 l       .debug_loc     00000000 
000046b0 l       .debug_loc     00000000 
000046cb l       .debug_loc     00000000 
000046e6 l       .debug_loc     00000000 
00004705 l       .debug_loc     00000000 
00004724 l       .debug_loc     00000000 
0000473f l       .debug_loc     00000000 
00004786 l       .debug_loc     00000000 
000047a1 l       .debug_loc     00000000 
000047bc l       .debug_loc     00000000 
000047e2 l       .debug_loc     00000000 
000047fd l       .debug_loc     00000000 
00004818 l       .debug_loc     00000000 
00004833 l       .debug_loc     00000000 
0000484e l       .debug_loc     00000000 
00004869 l       .debug_loc     00000000 
0000488f l       .debug_loc     00000000 
000048aa l       .debug_loc     00000000 
000048d0 l       .debug_loc     00000000 
000048f6 l       .debug_loc     00000000 
00004913 l       .debug_loc     00000000 
0000496e l       .debug_loc     00000000 
00004989 l       .debug_loc     00000000 
000049af l       .debug_loc     00000000 
000049d5 l       .debug_loc     00000000 
000049f0 l       .debug_loc     00000000 
00004a16 l       .debug_loc     00000000 
00004a73 l       .debug_loc     00000000 
00004a8e l       .debug_loc     00000000 
00004aa9 l       .debug_loc     00000000 
00004b06 l       .debug_loc     00000000 
00004b23 l       .debug_loc     00000000 
00004b3e l       .debug_loc     00000000 
00004b85 l       .debug_loc     00000000 
00004ba0 l       .debug_loc     00000000 
00004bbb l       .debug_loc     00000000 
00004bd6 l       .debug_loc     00000000 
00004bf1 l       .debug_loc     00000000 
00004c0c l       .debug_loc     00000000 
00004c32 l       .debug_loc     00000000 
00004c4d l       .debug_loc     00000000 
00004c68 l       .debug_loc     00000000 
00004c83 l       .debug_loc     00000000 
00004c9e l       .debug_loc     00000000 
00004ccb l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001608 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000660 l       .debug_ranges  00000000 
00001624 l       .debug_str     00000000 
0000162e l       .debug_str     00000000 
00001638 l       .debug_str     00000000 
00000d02 l       .debug_str     00000000 
0000041e l       .debug_str     00000000 
0000042c l       .debug_str     00000000 
00000c35 l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00001642 l       .debug_str     00000000 
00001707 l       .debug_str     00000000 
00001711 l       .debug_str     00000000 
0000128e l       .debug_str     00000000 
0000165c l       .debug_str     00000000 
00001667 l       .debug_str     00000000 
0000046b l       .debug_str     00000000 
00000469 l       .debug_str     00000000 
00001673 l       .debug_str     00000000 
00001685 l       .debug_str     00000000 
00001695 l       .debug_str     00000000 
0000164a l       .debug_str     00000000 
000016a5 l       .debug_str     00000000 
000003a8 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003b4 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000d2d l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000012d9 l       .debug_str     00000000 
000016d1 l       .debug_str     00000000 
00000c7a l       .debug_str     00000000 
000016d6 l       .debug_str     00000000 
000016dc l       .debug_str     00000000 
00001689 l       .debug_str     00000000 
00000376 l       .debug_str     00000000 
00001699 l       .debug_str     00000000 
000005f0 l       .debug_ranges  00000000 
00000d28 l       .debug_str     00000000 
000005d8 l       .debug_ranges  00000000 
0000130e l       .debug_str     00000000 
000016e1 l       .debug_str     00000000 
000016e8 l       .debug_str     00000000 
00000608 l       .debug_ranges  00000000 
000016c2 l       .debug_str     00000000 
000016f0 l       .debug_str     00000000 
000016f4 l       .debug_str     00000000 
000016f8 l       .debug_str     00000000 
000016fd l       .debug_str     00000000 
00001702 l       .debug_str     00000000 
0000170c l       .debug_str     00000000 
000016c9 l       .debug_str     00000000 
000006aa l       .debug_str     00000000 
00000fbb l       .debug_str     00000000 
00001717 l       .debug_str     00000000 
00000620 l       .debug_ranges  00000000 
0000171c l       .debug_str     00000000 
000016af l       .debug_str     00000000 
00000cd1 l       .debug_str     00000000 
00000fc2 l       .debug_str     00000000 
00000638 l       .debug_ranges  00000000 
00000c3f l       .debug_str     00000000 
00000ecf l       .debug_str     00000000 
00000d0f l       .debug_str     00000000 
00000d17 l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
00000d06 l       .debug_str     00000000 
00000cef l       .debug_str     00000000 
000005d0 l       .debug_frame   00000000 
e000111c l       .text  00000000 
e000117e l       .text  00000000 
e000122c l       .text  00000000 
e00012ec l       .text  00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00004ceb l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001724 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000006c0 l       .debug_ranges  00000000 
0000174e l       .debug_str     00000000 
000017ae l       .debug_str     00000000 
000017a2 l       .debug_str     00000000 
0000175a l       .debug_str     00000000 
00001767 l       .debug_str     00000000 
0000177b l       .debug_str     00000000 
0000178c l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
000017bc l       .debug_str     00000000 
00000d06 l       .debug_str     00000000 
00000cef l       .debug_str     00000000 
000017cc l       .debug_str     00000000 
000017ea l       .debug_str     00000000 
00001801 l       .debug_str     00000000 
00001811 l       .debug_str     00000000 
00001821 l       .debug_str     00000000 
0000182f l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
0000183d l       .debug_str     00000000 
00001852 l       .debug_str     00000000 
00001869 l       .debug_str     00000000 
00000c35 l       .debug_str     00000000 
00001882 l       .debug_str     00000000 
0000189e l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
00000f2a l       .debug_str     00000000 
00000f6e l       .debug_str     00000000 
000018ad l       .debug_str     00000000 
00000694 l       .debug_frame   00000000 
e00002fa g     F .text  0000007a external_irq_handler
e000061a g     F .text  0000001c dif_spi_host_output_set_enabled
e000122c g     F .text  000000c0 memrchr
00008000 g       *ABS*  00000000 _stack_len
e00000f8 g     F .text  0000010e read_sfdp
e0001094 g     F .text  00000088 memcpy
e00018ec g       .bss   00000000 _bss_start
e00009ae g     F .text  00000034 base_log_internal_dv
e000a000 g       .stack 00000000 stack
e0000906 g     F .text  00000006 abort
e0000382 g     F .text  000000be dif_spi_host_fifo_write
e0000080 g       *ABS*  00000000 _entry_point
e00018f8 g       .bss   00000000 _bss_end
e0001868 g     O .data  00000084 status_codes
e000117e g     F .text  000000ae memchr
e00000cc g       .text  00000000 _start
e000066e g     F .text  000001ea dif_spi_host_transaction
e0000440 g     F .text  00000158 dif_spi_host_fifo_read
e0000a32 g     F .text  0000048e base_vfprintf
e0000a18 g     F .text  0000001a base_vprintf
e0000382  w    F .text  000000be spi_host_fifo_write_alias
e000111c g     F .text  00000062 memset
e0000206 g     F .text  000000f4 main
e0000084 g       .vectors       00000000 _vectors_end
e0010000 g       .vectors       00000000 _stack_start
e0000440  w    F .text  00000158 spi_host_fifo_read_alias
00002000 g       *ABS*  00000000 _min_stack
e0000598 g     F .text  00000082 dif_spi_host_configure
e0001860 g     O .rodata        00000004 kDeviceTestStatusAddress
e00009e6 g     F .text  00000032 base_printf
e0010010 g       *ABS*  00000000 fromhost
e0001864 g     O .rodata        00000004 kDeviceLogBypassUartAddress
00020008 g       *ABS*  00000000 tohost
e0001022 g     F .text  00000072 status_extract
e0000374 g     F .text  0000000e dif_spi_host_init
e000a000 g       .stack 00000000 _stack
e0000000 g       .vectors       00000000 _vectors_start
e0000858 g     F .text  000000ae test_status_set
e000090c g     F .text  000000a2 base_log_internal_core



Disassembly of section .vectors:

e0000000 <_vectors_start>:
e0000000:       0840006f                j       e0000084 <_vectors_end>
e0000004:       0800006f                j       e0000084 <_vectors_end>
e0000008:       07c0006f                j       e0000084 <_vectors_end>
e000000c:       0780006f                j       e0000084 <_vectors_end>
e0000010:       0740006f                j       e0000084 <_vectors_end>
e0000014:       0700006f                j       e0000084 <_vectors_end>
e0000018:       06c0006f                j       e0000084 <_vectors_end>
e000001c:       0680006f                j       e0000084 <_vectors_end>
e0000020:       0640006f                j       e0000084 <_vectors_end>
e0000024:       0600006f                j       e0000084 <_vectors_end>
e0000028:       05c0006f                j       e0000084 <_vectors_end>
e000002c:       2ce0006f                j       e00002fa <external_irq_handler>
e0000030:       0540006f                j       e0000084 <_vectors_end>
e0000034:       0500006f                j       e0000084 <_vectors_end>
e0000038:       04c0006f                j       e0000084 <_vectors_end>
e000003c:       0480006f                j       e0000084 <_vectors_end>
e0000040:       0440006f                j       e0000084 <_vectors_end>
e0000044:       0400006f                j       e0000084 <_vectors_end>
e0000048:       03c0006f                j       e0000084 <_vectors_end>
e000004c:       0380006f                j       e0000084 <_vectors_end>
e0000050:       0340006f                j       e0000084 <_vectors_end>
e0000054:       0300006f                j       e0000084 <_vectors_end>
e0000058:       02c0006f                j       e0000084 <_vectors_end>
e000005c:       0280006f                j       e0000084 <_vectors_end>
e0000060:       0240006f                j       e0000084 <_vectors_end>
e0000064:       0200006f                j       e0000084 <_vectors_end>
e0000068:       01c0006f                j       e0000084 <_vectors_end>
e000006c:       0180006f                j       e0000084 <_vectors_end>
e0000070:       0140006f                j       e0000084 <_vectors_end>
e0000074:       0100006f                j       e0000084 <_vectors_end>
e0000078:       00c0006f                j       e0000084 <_vectors_end>
e000007c:       0080006f                j       e0000084 <_vectors_end>
e0000080:       0060006f                j       e0000086 <reset_handler>

Disassembly of section .text:

e0000084 <default_exc_handler>:
default_exc_handler():
e0000084:       a0bd                    j       e00000f2 <sleep_loop>

e0000086 <reset_handler>:
reset_handler():
e0000086:       4081                    li      ra,0
e0000088:       8106                    mv      sp,ra
e000008a:       8186                    mv      gp,ra
e000008c:       8206                    mv      tp,ra
e000008e:       8286                    mv      t0,ra
e0000090:       8306                    mv      t1,ra
e0000092:       8386                    mv      t2,ra
e0000094:       8406                    mv      s0,ra
e0000096:       8486                    mv      s1,ra
e0000098:       8506                    mv      a0,ra
e000009a:       8586                    mv      a1,ra
e000009c:       8606                    mv      a2,ra
e000009e:       8686                    mv      a3,ra
e00000a0:       8706                    mv      a4,ra
e00000a2:       8786                    mv      a5,ra
e00000a4:       8806                    mv      a6,ra
e00000a6:       8886                    mv      a7,ra
e00000a8:       8906                    mv      s2,ra
e00000aa:       8986                    mv      s3,ra
e00000ac:       8a06                    mv      s4,ra
e00000ae:       8a86                    mv      s5,ra
e00000b0:       8b06                    mv      s6,ra
e00000b2:       8b86                    mv      s7,ra
e00000b4:       8c06                    mv      s8,ra
e00000b6:       8c86                    mv      s9,ra
e00000b8:       8d06                    mv      s10,ra
e00000ba:       8d86                    mv      s11,ra
e00000bc:       8e06                    mv      t3,ra
e00000be:       8e86                    mv      t4,ra
e00000c0:       8f06                    mv      t5,ra
e00000c2:       8f86                    mv      t6,ra
e00000c4:       00010117                auipc   sp,0x10
e00000c8:       f3c10113                addi    sp,sp,-196 # e0010000 <_stack_start>

e00000cc <_start>:
e00000cc:       00002d17                auipc   s10,0x2
e00000d0:       820d0d13                addi    s10,s10,-2016 # e00018ec <base_log_internal_core.global_log_counter>
e00000d4:       00002d97                auipc   s11,0x2
e00000d8:       824d8d93                addi    s11,s11,-2012 # e00018f8 <read_sfdp.kLogFields>
e00000dc:       01bd5763                bge     s10,s11,e00000ea <main_entry>

e00000e0 <zero_loop>:
zero_loop():
e00000e0:       /-> 000d2023            sw      zero,0(s10)
e00000e4:       |   0d11                        addi    s10,s10,4
e00000e6:       \-- ffaddde3            bge     s11,s10,e00000e0 <zero_loop>

e00000ea <main_entry>:
zero_loop_end():
e00000ea:       4501                    li      a0,0
e00000ec:       4581                    li      a1,0
e00000ee:       118000ef                jal     ra,e0000206 <main>

e00000f2 <sleep_loop>:
sleep_loop():
e00000f2:       /-> 10500073            wfi
e00000f6:       \-- bff5                        j       e00000f2 <sleep_loop>

e00000f8 <read_sfdp>:
read_sfdp():
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:21
#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"

#define SFDP_SIGNATURE 0x50444653


void read_sfdp(dif_spi_host_t *spi_host) {
e00000f8:                 7109                  addi    sp,sp,-384
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:23
  uint8_t buf[256];
  dif_spi_host_segment_t segments[] = {
e00000fa:                 16112e23              sw      ra,380(sp)
e00000fe:                 16812c23              sw      s0,376(sp)
e0000102:                 16912a23              sw      s1,372(sp)
e0000106:                 d202                  sw      zero,36(sp)
e0000108:                 d802                  sw      zero,48(sp)
e000010a:                 d602                  sw      zero,44(sp)
e000010c:                 d402                  sw      zero,40(sp)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:24
      {
e000010e:                 d002                  sw      zero,32(sp)
e0000110:                 05a00593              li      a1,90
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:26
          .type = kDifSpiHostSegmentTypeOpcode,
          .opcode = 0x5a,
e0000114:                 02b10223              sb      a1,36(sp)
e0000118:                 4585                  li      a1,1
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:28
      },
      {
e000011a:                 da2e                  sw      a1,52(sp)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:31
          .type = kDifSpiHostSegmentTypeAddress,
          .address =
              {
e000011c:                 dc02                  sw      zero,56(sp)
e000011e:                 de02                  sw      zero,60(sp)
e0000120:                 c082                  sw      zero,64(sp)
e0000122:                 4589                  li      a1,2
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:37
                  .width = kDifSpiHostWidthStandard,
                  .mode = kDifSpiHostAddrMode3b,
                  .address = 0x0,
              },
      },
      {
e0000124:                 c4ae                  sw      a1,72(sp)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:40
          .type = kDifSpiHostSegmentTypeDummy,
          .dummy =
              {
e0000126:                 c682                  sw      zero,76(sp)
e0000128:                 45a1                  li      a1,8
e000012a:                 c8ae                  sw      a1,80(sp)
e000012c:                 4591                  li      a1,4
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:45
                  .width = kDifSpiHostWidthStandard,
                  .length = 8,
              },
      },
      {
e000012e:                 ceae                  sw      a1,92(sp)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:48
          .type = kDifSpiHostSegmentTypeRx,
          .rx =
              {
e0000130:                 d082                  sw      zero,96(sp)
e0000132:                 18cc                  addi    a1,sp,116
e0000134:                 d2ae                  sw      a1,100(sp)
e0000136:                 10000593              li      a1,256
e000013a:                 d4ae                  sw      a1,104(sp)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:55
                  .buf = buf,
                  .length = sizeof(buf),
              },
      },
  };
  CHECK_DIF_OK(
e000013c:                 1010                  addi    a2,sp,32
e000013e:                 4691                  li      a3,4
e0000140:                 4581                  li      a1,0
e0000142:                 2335                  jal     e000066e <dif_spi_host_transaction>
e0000144:                 00001597              auipc   a1,0x1
e0000148:                 72058593              addi    a1,a1,1824 # e0001864 <kDeviceLogBypassUartAddress>
e000014c:                 4184                  lw      s1,0(a1)
e000014e:       /-------- cd05                  beqz    a0,e0000186 <read_sfdp+0x8e>
e0000150:       |         842a                  mv      s0,a0
e0000152:       |     /-- c891                  beqz    s1,e0000166 <read_sfdp+0x6e>
e0000154:       |     |   00001517              auipc   a0,0x1
e0000158:       |     |   7a450513              addi    a0,a0,1956 # e00018f8 <read_sfdp.kLogFields>
e000015c:       |     |   4585                  li      a1,1
e000015e:       |     |   8622                  mv      a2,s0
e0000160:       |     |   04f000ef              jal     ra,e00009ae <base_log_internal_dv>
e0000164:       |  /--|-- a829                  j       e000017e <read_sfdp+0x86>
e0000166:       |  |  \-> 00001597              auipc   a1,0x1
e000016a:       |  |      33658593              addi    a1,a1,822 # e000149c <memrchr+0x270>
e000016e:       |  |      0028                  addi    a0,sp,8
e0000170:       |  |      4651                  li      a2,20
e0000172:       |  |      723000ef              jal     ra,e0001094 <memcpy>
e0000176:       |  |      0028                  addi    a0,sp,8
e0000178:       |  |      85a2                  mv      a1,s0
e000017a:       |  |      792000ef              jal     ra,e000090c <base_log_internal_core>
e000017e:       |  \----> 6531                  lui     a0,0xc
e0000180:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000184:       |         2dd1                  jal     e0000858 <test_status_set>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0000186:       \-------> 5456                  lw      s0,116(sp)
read_sfdp():
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:59
      dif_spi_host_transaction(spi_host, 0, segments, ARRAYSIZE(segments)));

  uint32_t sfdp = read_32(buf);
  LOG_INFO("SFDP signature is 0x%08x", sfdp);
e0000188:             /-- c49d                  beqz    s1,e00001b6 <read_sfdp+0xbe>
e000018a:             |   00001517              auipc   a0,0x1
e000018e:             |   78250513              addi    a0,a0,1922 # e000190c <read_sfdp.kLogFields.2>
e0000192:             |   4585                  li      a1,1
e0000194:             |   8622                  mv      a2,s0
e0000196:             |   019000ef              jal     ra,e00009ae <base_log_internal_dv>
e000019a:             |   50444537              lui     a0,0x50444
e000019e:             |   65350513              addi    a0,a0,1619 # 50444653 <tohost+0x5042464b>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:60
  CHECK(sfdp == SFDP_SIGNATURE, "Expected to find the SFDP signature!");
e00001a2:       /-----|-- 04a40a63              beq     s0,a0,e00001f6 <read_sfdp+0xfe>
e00001a6:       |     |   00001517              auipc   a0,0x1
e00001aa:       |     |   77a50513              addi    a0,a0,1914 # e0001920 <read_sfdp.kLogFields.5>
e00001ae:       |     |   4581                  li      a1,0
e00001b0:       |     |   7fe000ef              jal     ra,e00009ae <base_log_internal_dv>
e00001b4:       |  /--|-- a82d                  j       e00001ee <read_sfdp+0xf6>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:59
  LOG_INFO("SFDP signature is 0x%08x", sfdp);
e00001b6:       |  |  \-> 00001597              auipc   a1,0x1
e00001ba:       |  |      2fa58593              addi    a1,a1,762 # e00014b0 <memrchr+0x284>
e00001be:       |  |      0028                  addi    a0,sp,8
e00001c0:       |  |      4651                  li      a2,20
e00001c2:       |  |      6d3000ef              jal     ra,e0001094 <memcpy>
e00001c6:       |  |      0028                  addi    a0,sp,8
e00001c8:       |  |      85a2                  mv      a1,s0
e00001ca:       |  |      742000ef              jal     ra,e000090c <base_log_internal_core>
e00001ce:       |  |      50444537              lui     a0,0x50444
e00001d2:       |  |      65350513              addi    a0,a0,1619 # 50444653 <tohost+0x5042464b>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:60
  CHECK(sfdp == SFDP_SIGNATURE, "Expected to find the SFDP signature!");
e00001d6:       +--|----- 02a40063              beq     s0,a0,e00001f6 <read_sfdp+0xfe>
e00001da:       |  |      00001597              auipc   a1,0x1
e00001de:       |  |      2ea58593              addi    a1,a1,746 # e00014c4 <memrchr+0x298>
e00001e2:       |  |      0028                  addi    a0,sp,8
e00001e4:       |  |      4651                  li      a2,20
e00001e6:       |  |      6af000ef              jal     ra,e0001094 <memcpy>
e00001ea:       |  |      0028                  addi    a0,sp,8
e00001ec:       |  |      2705                  jal     e000090c <base_log_internal_core>
e00001ee:       |  \----> 6531                  lui     a0,0xc
e00001f0:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00001f4:       |         2595                  jal     e0000858 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:61
}
e00001f6:       \-------> 17412483              lw      s1,372(sp)
e00001fa:                 17812403              lw      s0,376(sp)
e00001fe:                 17c12083              lw      ra,380(sp)
e0000202:                 6119                  addi    sp,sp,384
e0000204:                 8082                  ret

e0000206 <main>:
main():
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:63

int main(int argc, char **argv) {
e0000206:                 7179                  addi    sp,sp,-48
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:65
  dif_spi_host_t spi_host;
  CHECK_DIF_OK(dif_spi_host_init(
e0000208:                 d606                  sw      ra,44(sp)
e000020a:                 d422                  sw      s0,40(sp)
e000020c:                 d226                  sw      s1,36(sp)
e000020e:                 c0300537              lui     a0,0xc0300
e0000212:                 100c                  addi    a1,sp,32
e0000214:                 2285                  jal     e0000374 <dif_spi_host_init>
e0000216:                 00001497              auipc   s1,0x1
e000021a:                 64e48493              addi    s1,s1,1614 # e0001864 <kDeviceLogBypassUartAddress>
e000021e:       /-------- cd05                  beqz    a0,e0000256 <main+0x50>
e0000220:       |         842a                  mv      s0,a0
e0000222:       |         4088                  lw      a0,0(s1)
e0000224:       |     /-- c911                  beqz    a0,e0000238 <main+0x32>
e0000226:       |     |   00001517              auipc   a0,0x1
e000022a:       |     |   70e50513              addi    a0,a0,1806 # e0001934 <main.kLogFields>
e000022e:       |     |   4585                  li      a1,1
e0000230:       |     |   8622                  mv      a2,s0
e0000232:       |     |   77c000ef              jal     ra,e00009ae <base_log_internal_dv>
e0000236:       |  /--|-- a821                  j       e000024e <main+0x48>
e0000238:       |  |  \-> 00001597              auipc   a1,0x1
e000023c:       |  |      2a058593              addi    a1,a1,672 # e00014d8 <memrchr+0x2ac>
e0000240:       |  |      0028                  addi    a0,sp,8
e0000242:       |  |      4651                  li      a2,20
e0000244:       |  |      651000ef              jal     ra,e0001094 <memcpy>
e0000248:       |  |      0028                  addi    a0,sp,8
e000024a:       |  |      85a2                  mv      a1,s0
e000024c:       |  |      25c1                  jal     e000090c <base_log_internal_core>
e000024e:       |  \----> 6531                  lui     a0,0xc
e0000250:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000254:       |         2511                  jal     e0000858 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:68
      mmio_region_from_addr(TOP_EARLGREY_SPI_HOST0_BASE_ADDR), &spi_host));

  CHECK_DIF_OK(dif_spi_host_configure(
e0000256:       \-------> 00010123              sb      zero,2(sp)
e000025a:                 00011023              sh      zero,0(sp)
e000025e:                 000f4537              lui     a0,0xf4
e0000262:                 24050513              addi    a0,a0,576 # f4240 <tohost+0xd4238>
e0000266:                 c42a                  sw      a0,8(sp)
e0000268:                 05f5e537              lui     a0,0x5f5e
e000026c:                 10050513              addi    a0,a0,256 # 5f5e100 <tohost+0x5f3e0f8>
e0000270:                 c62a                  sw      a0,12(sp)
e0000272:                 c802                  sw      zero,16(sp)
e0000274:                 00011a23              sh      zero,20(sp)
e0000278:                 1008                  addi    a0,sp,32
e000027a:                 002c                  addi    a1,sp,8
e000027c:                 2e31                  jal     e0000598 <dif_spi_host_configure>
e000027e:       /-------- c905                  beqz    a0,e00002ae <main+0xa8>
e0000280:       |         4088                  lw      a0,0(s1)
e0000282:       |     /-- c901                  beqz    a0,e0000292 <main+0x8c>
e0000284:       |     |   00001517              auipc   a0,0x1
e0000288:       |     |   6c450513              addi    a0,a0,1732 # e0001948 <main.kLogFields.9>
e000028c:       |     |   4581                  li      a1,0
e000028e:       |     |   2705                  jal     e00009ae <base_log_internal_dv>
e0000290:       |  /--|-- a819                  j       e00002a6 <main+0xa0>
e0000292:       |  |  \-> 00001597              auipc   a1,0x1
e0000296:       |  |      25a58593              addi    a1,a1,602 # e00014ec <memrchr+0x2c0>
e000029a:       |  |      0028                  addi    a0,sp,8
e000029c:       |  |      4651                  li      a2,20
e000029e:       |  |      5f7000ef              jal     ra,e0001094 <memcpy>
e00002a2:       |  |      0028                  addi    a0,sp,8
e00002a4:       |  |      25a5                  jal     e000090c <base_log_internal_core>
e00002a6:       |  \----> 6531                  lui     a0,0xc
e00002a8:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00002ac:       |         2375                  jal     e0000858 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:75
                   (dif_spi_host_config_t){
                       .spi_clock = 1000000,
                       .peripheral_clock_freq_hz = 100000000,//kClockFreqPeripheralHz,
                   }),
               "SPI_HOST config failed!");
  CHECK_DIF_OK(dif_spi_host_output_set_enabled(&spi_host, true));
e00002ae:       \-------> 1008                  addi    a0,sp,32
e00002b0:                 4585                  li      a1,1
e00002b2:                 26a5                  jal     e000061a <dif_spi_host_output_set_enabled>
e00002b4:       /-------- c91d                  beqz    a0,e00002ea <main+0xe4>
e00002b6:       |         842a                  mv      s0,a0
e00002b8:       |         4088                  lw      a0,0(s1)
e00002ba:       |     /-- c909                  beqz    a0,e00002cc <main+0xc6>
e00002bc:       |     |   00001517              auipc   a0,0x1
e00002c0:       |     |   6a050513              addi    a0,a0,1696 # e000195c <main.kLogFields.12>
e00002c4:       |     |   4585                  li      a1,1
e00002c6:       |     |   8622                  mv      a2,s0
e00002c8:       |     |   25dd                  jal     e00009ae <base_log_internal_dv>
e00002ca:       |  /--|-- a821                  j       e00002e2 <main+0xdc>
e00002cc:       |  |  \-> 00001597              auipc   a1,0x1
e00002d0:       |  |      23458593              addi    a1,a1,564 # e0001500 <memrchr+0x2d4>
e00002d4:       |  |      0028                  addi    a0,sp,8
e00002d6:       |  |      4651                  li      a2,20
e00002d8:       |  |      5bd000ef              jal     ra,e0001094 <memcpy>
e00002dc:       |  |      0028                  addi    a0,sp,8
e00002de:       |  |      85a2                  mv      a1,s0
e00002e0:       |  |      2535                  jal     e000090c <base_log_internal_core>
e00002e2:       |  \----> 6531                  lui     a0,0xc
e00002e4:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00002e8:       |         2b85                  jal     e0000858 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:77

  read_sfdp(&spi_host);
e00002ea:       \-------> 1008                  addi    a0,sp,32
e00002ec:                 3531                  jal     e00000f8 <read_sfdp>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:78
  return true;
e00002ee:                 4505                  li      a0,1
e00002f0:                 5492                  lw      s1,36(sp)
e00002f2:                 5422                  lw      s0,40(sp)
e00002f4:                 50b2                  lw      ra,44(sp)
e00002f6:                 6145                  addi    sp,sp,48
e00002f8:                 8082                  ret

e00002fa <external_irq_handler>:
external_irq_handler():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:338
  putchar('\n');

  return i;
}

void external_irq_handler(void)  {
e00002fa:           1101                        addi    sp,sp,-32
e00002fc:           ce2a                        sw      a0,28(sp)
e00002fe:           cc2e                        sw      a1,24(sp)
e0000300:           ca32                        sw      a2,20(sp)
e0000302:           c836                        sw      a3,16(sp)
e0000304:           c63a                        sw      a4,12(sp)
e0000306:           c43e                        sw      a5,8(sp)
e0000308:           c242                        sw      a6,4(sp)
e000030a:           c8200537            lui     a0,0xc8200
e000030e:           09f00593            li      a1,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:355
  p_reg5 = (int *) 0x1040401C;

  // start of """Interrupt Service Routine"""
  
  plic_check = (int *) 0xC8200004;
  while(*plic_check != mbox_id);   //check wether the intr is the correct one
e0000312:       /-> 4150                        lw      a2,4(a0)
e0000314:       \-- feb61fe3            bne     a2,a1,e0000312 <external_irq_handler+0x18>
e0000318:           10404537            lui     a0,0x10404
/proc/self/cwd/sw/tests/opentitan/common/utils.c:358
  
  p_reg = (int *) 0x10404020;
 *p_reg = 0x00000000;        //clearing the pending interrupt signal
e000031c:           02052023            sw      zero,32(a0) # 10404020 <tohost+0x103e4018>
e0000320:           c82005b7            lui     a1,0xc8200
e0000324:           09f00613            li      a2,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:360
 
 *plic_check = mbox_id;      //completing interrupt
e0000328:           c1d0                        sw      a2,4(a1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:362
 
  a = *p_reg1;
e000032a:           450c                        lw      a1,8(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:363
  b = *p_reg2;
e000032c:           4910                        lw      a2,16(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:364
  c = *p_reg3;
e000032e:           4954                        lw      a3,20(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:365
  d = *p_reg4;
e0000330:           4d18                        lw      a4,24(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:366
  e = *p_reg5;
e0000332:           01c52803            lw      a6,28(a0)
e0000336:           baadc7b7            lui     a5,0xbaadc
e000033a:           0de78793            addi    a5,a5,222 # baadc0de <fromhost+0xdaacc0ce>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:369
  
  
  if( a == 0xBAADC0DE &&  b == 0xBAADC0DE && c == 0xBAADC0DE && d == 0xBAADC0DE && e == 0xBAADC0DE){
e000033e:           8dbd                        xor     a1,a1,a5
e0000340:           8e3d                        xor     a2,a2,a5
e0000342:           8dd1                        or      a1,a1,a2
e0000344:           00f6c633            xor     a2,a3,a5
e0000348:           8dd1                        or      a1,a1,a2
e000034a:           00f74633            xor     a2,a4,a5
e000034e:           8dd1                        or      a1,a1,a2
e0000350:           00f84633            xor     a2,a6,a5
e0000354:           8dd1                        or      a1,a1,a2
e0000356:       /-- e589                        bnez    a1,e0000360 <external_irq_handler+0x66>
e0000358:       |   02450513            addi    a0,a0,36
e000035c:       |   4585                        li      a1,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:371
      p_reg = (int *) 0x10404024; // completion interrupt to ariane agent
     *p_reg = 0x00000001;
e000035e:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:375
  }
  
  return;
}
e0000360:       \-> 4812                        lw      a6,4(sp)
e0000362:           47a2                        lw      a5,8(sp)
e0000364:           4732                        lw      a4,12(sp)
e0000366:           46c2                        lw      a3,16(sp)
e0000368:           4652                        lw      a2,20(sp)
e000036a:           45e2                        lw      a1,24(sp)
e000036c:           4572                        lw      a0,28(sp)
e000036e:           6105                        addi    sp,sp,32
e0000370:           30200073            mret

e0000374 <dif_spi_host_init>:
dif_spi_host_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:19
#include "spi_host_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_init(mmio_region_t base_addr,
                               dif_spi_host_t *spi_host) {
  if (spi_host == NULL) {
e0000374:       /----- c581                     beqz    a1,e000037c <dif_spi_host_init+0x8>
e0000376:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:23
    return kDifBadArg;
  }

  spi_host->base_addr = base_addr;
e0000378:       |      c188                     sw      a0,0(a1)
e000037a:       |  /-- a011                     j       e000037e <dif_spi_host_init+0xa>
e000037c:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:26

  return kDifOk;
}
e000037e:          \-> 8532                     mv      a0,a2
e0000380:              8082                     ret

e0000382 <dif_spi_host_fifo_write>:
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:156
  uint32_t val = read_32((const void *)srcaddr);
  mmio_region_write32(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, val);
}

dif_result_t dif_spi_host_fifo_write(const dif_spi_host_t *spi_host,
                                     const void *src, uint16_t len) {
e0000382:                    468d                       li      a3,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:158
  uintptr_t ptr = (uintptr_t)src;
  if (spi_host == NULL || (src == NULL && len > 0)) {
e0000384:       /----------- cd45                       beqz    a0,e000043c <dif_spi_host_fifo_write+0xba>
e0000386:       |            00b03733           snez    a4,a1
e000038a:       |            00163793           seqz    a5,a2
e000038e:       |            8f5d                       or      a4,a4,a5
e0000390:       +----------- c755                       beqz    a4,e000043c <dif_spi_host_fifo_write+0xba>
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
e0000392:       |            0035f693           andi    a3,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
    return kDifBadArg;
  }

  // If the pointer starts mis-aligned, write until we are aligned.
  while (misalignment32_of(ptr) && len > 0) {
e0000396:       |            00d036b3           snez    a3,a3
e000039a:       |            00c03733           snez    a4,a2
e000039e:       |            8ef9                       and     a3,a3,a4
e00003a0:       |  /-------- ce8d                       beqz    a3,e00003da <dif_spi_host_fifo_write+0x58>
e00003a2:       |  |         04800693           li      a3,72
e00003a6:       |  |         6741                       lui     a4,0x10
e00003a8:       |  |         fff70813           addi    a6,a4,-1 # ffff <_stack_len+0x7fff>
e00003ac:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00003ae:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
 * @return Zero-extended `field` from `bitfield`.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_read(uint32_t bitfield,
                                      bitfield_field32_t field) {
  return (bitfield >> field.index) & field.mask;
e00003b0:       |  |  |  |   0ff77713           andi    a4,a4,255
e00003b4:       |  |  |  \-- fed70de3           beq     a4,a3,e00003ae <dif_spi_host_fifo_write+0x2c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
e00003b8:       |  |  |      00058883           lb      a7,0(a1)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:165
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
e00003bc:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:166
    len -= 1;
e00003be:       |  |  |      167d                       addi    a2,a2,-1
e00003c0:       |  |  |      010672b3           and     t0,a2,a6
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
e00003c4:       |  |  |      0035f713           andi    a4,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
  while (misalignment32_of(ptr) && len > 0) {
e00003c8:       |  |  |      00e03333           snez    t1,a4
e00003cc:       |  |  |      00503733           snez    a4,t0
e00003d0:       |  |  |      00e37733           and     a4,t1,a4
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write8(mmio_region_t base, ptrdiff_t offset,
                               uint8_t value) {
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e00003d4:       |  |  |      03178423           sb      a7,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
e00003d8:       |  |  \----- fb71                       bnez    a4,e00003ac <dif_spi_host_fifo_write+0x2a>
e00003da:       |  \-------> 66c1                       lui     a3,0x10
e00003dc:       |            fff68893           addi    a7,a3,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  }

  // Write complete 32-bit words to the fifo.
  while (len > 3) {
e00003e0:       |            01167733           and     a4,a2,a7
e00003e4:       |            4791                       li      a5,4
e00003e6:       |  /-------- 02f76363           bltu    a4,a5,e000040c <dif_spi_host_fifo_write+0x8a>
e00003ea:       |  |         04800713           li      a4,72
e00003ee:       |  |         480d                       li      a6,3
e00003f0:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00003f2:       |  |  |  /-> 4bd4                       lw      a3,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e00003f4:       |  |  |  |   0ff6f693           andi    a3,a3,255
e00003f8:       |  |  |  \-- fee68de3           beq     a3,a4,e00003f2 <dif_spi_host_fifo_write+0x70>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e00003fc:       |  |  |      4194                       lw      a3,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e00003fe:       |  |  |      d794                       sw      a3,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:173
    tx_fifo_write32(spi_host, ptr);
    ptr += 4;
    len -= 4;
e0000400:       |  |  |      1671                       addi    a2,a2,-4
e0000402:       |  |  |      011676b3           and     a3,a2,a7
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:172
    ptr += 4;
e0000406:       |  |  |      0591                       addi    a1,a1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  while (len > 3) {
e0000408:       |  |  \----- fed864e3           bltu    a6,a3,e00003f0 <dif_spi_host_fifo_write+0x6e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  }

  // Clean up any leftover bytes.
  while (len > 0) {
e000040c:       |  \-------> 011676b3           and     a3,a2,a7
e0000410:       |  /-------- c68d                       beqz    a3,e000043a <dif_spi_host_fifo_write+0xb8>
e0000412:       |  |         04800693           li      a3,72
e0000416:       |  |         6741                       lui     a4,0x10
e0000418:       |  |         fff70813           addi    a6,a4,-1 # ffff <_stack_len+0x7fff>
e000041c:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000041e:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0000420:       |  |  |  |   0ff77713           andi    a4,a4,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e0000424:       |  |  |  \-- fed70de3           beq     a4,a3,e000041e <dif_spi_host_fifo_write+0x9c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
e0000428:       |  |  |      00058703           lb      a4,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e000042c:       |  |  |      02e78423           sb      a4,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:180
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
    len -= 1;
e0000430:       |  |  |      167d                       addi    a2,a2,-1
e0000432:       |  |  |      01067733           and     a4,a2,a6
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:179
    ptr += 1;
e0000436:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  while (len > 0) {
e0000438:       |  |  \----- f375                       bnez    a4,e000041c <dif_spi_host_fifo_write+0x9a>
e000043a:       |  \-------> 4681                       li      a3,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:184
  }

  return kDifOk;
}
e000043c:       \----------> 8536                       mv      a0,a3
e000043e:                    8082                       ret

e0000440 <dif_spi_host_fifo_read>:
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:223
  queue->length -= 4;
  return val;
}

dif_result_t dif_spi_host_fifo_read(const dif_spi_host_t *spi_host, void *dst,
                                    uint16_t len) {
e0000440:                       7179                    addi    sp,sp,-48
e0000442:                       d606                    sw      ra,44(sp)
e0000444:                       d422                    sw      s0,40(sp)
e0000446:                       d226                    sw      s1,36(sp)
e0000448:                       d04a                    sw      s2,32(sp)
e000044a:                       ce4e                    sw      s3,28(sp)
e000044c:                       cc52                    sw      s4,24(sp)
e000044e:                       ca56                    sw      s5,20(sp)
e0000450:                       892a                    mv      s2,a0
e0000452:                       450d                    li      a0,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:224
  if (spi_host == NULL || (dst == NULL && len > 0)) {
e0000454:       /-------------- 12090963                beqz    s2,e0000586 <dif_spi_host_fifo_read+0x146>
e0000458:       |               89b2                    mv      s3,a2
e000045a:       |               84ae                    mv      s1,a1
e000045c:       |               00b035b3                snez    a1,a1
e0000460:       |               00163613                seqz    a2,a2
e0000464:       |               8dd1                    or      a1,a1,a2
e0000466:       +-------------- 12058063                beqz    a1,e0000586 <dif_spi_host_fifo_read+0x146>
e000046a:       |               00001517                auipc   a0,0x1
e000046e:       |               0c650513                addi    a0,a0,198 # e0001530 <memrchr+0x304>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  }

  uintptr_t ptr = (uintptr_t)dst;
  // We always have to read from the RXFIFO as a 32-bit word.  We use a
  // two-word queue to handle destination and length mis-alignments.
  queue_t queue = {0};
e0000472:       |               454c                    lw      a1,12(a0)
e0000474:       |               4510                    lw      a2,8(a0)
e0000476:       |               4154                    lw      a3,4(a0)
e0000478:       |               c62e                    sw      a1,12(sp)
e000047a:       |               6a41                    lui     s4,0x10
e000047c:       |               c432                    sw      a2,8(sp)
e000047e:       |               c236                    sw      a3,4(sp)
e0000480:       |               4108                    lw      a0,0(a0)
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
e0000482:       |               0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235

  // If the buffer is misaligned, write a byte at a time until we reach
  // alignment.
  while (misalignment32_of(ptr) && len > 0) {
e0000486:       |               00b035b3                snez    a1,a1
e000048a:       |               01303633                snez    a2,s3
e000048e:       |               8df1                    and     a1,a1,a2
e0000490:       |               f00a0413                addi    s0,s4,-256 # ff00 <_stack_len+0x7f00>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  queue_t queue = {0};
e0000494:       |               c02a                    sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
e0000496:       |  /----------- cdb1                    beqz    a1,e00004f2 <dif_spi_host_fifo_read+0xb2>
e0000498:       |  |            4501                    li      a0,0
e000049a:       |  |            fffa0a93                addi    s5,s4,-1
e000049e:       |  |     /----- 00a04b63                bgtz    a0,e00004b4 <dif_spi_host_fifo_read+0x74>
e00004a2:       |  |  /--|----> 00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00004a6:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e00004a8:       |  |  |  |  |   8de1                    and     a1,a1,s0
e00004aa:       |  |  |  |  \-- ddf5                    beqz    a1,e00004a6 <dif_spi_host_fifo_read+0x66>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00004ac:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:238
    if (queue.length < 1) {
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e00004ae:       |  |  |  |      850a                    mv      a0,sp
e00004b0:       |  |  |  |      2259                    jal     e0000636 <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e00004b2:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  uint64_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
e00004b4:       |  |  |  >----> 45b2                    lw      a1,12(sp)
e00004b6:       |  |  |  |      4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
e00004b8:       |  |  |  |      00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
e00004bc:       |  |  |  |      01859713                slli    a4,a1,0x18
e00004c0:       |  |  |  |      8221                    srli    a2,a2,0x8
e00004c2:       |  |  |  |      8e59                    or      a2,a2,a4
e00004c4:       |  |  |  |      81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
inline void write_64(uint64_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_64()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
e00004c6:       |  |  |  |      c62e                    sw      a1,12(sp)
e00004c8:       |  |  |  |      c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e00004ca:       |  |  |  |      157d                    addi    a0,a0,-1
e00004cc:       |  |  |  |      c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:242
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
e00004ce:       |  |  |  |      00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:243
    ptr += 1;
e00004d2:       |  |  |  |      0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:244
    len -= 1;
e00004d4:       |  |  |  |      19fd                    addi    s3,s3,-1
e00004d6:       |  |  |  |      0159f533                and     a0,s3,s5
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
e00004da:       |  |  |  |      0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
e00004de:       |  |  |  |      00b035b3                snez    a1,a1
e00004e2:       |  |  |  |      00a03533                snez    a0,a0
e00004e6:       |  |  |  |      8d6d                    and     a0,a0,a1
e00004e8:       |  +--|--|----- c509                    beqz    a0,e00004f2 <dif_spi_host_fifo_read+0xb2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:236
    if (queue.length < 1) {
e00004ea:       |  |  |  |      4502                    lw      a0,0(sp)
e00004ec:       |  |  |  \----- fca044e3                bgtz    a0,e00004b4 <dif_spi_host_fifo_read+0x74>
e00004f0:       |  |  \-------- bf4d                    j       e00004a2 <dif_spi_host_fifo_read+0x62>
e00004f2:       |  \----------> fffa0513                addi    a0,s4,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  }

  // While we can write complete words to memory, operate on 4 bytes at a time.
  while (len > 3) {
e00004f6:       |               00a9f533                and     a0,s3,a0
e00004fa:       |               4591                    li      a1,4
e00004fc:       |  /----------- 02b56e63                bltu    a0,a1,e0000538 <dif_spi_host_fifo_read+0xf8>
e0000500:       |  |            4a0d                    li      s4,3
e0000502:       |  |            6541                    lui     a0,0x10
e0000504:       |  |            fff50a93                addi    s5,a0,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:249
    if (queue.length < 4) {
e0000508:       |  |  /-------> 4502                    lw      a0,0(sp)
e000050a:       |  |  |  /----- 00aa4b63                blt     s4,a0,e0000520 <dif_spi_host_fifo_read+0xe0>
e000050e:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000512:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e0000514:       |  |  |  |  |   8de1                    and     a1,a1,s0
e0000516:       |  |  |  |  \-- ddf5                    beqz    a1,e0000512 <dif_spi_host_fifo_read+0xd2>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000518:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:251
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e000051a:       |  |  |  |      850a                    mv      a0,sp
e000051c:       |  |  |  |      2a29                    jal     e0000636 <enqueue_word>
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
  queue->length -= 4;
e000051e:       |  |  |  |      4502                    lw      a0,0(sp)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0000520:       |  |  |  \----> 45b2                    lw      a1,12(sp)
e0000522:       |  |  |         4622                    lw      a2,8(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0000524:       |  |  |         c42e                    sw      a1,8(sp)
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
e0000526:       |  |  |         1571                    addi    a0,a0,-4
e0000528:       |  |  |         c02a                    sw      a0,0(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
e000052a:       |  |  |         c090                    sw      a2,0(s1)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:256
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    write_32(dequeue_word(&queue), (void *)ptr);
    ptr += 4;
    len -= 4;
e000052c:       |  |  |         19f1                    addi    s3,s3,-4
e000052e:       |  |  |         0159f533                and     a0,s3,s5
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:255
    ptr += 4;
e0000532:       |  |  |         0491                    addi    s1,s1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  while (len > 3) {
e0000534:       |  |  \-------- fcaa6ae3                bltu    s4,a0,e0000508 <dif_spi_host_fifo_read+0xc8>
e0000538:       |  \----------> 6541                    lui     a0,0x10
e000053a:       |               fff50a13                addi    s4,a0,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  }

  // Finish up any left over buffer a byte at a time.
  while (len > 0) {
e000053e:       |               0149f533                and     a0,s3,s4
e0000542:       |  /----------- c129                    beqz    a0,e0000584 <dif_spi_host_fifo_read+0x144>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:261
    if (queue.length < 1) {
e0000544:       |  |  /-------> 4502                    lw      a0,0(sp)
e0000546:       |  |  |  /----- 00a04b63                bgtz    a0,e000055c <dif_spi_host_fifo_read+0x11c>
e000054a:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e000054e:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e0000550:       |  |  |  |  |   8de1                    and     a1,a1,s0
e0000552:       |  |  |  |  \-- ddf5                    beqz    a1,e000054e <dif_spi_host_fifo_read+0x10e>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000554:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:263
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e0000556:       |  |  |  |      850a                    mv      a0,sp
e0000558:       |  |  |  |      28f9                    jal     e0000636 <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e000055a:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
e000055c:       |  |  |  \----> 45b2                    lw      a1,12(sp)
e000055e:       |  |  |         4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
e0000560:       |  |  |         00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
e0000564:       |  |  |         01859713                slli    a4,a1,0x18
e0000568:       |  |  |         8221                    srli    a2,a2,0x8
e000056a:       |  |  |         8e59                    or      a2,a2,a4
e000056c:       |  |  |         81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
e000056e:       |  |  |         c62e                    sw      a1,12(sp)
e0000570:       |  |  |         c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e0000572:       |  |  |         157d                    addi    a0,a0,-1
e0000574:       |  |  |         c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:267
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
e0000576:       |  |  |         00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:269
    ptr += 1;
    len -= 1;
e000057a:       |  |  |         19fd                    addi    s3,s3,-1
e000057c:       |  |  |         0149f533                and     a0,s3,s4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:268
    ptr += 1;
e0000580:       |  |  |         0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  while (len > 0) {
e0000582:       |  |  \-------- f169                    bnez    a0,e0000544 <dif_spi_host_fifo_read+0x104>
e0000584:       |  \----------> 4501                    li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:273
  }

  return kDifOk;
}
e0000586:       \-------------> 4ad2                    lw      s5,20(sp)
e0000588:                       4a62                    lw      s4,24(sp)
e000058a:                       49f2                    lw      s3,28(sp)
e000058c:                       5902                    lw      s2,32(sp)
e000058e:                       5492                    lw      s1,36(sp)
e0000590:                       5422                    lw      s0,40(sp)
e0000592:                       50b2                    lw      ra,44(sp)
e0000594:                       6145                    addi    sp,sp,48
e0000596:                       8082                    ret

e0000598 <dif_spi_host_configure>:
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:66
                                    dif_spi_host_config_t config) {
e0000598:              460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:67
  if (spi_host == NULL) {
e000059a:       /----- cd35                     beqz    a0,e0000616 <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:70
  if (config.peripheral_clock_freq_hz == 0 || config.spi_clock == 0) {
e000059c:       |      41d4                     lw      a3,4(a1)
e000059e:       +----- cea5                     beqz    a3,e0000616 <dif_spi_host_configure+0x7e>
e00005a0:       |      4198                     lw      a4,0(a1)
e00005a2:       +----- cb35                     beqz    a4,e0000616 <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:75
      ((config.peripheral_clock_freq_hz / config.spi_clock) / 2) - 1;
e00005a4:       |      02e6d6b3                 divu    a3,a3,a4
e00005a8:       |      8285                     srli    a3,a3,0x1
e00005aa:       |      16fd                     addi    a3,a3,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:76
  if (divider & ~SPI_HOST_CONFIGOPTS_CLKDIV_0_MASK) {
e00005ac:       |      0106d713                 srli    a4,a3,0x10
e00005b0:       +----- e33d                     bnez    a4,e0000616 <dif_spi_host_configure+0x7e>
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:32
  mmio_region_write32(
e00005b2:       |      4110                     lw      a2,0(a0)
e00005b4:       |      40000737                 lui     a4,0x40000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e00005b8:       |      ca18                     sw      a4,16(a2)
e00005ba:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00005bc:       |  /-> 4a5c                     lw      a5,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e00005be:       |  |   8ff9                     and     a5,a5,a4
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:42
  } while (active);
e00005c0:       |  \-- fff5                     bnez    a5,e00005bc <dif_spi_host_configure+0x24>
e00005c2:       |      6741                     lui     a4,0x10
e00005c4:       |      177d                     addi    a4,a4,-1
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00005c6:       |  /-> 4a5c                     lw      a5,20(a2)
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:51
  } while (txqd != 0 || rxqd != 0);
e00005c8:       |  |   8ff9                     and     a5,a5,a4
e00005ca:       |  \-- fff5                     bnez    a5,e00005c6 <dif_spi_host_configure+0x2e>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e00005cc:       |      00062823                 sw      zero,16(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00005d0:       |      00858603                 lb      a2,8(a1) # 80000008 <fromhost+0x9ffefff8>
e00005d4:       |      8ef9                     and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e00005d6:       |      0672                     slli    a2,a2,0x1c
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00005d8:       |      00958703                 lb      a4,9(a1)
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e00005dc:       |      8231                     srli    a2,a2,0xc
e00005de:       |      8e55                     or      a2,a2,a3
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:89
                               config.chip_select.lead);
e00005e0:       |      00a5c683                 lbu     a3,10(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
e00005e4:       |      0772                     slli    a4,a4,0x1c
e00005e6:       |      8321                     srli    a4,a4,0x8
e00005e8:       |      8e59                     or      a2,a2,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00005ea:       |      8abd                     andi    a3,a3,15
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_bit32_write(uint32_t bitfield,
                                     bitfield_bit32_index_t bit_index,
                                     bool value) {
  return bitfield_field32_write(bitfield, bitfield_bit32_to_field32(bit_index),
                                value ? 0x1u : 0x0u);
e00005ec:       |      00b58703                 lb      a4,11(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00005f0:       |      06e2                     slli    a3,a3,0x18
e00005f2:       |      8e55                     or      a2,a2,a3
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
e00005f4:       |      00c58683                 lb      a3,12(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00005f8:       |      0776                     slli    a4,a4,0x1d
e00005fa:       |      8e59                     or      a2,a2,a4
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
e00005fc:       |      00d58583                 lb      a1,13(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000600:       |      06fa                     slli    a3,a3,0x1e
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:94
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CONFIGOPTS_REG_OFFSET, reg);
e0000602:       |      4118                     lw      a4,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e0000604:       |      8e55                     or      a2,a2,a3
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000606:       |      05fe                     slli    a1,a1,0x1f
e0000608:       |      8dd1                     or      a1,a1,a2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e000060a:       |      cf0c                     sw      a1,24(a4)
spi_host_enable():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:60
  mmio_region_write32(
e000060c:       |      4108                     lw      a0,0(a0)
e000060e:       |      4601                     li      a2,0
e0000610:       |      800005b7                 lui     a1,0x80000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000614:       |      c90c                     sw      a1,16(a0)
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:97
}
e0000616:       \----> 8532                     mv      a0,a2
e0000618:              8082                     ret

e000061a <dif_spi_host_output_set_enabled>:
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:101
  if (spi_host == NULL) {
e000061a:       /-- cd01                        beqz    a0,e0000632 <dif_spi_host_output_set_enabled+0x18>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:106
      mmio_region_read32(spi_host->base_addr, SPI_HOST_CONTROL_REG_OFFSET);
e000061c:       |   4110                        lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000061e:       |   4a14                        lw      a3,16(a2)
e0000620:       |   4501                        li      a0,0
e0000622:       |   e0000737            lui     a4,0xe0000
e0000626:       |   177d                        addi    a4,a4,-1
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e0000628:       |   8ef9                        and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e000062a:       |   05f6                        slli    a1,a1,0x1d
e000062c:       |   8dd5                        or      a1,a1,a3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e000062e:       |   ca0c                        sw      a1,16(a2)
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:112
}
e0000630:       |   8082                        ret
e0000632:       \-> 450d                        li      a0,3
e0000634:           8082                        ret

e0000636 <enqueue_word>:
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:196
  if (queue->length % sizeof(uint32_t) == 0) {
e0000636:              4110                     lw      a2,0(a0)
e0000638:              00367693                 andi    a3,a2,3
e000063c:       /----- c29d                     beqz    a3,e0000662 <enqueue_word+0x2c>
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e000063e:       |      00160693                 addi    a3,a2,1
e0000642:       |      c114                     sw      a3,0(a0)
e0000644:       |      962a                     add     a2,a2,a0
e0000646:       |      00b60423                 sb      a1,8(a2)
e000064a:       |      460d                     li      a2,3
e000064c:       |  /-> 4114                     lw      a3,0(a0)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:202
      data >>= 8;
e000064e:       |  |   81a1                     srli    a1,a1,0x8
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e0000650:       |  |   00168713                 addi    a4,a3,1
e0000654:       |  |   c118                     sw      a4,0(a0)
e0000656:       |  |   96aa                     add     a3,a3,a0
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
e0000658:       |  |   167d                     addi    a2,a2,-1
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e000065a:       |  |   00b68423                 sb      a1,8(a3)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
e000065e:       |  \-- f67d                     bnez    a2,e000064c <enqueue_word+0x16>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
e0000660:       |      8082                     ret
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:197
    write_32(data, queue->data + queue->length);
e0000662:       \----> 962a                     add     a2,a2,a0
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0000664:              c60c                     sw      a1,8(a2)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:198
    queue->length += 4;
e0000666:              410c                     lw      a1,0(a0)
e0000668:              0591                     addi    a1,a1,4
e000066a:              c10c                     sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
e000066c:              8082                     ret

e000066e <dif_spi_host_transaction>:
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:362
}

dif_result_t dif_spi_host_transaction(const dif_spi_host_t *spi_host,
                                      uint32_t csid,
                                      dif_spi_host_segment_t *segments,
                                      size_t length) {
e000066e:                          7139                 addi    sp,sp,-64
e0000670:                          de06                 sw      ra,60(sp)
e0000672:                          dc22                 sw      s0,56(sp)
e0000674:                          da26                 sw      s1,52(sp)
e0000676:                          d84a                 sw      s2,48(sp)
e0000678:                          d64e                 sw      s3,44(sp)
e000067a:                          d452                 sw      s4,40(sp)
e000067c:                          d256                 sw      s5,36(sp)
e000067e:                          d05a                 sw      s6,32(sp)
e0000680:                          ce5e                 sw      s7,28(sp)
e0000682:                          cc62                 sw      s8,24(sp)
e0000684:                          ca66                 sw      s9,20(sp)
e0000686:                          c86a                 sw      s10,16(sp)
e0000688:                          c66e                 sw      s11,12(sp)
e000068a:                          8a2a                 mv      s4,a0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:364
  // Write to chip select ID.
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CSID_REG_OFFSET, csid);
e000068c:                          4108                 lw      a0,0(a0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e000068e:                          cd4c                 sw      a1,28(a0)
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368

  // For each segment, write the segment information to the
  // COMMAND register and transmit FIFO.
  for (size_t i = 0; i < length; ++i) {
e0000690:       /----------------- 1a068263             beqz    a3,e0000834 <dif_spi_host_transaction+0x1c6>
e0000694:       |                  8d36                 mv      s10,a3
e0000696:       |                  8932                 mv      s2,a2
e0000698:       |                  4401                 li      s0,0
e000069a:       |                  fff68a93             addi    s5,a3,-1
e000069e:       |                  0016b513             seqz    a0,a3
e00006a2:       |                  c02a                 sw      a0,0(sp)
e00006a4:       |                  6505                 lui     a0,0x1
e00006a6:       |                  c0050b13             addi    s6,a0,-1024 # c00 <_min_stack-0x1400>
e00006aa:       |                  4851                 li      a6,20
e00006ac:       |                  4c15                 li      s8,5
e00006ae:       |                  00001c97             auipc   s9,0x1
e00006b2:       |                  e66c8c93             addi    s9,s9,-410 # e0001514 <memrchr+0x2e8>
e00006b6:       |                  04800493             li      s1,72
e00006ba:       |                  6541                 lui     a0,0x10
e00006bc:       |                  f0050593             addi    a1,a0,-256 # ff00 <_stack_len+0x7f00>
e00006c0:       |                  c22e                 sw      a1,4(sp)
e00006c2:       |                  157d                 addi    a0,a0,-1
e00006c4:       |                  c42a                 sw      a0,8(sp)
e00006c6:       |        /-------> 000a2503             lw      a0,0(s4)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00006ca:       |        |     /-> 494c                 lw      a1,20(a0)
wait_ready():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:120
  } while (!ready);
e00006cc:       |        |     \-- fe05dfe3             bgez    a1,e00006ca <dif_spi_host_transaction+0x5c>
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:372
    bool last_segment = i == length - 1;
    wait_ready(spi_host);
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
e00006d0:       |        |         030405b3             mul     a1,s0,a6
e00006d4:       |        |         95ca                 add     a1,a1,s2
e00006d6:       |        |         4190                 lw      a2,0(a1)
e00006d8:       |  /-----|-------- 16cc6e63             bltu    s8,a2,e0000854 <dif_spi_host_transaction+0x1e6>
e00006dc:       |  |     |         060a                 slli    a2,a2,0x2
e00006de:       |  |     |         9666                 add     a2,a2,s9
e00006e0:       |  |     |         4210                 lw      a2,0(a2)
e00006e2:       |  |     |         015446b3             xor     a3,s0,s5
e00006e6:       |  |     |         0016bd93             seqz    s11,a3
e00006ea:       |  |     |         8602                 jr      a2
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00006ec:       |  |     |     /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e00006ee:       |  |     |     |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e00006f2:       |  |     |     \-- fe960de3             beq     a2,s1,e00006ec <dif_spi_host_transaction+0x7e>
issue_opcode():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:292
                     segment->opcode);
e00006f6:       |  |     |         00458583             lb      a1,4(a1) # 3004 <_min_stack+0x1004>
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e00006fa:       |  |     |         02b50423             sb      a1,40(a0)
e00006fe:       |  |     |         6589                 lui     a1,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000700:       |  |     |     /-- 000d9463             bnez    s11,e0000708 <dif_spi_host_transaction+0x9a>
e0000704:       |  |     |     |   20058593             addi    a1,a1,512 # 2200 <_min_stack+0x200>
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e0000708:       |  |     |     \-> 000a2503             lw      a0,0(s4)
e000070c:       |  |     |  /----- a8f1                 j       e00007e8 <dif_spi_host_transaction+0x17a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000070e:       |  |     |  |  /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0000710:       |  |     |  |  |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e0000714:       |  |     |  |  \-- fe960de3             beq     a2,s1,e000070e <dif_spi_host_transaction+0xa0>
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:301
  uint32_t address = bitfield_byteswap32(segment->address.address);
e0000718:       |  |     |  |      45d4                 lw      a3,12(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
 * @param bitfield Bitfield to reverse bytes of.
 * @return `bitfield` with the order of bytes reversed.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_byteswap32(uint32_t bitfield) {
  return __builtin_bswap32(bitfield);
e000071a:       |  |     |  |      0086d613             srli    a2,a3,0x8
e000071e:       |  |     |  |      4712                 lw      a4,4(sp)
e0000720:       |  |     |  |      8e79                 and     a2,a2,a4
e0000722:       |  |     |  |      0186d713             srli    a4,a3,0x18
e0000726:       |  |     |  |      8f51                 or      a4,a4,a2
e0000728:       |  |     |  |      00869793             slli    a5,a3,0x8
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
e000072c:       |  |     |  |      0085a883             lw      a7,8(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
e0000730:       |  |     |  |      00ff0637             lui     a2,0xff0
e0000734:       |  |     |  |      8ff1                 and     a5,a5,a2
e0000736:       |  |     |  |      06e2                 slli    a3,a3,0x18
e0000738:       |  |     |  |      8edd                 or      a3,a3,a5
e000073a:       |  |     |  |      8ed9                 or      a3,a3,a4
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
e000073c:       |  |     |  |      4605                 li      a2,1
e000073e:       |  |     |  |  /-- 00c88363             beq     a7,a2,e0000744 <dif_spi_host_transaction+0xd6>
e0000742:       |  |     |  |  |   82a1                 srli    a3,a3,0x8
e0000744:       |  |     |  |  \-> 6709                 lui     a4,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000746:       |  |     |  |  /-- 000d9463             bnez    s11,e000074e <dif_spi_host_transaction+0xe0>
e000074a:       |  |     |  |  |   20070713             addi    a4,a4,512 # 2200 <_min_stack+0x200>
e000074e:       |  |     |  |  \-> d514                 sw      a3,40(a0)
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:313
  write_command_reg(spi_host, length, segment->address.width,
e0000750:       |  |     |  |      41c8                 lw      a0,4(a1)
e0000752:       |  |     |  |      fff88593             addi    a1,a7,-1
e0000756:       |  |     |  |      0015b593             seqz    a1,a1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
e000075a:       |  |     |  |      8dd9                 or      a1,a1,a4
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e000075c:       |  |     |  |      00a51613             slli    a2,a0,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e0000760:       |  |     |  |      000a2503             lw      a0,0(s4)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000764:       |  |     |  |      01667633             and     a2,a2,s6
e0000768:       |  |     |  |      8dd1                 or      a1,a1,a2
e000076a:       |  |     |  |      0025e593             ori     a1,a1,2
e000076e:       |  |     |  +----- a8ad                 j       e00007e8 <dif_spi_host_transaction+0x17a>
issue_dummy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:319
  write_command_reg(spi_host, segment->dummy.length, segment->dummy.width,
e0000770:       |  |     |  |      4590                 lw      a2,8(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000772:       |  |     |  |      167d                 addi    a2,a2,-1
e0000774:       |  |     |  |      1ff67613             andi    a2,a2,511
e0000778:       |  |     |  |  /-- 000d9463             bnez    s11,e0000780 <dif_spi_host_transaction+0x112>
e000077c:       |  |     |  |  |   20066613             ori     a2,a2,512
e0000780:       |  |     |  |  \-> 41cc                 lw      a1,4(a1)
e0000782:       |  |     |  |      05aa                 slli    a1,a1,0xa
e0000784:       |  |     |  |      0165f5b3             and     a1,a1,s6
e0000788:       |  |     |  |      8dd1                 or      a1,a1,a2
e000078a:       |  |     |  +----- a8b9                 j       e00007e8 <dif_spi_host_transaction+0x17a>
issue_data_phase():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:332
      width = segment->tx.width;
e000078c:       |  |     |  |      0045a983             lw      s3,4(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:333
      length = segment->tx.length;
e0000790:       |  |     |  |      00c5ab83             lw      s7,12(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:335
      spi_host_fifo_write_alias(spi_host, segment->tx.buf, segment->tx.length);
e0000794:       |  |     |  |      458c                 lw      a1,8(a1)
e0000796:       |  |     |  |      4522                 lw      a0,8(sp)
e0000798:       |  |     |  |      00abf633             and     a2,s7,a0
e000079c:       |  |     |  |      8552                 mv      a0,s4
e000079e:       |  |     |  |      36d5                 jal     e0000382 <dif_spi_host_fifo_write>
e00007a0:       |  |     |  |      6589                 lui     a1,0x2
e00007a2:       |  |     |  |  /-- a015                 j       e00007c6 <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:345
      width = segment->rx.width;
e00007a4:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 2004 <_min_stack+0x4>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:346
      length = segment->rx.length;
e00007a8:       |  |     |  |  |   00c5ab83             lw      s7,12(a1)
e00007ac:       |  |     |  |  |   6585                 lui     a1,0x1
e00007ae:       |  |     |  |  +-- a821                 j       e00007c6 <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:338
      width = segment->bidir.width;
e00007b0:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 1004 <_min_stack-0xffc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:339
      length = segment->bidir.length;
e00007b4:       |  |     |  |  |   0105ab83             lw      s7,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:341
      spi_host_fifo_write_alias(spi_host, segment->bidir.txbuf,
e00007b8:       |  |     |  |  |   458c                 lw      a1,8(a1)
e00007ba:       |  |     |  |  |   4522                 lw      a0,8(sp)
e00007bc:       |  |     |  |  |   00abf633             and     a2,s7,a0
e00007c0:       |  |     |  |  |   8552                 mv      a0,s4
e00007c2:       |  |     |  |  |   36c1                 jal     e0000382 <dif_spi_host_fifo_write>
e00007c4:       |  |     |  |  |   658d                 lui     a1,0x3
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e00007c6:       |  |     |  |  \-> fffb8513             addi    a0,s7,-1
e00007ca:       |  |     |  |      1ff57613             andi    a2,a0,511
e00007ce:       |  |     |  |  /-- 000d9463             bnez    s11,e00007d6 <dif_spi_host_transaction+0x168>
e00007d2:       |  |     |  |  |   20066613             ori     a2,a2,512
e00007d6:       |  |     |  |  \-> 4851                 li      a6,20
e00007d8:       |  |     |  |      00a99693             slli    a3,s3,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e00007dc:       |  |     |  |      000a2503             lw      a0,0(s4)
e00007e0:       |  |     |  |      0166f6b3             and     a3,a3,s6
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e00007e4:       |  |     |  |      8dd1                 or      a1,a1,a2
e00007e6:       |  |     |  |      8dd5                 or      a1,a1,a3
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368
  for (size_t i = 0; i < length; ++i) {
e00007e8:       |  |     |  \----> 0405                 addi    s0,s0,1
e00007ea:       |  |     |         d10c                 sw      a1,32(a0)
e00007ec:       |  |     \-------- eda41de3             bne     s0,s10,e00006c6 <dif_spi_host_transaction+0x58>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
        return kDifBadArg;
    }
  }

  // For each segment which receives data, read from the receive FIFO.
  for (size_t i = 0; i < length; ++i) {
e00007f0:       |  |               4502                 lw      a0,0(sp)
e00007f2:       +--|-------------- e129                 bnez    a0,e0000834 <dif_spi_host_transaction+0x1c6>
e00007f4:       |  |               4401                 li      s0,0
e00007f6:       |  |               00c90493             addi    s1,s2,12
e00007fa:       |  |               4995                 li      s3,5
e00007fc:       |  |               4a91                 li      s5,4
e00007fe:       |  |               4b51                 li      s6,20
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:399
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
e0000800:       |  |  /----------> ff44a503             lw      a0,-12(s1)
e0000804:       |  |  |     /----- 01350b63             beq     a0,s3,e000081a <dif_spi_host_transaction+0x1ac>
e0000808:       |  |  |  /--|----- 03551163             bne     a0,s5,e000082a <dif_spi_host_transaction+0x1bc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:401
      case kDifSpiHostSegmentTypeRx:
        spi_host_fifo_read_alias(spi_host, segment->rx.buf, segment->rx.length);
e000080c:       |  |  |  |  |      03640533             mul     a0,s0,s6
e0000810:       |  |  |  |  |      954a                 add     a0,a0,s2
e0000812:       |  |  |  |  |      00850593             addi    a1,a0,8
e0000816:       |  |  |  |  |      0531                 addi    a0,a0,12
e0000818:       |  |  |  |  |  /-- a021                 j       e0000820 <dif_spi_host_transaction+0x1b2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:406
        break;
      case kDifSpiHostSegmentTypeBidirectional:
        spi_host_fifo_read_alias(spi_host, segment->bidir.rxbuf,
                                 segment->bidir.length);
        break;
e000081a:       |  |  |  |  \--|-> 00448513             addi    a0,s1,4
e000081e:       |  |  |  |     |   85a6                 mv      a1,s1
e0000820:       |  |  |  |     \-> 418c                 lw      a1,0(a1)
e0000822:       |  |  |  |         00055603             lhu     a2,0(a0)
e0000826:       |  |  |  |         8552                 mv      a0,s4
e0000828:       |  |  |  |         3921                 jal     e0000440 <dif_spi_host_fifo_read>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
  for (size_t i = 0; i < length; ++i) {
e000082a:       |  |  |  \-------> 0405                 addi    s0,s0,1
e000082c:       |  |  |            1d7d                 addi    s10,s10,-1
e000082e:       |  |  |            04d1                 addi    s1,s1,20
e0000830:       |  |  \----------- fc0d18e3             bnez    s10,e0000800 <dif_spi_host_transaction+0x192>
e0000834:       \--|-------------> 4501                 li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:412
      default:
          /* do nothing */;
    }
  }
  return kDifOk;
}
e0000836:          |           /-> 4db2                 lw      s11,12(sp)
e0000838:          |           |   4d42                 lw      s10,16(sp)
e000083a:          |           |   4cd2                 lw      s9,20(sp)
e000083c:          |           |   4c62                 lw      s8,24(sp)
e000083e:          |           |   4bf2                 lw      s7,28(sp)
e0000840:          |           |   5b02                 lw      s6,32(sp)
e0000842:          |           |   5a92                 lw      s5,36(sp)
e0000844:          |           |   5a22                 lw      s4,40(sp)
e0000846:          |           |   59b2                 lw      s3,44(sp)
e0000848:          |           |   5942                 lw      s2,48(sp)
e000084a:          |           |   54d2                 lw      s1,52(sp)
e000084c:          |           |   5462                 lw      s0,56(sp)
e000084e:          |           |   50f2                 lw      ra,60(sp)
e0000850:          |           |   6121                 addi    sp,sp,64
e0000852:          |           |   8082                 ret
e0000854:          \-----------|-> 450d                 li      a0,3
e0000856:                      \-- b7c5                 j       e0000836 <dif_spi_host_transaction+0x1c8>

e0000858 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
e0000858:                    1101                       addi    sp,sp,-32
e000085a:                    ce06                       sw      ra,28(sp)
e000085c:                    65b1                       lui     a1,0xc
e000085e:                    aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
e0000862:             /----- 02b50063           beq     a0,a1,e0000882 <test_status_set+0x2a>
e0000866:             |      65a5                       lui     a1,0x9
e0000868:             |      05b5                       addi    a1,a1,13
e000086a:          /--|----- 02b50d63           beq     a0,a1,e00008a4 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e000086e:          |  |      00001597           auipc   a1,0x1
e0000872:          |  |      ff258593           addi    a1,a1,-14 # e0001860 <kDeviceTestStatusAddress>
e0000876:          |  |      418c                       lw      a1,0(a1)
e0000878:          |  |  /-- c191                       beqz    a1,e000087c <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e000087a:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
e000087c:          |  |  \-> 40f2                       lw      ra,28(sp)
e000087e:          |  |      6105                       addi    sp,sp,32
e0000880:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000882:          |  \----> 00001517           auipc   a0,0x1
e0000886:          |         fe250513           addi    a0,a0,-30 # e0001864 <kDeviceLogBypassUartAddress>
e000088a:          |         4108                       lw      a0,0(a0)
e000088c:          |  /----- ed0d                       bnez    a0,e00008c6 <test_status_set+0x6e>
e000088e:          |  |      00001597           auipc   a1,0x1
e0000892:          |  |      d0258593           addi    a1,a1,-766 # e0001590 <memrchr+0x364>
e0000896:          |  |      0028                       addi    a0,sp,8
e0000898:          |  |      4651                       li      a2,20
e000089a:          |  |      7fa000ef           jal     ra,e0001094 <memcpy>
e000089e:          |  |      0028                       addi    a0,sp,8
e00008a0:          |  |      20b5                       jal     e000090c <base_log_internal_core>
e00008a2:          |  |  /-- a805                       j       e00008d2 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e00008a4:          \--|--|-> 00001517           auipc   a0,0x1
e00008a8:             |  |   fc050513           addi    a0,a0,-64 # e0001864 <kDeviceLogBypassUartAddress>
e00008ac:             |  |   4108                       lw      a0,0(a0)
e00008ae:       /-----|--|-- ed05                       bnez    a0,e00008e6 <test_status_set+0x8e>
e00008b0:       |     |  |   00001597           auipc   a1,0x1
e00008b4:       |     |  |   ccc58593           addi    a1,a1,-820 # e000157c <memrchr+0x350>
e00008b8:       |     |  |   0028                       addi    a0,sp,8
e00008ba:       |     |  |   4651                       li      a2,20
e00008bc:       |     |  |   7d8000ef           jal     ra,e0001094 <memcpy>
e00008c0:       |     |  |   0028                       addi    a0,sp,8
e00008c2:       |     |  |   20a9                       jal     e000090c <base_log_internal_core>
e00008c4:       |  /--|--|-- a03d                       j       e00008f2 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e00008c6:       |  |  \--|-> 00001517           auipc   a0,0x1
e00008ca:       |  |     |   0be50513           addi    a0,a0,190 # e0001984 <test_status_set.kLogFields.2>
e00008ce:       |  |     |   4581                       li      a1,0
e00008d0:       |  |     |   28f9                       jal     e00009ae <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e00008d2:       |  |     \-> 00001517           auipc   a0,0x1
e00008d6:       |  |         f8e50513           addi    a0,a0,-114 # e0001860 <kDeviceTestStatusAddress>
e00008da:       |  |         4108                       lw      a0,0(a0)
e00008dc:       |  |  /----- c505                       beqz    a0,e0000904 <test_status_set+0xac>
e00008de:       |  |  |      65b1                       lui     a1,0xc
e00008e0:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
e00008e4:       |  |  |  /-- a839                       j       e0000902 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e00008e6:       \--|--|--|-> 00001517           auipc   a0,0x1
e00008ea:          |  |  |   08a50513           addi    a0,a0,138 # e0001970 <test_status_set.kLogFields>
e00008ee:          |  |  |   4581                       li      a1,0
e00008f0:          |  |  |   287d                       jal     e00009ae <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e00008f2:          \--|--|-> 00001517           auipc   a0,0x1
e00008f6:             |  |   f6e50513           addi    a0,a0,-146 # e0001860 <kDeviceTestStatusAddress>
e00008fa:             |  |   4108                       lw      a0,0(a0)
e00008fc:             +--|-- c501                       beqz    a0,e0000904 <test_status_set+0xac>
e00008fe:             |  |   65a5                       lui     a1,0x9
e0000900:             |  |   05b5                       addi    a1,a1,13
e0000902:             |  \-> c10c                       sw      a1,0(a0)
e0000904:             \----> 2009                       jal     e0000906 <abort>

e0000906 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
e0000906:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
e000090a:       \-- bff5                        j       e0000906 <abort>

e000090c <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
e000090c:              7179                     addi    sp,sp,-48
e000090e:              c606                     sw      ra,12(sp)
e0000910:              c422                     sw      s0,8(sp)
e0000912:              c226                     sw      s1,4(sp)
e0000914:              842a                     mv      s0,a0
e0000916:              d646                     sw      a7,44(sp)
e0000918:              d442                     sw      a6,40(sp)
e000091a:              d23e                     sw      a5,36(sp)
e000091c:              d03a                     sw      a4,32(sp)
e000091e:              ce36                     sw      a3,28(sp)
e0000920:              cc32                     sw      a2,24(sp)
e0000922:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
e0000924:              4148                     lw      a0,4(a0)
e0000926:              800005b7                 lui     a1,0x80000
e000092a:              fff58613                 addi    a2,a1,-1 # 7fffffff <fromhost+0x9ffeffef>
e000092e:              4581                     li      a1,0
e0000930:              04f000ef                 jal     ra,e000117e <memchr>
e0000934:              4054                     lw      a3,4(s0)
e0000936:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
e000093a:              02f00593                 li      a1,47
e000093e:              8536                     mv      a0,a3
e0000940:              0ed000ef                 jal     ra,e000122c <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
e0000944:       /----- c501                     beqz    a0,e000094c <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
e0000946:       |      00150693                 addi    a3,a0,1
e000094a:       |  /-- a011                     j       e000094e <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
e000094c:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e000094e:          \-> 4008                     lw      a0,0(s0)
e0000950:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
e0000952:       /----- 00a5ea63                 bltu    a1,a0,e0000966 <base_log_internal_core+0x5a>
e0000956:       |      050a                     slli    a0,a0,0x2
e0000958:       |      00001597                 auipc   a1,0x1
e000095c:       |      c6858593                 addi    a1,a1,-920 # e00015c0 <memrchr+0x394>
e0000960:       |      952e                     add     a0,a0,a1
e0000962:       |      410c                     lw      a1,0(a0)
e0000964:       |  /-- a029                     j       e000096e <base_log_internal_core+0x62>
e0000966:       \--|-> 00001597                 auipc   a1,0x1
e000096a:          |   c5858593                 addi    a1,a1,-936 # e00015be <memrchr+0x392>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
e000096e:          \-> 00001497                 auipc   s1,0x1
e0000972:              f7e48493                 addi    s1,s1,-130 # e00018ec <base_log_internal_core.global_log_counter>
e0000976:              0004d603                 lhu     a2,0(s1)
e000097a:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e000097c:              00001517                 auipc   a0,0x1
e0000980:              c2850513                 addi    a0,a0,-984 # e00015a4 <memrchr+0x378>
e0000984:              208d                     jal     e00009e6 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
e0000986:              00049503                 lh      a0,0(s1)
e000098a:              0505                     addi    a0,a0,1
e000098c:              00a49023                 sh      a0,0(s1)
e0000990:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
e0000992:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
e0000994:              4808                     lw      a0,16(s0)
e0000996:              084c                     addi    a1,sp,20
e0000998:              2041                     jal     e0000a18 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
e000099a:              00001517                 auipc   a0,0x1
e000099e:              c1950513                 addi    a0,a0,-999 # e00015b3 <memrchr+0x387>
e00009a2:              2091                     jal     e00009e6 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
e00009a4:              4492                     lw      s1,4(sp)
e00009a6:              4422                     lw      s0,8(sp)
e00009a8:              40b2                     lw      ra,12(sp)
e00009aa:              6145                     addi    sp,sp,48
e00009ac:              8082                     ret

e00009ae <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
e00009ae:              1101                     addi    sp,sp,-32
e00009b0:              ce46                     sw      a7,28(sp)
e00009b2:              cc42                     sw      a6,24(sp)
e00009b4:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
e00009b6:              00001797                 auipc   a5,0x1
e00009ba:              eae78793                 addi    a5,a5,-338 # e0001864 <kDeviceLogBypassUartAddress>
e00009be:              439c                     lw      a5,0(a5)
e00009c0:              c83a                     sw      a4,16(sp)
e00009c2:              c636                     sw      a3,12(sp)
e00009c4:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00009c6:              c388                     sw      a0,0(a5)
e00009c8:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
e00009ca:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e00009cc:       /----- c989                     beqz    a1,e00009de <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
e00009ce:       |  /-> 4512                     lw      a0,4(sp)
e00009d0:       |  |   00450613                 addi    a2,a0,4
e00009d4:       |  |   c232                     sw      a2,4(sp)
e00009d6:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e00009d8:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00009da:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
e00009dc:       |  \-- f9ed                     bnez    a1,e00009ce <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
e00009de:       \----> 6105                     addi    sp,sp,32
e00009e0:              8082                     ret

e00009e2 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
e00009e2:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
e00009e4:       8082                    ret

e00009e6 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84
void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}

size_t base_printf(const char *format, ...) {
e00009e6:       7179                    addi    sp,sp,-48
e00009e8:       c606                    sw      ra,12(sp)
e00009ea:       d646                    sw      a7,44(sp)
e00009ec:       d442                    sw      a6,40(sp)
e00009ee:       d23e                    sw      a5,36(sp)
e00009f0:       d03a                    sw      a4,32(sp)
e00009f2:       ce36                    sw      a3,28(sp)
e00009f4:       cc32                    sw      a2,24(sp)
e00009f6:       ca2e                    sw      a1,20(sp)
e00009f8:       00001597                auipc   a1,0x1
e00009fc:       ef858593                addi    a1,a1,-264 # e00018f0 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
e0000a00:       4190                    lw      a2,0(a1)
e0000a02:       41cc                    lw      a1,4(a1)
e0000a04:       872a                    mv      a4,a0
e0000a06:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
e0000a08:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000a0a:       0854                    addi    a3,sp,20
e0000a0c:       8532                    mv      a0,a2
e0000a0e:       863a                    mv      a2,a4
e0000a10:       200d                    jal     e0000a32 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
e0000a12:       40b2                    lw      ra,12(sp)
e0000a14:       6145                    addi    sp,sp,48
e0000a16:       8082                    ret

e0000a18 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
e0000a18:       00001697                auipc   a3,0x1
e0000a1c:       ed868693                addi    a3,a3,-296 # e00018f0 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000a20:       4290                    lw      a2,0(a3)
e0000a22:       42d4                    lw      a3,4(a3)
e0000a24:       872e                    mv      a4,a1
e0000a26:       87aa                    mv      a5,a0
e0000a28:       8532                    mv      a0,a2
e0000a2a:       85b6                    mv      a1,a3
e0000a2c:       863e                    mv      a2,a5
e0000a2e:       86ba                    mv      a3,a4
e0000a30:       a009                    j       e0000a32 <base_vfprintf>

e0000a32 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
e0000a32:                                                                    715d                       addi    sp,sp,-80
e0000a34:                                                                    c686                       sw      ra,76(sp)
e0000a36:                                                                    c4a2                       sw      s0,72(sp)
e0000a38:                                                                    c2a6                       sw      s1,68(sp)
e0000a3a:                                                                    c0ca                       sw      s2,64(sp)
e0000a3c:                                                                    de4e                       sw      s3,60(sp)
e0000a3e:                                                                    dc52                       sw      s4,56(sp)
e0000a40:                                                                    da56                       sw      s5,52(sp)
e0000a42:                                                                    d85a                       sw      s6,48(sp)
e0000a44:                                                                    d65e                       sw      s7,44(sp)
e0000a46:                                                                    d462                       sw      s8,40(sp)
e0000a48:                                                                    d266                       sw      s9,36(sp)
e0000a4a:                                                                    d06a                       sw      s10,32(sp)
e0000a4c:                                                                    ce6e                       sw      s11,28(sp)
e0000a4e:                                                                    8cb2                       mv      s9,a2
e0000a50:                                                                    892a                       mv      s2,a0
e0000a52:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
e0000a54:                                                                /-- c199                       beqz    a1,e0000a5a <base_vfprintf+0x28>
e0000a56:                                                                |   89ae                       mv      s3,a1
e0000a58:                                                             /--|-- a029                       j       e0000a62 <base_vfprintf+0x30>
e0000a5a:                                                             |  \-> 00000997           auipc   s3,0x0
e0000a5e:                                                             |      f8898993           addi    s3,s3,-120 # e00009e2 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
e0000a62:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
e0000a64:                                                                    000cc503           lbu     a0,0(s9)
e0000a68:       /----------------------------------------------------------- 42050563           beqz    a0,e0000e92 <base_vfprintf+0x460>
e0000a6c:       |                                                            4a81                       li      s5,0
e0000a6e:       |                                                            02500c13           li      s8,37
e0000a72:       |                                                            4d25                       li      s10,9
e0000a74:       |                                                            4a29                       li      s4,10
e0000a76:       |                                                            658d                       lui     a1,0x3
e0000a78:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_min_stack+0xc22>
e0000a7c:       |                                                            c02e                       sw      a1,0(sp)
e0000a7e:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
e0000a80:       |        |                                               /-> 0ff57413           andi    s0,a0,255
e0000a84:       |        |                                            /--|-- 01840963           beq     s0,s8,e0000a96 <base_vfprintf+0x64>
e0000a88:       |        |                                            +--|-- c419                       beqz    s0,e0000a96 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
e0000a8a:       |        |                                            |  |   009c8533           add     a0,s9,s1
e0000a8e:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
e0000a92:       |        |                                            |  |   0485                       addi    s1,s1,1
e0000a94:       |        |                                            |  \-- b7f5                       j       e0000a80 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
e0000a96:       |        |                                            \--/-X c491                       beqz    s1,e0000aa2 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
e0000a98:       |        |                                               |   854a                       mv      a0,s2
e0000a9a:       |        |                                               |   85e6                       mv      a1,s9
e0000a9c:       |        |                                               |   8626                       mv      a2,s1
e0000a9e:       |        |                                               |   9982                       jalr    s3
e0000aa0:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
e0000aa2:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,e0000e94 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
e0000aa6:       |  |     |                                                   009c8533           add     a0,s9,s1
e0000aaa:       |  |     |                                                   00154603           lbu     a2,1(a0)
e0000aae:       |  |     |                                                   02100713           li      a4,33
e0000ab2:       |  |     |                                            /----- 00e61863           bne     a2,a4,e0000ac2 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000ab6:       |  |     |                                            |      00254583           lbu     a1,2(a0)
e0000aba:       |  |     |                                            |      00250693           addi    a3,a0,2
e0000abe:       |  |     |                                            |      4b05                       li      s6,1
e0000ac0:       |  |     |                                            |  /-- a029                       j       e0000aca <base_vfprintf+0x98>
e0000ac2:       |  |     |                                            \--|-> 4b01                       li      s6,0
e0000ac4:       |  |     |                                               |   00150693           addi    a3,a0,1
e0000ac8:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000aca:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,e0000e80 <base_vfprintf+0x44e>
e0000ace:       |  |  |  |                                                   4481                       li      s1,0
e0000ad0:       |  |  |  |                                                   4b81                       li      s7,0
e0000ad2:       |  |  |  |                                                   4501                       li      a0,0
e0000ad4:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
e0000ad8:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
e0000adc:       |  |  |  |                                                   00168c93           addi    s9,a3,1
e0000ae0:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
e0000ae4:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000ae8:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
e0000aec:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,e0000b22 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
e0000af0:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
e0000af4:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,e0000b0a <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
e0000af6:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
e0000afa:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
e0000afc:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000b00:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000b04:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
e0000b06:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,e0000ae0 <base_vfprintf+0xae>
e0000b08:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       e0000e80 <base_vfprintf+0x44e>
e0000b0a:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
e0000b0e:       |  |  |  |                                   |     |  |      03000613           li      a2,48
e0000b12:       |  |  |  |                                   |     |  |      02000513           li      a0,32
e0000b16:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,e0000af6 <base_vfprintf+0xc4>
e0000b1a:       |  |  |  |                                   |     |         03000513           li      a0,48
e0000b1e:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
e0000b20:       |  |  |  |                                   |     \-------- b7c5                       j       e0000b00 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
e0000b22:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,e0000b2a <base_vfprintf+0xf8>
e0000b24:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,e0000b32 <base_vfprintf+0x100>
e0000b28:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       e0000eb4 <base_vfprintf+0x482>
e0000b2a:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
e0000b2e:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,e0000eb4 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000b32:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
e0000b36:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,e0000b88 <base_vfprintf+0x156>
e0000b3a:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
e0000b3c:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
e0000b40:       |  |  |  |  |                                         |      a9458593           addi    a1,a1,-1388 # e00015d0 <memrchr+0x3a4>
e0000b44:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
e0000b46:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
e0000b48:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
e0000b4a:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,e0000e02 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
e0000b4e:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
e0000b50:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
e0000b54:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
e0000b56:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
e0000b5a:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,e0000b72 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
e0000b5e:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
e0000b62:       |  |  |  |  |  |                                      |  |   b0958593           addi    a1,a1,-1271 # e0001667 <memrchr+0x43b>
e0000b66:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
e0000b68:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
e0000b6a:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
e0000b6c:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
e0000b6e:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0000b72:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
e0000b76:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
e0000b7a:       |  |  |  |  |  |                                      |      b0a80813           addi    a6,a6,-1270 # e0001680 <kDigitsLow>
e0000b7e:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
e0000b80:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
e0000b82:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
e0000b84:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
e0000b86:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       e0000dce <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000b88:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
e0000b8c:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,e0000bc6 <base_vfprintf+0x194>
e0000b90:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,e0000e02 <base_vfprintf+0x3d0>
e0000b94:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,e0000e02 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
e0000b98:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
e0000b9c:       |  |  |  |  |  |        |                                |   acd58593           addi    a1,a1,-1331 # e0001665 <memrchr+0x439>
e0000ba0:       |  |  |  |  |  |        |                             /--|-- a851                       j       e0000c34 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
e0000ba2:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,e0000bc6 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
e0000ba6:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
e0000ba8:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
e0000bac:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0000bae:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
e0000bb0:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
e0000bb4:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0000bb6:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000bb8:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
e0000bbc:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
e0000bc0:       |  |  |  |  |  |        |                             |  |   af188893           addi    a7,a7,-1295 # e00016ad <kDigitsHigh>
e0000bc4:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       e0000da8 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
e0000bc6:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
e0000bc8:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
e0000bcc:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
e0000bce:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
e0000bd0:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
e0000bd4:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
e0000bd8:       |  |  |  |  |  |        |           |                 |      ad980813           addi    a6,a6,-1319 # e00016ad <kDigitsHigh>
e0000bdc:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       e0000dc8 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
e0000bde:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,e0000e02 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
e0000be2:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
e0000be4:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
e0000be8:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e0000bea:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
e0000bec:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
e0000bf0:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e0000bf2:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000bf4:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
e0000bf8:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
e0000bfc:       |  |  |  |  |  |        |        |  |                 |      ab588893           addi    a7,a7,-1355 # e00016ad <kDigitsHigh>
e0000c00:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       e0000df6 <base_vfprintf+0x3c4>
e0000c02:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
e0000c04:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
e0000c08:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
e0000c0a:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
e0000c0c:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,e0000e1c <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
e0000c10:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,e0000e74 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
e0000c14:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
e0000c18:       |  |  |  |  |  |  |     |  |  |  |  |                 |      a5858593           addi    a1,a1,-1448 # e000166c <memrchr+0x440>
e0000c1c:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
e0000c1e:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       e0000e0c <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
e0000c20:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,e0000e02 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
e0000c24:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
e0000c26:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
e0000c2a:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
e0000c2c:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
e0000c2e:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
e0000c32:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
e0000c34:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
e0000c36:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       e0000e0c <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
e0000c38:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,e0000e02 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
e0000c3c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
e0000c3e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
e0000c42:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
e0000c44:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
e0000c46:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
e0000c4a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
e0000c4e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        a3680813           addi    a6,a6,-1482 # e0001680 <kDigitsLow>
e0000c52:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
e0000c54:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       e0000dca <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
e0000c56:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,e0000e02 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0000c5a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
e0000c5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     a0f58593           addi    a1,a1,-1521 # e0001669 <memrchr+0x43d>
e0000c62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
e0000c64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0000c66:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
e0000c68:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
e0000c6a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
e0000c6e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
e0000c70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0000c72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
e0000c76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
e0000c7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     a0a80813           addi    a6,a6,-1526 # e0001680 <kDigitsLow>
e0000c7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
e0000c80:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
e0000c84:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
e0000c86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0000c88:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
e0000c8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     e0000fa4 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
e0000c8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
e0000c90:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       e0000e12 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
e0000c92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
e0000c94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
e0000c98:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
e0000c9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
e0000c9c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
e0000c9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
e0000ca2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
e0000ca6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0000ca8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
e0000caa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
e0000cac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
e0000cb0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     e0001022 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
e0000cb2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0000cb4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0000cb6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
e0000cba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
e0000cbe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0000cc0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
e0000cc2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,e0000cba <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0000cc4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
e0000cc8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0000ccc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9af58593           addi    a1,a1,-1617 # e0001677 <memrchr+0x44b>
e0000cd0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0000cd2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e0000cd4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0000cd6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e0000cd8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
e0000cdc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0000cde:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0000ce0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
e0000ce4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0000ce8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  99458593           addi    a1,a1,-1644 # e0001678 <memrchr+0x44c>
e0000cec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0000cee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
e0000cf0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0000cf2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
e0000cf4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0000cf8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  96858593           addi    a1,a1,-1688 # e000165c <memrchr+0x430>
e0000cfc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
e0000cfe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0000d00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0000d02:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
e0000d06:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,e0000e2c <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
e0000d0a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e0000d0e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               97058593           addi    a1,a1,-1680 # e000167a <memrchr+0x44e>
e0000d12:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e0000d14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0000d16:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e0000d18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e0000d1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
e0000d1e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
e0000d20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0000d22:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e0000d24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e0000d26:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e0000d28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
e0000d2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               95880813           addi    a6,a6,-1704 # e0001680 <kDigitsLow>
e0000d30:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
e0000d32:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0000d34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
e0000d36:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
e0000d38:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
e0000d3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     e0000fa4 <write_digits>
e0000d3c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
e0000d3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e0000d42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               93e58593           addi    a1,a1,-1730 # e000167c <memrchr+0x450>
e0000d46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e0000d48:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0000d4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e0000d4c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
e0000d4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       e0000e46 <base_vfprintf+0x414>
e0000d50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
e0000d52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
e0000d56:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
e0000d58:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,e0000e5e <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
e0000d5c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e0000d5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
e0000d62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0000d64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
e0000d66:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       e0000e0c <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
e0000d68:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,e0000e02 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
e0000d6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
e0000d6e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
e0000d72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0000d74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0000d76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
e0000d7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
e0000d7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         90680813           addi    a6,a6,-1786 # e0001680 <kDigitsLow>
e0000d82:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
e0000d84:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       e0000dca <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
e0000d86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,e0000db2 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
e0000d8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
e0000d8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
e0000d90:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0000d92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
e0000d94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
e0000d98:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0000d9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000d9c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
e0000da0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
e0000da4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   8e088893           addi    a7,a7,-1824 # e0001680 <kDigitsLow>
e0000da8:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
e0000daa:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
e0000dac:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
e0000dae:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
e0000db0:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       e0000dfe <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
e0000db2:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
e0000db4:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
e0000db8:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
e0000dba:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
e0000dbc:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
e0000dc0:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
e0000dc4:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      8c080813           addi    a6,a6,-1856 # e0001680 <kDigitsLow>
e0000dc8:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
e0000dca:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
e0000dcc:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
e0000dce:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
e0000dd0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     e0000fa4 <write_digits>
e0000dd2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       e0000e10 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
e0000dd4:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,e0000e02 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
e0000dd8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
e0000dda:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
e0000dde:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e0000de0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
e0000de2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
e0000de6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e0000de8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000dea:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
e0000dee:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
e0000df2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   89288893           addi    a7,a7,-1902 # e0001680 <kDigitsLow>
e0000df6:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
e0000df8:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
e0000dfa:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
e0000dfc:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
e0000dfe:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     e0000ec0 <hex_dump>
e0000e00:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       e0000e10 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
e0000e02:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
e0000e06:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   8bb58593           addi    a1,a1,-1861 # e00016bd <kUnknownSpec>
e0000e0a:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
e0000e0c:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
e0000e0e:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
e0000e10:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
e0000e12:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
e0000e16:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,e0000a7e <base_vfprintf+0x4c>
e0000e1a:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       e0000e94 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
e0000e1c:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
e0000e20:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
e0000e24:       |  |  |     |     |  |                 |  |  |  |  |         86080813           addi    a6,a6,-1952 # e0001680 <kDigitsLow>
e0000e28:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
e0000e2a:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       e0000dca <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e0000e2c:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
e0000e2e:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
e0000e32:       |  |  |     |     |  |                    |     |  |         85280813           addi    a6,a6,-1966 # e0001680 <kDigitsLow>
e0000e36:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
e0000e38:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
e0000e3a:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
e0000e3c:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
e0000e3e:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
e0000e40:       |  |  |     |     |  |                    |     |  |         2295                       jal     e0000fa4 <write_digits>
e0000e42:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
e0000e46:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
e0000e4a:       |  |  |     |     |  |                    |     |            83858593           addi    a1,a1,-1992 # e000167e <memrchr+0x452>
e0000e4e:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
e0000e50:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
e0000e52:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
e0000e54:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
e0000e58:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
e0000e5c:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       e0000e12 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e0000e5e:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
e0000e60:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0000e62:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
e0000e66:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
e0000e6a:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0000e6c:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,e0000e62 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
e0000e6e:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
e0000e72:       |  |  |     |     |  +-------------------------------------- bf69                       j       e0000e0c <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
e0000e74:       |  |  |     |     \--|-------------------------------------> 00000597           auipc   a1,0x0
e0000e78:       |  |  |     |        |                                       7fd58593           addi    a1,a1,2045 # e0001671 <memrchr+0x445>
e0000e7c:       |  |  |     |        |                                       4615                       li      a2,5
e0000e7e:       |  |  |     |        \-------------------------------------- b779                       j       e0000e0c <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
e0000e80:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
e0000e84:       |  |        |                                                81058593           addi    a1,a1,-2032 # e0001690 <kErrorNul>
e0000e88:       |  |        |                                                4645                       li      a2,17
e0000e8a:       |  |        |                                            /-> 854a                       mv      a0,s2
e0000e8c:       |  |        |                                            |   9982                       jalr    s3
e0000e8e:       |  |        |                                            |   9aaa                       add     s5,s5,a0
e0000e90:       |  +--------|--------------------------------------------|-- a011                       j       e0000e94 <base_vfprintf+0x462>
e0000e92:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
e0000e94:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
e0000e96:                   |                                            |   4df2                       lw      s11,28(sp)
e0000e98:                   |                                            |   5d02                       lw      s10,32(sp)
e0000e9a:                   |                                            |   5c92                       lw      s9,36(sp)
e0000e9c:                   |                                            |   5c22                       lw      s8,40(sp)
e0000e9e:                   |                                            |   5bb2                       lw      s7,44(sp)
e0000ea0:                   |                                            |   5b42                       lw      s6,48(sp)
e0000ea2:                   |                                            |   5ad2                       lw      s5,52(sp)
e0000ea4:                   |                                            |   5a62                       lw      s4,56(sp)
e0000ea6:                   |                                            |   59f2                       lw      s3,60(sp)
e0000ea8:                   |                                            |   4906                       lw      s2,64(sp)
e0000eaa:                   |                                            |   4496                       lw      s1,68(sp)
e0000eac:                   |                                            |   4426                       lw      s0,72(sp)
e0000eae:                   |                                            |   40b6                       lw      ra,76(sp)
e0000eb0:                   |                                            |   6161                       addi    sp,sp,80
e0000eb2:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
e0000eb4:                   \--------------------------------------------|-> 00000597           auipc   a1,0x0
e0000eb8:                                                                |   7ed58593           addi    a1,a1,2029 # e00016a1 <kErrorTooWide>
e0000ebc:                                                                |   4631                       li      a2,12
e0000ebe:                                                                \-- b7f1                       j       e0000e8a <base_vfprintf+0x458>

e0000ec0 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
e0000ec0:                    715d                       addi    sp,sp,-80
e0000ec2:                    c686                       sw      ra,76(sp)
e0000ec4:                    c4a2                       sw      s0,72(sp)
e0000ec6:                    c2a6                       sw      s1,68(sp)
e0000ec8:                    c0ca                       sw      s2,64(sp)
e0000eca:                    de4e                       sw      s3,60(sp)
e0000ecc:                    dc52                       sw      s4,56(sp)
e0000ece:                    da56                       sw      s5,52(sp)
e0000ed0:                    d85a                       sw      s6,48(sp)
e0000ed2:                    d65e                       sw      s7,44(sp)
e0000ed4:                    d462                       sw      s8,40(sp)
e0000ed6:                    d266                       sw      s9,36(sp)
e0000ed8:                    d06a                       sw      s10,32(sp)
e0000eda:                    8bc6                       mv      s7,a7
e0000edc:                    8a42                       mv      s4,a6
e0000ede:                    8b36                       mv      s6,a3
e0000ee0:                    8ab2                       mv      s5,a2
e0000ee2:                    892e                       mv      s2,a1
e0000ee4:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
e0000ee6:          /-------- 02e6fc63           bgeu    a3,a4,e0000f1e <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
e0000eea:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
e0000eee:          |         850a                       mv      a0,sp
e0000ef0:          |         02000613           li      a2,32
e0000ef4:          |         85be                       mv      a1,a5
e0000ef6:          |         241d                       jal     e000111c <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e0000ef8:          +-------- c09d                       beqz    s1,e0000f1e <hex_dump+0x5e>
e0000efa:          |         4c01                       li      s8,0
e0000efc:          |  /----> 02000513           li      a0,32
e0000f00:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
e0000f02:          |  |  /-- 00a4e463           bltu    s1,a0,e0000f0a <hex_dump+0x4a>
e0000f06:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e0000f0a:          |  |  \-> 858a                       mv      a1,sp
e0000f0c:          |  |      854e                       mv      a0,s3
e0000f0e:          |  |      8622                       mv      a2,s0
e0000f10:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
e0000f12:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e0000f14:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e0000f16:          |  \----- f0fd                       bnez    s1,e0000efc <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0000f18:          |     /-- 000b1663           bnez    s6,e0000f24 <hex_dump+0x64>
e0000f1c:       /--|-----|-- a0ad                       j       e0000f86 <hex_dump+0xc6>
e0000f1e:       |  \-----|-> 4c01                       li      s8,0
e0000f20:       +--------|-- 060b0363           beqz    s6,e0000f86 <hex_dump+0xc6>
e0000f24:       |        \-> 4401                       li      s0,0
e0000f26:       |            4601                       li      a2,0
e0000f28:       |            fffb0493           addi    s1,s6,-1
e0000f2c:       |            8b0a                       mv      s6,sp
e0000f2e:       |            02000c93           li      s9,32
e0000f32:       |            5d7d                       li      s10,-1
e0000f34:       |     /----> 8526                       mv      a0,s1
e0000f36:       |     |  /-- 000a1363           bnez    s4,e0000f3c <hex_dump+0x7c>
e0000f3a:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
e0000f3c:       |     |  \-> 9556                       add     a0,a0,s5
e0000f3e:       |     |      00054503           lbu     a0,0(a0)
e0000f42:       |     |      00455593           srli    a1,a0,0x4
e0000f46:       |     |      95de                       add     a1,a1,s7
e0000f48:       |     |      00058583           lb      a1,0(a1)
e0000f4c:       |     |      00cb06b3           add     a3,s6,a2
e0000f50:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e0000f54:       |     |      893d                       andi    a0,a0,15
e0000f56:       |     |      955e                       add     a0,a0,s7
e0000f58:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
e0000f5c:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e0000f5e:       |     |      00a680a3           sb      a0,1(a3)
e0000f62:       |     |  /-- 01961963           bne     a2,s9,e0000f74 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
e0000f66:       |     |  |   858a                       mv      a1,sp
e0000f68:       |     |  |   02000613           li      a2,32
e0000f6c:       |     |  |   854e                       mv      a0,s3
e0000f6e:       |     |  |   9902                       jalr    s2
e0000f70:       |     |  |   4601                       li      a2,0
e0000f72:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0000f74:       |     |  \-> 14fd                       addi    s1,s1,-1
e0000f76:       |     |      0405                       addi    s0,s0,1
e0000f78:       |     \----- fba49ee3           bne     s1,s10,e0000f34 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
e0000f7c:       +----------- c609                       beqz    a2,e0000f86 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
e0000f7e:       |            858a                       mv      a1,sp
e0000f80:       |            854e                       mv      a0,s3
e0000f82:       |            9902                       jalr    s2
e0000f84:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
e0000f86:       \----------> 8562                       mv      a0,s8
e0000f88:                    5d02                       lw      s10,32(sp)
e0000f8a:                    5c92                       lw      s9,36(sp)
e0000f8c:                    5c22                       lw      s8,40(sp)
e0000f8e:                    5bb2                       lw      s7,44(sp)
e0000f90:                    5b42                       lw      s6,48(sp)
e0000f92:                    5ad2                       lw      s5,52(sp)
e0000f94:                    5a62                       lw      s4,56(sp)
e0000f96:                    59f2                       lw      s3,60(sp)
e0000f98:                    4906                       lw      s2,64(sp)
e0000f9a:                    4496                       lw      s1,68(sp)
e0000f9c:                    4426                       lw      s0,72(sp)
e0000f9e:                    40b6                       lw      ra,76(sp)
e0000fa0:                    6161                       addi    sp,sp,80
e0000fa2:                    8082                       ret

e0000fa4 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
e0000fa4:              7179                     addi    sp,sp,-48
e0000fa6:              d606                     sw      ra,44(sp)
e0000fa8:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
e0000faa:       /----- ca05                     beqz    a2,e0000fda <write_digits+0x36>
e0000fac:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e0000fae:       |      02b10293                 addi    t0,sp,43
e0000fb2:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
e0000fb4:       |  |   02f65633                 divu    a2,a2,a5
e0000fb8:       |  |   02f605b3                 mul     a1,a2,a5
e0000fbc:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
e0000fc0:       |  |   95c2                     add     a1,a1,a6
e0000fc2:       |  |   00058e03                 lb      t3,0(a1)
e0000fc6:       |  |   007285b3                 add     a1,t0,t2
e0000fca:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e0000fce:       |  |   13fd                     addi    t2,t2,-1
e0000fd0:       |  \-- fef371e3                 bgeu    t1,a5,e0000fb2 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e0000fd4:       |      40700633                 neg     a2,t2
e0000fd8:       |  /-- a031                     j       e0000fe4 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
e0000fda:       \--|-> 00080583                 lb      a1,0(a6)
e0000fde:          |   02b105a3                 sb      a1,43(sp)
e0000fe2:          |   4605                     li      a2,1
e0000fe4:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e0000fe6:          /-- c291                     beqz    a3,e0000fea <write_digits+0x46>
e0000fe8:          |   85b6                     mv      a1,a3
e0000fea:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
e0000fee:          /-- 00d5e463                 bltu    a1,a3,e0000ff6 <write_digits+0x52>
e0000ff2:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e0000ff6:       /--\-X 00b67e63                 bgeu    a2,a1,e0001012 <write_digits+0x6e>
e0000ffa:       |      40c586b3                 sub     a3,a1,a2
e0000ffe:       |      007c                     addi    a5,sp,12
e0001000:       |      40c78633                 sub     a2,a5,a2
e0001004:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
e0001006:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e000100a:       |  |   16fd                     addi    a3,a3,-1
e000100c:       |  |   167d                     addi    a2,a2,-1
e000100e:       |  \-- fee5                     bnez    a3,e0001006 <write_digits+0x62>
e0001010:       |      862e                     mv      a2,a1
e0001012:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
e0001014:              8d91                     sub     a1,a1,a2
e0001016:              02058593                 addi    a1,a1,32
e000101a:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
e000101c:              50b2                     lw      ra,44(sp)
e000101e:              6145                     addi    sp,sp,48
e0001020:              8082                     ret

e0001022 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
e0001022:              00052813                 slti    a6,a0,0
e0001026:              41f55793                 srai    a5,a0,0x1f
e000102a:              8fe9                     and     a5,a5,a0
e000102c:              8bfd                     andi    a5,a5,31
e000102e:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
e0001032:              00e87833                 and     a6,a6,a4
e0001036:              02000713                 li      a4,32
e000103a:          /-- 00081363                 bnez    a6,e0001040 <status_extract+0x1e>
e000103e:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
e0001040:          \-> 00271813                 slli    a6,a4,0x2
e0001044:              00001797                 auipc   a5,0x1
e0001048:              82478793                 addi    a5,a5,-2012 # e0001868 <status_codes>
e000104c:              97c2                     add     a5,a5,a6
e000104e:              439c                     lw      a5,0(a5)
e0001050:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
e0001052:              00173593                 seqz    a1,a4
e0001056:       /----- cb1d                     beqz    a4,e000108c <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0001058:       |      00555713                 srli    a4,a0,0x5
e000105c:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
e0001060:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0001062:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
e0001066:       |      8a7d                     andi    a2,a2,31
e0001068:       |      04066613                 ori     a2,a2,64
e000106c:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
e0001070:       |      01555613                 srli    a2,a0,0x15
e0001074:       |      8a7d                     andi    a2,a2,31
e0001076:       |      04066613                 ori     a2,a2,64
e000107a:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
e000107e:       |      8169                     srli    a0,a0,0x1a
e0001080:       |      897d                     andi    a0,a0,31
e0001082:       |      04056513                 ori     a0,a0,64
e0001086:       |      00a68123                 sb      a0,2(a3)
e000108a:       |  /-- a011                     j       e000108e <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
e000108c:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
e000108e:          \-> 0015c513                 xori    a0,a1,1
e0001092:              8082                     ret

e0001094 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
e0001094:                       00153693                seqz    a3,a0
e0001098:                       0015b713                seqz    a4,a1
e000109c:                       8ed9                    or      a3,a3,a4
e000109e:       /-------------- eab5                    bnez    a3,e0001112 <memcpy+0x7e>
e00010a0:       |               4711                    li      a4,4
e00010a2:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e00010a4:       |        /----- 00e66c63                bltu    a2,a4,e00010bc <memcpy+0x28>
e00010a8:       |        |      00a5c6b3                xor     a3,a1,a0
e00010ac:       |        |      0036f793                andi    a5,a3,3
e00010b0:       |        |      8832                    mv      a6,a2
e00010b2:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
e00010b4:       |        |  /-- eb91                    bnez    a5,e00010c8 <memcpy+0x34>
e00010b6:       |        |  |   40a006b3                neg     a3,a0
e00010ba:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e00010bc:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e00010c0:       |           |   9b71                    andi    a4,a4,-4
e00010c2:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e00010c6:       |  /--------|-- c6b9                    beqz    a3,e0001114 <memcpy+0x80>
e00010c8:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e00010ca:       |  |        /-> 00f58733                add     a4,a1,a5
e00010ce:       |  |        |   00070883                lb      a7,0(a4)
e00010d2:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e00010d6:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e00010d8:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e00010dc:       |  |        \-- fef697e3                bne     a3,a5,e00010ca <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00010e0:       |  |  /-------- 0106fb63                bgeu    a3,a6,e00010f6 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e00010e4:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e00010e8:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e00010ea:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e00010ee:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e00010f0:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e00010f2:       |  |  |  +----- ff06e9e3                bltu    a3,a6,e00010e4 <memcpy+0x50>
e00010f6:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,e0001112 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
e00010fa:       |  |  |  |      8e15                    sub     a2,a2,a3
e00010fc:       |  |  |  |      00d50733                add     a4,a0,a3
e0001100:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
e0001102:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
e0001106:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
e000110a:       |  |  |  |  |   167d                    addi    a2,a2,-1
e000110c:       |  |  |  |  |   0705                    addi    a4,a4,1
e000110e:       |  |  |  |  |   0585                    addi    a1,a1,1
e0001110:       |  |  |  |  \-- fa6d                    bnez    a2,e0001102 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
e0001112:       \--|--|--|----> 8082                    ret
e0001114:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001116:             |  \----- fd06e7e3                bltu    a3,a6,e00010e4 <memcpy+0x50>
e000111a:             \-------- bff1                    j       e00010f6 <memcpy+0x62>

e000111c <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
e000111c:                 4691                  li      a3,4
e000111e:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001120:             /-- 00d66663              bltu    a2,a3,e000112c <memset+0x10>
e0001124:             |   40a006b3              neg     a3,a0
e0001128:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e000112c:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001130:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001134:          /----- cb01                  beqz    a4,e0001144 <memset+0x28>
e0001136:          |      87aa                  mv      a5,a0
e0001138:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
e000113a:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
e000113e:          |  |   16fd                  addi    a3,a3,-1
e0001140:          |  |   0785                  addi    a5,a5,1
e0001142:          |  \-- fee5                  bnez    a3,e000113a <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001144:       /--\----X 02080263              beqz    a6,e0001168 <memset+0x4c>
e0001148:       |         00e808b3              add     a7,a6,a4
e000114c:       |         0ff5f813              andi    a6,a1,255
e0001150:       |         010107b7              lui     a5,0x1010
e0001154:       |         10178793              addi    a5,a5,257 # 1010101 <tohost+0xff00f9>
e0001158:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000115c:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e0001160:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001162:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e0001164:       |     \-- ff176ce3              bltu    a4,a7,e000115c <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
e0001168:       \--/----X 00c77a63              bgeu    a4,a2,e000117c <memset+0x60>
e000116c:          |      8e19                  sub     a2,a2,a4
e000116e:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
e0001172:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
e0001176:          |  |   167d                  addi    a2,a2,-1
e0001178:          |  |   0685                  addi    a3,a3,1
e000117a:          |  \-- fe65                  bnez    a2,e0001172 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
e000117c:          \----> 8082                  ret

e000117e <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
e000117e:                             4691                      li      a3,4
e0001180:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001182:                         /-- 00d66663                  bltu    a2,a3,e000118e <memchr+0x10>
e0001186:                         |   40a006b3                  neg     a3,a0
e000118a:                         |   0036fe93                  andi    t4,a3,3
e000118e:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001192:                      /----- 000e8b63                  beqz    t4,e00011a8 <memchr+0x2a>
e0001196:                      |      85aa                      mv      a1,a0
e0001198:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
e000119a:                      |  /-> 0005c683                  lbu     a3,0(a1)
e000119e:       /--------------|--|-- 09c68563                  beq     a3,t3,e0001228 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
e00011a2:       |              |  |   17fd                      addi    a5,a5,-1
e00011a4:       |              |  |   0585                      addi    a1,a1,1
e00011a6:       |              |  \-- fbf5                      bnez    a5,e000119a <memchr+0x1c>
e00011a8:       |              \----> 41d605b3                  sub     a1,a2,t4
e00011ac:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00011ae:       |  /----------------- c9a9                      beqz    a1,e0001200 <memchr+0x82>
e00011b0:       |  |                  01d58833                  add     a6,a1,t4
e00011b4:       |  |                  010105b7                  lui     a1,0x1010
e00011b8:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
e00011bc:       |  |                  02be02b3                  mul     t0,t3,a1
e00011c0:       |  |                  0ff00893                  li      a7,255
e00011c4:       |  |                  65c1                      lui     a1,0x10
e00011c6:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_stack_len+0x7f00>
e00011ca:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e00011ce:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e00011d2:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
e00011d4:       |  |              |   0056c7b3                  xor     a5,a3,t0
e00011d8:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e00011dc:       |  |              |   0ff6f713                  andi    a4,a3,255
e00011e0:       +--|--------------|-- 05170463                  beq     a4,a7,e0001228 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e00011e4:       |  |              |   0076f733                  and     a4,a3,t2
e00011e8:       |  |  /-----------|-- 02770b63                  beq     a4,t2,e000121e <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e00011ec:       |  |  |           |   0066f6b3                  and     a3,a3,t1
e00011f0:       |  |  |  /--------|-- 02668963                  beq     a3,t1,e0001222 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e00011f4:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
e00011f8:       |  |  |  |  /-----|-- c69d                      beqz    a3,e0001226 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00011fa:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
e00011fc:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,e00011ce <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
e0001200:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,e000121a <memchr+0x9c>
e0001204:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
e0001208:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
e000120c:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
e0001210:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,e0001228 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
e0001214:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
e0001216:       |     |  |  |  |  |   0585                      addi    a1,a1,1
e0001218:       |     |  |  |  |  \-- fa75                      bnez    a2,e000120c <memchr+0x8e>
e000121a:       |     |  |  |  \----> 4581                      li      a1,0
e000121c:       +-----|--|--|-------- a031                      j       e0001228 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
e000121e:       |     \--|--|-------> 0585                      addi    a1,a1,1
e0001220:       +--------|--|-------- a021                      j       e0001228 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
e0001222:       |        \--|-------> 0589                      addi    a1,a1,2
e0001224:       +-----------|-------- a011                      j       e0001228 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
e0001226:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e0001228:       \-------------------> 852e                      mv      a0,a1
e000122a:                             8082                      ret

e000122c <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
e000122c:                          4691                 li      a3,4
e000122e:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001230:                      /-- 00d66663             bltu    a2,a3,e000123c <memrchr+0x10>
e0001234:                      |   40a006b3             neg     a3,a0
e0001238:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e000123c:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001240:                          9af1                 andi    a3,a3,-4
e0001242:                          006687b3             add     a5,a3,t1
e0001246:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
e0001248:                      /-- 00f66363             bltu    a2,a5,e000124e <memrchr+0x22>
e000124c:                      |   86be                 mv      a3,a5
e000124e:                      \-> 0ff5f393             andi    t2,a1,255
e0001252:                   /--/-X 00c7fd63             bgeu    a5,a2,e000126c <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
e0001256:                   |  |   00c50733             add     a4,a0,a2
e000125a:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
e000125e:                   |  |   fff60713             addi    a4,a2,-1
e0001262:                   |  |   863a                 mv      a2,a4
e0001264:                   |  \-- fe7597e3             bne     a1,t2,e0001252 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e0001268:                   |      953a                 add     a0,a0,a4
e000126a:                   |      8082                 ret
e000126c:                   \----> 010105b7             lui     a1,0x1010
e0001270:                          10158593             addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
e0001274:                          02b382b3             mul     t0,t2,a1
e0001278:                          00ff0837             lui     a6,0xff0
e000127c:                          65c1                 lui     a1,0x10
e000127e:                          f0058793             addi    a5,a1,-256 # ff00 <_stack_len+0x7f00>
e0001282:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
e0001286:       /--------------/-X 04d37563             bgeu    t1,a3,e00012d0 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000128a:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e000128e:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
e0001292:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001296:       |              |   01875593             srli    a1,a4,0x18
e000129a:       |  /-----------|-- cd95                 beqz    a1,e00012d6 <memrchr+0xaa>
e000129c:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e00012a0:       |  |           |   010775b3             and     a1,a4,a6
e00012a4:       |  |  /--------|-- 03058c63             beq     a1,a6,e00012dc <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e00012a8:       |  |  |        |   00f775b3             and     a1,a4,a5
e00012ac:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,e00012e2 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e00012b0:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
e00012b4:       |  |  |  |     |   16f1                 addi    a3,a3,-4
e00012b6:       |  |  |  |     \-- fd1598e3             bne     a1,a7,e0001286 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00012ba:       |  |  |  |         9536                 add     a0,a0,a3
e00012bc:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
e00012be:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
e00012c2:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
e00012c6:       |  |  |  |     |   fff68613             addi    a2,a3,-1
e00012ca:       |  |  |  |     |   86b2                 mv      a3,a2
e00012cc:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,e00012e8 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
e00012d0:       \--|--|--|--|--\-X f6fd                 bnez    a3,e00012be <memrchr+0x92>
e00012d2:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00012d4:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
e00012d6:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00012da:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
e00012dc:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00012e0:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
e00012e2:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00012e6:                   |      8082                 ret
e00012e8:                   \----> 9532                 add     a0,a0,a2
e00012ea:                          8082                 ret
