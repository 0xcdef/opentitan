
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/spi_host_test/spi_host_test_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/spi_host_test/spi_host_test_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xe0000080

Program Header:
    LOAD off    0x00001000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00003c9c memsz 0x00003c9c flags rwx
    LOAD off    0x00000000 vaddr 0xe0008000 paddr 0xe0008000 align 2**12
         filesz 0x00000000 memsz 0x00002000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                          Size      VMA       LMA       File off  Algn  Flags
  0 .vectors                      00000084  e0000000  e0000000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text                         00001616  e0000084  e0000084  00001084  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata                       0000058c  e00016a0  e00016a0  000026a0  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data                         00000084  e0001c2c  e0001c2c  00002c2c  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .static_critical.sec_mmio_ctx 00001f50  e0001cb0  e0001cb0  00002cb0  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .bss                          00000010  e0003c00  e0003c00  00004c00  2**2  ALLOC
  6 .logs.fields                  0000008c  e0003c10  e0003c10  00004c10  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .stack                        00002000  e0008000  e0008000  00005000  2**0  ALLOC
  8 .debug_loc                    00005b2b  00000000  00000000  00004c9c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev                 00001b5a  00000000  00000000  0000a7c7  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info                   00008174  00000000  00000000  0000c321  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges                 00000848  00000000  00000000  00014495  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str                    00004824  00000000  00000000  00014cdd  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .comment                      00000074  00000000  00000000  00019501  2**0  CONTENTS, READONLY
 14 .riscv.attributes             00000026  00000000  00000000  00019575  2**0  CONTENTS, READONLY
 15 .debug_frame                  000008c4  00000000  00000000  0001959c  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line                   0000527c  00000000  00000000  00019e60  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges                00000028  00000000  00000000  0001f0dc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
e0000000 l    d  .vectors       00000000 .vectors
e0000084 l    d  .text  00000000 .text
e00016a0 l    d  .rodata        00000000 .rodata
e0001c2c l    d  .data  00000000 .data
e0001cb0 l    d  .static_critical.sec_mmio_ctx  00000000 .static_critical.sec_mmio_ctx
e0003c00 l    d  .bss   00000000 .bss
e0003c10 l    d  .logs.fields   00000000 .logs.fields
e0008000 l    d  .stack 00000000 .stack
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .comment       00000000 .comment
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    df *ABS*  00000000 crt0.o
e0000084 l       .text  00000000 default_exc_handler
e0000084 l       .text  00000000 
e00000f2 l       .text  00000000 sleep_loop
e0000084 l       .text  00000000 
e0000086 l       .text  00000000 reset_handler
e0000086 l       .text  00000000 
e0000086 l       .text  00000000 
e00000cc l       .text  00000000 
e00000ea l       .text  00000000 zero_loop_end
e00000e0 l       .text  00000000 zero_loop
e00000e0 l       .text  00000000 
e00000ea l       .text  00000000 
e00000ea l       .text  00000000 main_entry
e00000ea l       .text  00000000 
e00000ee l       .text  00000000 
e00000f2 l       .text  00000000 
e00000f2 l       .text  00000000 
e00000f6 l       .text  00000000 
e0000000 l       .vectors       00000000 
e000002c l       .vectors       00000000 
e0000030 l       .vectors       00000000 
e000007c l       .vectors       00000000 
e0000080 l       .vectors       00000000 
00001393 l       .debug_info    00000000 
000004b3 l       .debug_abbrev  00000000 
e00000f8 l       .text  00000000 
e0000084 l       .vectors       00000000 
00000158 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 spi_host_test.c
e00000f8 l       .text  00000000 
e00000f8 l       .text  00000000 
e00000f8 l       .text  00000000 
e00000fa l       .text  00000000 
e0000102 l       .text  00000000 
e0000104 l       .text  00000000 
e0000104 l       .text  00000000 
e0000108 l       .text  00000000 
e0000108 l       .text  00000000 
e0000110 l       .text  00000000 
e0000110 l       .text  00000000 
e0000114 l       .text  00000000 
e0000120 l       .text  00000000 
e0000124 l       .text  00000000 
e0000124 l       .text  00000000 
e000012c l       .text  00000000 
e000012e l       .text  00000000 
e000012e l       .text  00000000 
e0000130 l       .text  00000000 
e0000130 l       .text  00000000 
e0000134 l       .text  00000000 
e0000136 l       .text  00000000 
e0003c10 l     O .logs.fields   00000014 init_spi_host.kLogFields
e0000136 l       .text  00000000 
e0000146 l       .text  00000000 
e0000146 l       .text  00000000 
e0000148 l       .text  00000000 
e0000148 l       .text  00000000 
e0000160 l       .text  00000000 
e0000160 l       .text  00000000 
e0000166 l       .text  00000000 
e000016a l       .text  00000000 
e000016a l       .text  00000000 
e0000172 l       .text  00000000 
e0000174 l       .text  00000000 
e0000176 l       .text  00000000 
e0000176 l       .text  00000000 
e000017a l       .text  00000000 
e000017c l       .text  00000000 
e0003c24 l     O .logs.fields   00000014 init_spi_host.kLogFields.2
e000017c l       .text  00000000 
e000018c l       .text  00000000 
e000018c l       .text  00000000 
e000018e l       .text  00000000 
e000018e l       .text  00000000 
e00001a6 l       .text  00000000 
e00001a6 l       .text  00000000 
e00001ac l       .text  00000000 
e00001b0 l       .text  00000000 
e00001b0 l       .text  00000000 
e00001bc l       .text  00000000 
e00001bc l       .text  00000000 
e00001bc l       .text  00000000 
e00001bc l       .text  00000000 
e00001bc l       .text  00000000 
e00001be l       .text  00000000 
e00001be l       .text  00000000 
e00001d8 l       .text  00000000 
e00001d8 l       .text  00000000 
e00001da l       .text  00000000 
e00001de l       .text  00000000 
e00001de l       .text  00000000 
e00001e0 l       .text  00000000 
e00001e0 l       .text  00000000 
e00001ea l       .text  00000000 
e00001ec l       .text  00000000 
e00001ec l       .text  00000000 
e00001f6 l       .text  00000000 
e0003c00 l     O .bss   00000004 spi_host
e00001f6 l       .text  00000000 
e0000204 l       .text  00000000 
e0000204 l       .text  00000000 
e0000210 l       .text  00000000 
e0000210 l       .text  00000000 
e0000212 l       .text  00000000 
e0000212 l       .text  00000000 
e0000214 l       .text  00000000 
e0000214 l       .text  00000000 
e0000218 l       .text  00000000 
e0003c38 l     O .logs.fields   00000014 main.kLogFields
e0000218 l       .text  00000000 
e0000228 l       .text  00000000 
e0000228 l       .text  00000000 
e000022a l       .text  00000000 
e000022a l       .text  00000000 
e0000246 l       .text  00000000 
e0000246 l       .text  00000000 
e000024c l       .text  00000000 
e0000250 l       .text  00000000 
e0000250 l       .text  00000000 
e0000266 l       .text  00000000 
e0000266 l       .text  00000000 
e0000272 l       .text  00000000 
e0000274 l       .text  00000000 
e0000274 l       .text  00000000 
e000027c l       .text  00000000 
e000027c l       .text  00000000 
e0000280 l       .text  00000000 
e0000280 l       .text  00000000 
e000028c l       .text  00000000 
e000028c l       .text  00000000 
e00002a0 l       .text  00000000 
e00002a0 l       .text  00000000 
e0003c4c l     O .logs.fields   00000014 main.kLogFields.7
e00002be l       .text  00000000 
e00002c2 l       .text  00000000 
e00002c2 l       .text  00000000 
e00002c6 l       .text  00000000 
e00002c6 l       .text  00000000 
e00002e8 l       .text  00000000 
e00002e8 l       .text  00000000 
e000030c l       .text  00000000 
e000031c l       .text  00000000 
e0000320 l       .text  00000000 
e0000332 l       .text  00000000 
e0000332 l       .text  00000000 
e0000340 l       .text  00000000 
e0000342 l       .text  00000000 
e0000344 l       .text  00000000 
e0000344 l       .text  00000000 
e000034a l       .text  00000000 
e0000356 l       .text  00000000 
e0000356 l       .text  00000000 
e0000358 l       .text  00000000 
e0000358 l       .text  00000000 
e0000370 l       .text  00000000 
e0000370 l       .text  00000000 
e0000378 l       .text  00000000 
e0000378 l       .text  00000000 
e000037c l       .text  00000000 
e000037c l       .text  00000000 
e0000380 l       .text  00000000 
e0000384 l       .text  00000000 
e0000386 l       .text  00000000 
e000038a l       .text  00000000 
e000038c l       .text  00000000 
e0000390 l       .text  00000000 
e0000394 l       .text  00000000 
e0000398 l       .text  00000000 
e000039a l       .text  00000000 
e000039a l       .text  00000000 
e000039c l       .text  00000000 
e000039e l       .text  00000000 
e00003a2 l       .text  00000000 
e00003a2 l       .text  00000000 
e00003a4 l       .text  00000000 
e00003b0 l       .text  00000000 
e00003b0 l       .text  00000000 
e00003bc l       .text  00000000 
e00003bc l       .text  00000000 
e00003be l       .text  00000000 
e00003c0 l       .text  00000000 
e00003c0 l       .text  00000000 
e00003c6 l       .text  00000000 
e0003c60 l     O .logs.fields   00000014 main.kLogFields.10
e00003c6 l       .text  00000000 
e00003d6 l       .text  00000000 
e00003d6 l       .text  00000000 
e00003d8 l       .text  00000000 
e00003d8 l       .text  00000000 
e00003f4 l       .text  00000000 
e00003f4 l       .text  00000000 
e00003fa l       .text  00000000 
e00003fe l       .text  00000000 
e00003fe l       .text  00000000 
e000040e l       .text  00000000 
e0000410 l       .text  00000000 
e0000422 l       .text  00000000 
e0000422 l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000003c l       .debug_loc     00000000 
00000057 l       .debug_loc     00000000 
00000146 l       .debug_loc     00000000 
00000177 l       .debug_loc     00000000 
000001a8 l       .debug_loc     00000000 
000001c3 l       .debug_loc     00000000 
000001de l       .debug_loc     00000000 
0000023e l       .debug_loc     00000000 
000002bc l       .debug_loc     00000000 
000002ed l       .debug_loc     00000000 
00000331 l       .debug_loc     00000000 
00000379 l       .debug_loc     00000000 
000003b9 l       .debug_loc     00000000 
000003fd l       .debug_loc     00000000 
00000445 l       .debug_loc     00000000 
00000478 l       .debug_loc     00000000 
000004b5 l       .debug_loc     00000000 
000004dc l       .debug_loc     00000000 
00000504 l       .debug_loc     00000000 
0000052a l       .debug_loc     00000000 
00000569 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
000000b4 l       .debug_str     00000000 
0000017d l       .debug_str     00000000 
000000e0 l       .debug_str     00000000 
000000f5 l       .debug_str     00000000 
0000011e l       .debug_str     00000000 
00003f06 l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
0000015f l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000db l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00000167 l       .debug_str     00000000 
00000aac l       .debug_str     00000000 
00000189 l       .debug_str     00000000 
0000024d l       .debug_str     00000000 
000008f3 l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
000002c8 l       .debug_str     00000000 
0000020d l       .debug_str     00000000 
00000218 l       .debug_str     00000000 
000001de l       .debug_str     00000000 
000001f6 l       .debug_str     00000000 
0000403e l       .debug_str     00000000 
00000200 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001da l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001b6 l       .debug_str     00000000 
000001c8 l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
00000aba l       .debug_str     00000000 
00000b02 l       .debug_str     00000000 
00000b07 l       .debug_str     00000000 
00000ae2 l       .debug_str     00000000 
00000b0c l       .debug_str     00000000 
00000225 l       .debug_str     00000000 
00000b1c l       .debug_str     00000000 
00000b25 l       .debug_str     00000000 
00000b2e l       .debug_str     00000000 
00000b3a l       .debug_str     00000000 
00000cf5 l       .debug_str     00000000 
0000378a l       .debug_str     00000000 
00000b46 l       .debug_str     00000000 
00003e3b l       .debug_str     00000000 
00000b52 l       .debug_str     00000000 
00003bb7 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
00000b63 l       .debug_str     00000000 
00000b6d l       .debug_str     00000000 
00000b77 l       .debug_str     00000000 
000000b9 l       .debug_str     00000000 
00000b50 l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
0000023b l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
00000cff l       .debug_str     00000000 
00000265 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000276 l       .debug_str     00000000 
00000281 l       .debug_str     00000000 
0000028c l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000002ba l       .debug_str     00000000 
00000348 l       .debug_str     00000000 
000002d3 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
00000301 l       .debug_str     00000000 
00000313 l       .debug_str     00000000 
00000324 l       .debug_str     00000000 
00000336 l       .debug_str     00000000 
00000768 l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
0000035d l       .debug_str     00000000 
0000036b l       .debug_str     00000000 
0000038c l       .debug_str     00000000 
000003a2 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003ef l       .debug_str     00000000 
0000040b l       .debug_str     00000000 
0000041f l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000448 l       .debug_str     00000000 
00000461 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
00000489 l       .debug_str     00000000 
00000499 l       .debug_str     00000000 
000004ac l       .debug_str     00000000 
000004c6 l       .debug_str     00000000 
000004dd l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000513 l       .debug_str     00000000 
0000052f l       .debug_str     00000000 
00000546 l       .debug_str     00000000 
0000055c l       .debug_str     00000000 
00000574 l       .debug_str     00000000 
0000058c l       .debug_str     00000000 
000005a5 l       .debug_str     00000000 
000005be l       .debug_str     00000000 
000005d7 l       .debug_str     00000000 
000005f0 l       .debug_str     00000000 
0000060f l       .debug_str     00000000 
0000062d l       .debug_str     00000000 
00000647 l       .debug_str     00000000 
00000660 l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b6 l       .debug_str     00000000 
000006d2 l       .debug_str     00000000 
000006ee l       .debug_str     00000000 
00000705 l       .debug_str     00000000 
0000071e l       .debug_str     00000000 
00000734 l       .debug_str     00000000 
00000753 l       .debug_str     00000000 
0000081f l       .debug_str     00000000 
00000772 l       .debug_str     00000000 
0000078f l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
000007c9 l       .debug_str     00000000 
000007e2 l       .debug_str     00000000 
000007fb l       .debug_str     00000000 
0000087c l       .debug_str     00000000 
00000839 l       .debug_str     00000000 
00000852 l       .debug_str     00000000 
00000867 l       .debug_str     00000000 
000008bb l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
000008d2 l       .debug_str     00000000 
0000093e l       .debug_str     00000000 
000008e9 l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
0000356c l       .debug_str     00000000 
00000918 l       .debug_str     00000000 
0000091e l       .debug_str     00000000 
00000923 l       .debug_str     00000000 
00000934 l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
0000092e l       .debug_str     00000000 
00000952 l       .debug_str     00000000 
00000967 l       .debug_str     00000000 
0000097e l       .debug_str     00000000 
0000098e l       .debug_str     00000000 
000009ae l       .debug_str     00000000 
000009c2 l       .debug_str     00000000 
000009cb l       .debug_str     00000000 
000009d9 l       .debug_str     00000000 
000009e5 l       .debug_str     00000000 
000009ef l       .debug_str     00000000 
000009fa l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
00000a18 l       .debug_str     00000000 
00000a97 l       .debug_str     00000000 
00004706 l       .debug_str     00000000 
00003b6c l       .debug_str     00000000 
00000889 l       .debug_str     00000000 
00000b58 l       .debug_str     00000000 
00003bc5 l       .debug_str     00000000 
00000a7b l       .debug_str     00000000 
00003c71 l       .debug_str     00000000 
00000a82 l       .debug_str     00000000 
00000a85 l       .debug_str     00000000 
00000a8b l       .debug_str     00000000 
00000a91 l       .debug_str     00000000 
00000a31 l       .debug_str     00000000 
00000a4d l       .debug_str     00000000 
00000a62 l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00000abf l       .debug_str     00000000 
00000ad5 l       .debug_str     00000000 
00000aeb l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
e00001bc l       .text  00000000 
e0000422 l       .text  00000000 
00000000 l    df *ABS*  00000000 utils.c
e0000422 l       .text  00000000 
e0000422 l       .text  00000000 
e0000422 l       .text  00000000 
e0000424 l       .text  00000000 
e0000424 l       .text  00000000 
e0000432 l       .text  00000000 
e000043a l       .text  00000000 
e000043c l       .text  00000000 
e0000440 l       .text  00000000 
e0000444 l       .text  00000000 
e0000450 l       .text  00000000 
e0000452 l       .text  00000000 
e0000454 l       .text  00000000 
e0000454 l       .text  00000000 
e0000456 l       .text  00000000 
e0000456 l       .text  00000000 
e0000458 l       .text  00000000 
e0000458 l       .text  00000000 
e000045a l       .text  00000000 
e000045a l       .text  00000000 
e000045e l       .text  00000000 
e000045e l       .text  00000000 
e0000466 l       .text  00000000 
e0000468 l       .text  00000000 
e0000468 l       .text  00000000 
e000046a l       .text  00000000 
e000046a l       .text  00000000 
e0000480 l       .text  00000000 
e0000484 l       .text  00000000 
e0000486 l       .text  00000000 
e0000488 l       .text  00000000 
e0000488 l       .text  00000000 
e000048a l       .text  00000000 
e000048e l       .text  00000000 
e0000490 l       .text  00000000 
e000049c l       .text  00000000 
e000049c l       .text  00000000 
0000059a l       .debug_loc     00000000 
000005c0 l       .debug_loc     00000000 
000005e8 l       .debug_loc     00000000 
0000060e l       .debug_loc     00000000 
0000066b l       .debug_loc     00000000 
00000693 l       .debug_loc     00000000 
000006b9 l       .debug_loc     00000000 
000006ee l       .debug_loc     00000000 
0000072e l       .debug_loc     00000000 
00000749 l       .debug_loc     00000000 
0000076a l       .debug_loc     00000000 
00000785 l       .debug_loc     00000000 
000007a0 l       .debug_loc     00000000 
000007bb l       .debug_loc     00000000 
000007d6 l       .debug_loc     00000000 
000007fe l       .debug_loc     00000000 
0000082f l       .debug_loc     00000000 
00000864 l       .debug_loc     00000000 
0000088c l       .debug_loc     00000000 
000008a8 l       .debug_loc     00000000 
000008c3 l       .debug_loc     00000000 
000008de l       .debug_loc     00000000 
000008f9 l       .debug_loc     00000000 
00000914 l       .debug_loc     00000000 
0000092f l       .debug_loc     00000000 
0000094a l       .debug_loc     00000000 
00000965 l       .debug_loc     00000000 
000009c2 l       .debug_loc     00000000 
000009e8 l       .debug_loc     00000000 
00000a28 l       .debug_loc     00000000 
00000a50 l       .debug_loc     00000000 
00000a76 l       .debug_loc     00000000 
00000ab6 l       .debug_loc     00000000 
00000ae8 l       .debug_loc     00000000 
00000b14 l       .debug_loc     00000000 
00000b2f l       .debug_loc     00000000 
00000b4a l       .debug_loc     00000000 
00000b6b l       .debug_loc     00000000 
00000b86 l       .debug_loc     00000000 
00000bac l       .debug_loc     00000000 
00000be8 l       .debug_loc     00000000 
00000c0e l       .debug_loc     00000000 
00000c55 l       .debug_loc     00000000 
00000c9c l       .debug_loc     00000000 
00000cd8 l       .debug_loc     00000000 
00000d00 l       .debug_loc     00000000 
00000d5d l       .debug_loc     00000000 
00000d87 l       .debug_loc     00000000 
00000dc9 l       .debug_loc     00000000 
00000e52 l       .debug_loc     00000000 
00000e6d l       .debug_loc     00000000 
00000e93 l       .debug_loc     00000000 
00000eb9 l       .debug_loc     00000000 
00000ed6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000b81 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000000f0 l       .debug_ranges  00000000 
00000ba3 l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
00000c02 l       .debug_str     00000000 
00003f35 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
00000bb7 l       .debug_str     00000000 
00000bd0 l       .debug_str     00000000 
00000bb0 l       .debug_str     00000000 
0000280e l       .debug_str     00000000 
00000bcc l       .debug_str     00000000 
00000889 l       .debug_str     00000000 
00000bd3 l       .debug_str     00000000 
00002209 l       .debug_str     00000000 
00000bc4 l       .debug_str     00000000 
00000bba l       .debug_str     00000000 
00000bd7 l       .debug_str     00000000 
00003ef9 l       .debug_str     00000000 
00000d43 l       .debug_str     00000000 
00000be5 l       .debug_str     00000000 
00000bf0 l       .debug_str     00000000 
00000c65 l       .debug_str     00000000 
00000cdc l       .debug_str     00000000 
00000ce3 l       .debug_str     00000000 
00000ceb l       .debug_str     00000000 
000041f5 l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000060 l       .debug_ranges  00000000 
00000078 l       .debug_ranges  00000000 
00000090 l       .debug_ranges  00000000 
000000a8 l       .debug_ranges  00000000 
000000c0 l       .debug_ranges  00000000 
00000c6d l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
000008a3 l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
00000cfc l       .debug_str     00000000 
00000cef l       .debug_str     00000000 
00000d04 l       .debug_str     00000000 
00000d06 l       .debug_str     00000000 
000045a7 l       .debug_str     00000000 
000000d8 l       .debug_ranges  00000000 
00000c15 l       .debug_str     00000000 
00000c75 l       .debug_str     00000000 
00000c7c l       .debug_str     00000000 
00000c22 l       .debug_str     00000000 
00000c2c l       .debug_str     00000000 
00000c39 l       .debug_str     00000000 
00000c4b l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
00000030 l       .debug_ranges  00000000 
00000c50 l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000ca8 l       .debug_str     00000000 
00002d13 l       .debug_str     00000000 
000043e8 l       .debug_str     00000000 
00003f6e l       .debug_str     00000000 
00000cae l       .debug_str     00000000 
00000cb5 l       .debug_str     00000000 
00000cc0 l       .debug_str     00000000 
00000cc7 l       .debug_str     00000000 
00000cce l       .debug_str     00000000 
00000cd5 l       .debug_str     00000000 
00000bf4 l       .debug_str     00000000 
000015e4 l       .debug_str     00000000 
00000bfb l       .debug_str     00000000 
00004593 l       .debug_str     00000000 
00000173 l       .debug_str     00000000 
00000c97 l       .debug_str     00000000 
00000c88 l       .debug_str     00000000 
00000064 l       .debug_frame   00000000 
e000049c l       .text  00000000 
00000000 l    df *ABS*  00000000 rom_print.c
e000049c l       .text  00000000 
e000049c l       .text  00000000 
e000049c l       .text  00000000 
e000049e l       .text  00000000 
e00004b0 l       .text  00000000 
e00004b2 l       .text  00000000 
e00004c2 l       .text  00000000 
e00004c2 l       .text  00000000 
e00004d4 l       .text  00000000 
e00018c4 l     O .rodata        00000010 rom_printf.kHexTable
e00004d4 l       .text  00000000 
e00004e0 l       .text  00000000 
e00004e0 l       .text  00000000 
e00004e4 l       .text  00000000 
e00004ea l       .text  00000000 
e00004ec l       .text  00000000 
e00004ee l       .text  00000000 
e00004ee l       .text  00000000 
e00004f0 l       .text  00000000 
e00004f0 l       .text  00000000 
e00004f4 l       .text  00000000 
e00004f8 l       .text  00000000 
e00004f8 l       .text  00000000 
e0000500 l       .text  00000000 
e0000500 l       .text  00000000 
e0000502 l       .text  00000000 
e0000506 l       .text  00000000 
e000050a l       .text  00000000 
e000050a l       .text  00000000 
e0000510 l       .text  00000000 
e0000512 l       .text  00000000 
e0000512 l       .text  00000000 
e0000516 l       .text  00000000 
e0000516 l       .text  00000000 
e000051c l       .text  00000000 
e000051c l       .text  00000000 
e0000520 l       .text  00000000 
e0000526 l       .text  00000000 
e0000526 l       .text  00000000 
e0000528 l       .text  00000000 
e000052c l       .text  00000000 
e0000530 l       .text  00000000 
e0000530 l       .text  00000000 
e0000532 l       .text  00000000 
e0000532 l       .text  00000000 
e0000536 l       .text  00000000 
e000053c l       .text  00000000 
e000053e l       .text  00000000 
e000053e l       .text  00000000 
e0000540 l       .text  00000000 
e0000540 l       .text  00000000 
e0000542 l       .text  00000000 
e0000542 l       .text  00000000 
e0000544 l       .text  00000000 
e0000544 l       .text  00000000 
e0000546 l       .text  00000000 
e000054c l       .text  00000000 
e000054c l       .text  00000000 
e0000564 l       .text  00000000 
e0000564 l       .text  00000000 
00000ef7 l       .debug_loc     00000000 
00000f43 l       .debug_loc     00000000 
00000f83 l       .debug_loc     00000000 
00000f96 l       .debug_loc     00000000 
00000fa9 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000d0a l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000009ef l       .debug_str     00000000 
00000d34 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
00000bf0 l       .debug_str     00000000 
00000965 l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00000198 l       .debug_ranges  00000000 
00000d4b l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000768 l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
0000035d l       .debug_str     00000000 
0000036b l       .debug_str     00000000 
0000038c l       .debug_str     00000000 
000003a2 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003ef l       .debug_str     00000000 
0000040b l       .debug_str     00000000 
0000041f l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000448 l       .debug_str     00000000 
00000461 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
00000489 l       .debug_str     00000000 
00000499 l       .debug_str     00000000 
000004ac l       .debug_str     00000000 
000004c6 l       .debug_str     00000000 
000004dd l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000513 l       .debug_str     00000000 
0000052f l       .debug_str     00000000 
00000546 l       .debug_str     00000000 
0000055c l       .debug_str     00000000 
00000574 l       .debug_str     00000000 
0000058c l       .debug_str     00000000 
000005a5 l       .debug_str     00000000 
000005be l       .debug_str     00000000 
000005d7 l       .debug_str     00000000 
000005f0 l       .debug_str     00000000 
0000060f l       .debug_str     00000000 
0000062d l       .debug_str     00000000 
00000647 l       .debug_str     00000000 
00000660 l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b6 l       .debug_str     00000000 
000006d2 l       .debug_str     00000000 
000006ee l       .debug_str     00000000 
00000705 l       .debug_str     00000000 
0000071e l       .debug_str     00000000 
00000734 l       .debug_str     00000000 
00000753 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000d3e l       .debug_str     00000000 
00000167 l       .debug_str     00000000 
000009fa l       .debug_str     00000000 
00000bc4 l       .debug_str     00000000 
00000bba l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
00000174 l       .debug_frame   00000000 
e0000564 l       .text  00000000 
00000000 l    df *ABS*  00000000 pinmux.c
e0000564 l       .text  00000000 
e0000564 l       .text  00000000 
e0000564 l       .text  00000000 
e0000566 l       .text  00000000 
e0000566 l       .text  00000000 
e0000568 l       .text  00000000 
e000056e l       .text  00000000 
e000056e l       .text  00000000 
e0000570 l       .text  00000000 
e0000570 l       .text  00000000 
e0000574 l       .text  00000000 
e0000574 l       .text  00000000 
e0000578 l       .text  00000000 
e0000578 l       .text  00000000 
e0000588 l       .text  00000000 
e0000588 l       .text  00000000 
e000058a l       .text  00000000 
e000058a l       .text  00000000 
e000058e l       .text  00000000 
e000058e l       .text  00000000 
e0000592 l       .text  00000000 
e0000592 l       .text  00000000 
e0000598 l       .text  00000000 
e0000598 l       .text  00000000 
e000059e l       .text  00000000 
e000059e l       .text  00000000 
e00005a8 l       .text  00000000 
e00005a8 l       .text  00000000 
e00005aa l       .text  00000000 
e00005aa l       .text  00000000 
e00005b0 l       .text  00000000 
e00005b0 l       .text  00000000 
e00005b8 l       .text  00000000 
e00005b8 l       .text  00000000 
e00005bc l       .text  00000000 
e00005bc l       .text  00000000 
e00005c2 l       .text  00000000 
e00005c2 l       .text  00000000 
00000fda l       .debug_loc     00000000 
00000ff8 l       .debug_loc     00000000 
0000100b l       .debug_loc     00000000 
00001025 l       .debug_loc     00000000 
0000103f l       .debug_loc     00000000 
00001059 l       .debug_loc     00000000 
00001074 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000d51 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000d80 l       .debug_str     00000000 
00002232 l       .debug_str     00000000 
00002225 l       .debug_str     00000000 
00000d8f l       .debug_str     00000000 
00001ce7 l       .debug_str     00000000 
00000bd3 l       .debug_str     00000000 
0000171e l       .debug_str     00000000 
000016fc l       .debug_str     00000000 
00000d96 l       .debug_str     00000000 
00000dbe l       .debug_str     00000000 
00000de6 l       .debug_str     00000000 
00000e0e l       .debug_str     00000000 
00000e36 l       .debug_str     00000000 
00000e5e l       .debug_str     00000000 
00000e86 l       .debug_str     00000000 
00000eae l       .debug_str     00000000 
00000ed6 l       .debug_str     00000000 
00000efe l       .debug_str     00000000 
00000f26 l       .debug_str     00000000 
00000f4f l       .debug_str     00000000 
00000f78 l       .debug_str     00000000 
00000fa1 l       .debug_str     00000000 
00000fca l       .debug_str     00000000 
00000ff3 l       .debug_str     00000000 
0000101c l       .debug_str     00000000 
00001045 l       .debug_str     00000000 
0000106e l       .debug_str     00000000 
00001097 l       .debug_str     00000000 
000010c0 l       .debug_str     00000000 
000010e9 l       .debug_str     00000000 
00001112 l       .debug_str     00000000 
0000113b l       .debug_str     00000000 
00001164 l       .debug_str     00000000 
0000118d l       .debug_str     00000000 
000011b6 l       .debug_str     00000000 
000011df l       .debug_str     00000000 
00001208 l       .debug_str     00000000 
00001231 l       .debug_str     00000000 
0000125a l       .debug_str     00000000 
00001283 l       .debug_str     00000000 
000012ac l       .debug_str     00000000 
000012d2 l       .debug_str     00000000 
000012f8 l       .debug_str     00000000 
0000131e l       .debug_str     00000000 
00001344 l       .debug_str     00000000 
0000136a l       .debug_str     00000000 
00001390 l       .debug_str     00000000 
000013ba l       .debug_str     00000000 
000013e4 l       .debug_str     00000000 
0000140e l       .debug_str     00000000 
00001438 l       .debug_str     00000000 
0000145e l       .debug_str     00000000 
00001484 l       .debug_str     00000000 
000014aa l       .debug_str     00000000 
000014d0 l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00001529 l       .debug_str     00000000 
00001554 l       .debug_str     00000000 
0000157f l       .debug_str     00000000 
000015b4 l       .debug_str     00000000 
000015e6 l       .debug_str     00000000 
00001618 l       .debug_str     00000000 
0000164a l       .debug_str     00000000 
0000167c l       .debug_str     00000000 
000016af l       .debug_str     00000000 
000016d9 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00001ced l       .debug_str     00000000 
00001cd3 l       .debug_str     00000000 
00001742 l       .debug_str     00000000 
00001766 l       .debug_str     00000000 
00001789 l       .debug_str     00000000 
000017a5 l       .debug_str     00000000 
000017c1 l       .debug_str     00000000 
000017dd l       .debug_str     00000000 
000017f9 l       .debug_str     00000000 
00001815 l       .debug_str     00000000 
00001831 l       .debug_str     00000000 
0000184d l       .debug_str     00000000 
00001869 l       .debug_str     00000000 
00001885 l       .debug_str     00000000 
000018a1 l       .debug_str     00000000 
000018bd l       .debug_str     00000000 
000018d9 l       .debug_str     00000000 
000018f5 l       .debug_str     00000000 
00001911 l       .debug_str     00000000 
0000192d l       .debug_str     00000000 
00001949 l       .debug_str     00000000 
00001965 l       .debug_str     00000000 
00001981 l       .debug_str     00000000 
0000199d l       .debug_str     00000000 
000019ba l       .debug_str     00000000 
000019d7 l       .debug_str     00000000 
000019f4 l       .debug_str     00000000 
00001a10 l       .debug_str     00000000 
00001a2c l       .debug_str     00000000 
00001a48 l       .debug_str     00000000 
00001a64 l       .debug_str     00000000 
00001a80 l       .debug_str     00000000 
00001a9c l       .debug_str     00000000 
00001ab8 l       .debug_str     00000000 
00001ad4 l       .debug_str     00000000 
00001af0 l       .debug_str     00000000 
00001b0c l       .debug_str     00000000 
00001b29 l       .debug_str     00000000 
00001b46 l       .debug_str     00000000 
00001b63 l       .debug_str     00000000 
00001b7f l       .debug_str     00000000 
00001b9b l       .debug_str     00000000 
00001bb7 l       .debug_str     00000000 
00001bd3 l       .debug_str     00000000 
00001bef l       .debug_str     00000000 
00001c0b l       .debug_str     00000000 
00001c27 l       .debug_str     00000000 
00001c43 l       .debug_str     00000000 
00001c60 l       .debug_str     00000000 
00001c7d l       .debug_str     00000000 
00001c9a l       .debug_str     00000000 
00001cb7 l       .debug_str     00000000 
0000220b l       .debug_str     00000000 
000021f3 l       .debug_str     00000000 
00001d09 l       .debug_str     00000000 
00001d23 l       .debug_str     00000000 
00001d3d l       .debug_str     00000000 
00001d57 l       .debug_str     00000000 
00001d71 l       .debug_str     00000000 
00001d8b l       .debug_str     00000000 
00001da5 l       .debug_str     00000000 
00001dbf l       .debug_str     00000000 
00001dd9 l       .debug_str     00000000 
00001df3 l       .debug_str     00000000 
00001e0d l       .debug_str     00000000 
00001e27 l       .debug_str     00000000 
00001e41 l       .debug_str     00000000 
00001e5b l       .debug_str     00000000 
00001e75 l       .debug_str     00000000 
00001e8f l       .debug_str     00000000 
00001ea9 l       .debug_str     00000000 
00001ec3 l       .debug_str     00000000 
00001edd l       .debug_str     00000000 
00001ef7 l       .debug_str     00000000 
00001f12 l       .debug_str     00000000 
00001f2d l       .debug_str     00000000 
00001f48 l       .debug_str     00000000 
00001f62 l       .debug_str     00000000 
00001f7c l       .debug_str     00000000 
00001f96 l       .debug_str     00000000 
00001fb0 l       .debug_str     00000000 
00001fca l       .debug_str     00000000 
00001fe4 l       .debug_str     00000000 
00001ffe l       .debug_str     00000000 
00002018 l       .debug_str     00000000 
00002032 l       .debug_str     00000000 
0000204c l       .debug_str     00000000 
00002067 l       .debug_str     00000000 
00002082 l       .debug_str     00000000 
0000209d l       .debug_str     00000000 
000020b7 l       .debug_str     00000000 
000020d1 l       .debug_str     00000000 
000020eb l       .debug_str     00000000 
00002105 l       .debug_str     00000000 
0000211f l       .debug_str     00000000 
00002139 l       .debug_str     00000000 
00002153 l       .debug_str     00000000 
0000216d l       .debug_str     00000000 
00002188 l       .debug_str     00000000 
000021a3 l       .debug_str     00000000 
000021be l       .debug_str     00000000 
000021d9 l       .debug_str     00000000 
00002241 l       .debug_str     00000000 
00002250 l       .debug_str     00000000 
0000225f l       .debug_str     00000000 
0000226b l       .debug_str     00000000 
000033dd l       .debug_str     00000000 
000033cf l       .debug_str     00000000 
00002278 l       .debug_str     00000000 
000033ab l       .debug_str     00000000 
00002812 l       .debug_str     00000000 
000027f6 l       .debug_str     00000000 
0000227c l       .debug_str     00000000 
00002299 l       .debug_str     00000000 
000022b6 l       .debug_str     00000000 
000022d3 l       .debug_str     00000000 
000022f0 l       .debug_str     00000000 
0000230d l       .debug_str     00000000 
0000232a l       .debug_str     00000000 
00002347 l       .debug_str     00000000 
00002364 l       .debug_str     00000000 
00002381 l       .debug_str     00000000 
0000239e l       .debug_str     00000000 
000023bb l       .debug_str     00000000 
000023d8 l       .debug_str     00000000 
000023f5 l       .debug_str     00000000 
00002412 l       .debug_str     00000000 
0000242f l       .debug_str     00000000 
0000244c l       .debug_str     00000000 
00002469 l       .debug_str     00000000 
00002486 l       .debug_str     00000000 
000024a3 l       .debug_str     00000000 
000024c1 l       .debug_str     00000000 
000024df l       .debug_str     00000000 
000024fd l       .debug_str     00000000 
0000251a l       .debug_str     00000000 
00002537 l       .debug_str     00000000 
00002554 l       .debug_str     00000000 
00002571 l       .debug_str     00000000 
0000258e l       .debug_str     00000000 
000025ab l       .debug_str     00000000 
000025c8 l       .debug_str     00000000 
000025e5 l       .debug_str     00000000 
00002602 l       .debug_str     00000000 
0000261f l       .debug_str     00000000 
0000263d l       .debug_str     00000000 
0000265b l       .debug_str     00000000 
00002679 l       .debug_str     00000000 
00002696 l       .debug_str     00000000 
000026b3 l       .debug_str     00000000 
000026d0 l       .debug_str     00000000 
000026ed l       .debug_str     00000000 
0000270a l       .debug_str     00000000 
00002727 l       .debug_str     00000000 
00002744 l       .debug_str     00000000 
00002761 l       .debug_str     00000000 
0000277f l       .debug_str     00000000 
0000279d l       .debug_str     00000000 
000027bb l       .debug_str     00000000 
000027d9 l       .debug_str     00000000 
000033b2 l       .debug_str     00000000 
00003397 l       .debug_str     00000000 
00002830 l       .debug_str     00000000 
00002855 l       .debug_str     00000000 
00002879 l       .debug_str     00000000 
0000289f l       .debug_str     00000000 
000028c1 l       .debug_str     00000000 
000028e3 l       .debug_str     00000000 
00002905 l       .debug_str     00000000 
00002927 l       .debug_str     00000000 
00002949 l       .debug_str     00000000 
0000296b l       .debug_str     00000000 
0000298d l       .debug_str     00000000 
000029af l       .debug_str     00000000 
000029d1 l       .debug_str     00000000 
000029f3 l       .debug_str     00000000 
00002a16 l       .debug_str     00000000 
00002a39 l       .debug_str     00000000 
00002a5c l       .debug_str     00000000 
00002a7f l       .debug_str     00000000 
00002aa2 l       .debug_str     00000000 
00002ac5 l       .debug_str     00000000 
00002ae8 l       .debug_str     00000000 
00002b0b l       .debug_str     00000000 
00002b2e l       .debug_str     00000000 
00002b51 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00002b97 l       .debug_str     00000000 
00002bba l       .debug_str     00000000 
00002bdd l       .debug_str     00000000 
00002c00 l       .debug_str     00000000 
00002c23 l       .debug_str     00000000 
00002c46 l       .debug_str     00000000 
00002c69 l       .debug_str     00000000 
00002c8c l       .debug_str     00000000 
00002caf l       .debug_str     00000000 
00002cd2 l       .debug_str     00000000 
00002cf5 l       .debug_str     00000000 
00002d15 l       .debug_str     00000000 
00002d35 l       .debug_str     00000000 
00002d55 l       .debug_str     00000000 
00002d75 l       .debug_str     00000000 
00002d95 l       .debug_str     00000000 
00002db5 l       .debug_str     00000000 
00002dd9 l       .debug_str     00000000 
00002dfd l       .debug_str     00000000 
00002e21 l       .debug_str     00000000 
00002e45 l       .debug_str     00000000 
00002e65 l       .debug_str     00000000 
00002e85 l       .debug_str     00000000 
00002ea5 l       .debug_str     00000000 
00002ec5 l       .debug_str     00000000 
00002eeb l       .debug_str     00000000 
00002f11 l       .debug_str     00000000 
00002f37 l       .debug_str     00000000 
00002f5d l       .debug_str     00000000 
00002f81 l       .debug_str     00000000 
00002fa5 l       .debug_str     00000000 
00002fca l       .debug_str     00000000 
00002ff9 l       .debug_str     00000000 
00003028 l       .debug_str     00000000 
00003057 l       .debug_str     00000000 
00003086 l       .debug_str     00000000 
000030b5 l       .debug_str     00000000 
000030e4 l       .debug_str     00000000 
00003113 l       .debug_str     00000000 
00003142 l       .debug_str     00000000 
00003171 l       .debug_str     00000000 
00003194 l       .debug_str     00000000 
000031b7 l       .debug_str     00000000 
000031da l       .debug_str     00000000 
000031fd l       .debug_str     00000000 
00003220 l       .debug_str     00000000 
00003243 l       .debug_str     00000000 
00003268 l       .debug_str     00000000 
00003298 l       .debug_str     00000000 
000032c5 l       .debug_str     00000000 
000032f2 l       .debug_str     00000000 
0000331f l       .debug_str     00000000 
0000334c l       .debug_str     00000000 
0000337a l       .debug_str     00000000 
00003412 l       .debug_str     00000000 
000033ed l       .debug_str     00000000 
000033ff l       .debug_str     00000000 
00003420 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00003426 l       .debug_str     00000000 
00003430 l       .debug_str     00000000 
00003434 l       .debug_str     00000000 
00003e3b l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
00003445 l       .debug_str     00000000 
00003b8e l       .debug_str     00000000 
00003456 l       .debug_str     00000000 
00003460 l       .debug_str     00000000 
00003466 l       .debug_str     00000000 
00003470 l       .debug_str     00000000 
000009d9 l       .debug_str     00000000 
00003482 l       .debug_str     00000000 
00003477 l       .debug_str     00000000 
000001b0 l       .debug_frame   00000000 
e00005c2 l       .text  00000000 
00000000 l    df *ABS*  00000000 uart.c
e00005c2 l       .text  00000000 
e00005c2 l       .text  00000000 
e00005c2 l       .text  00000000 
e00005c6 l       .text  00000000 
e00005c6 l       .text  00000000 
e00005cc l       .text  00000000 
e00005cc l       .text  00000000 
e00005ce l       .text  00000000 
e00005ce l       .text  00000000 
e00005d2 l       .text  00000000 
e00005d2 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005dc l       .text  00000000 
e00005dc l       .text  00000000 
e00005de l       .text  00000000 
e00005de l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e4 l       .text  00000000 
e00005e4 l       .text  00000000 
e00005e6 l       .text  00000000 
e00005e6 l       .text  00000000 
e00005ea l       .text  00000000 
e00005ea l       .text  00000000 
e00005ee l       .text  00000000 
e00005ee l       .text  00000000 
e00005f0 l       .text  00000000 
e00005f0 l       .text  00000000 
e00005f0 l       .text  00000000 
e00005f0 l       .text  00000000 
e00005f0 l       .text  00000000 
e00005f4 l       .text  00000000 
e00005f4 l       .text  00000000 
e00005f6 l       .text  00000000 
e00005f6 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005fa l       .text  00000000 
e00005fa l       .text  00000000 
e0000602 l       .text  00000000 
e0000602 l       .text  00000000 
e0000604 l       .text  00000000 
e0000604 l       .text  00000000 
e0000606 l       .text  00000000 
e0000606 l       .text  00000000 
e0000608 l       .text  00000000 
e0000608 l       .text  00000000 
e000060a l       .text  00000000 
e000060c l       .text  00000000 
e000060c l       .text  00000000 
0000108f l       .debug_loc     00000000 
000010aa l       .debug_loc     00000000 
000010c6 l       .debug_loc     00000000 
000010ed l       .debug_loc     00000000 
00001112 l       .debug_loc     00000000 
00001139 l       .debug_loc     00000000 
0000115b l       .debug_loc     00000000 
00001176 l       .debug_loc     00000000 
00001191 l       .debug_loc     00000000 
000011ac l       .debug_loc     00000000 
000011c7 l       .debug_loc     00000000 
000011e2 l       .debug_loc     00000000 
00001213 l       .debug_loc     00000000 
00001239 l       .debug_loc     00000000 
00001254 l       .debug_loc     00000000 
0000126f l       .debug_loc     00000000 
0000128a l       .debug_loc     00000000 
000012a5 l       .debug_loc     00000000 
000012c0 l       .debug_loc     00000000 
000012e6 l       .debug_loc     00000000 
0000130c l       .debug_loc     00000000 
00001327 l       .debug_loc     00000000 
00001342 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000348f l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000001b0 l       .debug_ranges  00000000 
00000768 l       .debug_str     00000000 
00000354 l       .debug_str     00000000 
0000035d l       .debug_str     00000000 
0000036b l       .debug_str     00000000 
0000038c l       .debug_str     00000000 
000003a2 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003ef l       .debug_str     00000000 
0000040b l       .debug_str     00000000 
0000041f l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000448 l       .debug_str     00000000 
00000461 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
00000489 l       .debug_str     00000000 
00000499 l       .debug_str     00000000 
000004ac l       .debug_str     00000000 
000004c6 l       .debug_str     00000000 
000004dd l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000513 l       .debug_str     00000000 
0000052f l       .debug_str     00000000 
00000546 l       .debug_str     00000000 
0000055c l       .debug_str     00000000 
00000574 l       .debug_str     00000000 
0000058c l       .debug_str     00000000 
000005a5 l       .debug_str     00000000 
000005be l       .debug_str     00000000 
000005d7 l       .debug_str     00000000 
000005f0 l       .debug_str     00000000 
0000060f l       .debug_str     00000000 
0000062d l       .debug_str     00000000 
00000647 l       .debug_str     00000000 
00000660 l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b6 l       .debug_str     00000000 
000006d2 l       .debug_str     00000000 
000006ee l       .debug_str     00000000 
00000705 l       .debug_str     00000000 
0000071e l       .debug_str     00000000 
00000734 l       .debug_str     00000000 
00000753 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00000167 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00003434 l       .debug_str     00000000 
00003e3b l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
000034bc l       .debug_str     00000000 
00003b8e l       .debug_str     00000000 
000034c7 l       .debug_str     00000000 
000009c2 l       .debug_str     00000000 
000009c5 l       .debug_str     00000000 
000034f4 l       .debug_str     00000000 
000034e3 l       .debug_str     00000000 
000034de l       .debug_str     00000000 
0000378a l       .debug_str     00000000 
00003507 l       .debug_str     00000000 
00003786 l       .debug_str     00000000 
0000351c l       .debug_str     00000000 
0000092e l       .debug_str     00000000 
000009e5 l       .debug_str     00000000 
0000358c l       .debug_str     00000000 
00003533 l       .debug_str     00000000 
00003543 l       .debug_str     00000000 
00003550 l       .debug_str     00000000 
00003564 l       .debug_str     00000000 
00000d3e l       .debug_str     00000000 
00003ae8 l       .debug_str     00000000 
00003571 l       .debug_str     00000000 
000000b9 l       .debug_str     00000000 
000041f5 l       .debug_str     00000000 
0000357c l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00003582 l       .debug_str     00000000 
00004142 l       .debug_str     00000000 
000009fa l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
000001dc l       .debug_frame   00000000 
e00005f0 l       .text  00000000 
e000060c l       .text  00000000 
00000000 l    df *ABS*  00000000 otp.c
e000060c l       .text  00000000 
e000060c l       .text  00000000 
e000060c l       .text  00000000 
e0000610 l       .text  00000000 
e0000612 l       .text  00000000 
e0000612 l       .text  00000000 
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
0000135d l       .debug_loc     00000000 
00001378 l       .debug_loc     00000000 
00001393 l       .debug_loc     00000000 
000013b1 l       .debug_loc     00000000 
000013ed l       .debug_loc     00000000 
00001408 l       .debug_loc     00000000 
0000142e l       .debug_loc     00000000 
00001454 l       .debug_loc     00000000 
00001472 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000359e l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000001d8 l       .debug_ranges  00000000 
00003420 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00003477 l       .debug_str     00000000 
00003bb7 l       .debug_str     00000000 
000035ca l       .debug_str     00000000 
000035eb l       .debug_str     00000000 
0000361b l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
000035f6 l       .debug_str     00000000 
000000b9 l       .debug_str     00000000 
00003626 l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
000035ff l       .debug_str     00000000 
000035da l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00000230 l       .debug_frame   00000000 
e0000614 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host_autogen.c
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
e0000616 l       .text  00000000 
e0000618 l       .text  00000000 
e000061c l       .text  00000000 
e000061e l       .text  00000000 
e0000620 l       .text  00000000 
e0000622 l       .text  00000000 
e0000622 l       .text  00000000 
0000148e l       .debug_loc     00000000 
000014a9 l       .debug_loc     00000000 
000014c4 l       .debug_loc     00000000 
000014df l       .debug_loc     00000000 
000014fb l       .debug_loc     00000000 
00001517 l       .debug_loc     00000000 
00001532 l       .debug_loc     00000000 
0000154d l       .debug_loc     00000000 
00001568 l       .debug_loc     00000000 
00001583 l       .debug_loc     00000000 
0000159e l       .debug_loc     00000000 
000015b9 l       .debug_loc     00000000 
000015d4 l       .debug_loc     00000000 
000015ef l       .debug_loc     00000000 
00001615 l       .debug_loc     00000000 
00001630 l       .debug_loc     00000000 
0000164b l       .debug_loc     00000000 
00001669 l       .debug_loc     00000000 
00001690 l       .debug_loc     00000000 
000016ab l       .debug_loc     00000000 
000016c6 l       .debug_loc     00000000 
000016e1 l       .debug_loc     00000000 
000016ff l       .debug_loc     00000000 
00001726 l       .debug_loc     00000000 
00001741 l       .debug_loc     00000000 
0000175c l       .debug_loc     00000000 
00001777 l       .debug_loc     00000000 
00001792 l       .debug_loc     00000000 
000017b8 l       .debug_loc     00000000 
000017d3 l       .debug_loc     00000000 
000017ee l       .debug_loc     00000000 
00001814 l       .debug_loc     00000000 
00001834 l       .debug_loc     00000000 
0000185a l       .debug_loc     00000000 
00001878 l       .debug_loc     00000000 
00001893 l       .debug_loc     00000000 
000018ae l       .debug_loc     00000000 
000018ce l       .debug_loc     00000000 
000018f4 l       .debug_loc     00000000 
0000191a l       .debug_loc     00000000 
00001935 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003630 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000200 l       .debug_ranges  00000000 
00003661 l       .debug_str     00000000 
0000369b l       .debug_str     00000000 
0000368e l       .debug_str     00000000 
0000366b l       .debug_str     00000000 
0000367c l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
000002c8 l       .debug_str     00000000 
00000265 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000276 l       .debug_str     00000000 
00000281 l       .debug_str     00000000 
0000028c l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000002ba l       .debug_str     00000000 
000036c5 l       .debug_str     00000000 
000036aa l       .debug_str     00000000 
00003703 l       .debug_str     00000000 
000036d8 l       .debug_str     00000000 
000036ec l       .debug_str     00000000 
00003739 l       .debug_str     00000000 
00003714 l       .debug_str     00000000 
00003727 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000a06 l       .debug_str     00000000 
00000225 l       .debug_str     00000000 
0000024d l       .debug_str     00000000 
00003744 l       .debug_str     00000000 
00000cff l       .debug_str     00000000 
00003dac l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
0000023b l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
00003758 l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
000037ad l       .debug_str     00000000 
000036d2 l       .debug_str     00000000 
000038f5 l       .debug_str     00000000 
000038ff l       .debug_str     00000000 
000037c6 l       .debug_str     00000000 
00003710 l       .debug_str     00000000 
00004706 l       .debug_str     00000000 
00003762 l       .debug_str     00000000 
000037e0 l       .debug_str     00000000 
0000390e l       .debug_str     00000000 
00003775 l       .debug_str     00000000 
000037a3 l       .debug_str     00000000 
0000092e l       .debug_str     00000000 
00003790 l       .debug_str     00000000 
0000351c l       .debug_str     00000000 
00003550 l       .debug_str     00000000 
000009c2 l       .debug_str     00000000 
00003786 l       .debug_str     00000000 
000037fb l       .debug_str     00000000 
0000380c l       .debug_str     00000000 
00003939 l       .debug_str     00000000 
0000378a l       .debug_str     00000000 
00003817 l       .debug_str     00000000 
000034c7 l       .debug_str     00000000 
000009c5 l       .debug_str     00000000 
000034f4 l       .debug_str     00000000 
000034e3 l       .debug_str     00000000 
000034de l       .debug_str     00000000 
00003507 l       .debug_str     00000000 
00003838 l       .debug_str     00000000 
00003855 l       .debug_str     00000000 
00003430 l       .debug_str     00000000 
00003948 l       .debug_str     00000000 
0000386c l       .debug_str     00000000 
000037f5 l       .debug_str     00000000 
00003963 l       .debug_str     00000000 
00003973 l       .debug_str     00000000 
00003889 l       .debug_str     00000000 
0000397e l       .debug_str     00000000 
000038a6 l       .debug_str     00000000 
000038c3 l       .debug_str     00000000 
00000ad5 l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000038e0 l       .debug_str     00000000 
00003917 l       .debug_str     00000000 
00003956 l       .debug_str     00000000 
00003989 l       .debug_str     00000000 
0000029c l       .debug_frame   00000000 
e0000622 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host.c
e0000622 l       .text  00000000 
e0000622 l       .text  00000000 
e0000622 l       .text  00000000 
e0000624 l       .text  00000000 
e0000626 l       .text  00000000 
e000062e l       .text  00000000 
e0000632 l       .text  00000000 
e0000632 l       .text  00000000 
e0000636 l       .text  00000000 
e0000636 l       .text  00000000 
e000063a l       .text  00000000 
e0000640 l       .text  00000000 
e0000642 l       .text  00000000 
e0000642 l       .text  00000000 
e000064c l       .text  00000000 
e000064e l       .text  00000000 
e000064e l       .text  00000000 
e0000650 l       .text  00000000 
e0000650 l       .text  00000000 
e0000654 l       .text  00000000 
e0000654 l       .text  00000000 
e0000658 l       .text  00000000 
e0000658 l       .text  00000000 
e000065c l       .text  00000000 
e000065c l       .text  00000000 
e000065e l       .text  00000000 
e000065e l       .text  00000000 
e0000664 l       .text  00000000 
e0000664 l       .text  00000000 
e0000668 l       .text  00000000 
e0000668 l       .text  00000000 
e000066c l       .text  00000000 
e0000674 l       .text  00000000 
e0000674 l       .text  00000000 
e0000678 l       .text  00000000 
e0000678 l       .text  00000000 
e000067a l       .text  00000000 
e000067a l       .text  00000000 
e0000680 l       .text  00000000 
e0000686 l       .text  00000000 
e000068a l       .text  00000000 
e0000692 l       .text  00000000 
e0000692 l       .text  00000000 
e0000694 l       .text  00000000 
e0000694 l       .text  00000000 
e0000698 l       .text  00000000 
e0000698 l       .text  00000000 
e000069c l       .text  00000000 
e000069c l       .text  00000000 
e000069e l       .text  00000000 
e000069e l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a6 l       .text  00000000 
e00006a6 l       .text  00000000 
e00006a8 l       .text  00000000 
e00006ac l       .text  00000000 
e00006b0 l       .text  00000000 
e00006b2 l       .text  00000000 
e00006be l       .text  00000000 
e00006be l       .text  00000000 
e00006c0 l       .text  00000000 
e00006c0 l       .text  00000000 
e00006c4 l       .text  00000000 
e00006c4 l       .text  00000000 
e00006c8 l       .text  00000000 
e00006c8 l       .text  00000000 
e00006cc l       .text  00000000 
e00006cc l       .text  00000000 
e00006d0 l       .text  00000000 
e00006d0 l       .text  00000000 
e00006d6 l       .text  00000000 
e00006d8 l       .text  00000000 
e00006da l       .text  00000000 
e00006dc l       .text  00000000 
e00006de l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e2 l       .text  00000000 
e00006f0 l       .text  00000000 
e00006f2 l       .text  00000000 
e00006f4 l       .text  00000000 
e00006f8 l       .text  00000000 
e00006fa l       .text  00000000 
e00006fc l       .text  00000000 
e00006fc l       .text  00000000 
e0000704 l       .text  00000000 
e000070a l       .text  00000000 
e000070a l       .text  00000000 
e0000712 l       .text  00000000 
e0000722 l       .text  00000000 
e0000722 l       .text  00000000 
e0000726 l       .text  00000000 
e0000726 l       .text  00000000 
e000072a l       .text  00000000 
e0000734 l       .text  00000000 
e0000734 l       .text  00000000 
e0000736 l       .text  00000000 
e0000738 l       .text  00000000 
e0000738 l       .text  00000000 
e0000742 l       .text  00000000 
e0000746 l       .text  00000000 
e0000746 l       .text  00000000 
e0000748 l       .text  00000000 
e0000748 l       .text  00000000 
e000074a l       .text  00000000 
e000074a l       .text  00000000 
e000074c l       .text  00000000 
e000074c l       .text  00000000 
e000074e l       .text  00000000 
e000074e l       .text  00000000 
e00008d6 l     F .text  00000038 enqueue_word
e0000752 l       .text  00000000 
e0000752 l       .text  00000000 
e0000754 l       .text  00000000 
e0000754 l       .text  00000000 
e0000756 l       .text  00000000 
e0000758 l       .text  00000000 
e0000758 l       .text  00000000 
e000075c l       .text  00000000 
e000075c l       .text  00000000 
e0000762 l       .text  00000000 
e0000766 l       .text  00000000 
e0000766 l       .text  00000000 
e000076a l       .text  00000000 
e000076a l       .text  00000000 
e000076e l       .text  00000000 
e000076e l       .text  00000000 
e0000772 l       .text  00000000 
e0000774 l       .text  00000000 
e0000774 l       .text  00000000 
e000077a l       .text  00000000 
e000077a l       .text  00000000 
e000077e l       .text  00000000 
e000077e l       .text  00000000 
e0000782 l       .text  00000000 
e000078a l       .text  00000000 
e000078a l       .text  00000000 
e0000792 l       .text  00000000 
e0000792 l       .text  00000000 
e0000796 l       .text  00000000 
e000079c l       .text  00000000 
e00007a0 l       .text  00000000 
e00007a8 l       .text  00000000 
e00007ae l       .text  00000000 
e00007b2 l       .text  00000000 
e00007b2 l       .text  00000000 
e00007b4 l       .text  00000000 
e00007b4 l       .text  00000000 
e00007b6 l       .text  00000000 
e00007b6 l       .text  00000000 
e00007b8 l       .text  00000000 
e00007b8 l       .text  00000000 
e00007ba l       .text  00000000 
e00007ba l       .text  00000000 
e00007be l       .text  00000000 
e00007be l       .text  00000000 
e00007c0 l       .text  00000000 
e00007c0 l       .text  00000000 
e00007c2 l       .text  00000000 
e00007c2 l       .text  00000000 
e00007c4 l       .text  00000000 
e00007c4 l       .text  00000000 
e00007c6 l       .text  00000000 
e00007c6 l       .text  00000000 
e00007ca l       .text  00000000 
e00007ca l       .text  00000000 
e00007cc l       .text  00000000 
e00007cc l       .text  00000000 
e00007d2 l       .text  00000000 
e00007d4 l       .text  00000000 
e00007d8 l       .text  00000000 
e00007d8 l       .text  00000000 
e00007de l       .text  00000000 
e00007e2 l       .text  00000000 
e00007e4 l       .text  00000000 
e00007e4 l       .text  00000000 
e00007ea l       .text  00000000 
e00007ee l       .text  00000000 
e00007ee l       .text  00000000 
e00007f0 l       .text  00000000 
e00007f0 l       .text  00000000 
e00007f2 l       .text  00000000 
e00007f2 l       .text  00000000 
e00007f4 l       .text  00000000 
e00007f4 l       .text  00000000 
e00007f6 l       .text  00000000 
e00007f6 l       .text  00000000 
e00007fa l       .text  00000000 
e00007fa l       .text  00000000 
e00007fc l       .text  00000000 
e00007fc l       .text  00000000 
e00007fe l       .text  00000000 
e0000800 l       .text  00000000 
e0000800 l       .text  00000000 
e0000804 l       .text  00000000 
e0000804 l       .text  00000000 
e000080a l       .text  00000000 
e000080e l       .text  00000000 
e000080e l       .text  00000000 
e0000812 l       .text  00000000 
e0000812 l       .text  00000000 
e0000816 l       .text  00000000 
e0000816 l       .text  00000000 
e000081a l       .text  00000000 
e0000820 l       .text  00000000 
e0000822 l       .text  00000000 
e0000822 l       .text  00000000 
e0000824 l       .text  00000000 
e0000824 l       .text  00000000 
e0000826 l       .text  00000000 
e0000826 l       .text  00000000 
e000082e l       .text  00000000 
e0000838 l       .text  00000000 
e0000838 l       .text  00000000 
e0000838 l       .text  00000000 
e0000838 l       .text  00000000 
e0000838 l       .text  00000000 
e000083a l       .text  00000000 
e000083c l       .text  00000000 
e000083e l       .text  00000000 
e0000840 l       .text  00000000 
e0000842 l       .text  00000000 
e0000844 l       .text  00000000 
e0000848 l       .text  00000000 
e000084a l       .text  00000000 
e000084c l       .text  00000000 
e000084c l       .text  00000000 
e0000850 l       .text  00000000 
e0000852 l       .text  00000000 
e0000852 l       .text  00000000 
e0000858 l       .text  00000000 
e0000858 l       .text  00000000 
e000085c l       .text  00000000 
e000085c l       .text  00000000 
e000085e l       .text  00000000 
e000085e l       .text  00000000 
e0000860 l       .text  00000000 
e0000860 l       .text  00000000 
e0000862 l       .text  00000000 
e0000862 l       .text  00000000 
e0000866 l       .text  00000000 
e0000866 l       .text  00000000 
e0000868 l       .text  00000000 
e0000868 l       .text  00000000 
e000086a l       .text  00000000 
e000086a l       .text  00000000 
e000086c l       .text  00000000 
e000086c l       .text  00000000 
e0000870 l       .text  00000000 
e0000870 l       .text  00000000 
e0000874 l       .text  00000000 
e0000874 l       .text  00000000 
e0000876 l       .text  00000000 
e0000876 l       .text  00000000 
e0000878 l       .text  00000000 
e000087c l       .text  00000000 
e000087c l       .text  00000000 
e0000880 l       .text  00000000 
e0000880 l       .text  00000000 
e0000884 l       .text  00000000 
e0000884 l       .text  00000000 
e000088a l       .text  00000000 
e000088a l       .text  00000000 
e000088c l       .text  00000000 
e000088c l       .text  00000000 
e0000890 l       .text  00000000 
e0000890 l       .text  00000000 
e0000892 l       .text  00000000 
e0000894 l       .text  00000000 
e0000894 l       .text  00000000 
e0000898 l       .text  00000000 
e0000898 l       .text  00000000 
e000089a l       .text  00000000 
e000089a l       .text  00000000 
e000089c l       .text  00000000 
e000089c l       .text  00000000 
e00008a0 l       .text  00000000 
e00008a0 l       .text  00000000 
e00008a2 l       .text  00000000 
e00008a2 l       .text  00000000 
e00008a4 l       .text  00000000 
e00008a4 l       .text  00000000 
e00008a6 l       .text  00000000 
e00008a6 l       .text  00000000 
e00008a8 l       .text  00000000 
e00008a8 l       .text  00000000 
e00008aa l       .text  00000000 
e00008aa l       .text  00000000 
e00008ac l       .text  00000000 
e00008ac l       .text  00000000 
e00008ae l       .text  00000000 
e00008ae l       .text  00000000 
e00008b4 l       .text  00000000 
e00008b4 l       .text  00000000 
e00008b6 l       .text  00000000 
e00008b6 l       .text  00000000 
e00008ba l       .text  00000000 
e00008ba l       .text  00000000 
e00008ba l       .text  00000000 
e00008ba l       .text  00000000 
e00008ba l       .text  00000000 
e00008ba l       .text  00000000 
e00008bc l       .text  00000000 
e00008be l       .text  00000000 
e00008be l       .text  00000000 
e00008c0 l       .text  00000000 
e00008c0 l       .text  00000000 
e00008c2 l       .text  00000000 
e00008c8 l       .text  00000000 
e00008c8 l       .text  00000000 
e00008ca l       .text  00000000 
e00008ca l       .text  00000000 
e00008cc l       .text  00000000 
e00008cc l       .text  00000000 
e00008ce l       .text  00000000 
e00008ce l       .text  00000000 
e00008d0 l       .text  00000000 
e00008d0 l       .text  00000000 
e00008d2 l       .text  00000000 
e00008d2 l       .text  00000000 
e00008d4 l       .text  00000000 
e00008d4 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d8 l       .text  00000000 
e00008dc l       .text  00000000 
e00008de l       .text  00000000 
e00008de l       .text  00000000 
e00008e4 l       .text  00000000 
e00008e6 l       .text  00000000 
e00008ec l       .text  00000000 
e00008ec l       .text  00000000 
e00008ee l       .text  00000000 
e00008ee l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f6 l       .text  00000000 
e00008f8 l       .text  00000000 
e00008f8 l       .text  00000000 
e00008fa l       .text  00000000 
e00008fa l       .text  00000000 
e00008fe l       .text  00000000 
e00008fe l       .text  00000000 
e0000900 l       .text  00000000 
e0000900 l       .text  00000000 
e0000902 l       .text  00000000 
e0000902 l       .text  00000000 
e0000904 l       .text  00000000 
e0000904 l       .text  00000000 
e0000906 l       .text  00000000 
e0000906 l       .text  00000000 
e0000908 l       .text  00000000 
e000090c l       .text  00000000 
e000090e l       .text  00000000 
e000090e l       .text  00000000 
e000090e l       .text  00000000 
e000090e l       .text  00000000 
e000090e l       .text  00000000 
e0000910 l       .text  00000000 
e000092a l       .text  00000000 
e000092c l       .text  00000000 
e000092c l       .text  00000000 
e000092e l       .text  00000000 
e000092e l       .text  00000000 
e0000930 l       .text  00000000 
e0000930 l       .text  00000000 
e0000934 l       .text  00000000 
e0000936 l       .text  00000000 
e0000938 l       .text  00000000 
e000094e l       .text  00000000 
e0000964 l       .text  00000000 
e0000966 l       .text  00000000 
e0000966 l       .text  00000000 
e000096a l       .text  00000000 
e000096a l       .text  00000000 
e000096c l       .text  00000000 
e000096c l       .text  00000000 
e0000970 l       .text  00000000 
e0000970 l       .text  00000000 
e0000978 l       .text  00000000 
e000097c l       .text  00000000 
e000098a l       .text  00000000 
e000098c l       .text  00000000 
e000098c l       .text  00000000 
e000098e l       .text  00000000 
e000098e l       .text  00000000 
e0000992 l       .text  00000000 
e0000992 l       .text  00000000 
e0000996 l       .text  00000000 
e0000996 l       .text  00000000 
e000099a l       .text  00000000 
e000099a l       .text  00000000 
e00009a0 l       .text  00000000 
e00009a0 l       .text  00000000 
e00009a4 l       .text  00000000 
e00009a4 l       .text  00000000 
e00009a8 l       .text  00000000 
e00009a8 l       .text  00000000 
e00009ac l       .text  00000000 
e00009ae l       .text  00000000 
e00009ae l       .text  00000000 
e00009b0 l       .text  00000000 
e00009b0 l       .text  00000000 
e00009b4 l       .text  00000000 
e00009b4 l       .text  00000000 
e00009b8 l       .text  00000000 
e00009b8 l       .text  00000000 
e00009ba l       .text  00000000 
e00009ba l       .text  00000000 
e00009cc l       .text  00000000 
e00009cc l       .text  00000000 
e00009d0 l       .text  00000000 
e00009d0 l       .text  00000000 
e00009d8 l       .text  00000000 
e00009dc l       .text  00000000 
e00009dc l       .text  00000000 
e00009e2 l       .text  00000000 
e00009e4 l       .text  00000000 
e00009e6 l       .text  00000000 
e00009e6 l       .text  00000000 
e00009ea l       .text  00000000 
e00009ea l       .text  00000000 
e00009ee l       .text  00000000 
e00009f0 l       .text  00000000 
e00009f2 l       .text  00000000 
e00009fa l       .text  00000000 
e00009fc l       .text  00000000 
e00009fc l       .text  00000000 
e0000a00 l       .text  00000000 
e0000a00 l       .text  00000000 
e0000a04 l       .text  00000000 
e0000a04 l       .text  00000000 
e0000a08 l       .text  00000000 
e0000a08 l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a10 l       .text  00000000 
e0000a10 l       .text  00000000 
e0000a12 l       .text  00000000 
e0000a12 l       .text  00000000 
e0000a14 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a1c l       .text  00000000 
e0000a1c l       .text  00000000 
e0000a20 l       .text  00000000 
e0000a22 l       .text  00000000 
e0000a24 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a2a l       .text  00000000 
e0000a2a l       .text  00000000 
e0000a2c l       .text  00000000 
e0000a2c l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a34 l       .text  00000000 
e0000a34 l       .text  00000000 
e0000a36 l       .text  00000000 
e0000a40 l       .text  00000000 
e0000a44 l       .text  00000000 
e0000a44 l       .text  00000000 
e0000a48 l       .text  00000000 
e0000a48 l       .text  00000000 
e0000a4c l       .text  00000000 
e0000a4c l       .text  00000000 
e0000a4e l       .text  00000000 
e0000a50 l       .text  00000000 
e0000a50 l       .text  00000000 
e0000a54 l       .text  00000000 
e0000a54 l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a5a l       .text  00000000 
e0000a64 l       .text  00000000 
e0000a66 l       .text  00000000 
e0000a66 l       .text  00000000 
e0000a6e l       .text  00000000 
e0000a6e l       .text  00000000 
e0000a72 l       .text  00000000 
e0000a72 l       .text  00000000 
e0000a76 l       .text  00000000 
e0000a7c l       .text  00000000 
e0000a80 l       .text  00000000 
e0000a80 l       .text  00000000 
e0000a84 l       .text  00000000 
e0000a84 l       .text  00000000 
e0000a86 l       .text  00000000 
e0000a86 l       .text  00000000 
e0000a88 l       .text  00000000 
e0000a88 l       .text  00000000 
e0000a8a l       .text  00000000 
e0000a8a l       .text  00000000 
e0000a8c l       .text  00000000 
e0000a8c l       .text  00000000 
e0000a90 l       .text  00000000 
e0000a90 l       .text  00000000 
e0000a94 l       .text  00000000 
e0000a96 l       .text  00000000 
e0000aa0 l       .text  00000000 
e0000aa0 l       .text  00000000 
e0000aa8 l       .text  00000000 
e0000aac l       .text  00000000 
e0000ab6 l       .text  00000000 
e0000aba l       .text  00000000 
e0000ac0 l       .text  00000000 
e0000aca l       .text  00000000 
e0000aca l       .text  00000000 
e0000acc l       .text  00000000 
e0000ad0 l       .text  00000000 
e0000ad4 l       .text  00000000 
e0000ad4 l       .text  00000000 
e0000ad6 l       .text  00000000 
e0000ae6 l       .text  00000000 
e0000af4 l       .text  00000000 
e0000af4 l       .text  00000000 
e0000af8 l       .text  00000000 
e0000af8 l       .text  00000000 
00001950 l       .debug_loc     00000000 
0000196b l       .debug_loc     00000000 
00001986 l       .debug_loc     00000000 
000019ac l       .debug_loc     00000000 
000019c7 l       .debug_loc     00000000 
000019e2 l       .debug_loc     00000000 
00001a06 l       .debug_loc     00000000 
00001a21 l       .debug_loc     00000000 
00001a3c l       .debug_loc     00000000 
00001a57 l       .debug_loc     00000000 
00001a7b l       .debug_loc     00000000 
00001a96 l       .debug_loc     00000000 
00001ab1 l       .debug_loc     00000000 
00001acc l       .debug_loc     00000000 
00001ae7 l       .debug_loc     00000000 
00001b0b l       .debug_loc     00000000 
00001b26 l       .debug_loc     00000000 
00001b41 l       .debug_loc     00000000 
00001b72 l       .debug_loc     00000000 
00001ba3 l       .debug_loc     00000000 
00001bd4 l       .debug_loc     00000000 
00001bef l       .debug_loc     00000000 
00001c0a l       .debug_loc     00000000 
00001c2d l       .debug_loc     00000000 
00001c48 l       .debug_loc     00000000 
00001c63 l       .debug_loc     00000000 
00001ca1 l       .debug_loc     00000000 
00001cc0 l       .debug_loc     00000000 
00001cdb l       .debug_loc     00000000 
00001d08 l       .debug_loc     00000000 
00001d2b l       .debug_loc     00000000 
00001d46 l       .debug_loc     00000000 
00001d61 l       .debug_loc     00000000 
00001d84 l       .debug_loc     00000000 
00001d9f l       .debug_loc     00000000 
00001dba l       .debug_loc     00000000 
00001df8 l       .debug_loc     00000000 
00001e17 l       .debug_loc     00000000 
00001e32 l       .debug_loc     00000000 
00001e52 l       .debug_loc     00000000 
00001e6d l       .debug_loc     00000000 
00001e89 l       .debug_loc     00000000 
00001ea4 l       .debug_loc     00000000 
00001ebf l       .debug_loc     00000000 
00001ee2 l       .debug_loc     00000000 
00001f03 l       .debug_loc     00000000 
00001f50 l       .debug_loc     00000000 
00001f6b l       .debug_loc     00000000 
00001f92 l       .debug_loc     00000000 
00001fb7 l       .debug_loc     00000000 
00001fd9 l       .debug_loc     00000000 
00001ff4 l       .debug_loc     00000000 
00002016 l       .debug_loc     00000000 
00002037 l       .debug_loc     00000000 
00002052 l       .debug_loc     00000000 
00002072 l       .debug_loc     00000000 
0000208e l       .debug_loc     00000000 
000020a9 l       .debug_loc     00000000 
000020cb l       .debug_loc     00000000 
000020e6 l       .debug_loc     00000000 
0000210c l       .debug_loc     00000000 
00002128 l       .debug_loc     00000000 
00002143 l       .debug_loc     00000000 
00002165 l       .debug_loc     00000000 
00002181 l       .debug_loc     00000000 
000021a1 l       .debug_loc     00000000 
000021c3 l       .debug_loc     00000000 
000021de l       .debug_loc     00000000 
000021f9 l       .debug_loc     00000000 
0000221f l       .debug_loc     00000000 
0000224f l       .debug_loc     00000000 
0000226a l       .debug_loc     00000000 
0000228a l       .debug_loc     00000000 
000022ac l       .debug_loc     00000000 
000022cc l       .debug_loc     00000000 
000022f2 l       .debug_loc     00000000 
0000230d l       .debug_loc     00000000 
00002342 l       .debug_loc     00000000 
0000238a l       .debug_loc     00000000 
000023c6 l       .debug_loc     00000000 
000023e1 l       .debug_loc     00000000 
0000241d l       .debug_loc     00000000 
00002459 l       .debug_loc     00000000 
00002480 l       .debug_loc     00000000 
0000249b l       .debug_loc     00000000 
000024bb l       .debug_loc     00000000 
000024dd l       .debug_loc     00000000 
00002501 l       .debug_loc     00000000 
0000251c l       .debug_loc     00000000 
00002537 l       .debug_loc     00000000 
00002559 l       .debug_loc     00000000 
00002582 l       .debug_loc     00000000 
000025a6 l       .debug_loc     00000000 
000025c1 l       .debug_loc     00000000 
000025dc l       .debug_loc     00000000 
000025f7 l       .debug_loc     00000000 
00002612 l       .debug_loc     00000000 
0000262d l       .debug_loc     00000000 
0000264f l       .debug_loc     00000000 
0000266a l       .debug_loc     00000000 
0000268c l       .debug_loc     00000000 
000026a8 l       .debug_loc     00000000 
000026c3 l       .debug_loc     00000000 
000026de l       .debug_loc     00000000 
000026f9 l       .debug_loc     00000000 
00002720 l       .debug_loc     00000000 
00002745 l       .debug_loc     00000000 
00002769 l       .debug_loc     00000000 
00002790 l       .debug_loc     00000000 
000027c0 l       .debug_loc     00000000 
000027e8 l       .debug_loc     00000000 
00002805 l       .debug_loc     00000000 
0000282b l       .debug_loc     00000000 
00002846 l       .debug_loc     00000000 
00002861 l       .debug_loc     00000000 
00002883 l       .debug_loc     00000000 
000028a5 l       .debug_loc     00000000 
000028d6 l       .debug_loc     00000000 
00002915 l       .debug_loc     00000000 
00002946 l       .debug_loc     00000000 
00002961 l       .debug_loc     00000000 
0000297d l       .debug_loc     00000000 
000029a1 l       .debug_loc     00000000 
000029c8 l       .debug_loc     00000000 
000029ea l       .debug_loc     00000000 
00002a0c l       .debug_loc     00000000 
00002a2e l       .debug_loc     00000000 
00002a4a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000039ac l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000003c8 l       .debug_ranges  00000000 
000002c8 l       .debug_str     00000000 
00000265 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000276 l       .debug_str     00000000 
00000281 l       .debug_str     00000000 
0000028c l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000002ba l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
0000081f l       .debug_str     00000000 
00000772 l       .debug_str     00000000 
0000078f l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
000007c9 l       .debug_str     00000000 
000007e2 l       .debug_str     00000000 
000007fb l       .debug_str     00000000 
0000087c l       .debug_str     00000000 
00000839 l       .debug_str     00000000 
00000852 l       .debug_str     00000000 
00000867 l       .debug_str     00000000 
000008bb l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
00003a37 l       .debug_str     00000000 
000039cd l       .debug_str     00000000 
000039e7 l       .debug_str     00000000 
000039fe l       .debug_str     00000000 
00003a15 l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00000167 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00003a4e l       .debug_str     00000000 
00003e3b l       .debug_str     00000000 
00003758 l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
00003762 l       .debug_str     00000000 
00000cff l       .debug_str     00000000 
00003dac l       .debug_str     00000000 
0000023b l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
00003a60 l       .debug_str     00000000 
0000024d l       .debug_str     00000000 
00003a6d l       .debug_str     00000000 
00003b8e l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
00000225 l       .debug_str     00000000 
00003a72 l       .debug_str     00000000 
00003a81 l       .debug_str     00000000 
00003a89 l       .debug_str     00000000 
00003a8d l       .debug_str     00000000 
000009c2 l       .debug_str     00000000 
000009c5 l       .debug_str     00000000 
000034f4 l       .debug_str     00000000 
000034e3 l       .debug_str     00000000 
000034de l       .debug_str     00000000 
0000378a l       .debug_str     00000000 
00003aa3 l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
00003ab6 l       .debug_str     00000000 
00003430 l       .debug_str     00000000 
00003ac6 l       .debug_str     00000000 
00000ceb l       .debug_str     00000000 
00003744 l       .debug_str     00000000 
00003bdc l       .debug_str     00000000 
000041f5 l       .debug_str     00000000 
00000268 l       .debug_ranges  00000000 
00000280 l       .debug_ranges  00000000 
00003ace l       .debug_str     00000000 
00003adb l       .debug_str     00000000 
00003ae0 l       .debug_str     00000000 
00003aed l       .debug_str     00000000 
00003afb l       .debug_str     00000000 
00003af3 l       .debug_str     00000000 
00000a7b l       .debug_str     00000000 
000000b9 l       .debug_str     00000000 
000000bf l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00003b01 l       .debug_str     00000000 
00003b09 l       .debug_str     00000000 
00003b12 l       .debug_str     00000000 
00003b1f l       .debug_str     00000000 
00003bf4 l       .debug_str     00000000 
00003c18 l       .debug_str     00000000 
00000298 l       .debug_ranges  00000000 
000002b0 l       .debug_ranges  00000000 
00000b4e l       .debug_str     00000000 
00003c0b l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00000328 l       .debug_ranges  00000000 
00003b28 l       .debug_str     00000000 
00003b37 l       .debug_str     00000000 
0000092e l       .debug_str     00000000 
00003550 l       .debug_str     00000000 
00003786 l       .debug_str     00000000 
0000351c l       .debug_str     00000000 
000034c7 l       .debug_str     00000000 
00003507 l       .debug_str     00000000 
00003b3e l       .debug_str     00000000 
00003b47 l       .debug_str     00000000 
000008d2 l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
00003c1c l       .debug_str     00000000 
000002c8 l       .debug_ranges  00000000 
000002e0 l       .debug_ranges  00000000 
000002f8 l       .debug_ranges  00000000 
00000310 l       .debug_ranges  00000000 
0000098e l       .debug_str     00000000 
00003976 l       .debug_str     00000000 
00003b4e l       .debug_str     00000000 
00003b5b l       .debug_str     00000000 
00003b60 l       .debug_str     00000000 
00003b66 l       .debug_str     00000000 
00003b78 l       .debug_str     00000000 
00003b73 l       .debug_str     00000000 
00000aeb l       .debug_str     00000000 
00000a97 l       .debug_str     00000000 
00004706 l       .debug_str     00000000 
00003b6c l       .debug_str     00000000 
00003bb7 l       .debug_str     00000000 
00000889 l       .debug_str     00000000 
00000b58 l       .debug_str     00000000 
00003bc5 l       .debug_str     00000000 
00003c71 l       .debug_str     00000000 
00000cf5 l       .debug_str     00000000 
00000a82 l       .debug_str     00000000 
00000a85 l       .debug_str     00000000 
00000a8b l       .debug_str     00000000 
00000a91 l       .debug_str     00000000 
00000a31 l       .debug_str     00000000 
00000a4d l       .debug_str     00000000 
00000a62 l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00003b80 l       .debug_str     00000000 
00003b92 l       .debug_str     00000000 
00003a44 l       .debug_str     00000000 
00000c97 l       .debug_str     00000000 
00000c88 l       .debug_str     00000000 
00003b98 l       .debug_str     00000000 
00003bb1 l       .debug_str     00000000 
000009ae l       .debug_str     00000000 
00003bbf l       .debug_str     00000000 
00003bcb l       .debug_str     00000000 
00000ad5 l       .debug_str     00000000 
00000a18 l       .debug_str     00000000 
00003c24 l       .debug_str     00000000 
00000ae2 l       .debug_str     00000000 
000003b0 l       .debug_ranges  00000000 
00000348 l       .debug_ranges  00000000 
00000360 l       .debug_ranges  00000000 
00000378 l       .debug_ranges  00000000 
00000398 l       .debug_ranges  00000000 
0000076c l       .debug_str     00000000 
00000abf l       .debug_str     00000000 
0000093e l       .debug_str     00000000 
000008e9 l       .debug_str     00000000 
000008f3 l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
0000356c l       .debug_str     00000000 
00000918 l       .debug_str     00000000 
0000091e l       .debug_str     00000000 
00000923 l       .debug_str     00000000 
00000934 l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
00000370 l       .debug_frame   00000000 
e00006e0 l       .text  00000000 
e0000838 l       .text  00000000 
e00008ba l       .text  00000000 
e00008d6 l       .text  00000000 
e000090e l       .text  00000000 
e0000af8 l       .text  00000000 
00000000 l    df *ABS*  00000000 sec_mmio.c
e0000af8 l       .text  00000000 
e0000af8 l       .text  00000000 
e0000af8 l       .text  00000000 
e0000af8 l       .text  00000000 
e0000afa l       .text  00000000 
e0000afa l       .text  00000000 
e0000afc l       .text  00000000 
e0000afc l       .text  00000000 
e0000afe l       .text  00000000 
e0000afe l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b08 l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0c l       .text  00000000 
e0000b0c l       .text  00000000 
e0000b0c l       .text  00000000 
e0000b0c l       .text  00000000 
e0000b0e l       .text  00000000 
e0000b0e l       .text  00000000 
e0000b0e l       .text  00000000 
e0000b0e l       .text  00000000 
e0000b16 l       .text  00000000 
e0000b16 l       .text  00000000 
e0000b1e l       .text  00000000 
e0000b20 l       .text  00000000 
e0000b20 l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b24 l       .text  00000000 
e0000b26 l       .text  00000000 
e0000b26 l       .text  00000000 
e0000b2e l       .text  00000000 
e0000b30 l       .text  00000000 
e0000b30 l       .text  00000000 
e0000b32 l       .text  00000000 
e0000b32 l       .text  00000000 
e0000b34 l       .text  00000000 
e0000b36 l       .text  00000000 
e0000b44 l       .text  00000000 
e0000b44 l       .text  00000000 
e0000b50 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b54 l       .text  00000000 
e0000b5e l       .text  00000000 
e0000b60 l       .text  00000000 
e0000b60 l       .text  00000000 
e0000b64 l       .text  00000000 
e0000b64 l       .text  00000000 
e0000b6c l       .text  00000000 
e0000b6c l       .text  00000000 
e0000b70 l       .text  00000000 
e0000b70 l       .text  00000000 
e0000b70 l       .text  00000000 
e0000b70 l       .text  00000000 
e0000b98 l     F .text  0000006e upsert_register
e0000b76 l       .text  00000000 
e0000b76 l       .text  00000000 
e0000b78 l       .text  00000000 
e0000b78 l       .text  00000000 
e0000b88 l       .text  00000000 
e0000b8e l       .text  00000000 
e0000b90 l       .text  00000000 
e0000b92 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000ba4 l       .text  00000000 
e0000ba4 l       .text  00000000 
e0000ba6 l       .text  00000000 
e0000ba6 l       .text  00000000 
e0000ba8 l       .text  00000000 
e0000ba8 l       .text  00000000 
e0000bac l       .text  00000000 
e0000bac l       .text  00000000 
e0000bb0 l       .text  00000000 
e0000bb0 l       .text  00000000 
e0000bb8 l       .text  00000000 
e0000bbc l       .text  00000000 
e0000bbe l       .text  00000000 
e0000bbe l       .text  00000000 
e0000bc0 l       .text  00000000 
e0000bc0 l       .text  00000000 
e0000bc8 l       .text  00000000 
e0000bc8 l       .text  00000000 
e0000bca l       .text  00000000 
e0000bca l       .text  00000000 
e0000bcc l       .text  00000000 
e0000bcc l       .text  00000000 
e0000bd0 l       .text  00000000 
e0000bd0 l       .text  00000000 
e0000bd2 l       .text  00000000 
e0000bd2 l       .text  00000000 
e0000bd6 l       .text  00000000 
e0000bd6 l       .text  00000000 
e0000bda l       .text  00000000 
e0000bda l       .text  00000000 
e0000be4 l       .text  00000000 
e0000be8 l       .text  00000000 
e0000bea l       .text  00000000 
e0000bee l       .text  00000000 
e0000bf4 l       .text  00000000 
e0000bf8 l       .text  00000000 
e0000c04 l       .text  00000000 
e0000c06 l       .text  00000000 
e0000c06 l       .text  00000000 
00002a71 l       .debug_loc     00000000 
00002a98 l       .debug_loc     00000000 
00002abf l       .debug_loc     00000000 
00002ae6 l       .debug_loc     00000000 
00002b21 l       .debug_loc     00000000 
00002b50 l       .debug_loc     00000000 
00002b6b l       .debug_loc     00000000 
00002b91 l       .debug_loc     00000000 
00002bac l       .debug_loc     00000000 
00002bc7 l       .debug_loc     00000000 
00002be2 l       .debug_loc     00000000 
00002c1f l       .debug_loc     00000000 
00002c46 l       .debug_loc     00000000 
00002c61 l       .debug_loc     00000000 
00002c87 l       .debug_loc     00000000 
00002cad l       .debug_loc     00000000 
00002cd3 l       .debug_loc     00000000 
00002cee l       .debug_loc     00000000 
00002d09 l       .debug_loc     00000000 
00002d2f l       .debug_loc     00000000 
00002d4a l       .debug_loc     00000000 
00002d65 l       .debug_loc     00000000 
00002d80 l       .debug_loc     00000000 
00002dbd l       .debug_loc     00000000 
00002de4 l       .debug_loc     00000000 
00002dff l       .debug_loc     00000000 
00002e1a l       .debug_loc     00000000 
00002e35 l       .debug_loc     00000000 
00002e50 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003ca9 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000004c0 l       .debug_ranges  00000000 
00003c67 l       .debug_str     00000000 
00003c9a l       .debug_str     00000000 
00003c74 l       .debug_str     00000000 
00003c88 l       .debug_str     00000000 
00003c7f l       .debug_str     00000000 
00003dc7 l       .debug_str     00000000 
00003d7c l       .debug_str     00000000 
00003c94 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00003cd7 l       .debug_str     00000000 
00003ce7 l       .debug_str     00000000 
00003cf7 l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00003d06 l       .debug_str     00000000 
00003da8 l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00003dac l       .debug_str     00000000 
00000490 l       .debug_ranges  00000000 
000004a8 l       .debug_ranges  00000000 
00003db3 l       .debug_str     00000000 
00003d0c l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00003426 l       .debug_str     00000000 
00003430 l       .debug_str     00000000 
000009cb l       .debug_str     00000000 
00000cba l       .debug_str     00000000 
00000400 l       .debug_ranges  00000000 
00000418 l       .debug_ranges  00000000 
00000430 l       .debug_ranges  00000000 
00000448 l       .debug_ranges  00000000 
00003d2a l       .debug_str     00000000 
00000460 l       .debug_ranges  00000000 
00003533 l       .debug_str     00000000 
00003e3b l       .debug_str     00000000 
00003d20 l       .debug_str     00000000 
000035ca l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
00003d9b l       .debug_str     00000000 
00003d43 l       .debug_str     00000000 
00000478 l       .debug_ranges  00000000 
00003434 l       .debug_str     00000000 
000035da l       .debug_str     00000000 
00003d53 l       .debug_str     00000000 
00003d83 l       .debug_str     00000000 
00003dbe l       .debug_str     00000000 
000002cc l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00000418 l       .debug_frame   00000000 
e0000b52 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000c06 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0000c06 l       .text  00000000 
e0000c06 l       .text  00000000 
e0000c06 l       .text  00000000 
e0000c08 l       .text  00000000 
e0000c0a l       .text  00000000 
e0000c10 l       .text  00000000 
e0000c14 l       .text  00000000 
e0000c18 l       .text  00000000 
e0000c1c l       .text  00000000 
e0000c1c l       .text  00000000 
e0000c26 l       .text  00000000 
e0000c28 l       .text  00000000 
e0000c28 l       .text  00000000 
e0000c2a l       .text  00000000 
e0000c2a l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c3a l       .text  00000000 
e0000c3c l       .text  00000000 
e0000c3c l       .text  00000000 
e0000c50 l       .text  00000000 
e0000c50 l       .text  00000000 
e0000c52 l       .text  00000000 
e0000c52 l       .text  00000000 
e0000c5c l       .text  00000000 
e0000c5e l       .text  00000000 
e0000c5e l       .text  00000000 
e0000c72 l       .text  00000000 
e0000c72 l       .text  00000000 
e0000c74 l       .text  00000000 
e0003c88 l     O .logs.fields   00000014 test_status_set.kLogFields.2
e0000c74 l       .text  00000000 
e0000c80 l       .text  00000000 
e0000c80 l       .text  00000000 
e0000c8a l       .text  00000000 
e0000c8c l       .text  00000000 
e0000c8c l       .text  00000000 
e0003c74 l     O .logs.fields   00000014 test_status_set.kLogFields
e0000c94 l       .text  00000000 
e0000ca0 l       .text  00000000 
e0000ca0 l       .text  00000000 
e0000caa l       .text  00000000 
e0000cac l       .text  00000000 
e0000cac l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb4 l       .text  00000000 
00002e76 l       .debug_loc     00000000 
00002e94 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003dd3 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
0000097e l       .debug_str     00000000 
00000189 l       .debug_str     00000000 
00000348 l       .debug_str     00000000 
0000020d l       .debug_str     00000000 
00000218 l       .debug_str     00000000 
000001de l       .debug_str     00000000 
000001f6 l       .debug_str     00000000 
0000403e l       .debug_str     00000000 
00000200 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001da l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001b6 l       .debug_str     00000000 
000001c8 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
000002d3 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
00000301 l       .debug_str     00000000 
00000313 l       .debug_str     00000000 
00000324 l       .debug_str     00000000 
00000336 l       .debug_str     00000000 
00003e01 l       .debug_str     00000000 
00003e28 l       .debug_str     00000000 
00003e1a l       .debug_str     00000000 
0000023b l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
00000cff l       .debug_str     00000000 
00003744 l       .debug_str     00000000 
00003dac l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
00003758 l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
00000967 l       .debug_str     00000000 
00000952 l       .debug_str     00000000 
00003e40 l       .debug_str     00000000 
000004d4 l       .debug_frame   00000000 
e0000cb4 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
e0000cb4 l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb8 l       .text  00000000 
e0000cb8 l       .text  00000000 
e0000cba l       .text  00000000 
e0000cba l       .text  00000000 
00002ea7 l       .debug_loc     00000000 
00002ec2 l       .debug_loc     00000000 
00002ee9 l       .debug_loc     00000000 
00002f10 l       .debug_loc     00000000 
00002f2c l       .debug_loc     00000000 
00002f59 l       .debug_loc     00000000 
00002f80 l       .debug_loc     00000000 
00002fa7 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003e46 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000508 l       .debug_ranges  00000000 
00000115 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00003e63 l       .debug_str     00000000 
00003e74 l       .debug_str     00000000 
00003e7e l       .debug_str     00000000 
00003e89 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00003eb7 l       .debug_str     00000000 
00003eda l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
00003e9d l       .debug_str     00000000 
00003e96 l       .debug_str     00000000 
00003ea4 l       .debug_str     00000000 
00003e40 l       .debug_str     00000000 
00003ec8 l       .debug_str     00000000 
00000500 l       .debug_frame   00000000 
e0000cba l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
e0000cba l       .text  00000000 
e0000cba l       .text  00000000 
e0000cba l       .text  00000000 
e0000cbc l       .text  00000000 
e0000cc2 l       .text  00000000 
e0000cc4 l       .text  00000000 
e0000cd2 l       .text  00000000 
e0000cdc l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce4 l       .text  00000000 
e0000ce8 l       .text  00000000 
e0000ce8 l       .text  00000000 
e0000cf2 l       .text  00000000 
e0000cf2 l       .text  00000000 
e0000cf4 l       .text  00000000 
e0000cf8 l       .text  00000000 
e0000cf8 l       .text  00000000 
e0000cfa l       .text  00000000 
e0000cfa l       .text  00000000 
e0000cfc l       .text  00000000 
e0000cfc l       .text  00000000 
e0000d00 l       .text  00000000 
e0000d00 l       .text  00000000 
e0000d06 l       .text  00000000 
e0000d14 l       .text  00000000 
e0000d14 l       .text  00000000 
e0003c04 l     O .bss   00000002 base_log_internal_core.global_log_counter
e0000d1c l       .text  00000000 
e0000d28 l       .text  00000000 
e0000d2a l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d40 l       .text  00000000 
e0000d40 l       .text  00000000 
e0000d42 l       .text  00000000 
e0000d44 l       .text  00000000 
e0000d48 l       .text  00000000 
e0000d48 l       .text  00000000 
e0000d52 l       .text  00000000 
e0000d52 l       .text  00000000 
e0000d5c l       .text  00000000 
e0000d5c l       .text  00000000 
e0000d5c l       .text  00000000 
e0000d5c l       .text  00000000 
e0000d5c l       .text  00000000 
e0000d5e l       .text  00000000 
e0000d64 l       .text  00000000 
e0000d64 l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d74 l       .text  00000000 
e0000d74 l       .text  00000000 
e0000d78 l       .text  00000000 
e0000d78 l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d7c l       .text  00000000 
e0000d7c l       .text  00000000 
e0000d7e l       .text  00000000 
e0000d82 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d88 l       .text  00000000 
e0000d88 l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d8c l       .text  00000000 
e0000d8c l       .text  00000000 
e0000d90 l       .text  00000000 
e0000d90 l       .text  00000000 
00002fc3 l       .debug_loc     00000000 
00002feb l       .debug_loc     00000000 
00003006 l       .debug_loc     00000000 
00003042 l       .debug_loc     00000000 
0000305e l       .debug_loc     00000000 
00003079 l       .debug_loc     00000000 
00003094 l       .debug_loc     00000000 
000030af l       .debug_loc     00000000 
000030ed l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003edf l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000530 l       .debug_ranges  00000000 
00000967 l       .debug_str     00000000 
00003efb l       .debug_str     00000000 
00003f49 l       .debug_str     00000000 
00003f4d l       .debug_str     00000000 
00003f5b l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000c97 l       .debug_str     00000000 
00000c88 l       .debug_str     00000000 
000001da l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001b6 l       .debug_str     00000000 
000001c8 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00003f0e l       .debug_str     00000000 
000001de l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
00003f21 l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
00003f28 l       .debug_str     00000000 
00003f30 l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00003f3c l       .debug_str     00000000 
00003744 l       .debug_str     00000000 
00000cff l       .debug_str     00000000 
00003dac l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
0000023b l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
00003758 l       .debug_str     00000000 
00000952 l       .debug_str     00000000 
00000200 l       .debug_str     00000000 
00003f65 l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00000218 l       .debug_str     00000000 
0000020d l       .debug_str     00000000 
000001f6 l       .debug_str     00000000 
0000403e l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
00000bc4 l       .debug_str     00000000 
00000bba l       .debug_str     00000000 
00000560 l       .debug_frame   00000000 
e0000d5c l       .text  00000000 
e0000d90 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
e0000d90 l     F .text  00000004 base_dev_null
e0003c08 l     O .bss   00000008 base_stdout
e0000d90 l       .text  00000000 
e0000d90 l       .text  00000000 
e0000d90 l       .text  00000000 
e0000d92 l       .text  00000000 
e0000d92 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d96 l       .text  00000000 
e0000d98 l       .text  00000000 
e0000da6 l       .text  00000000 
e0000dae l       .text  00000000 
e0000dae l       .text  00000000 
e0000db4 l       .text  00000000 
e0000db4 l       .text  00000000 
e0000db6 l       .text  00000000 
e0000db6 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dbe l       .text  00000000 
e0000dc0 l       .text  00000000 
e0000dc0 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dce l       .text  00000000 
e0000dd4 l       .text  00000000 
e0000dd4 l       .text  00000000 
e0000dd6 l       .text  00000000 
e0000dd6 l       .text  00000000 
e0000ddc l       .text  00000000 
e0000dde l       .text  00000000 
e0000de0 l       .text  00000000 
e0000de0 l       .text  00000000 
e0000de0 l       .text  00000000 
e0000de0 l       .text  00000000 
e0000de0 l       .text  00000000 
e0000de0 l       .text  00000000 
e0000de2 l       .text  00000000 
e0000dfc l       .text  00000000 
e0000dfe l       .text  00000000 
e0000e00 l       .text  00000000 
e0000e02 l       .text  00000000 
e0000e04 l       .text  00000000 
e0000e06 l       .text  00000000 
e0000e08 l       .text  00000000 
e0000e10 l       .text  00000000 
e0000e10 l       .text  00000000 
e0000e12 l       .text  00000000 
e0000e12 l       .text  00000000 
e0000e16 l       .text  00000000 
e0000e1a l       .text  00000000 
e0000e2e l       .text  00000000 
e0000e2e l       .text  00000000 
e0000e38 l       .text  00000000 
e0000e3c l       .text  00000000 
e0000e40 l       .text  00000000 
e0000e42 l       .text  00000000 
e0000e44 l       .text  00000000 
e0000e44 l       .text  00000000 
e0000e46 l       .text  00000000 
e0000e48 l       .text  00000000 
e0000e4e l       .text  00000000 
e0000e4e l       .text  00000000 
e0000e50 l       .text  00000000 
e0000e50 l       .text  00000000 
e0000e54 l       .text  00000000 
e0000e54 l       .text  00000000 
e0000e60 l       .text  00000000 
e0000e64 l       .text  00000000 
e0000e64 l       .text  00000000 
e0000e70 l       .text  00000000 
e0000e70 l       .text  00000000 
e0000e78 l       .text  00000000 
e0000e78 l       .text  00000000 
e0000e7c l       .text  00000000 
e0000e7c l       .text  00000000 
e0000e8a l       .text  00000000 
e0000e8a l       .text  00000000 
e0000e8e l       .text  00000000 
e0000e96 l       .text  00000000 
e0000e9a l       .text  00000000 
e0000e9a l       .text  00000000 
e0000e9e l       .text  00000000 
e0000ea4 l       .text  00000000 
e0000ea8 l       .text  00000000 
e0000eaa l       .text  00000000 
e0000eae l       .text  00000000 
e0000eae l       .text  00000000 
e0000eb2 l       .text  00000000 
e0000eb8 l       .text  00000000 
e0000eb8 l       .text  00000000 
e0000ebc l       .text  00000000 
e0000ed0 l       .text  00000000 
e0000ed0 l       .text  00000000 
e0000ed2 l       .text  00000000 
e0000ed8 l       .text  00000000 
e0000edc l       .text  00000000 
e0000ee0 l       .text  00000000 
e0000ee0 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000eea l       .text  00000000 
e0000ef8 l       .text  00000000 
e0000ef8 l       .text  00000000 
e0000efc l       .text  00000000 
e0000f08 l       .text  00000000 
e0000f08 l       .text  00000000 
e0000f0c l       .text  00000000 
e0000f0c l       .text  00000000 
e0000f1a l       .text  00000000 
e0000f1a l       .text  00000000 
e0000f1c l       .text  00000000 
e0000f20 l       .text  00000000 
e0000f20 l       .text  00000000 
e0000f24 l       .text  00000000 
e0001a40 l     O .rodata        00000010 kDigitsLow
e0000f36 l       .text  00000000 
e0000f36 l       .text  00000000 
e0000f3e l       .text  00000000 
e0000f46 l       .text  00000000 
e0000f46 l       .text  00000000 
e0000f50 l       .text  00000000 
e0000f50 l       .text  00000000 
e0000f54 l       .text  00000000 
e0000f54 l       .text  00000000 
e0000f5e l       .text  00000000 
e0000f5e l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f6a l       .text  00000000 
e0001a6d l     O .rodata        00000010 kDigitsHigh
e0000f74 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f82 l       .text  00000000 
e0000f8c l       .text  00000000 
e0000f8c l       .text  00000000 
e0000f90 l       .text  00000000 
e0000f9a l       .text  00000000 
e0000f9a l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa6 l       .text  00000000 
e0000fb0 l       .text  00000000 
e0000fb0 l       .text  00000000 
e0000fba l       .text  00000000 
e0000fbe l       .text  00000000 
e0000fc2 l       .text  00000000 
e0000fc2 l       .text  00000000 
e0000fce l       .text  00000000 
e0000fce l       .text  00000000 
e0000fd2 l       .text  00000000 
e0000fdc l       .text  00000000 
e0000fe0 l       .text  00000000 
e0000fe0 l       .text  00000000 
e0000fe2 l       .text  00000000 
e0000fe2 l       .text  00000000 
e0000fe6 l       .text  00000000 
e0000fe6 l       .text  00000000 
e0000fea l       .text  00000000 
e0000ff4 l       .text  00000000 
e0000ff4 l       .text  00000000 
e0000ff8 l       .text  00000000 
e0001004 l       .text  00000000 
e0001004 l       .text  00000000 
e0001008 l       .text  00000000 
e0001008 l       .text  00000000 
e0001016 l       .text  00000000 
e0001016 l       .text  00000000 
e0001020 l       .text  00000000 
e0001020 l       .text  00000000 
e0001024 l       .text  00000000 
e0001024 l       .text  00000000 
e0001352 l     F .text  0000007e write_digits
e000103a l       .text  00000000 
e000103a l       .text  00000000 
e0001040 l       .text  00000000 
e0001040 l       .text  00000000 
e000104a l       .text  00000000 
e000104a l       .text  00000000 
e000104c l       .text  00000000 
e0001056 l       .text  00000000 
e0001056 l       .text  00000000 
e0001060 l       .text  00000000 
e0001060 l       .text  00000000 
e0001062 l       .text  00000000 
e0001062 l       .text  00000000 
e0001064 l       .text  00000000 
e0001064 l       .text  00000000 
e0001068 l       .text  00000000 
e0001068 l       .text  00000000 
e000106c l       .text  00000000 
e000106e l       .text  00000000 
e0001072 l       .text  00000000 
e0001072 l       .text  00000000 
e0001076 l       .text  00000000 
e0001076 l       .text  00000000 
e0001082 l       .text  00000000 
e0001082 l       .text  00000000 
e0001084 l       .text  00000000 
e0001084 l       .text  00000000 
e0001086 l       .text  00000000 
e0001086 l       .text  00000000 
e000108e l       .text  00000000 
e000108e l       .text  00000000 
e0001092 l       .text  00000000 
e0001092 l       .text  00000000 
e00010a0 l       .text  00000000 
e00010a0 l       .text  00000000 
e00010a2 l       .text  00000000 
e00010b0 l       .text  00000000 
e00010b0 l       .text  00000000 
e00010b4 l       .text  00000000 
e00010b4 l       .text  00000000 
e00010b8 l       .text  00000000 
e00010b8 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010ca l       .text  00000000 
e00010ca l       .text  00000000 
e00010d2 l       .text  00000000 
e00010d2 l       .text  00000000 
e00010d4 l       .text  00000000 
e00010d4 l       .text  00000000 
e00010d6 l       .text  00000000 
e00010d6 l       .text  00000000 
e00010ea l       .text  00000000 
e00010ea l       .text  00000000 
e00010ec l       .text  00000000 
e00010fa l       .text  00000000 
e00010fa l       .text  00000000 
e00010fc l       .text  00000000 
e00010fc l       .text  00000000 
e00010fe l       .text  00000000 
e0001106 l       .text  00000000 
e000110a l       .text  00000000 
e000110c l       .text  00000000 
e0001116 l       .text  00000000 
e0001116 l       .text  00000000 
e000111a l       .text  00000000 
e0001124 l       .text  00000000 
e0001124 l       .text  00000000 
e0001128 l       .text  00000000 
e0001134 l       .text  00000000 
e0001134 l       .text  00000000 
e0001138 l       .text  00000000 
e0001138 l       .text  00000000 
e0001142 l       .text  00000000 
e0001142 l       .text  00000000 
e000114a l       .text  00000000 
e000114a l       .text  00000000 
e000114e l       .text  00000000 
e0001156 l       .text  00000000 
e0001156 l       .text  00000000 
e0001160 l       .text  00000000 
e0001160 l       .text  00000000 
e000116a l       .text  00000000 
e000116a l       .text  00000000 
e000116e l       .text  00000000 
e0001176 l       .text  00000000 
e0001176 l       .text  00000000 
e0001180 l       .text  00000000 
e0001182 l       .text  00000000 
e0001182 l       .text  00000000 
e0001186 l       .text  00000000 
e0001190 l       .text  00000000 
e0001190 l       .text  00000000 
e0001198 l       .text  00000000 
e0001198 l       .text  00000000 
e000119c l       .text  00000000 
e00011a4 l       .text  00000000 
e00011a4 l       .text  00000000 
e000126e l     F .text  000000e4 hex_dump
e00011ae l       .text  00000000 
e00011b0 l       .text  00000000 
e0001a7d l     O .rodata        0000000f kUnknownSpec
e00011b0 l       .text  00000000 
e00011ba l       .text  00000000 
e00011ba l       .text  00000000 
e00011be l       .text  00000000 
e00011c0 l       .text  00000000 
e00011c0 l       .text  00000000 
e00011c4 l       .text  00000000 
e00011ca l       .text  00000000 
e00011ca l       .text  00000000 
e00011ce l       .text  00000000 
e00011da l       .text  00000000 
e00011da l       .text  00000000 
e00011dc l       .text  00000000 
e00011dc l       .text  00000000 
e00011f0 l       .text  00000000 
e00011f0 l       .text  00000000 
e00011f4 l       .text  00000000 
e0001202 l       .text  00000000 
e0001202 l       .text  00000000 
e0001206 l       .text  00000000 
e0001206 l       .text  00000000 
e000120c l       .text  00000000 
e000120c l       .text  00000000 
e000120e l       .text  00000000 
e000120e l       .text  00000000 
e0001210 l       .text  00000000 
e0001210 l       .text  00000000 
e0001218 l       .text  00000000 
e000121a l       .text  00000000 
e000121c l       .text  00000000 
e0001222 l       .text  00000000 
e0001222 l       .text  00000000 
e000122e l       .text  00000000 
e0001a50 l     O .rodata        00000011 kErrorNul
e000122e l       .text  00000000 
e0001238 l       .text  00000000 
e0001238 l       .text  00000000 
e000123c l       .text  00000000 
e0001240 l       .text  00000000 
e0001242 l       .text  00000000 
e0001242 l       .text  00000000 
e0001252 l       .text  00000000 
e0001256 l       .text  00000000 
e0001262 l       .text  00000000 
e0001a61 l     O .rodata        0000000c kErrorTooWide
e0001262 l       .text  00000000 
e000126e l       .text  00000000 
e000126e l       .text  00000000 
e000126e l       .text  00000000 
e000126e l       .text  00000000 
e000126e l       .text  00000000 
e000126e l       .text  00000000 
e0001270 l       .text  00000000 
e0001288 l       .text  00000000 
e000128a l       .text  00000000 
e000128c l       .text  00000000 
e000128e l       .text  00000000 
e0001290 l       .text  00000000 
e0001294 l       .text  00000000 
e0001294 l       .text  00000000 
e0001298 l       .text  00000000 
e000129c l       .text  00000000 
e000129c l       .text  00000000 
e00012a6 l       .text  00000000 
e00012a6 l       .text  00000000 
e00012a8 l       .text  00000000 
e00012aa l       .text  00000000 
e00012b0 l       .text  00000000 
e00012b0 l       .text  00000000 
e00012b4 l       .text  00000000 
e00012b8 l       .text  00000000 
e00012b8 l       .text  00000000 
e00012c0 l       .text  00000000 
e00012c0 l       .text  00000000 
e00012c2 l       .text  00000000 
e00012c4 l       .text  00000000 
e00012c4 l       .text  00000000 
e00012c6 l       .text  00000000 
e00012c6 l       .text  00000000 
e00012cc l       .text  00000000 
e00012cc l       .text  00000000 
e00012ce l       .text  00000000 
e00012ce l       .text  00000000 
e00012d2 l       .text  00000000 
e00012d6 l       .text  00000000 
e00012dc l       .text  00000000 
e00012dc l       .text  00000000 
e00012e2 l       .text  00000000 
e00012ea l       .text  00000000 
e00012ea l       .text  00000000 
e00012ec l       .text  00000000 
e00012f0 l       .text  00000000 
e00012f4 l       .text  00000000 
e00012fa l       .text  00000000 
e00012fe l       .text  00000000 
e0001302 l       .text  00000000 
e0001304 l       .text  00000000 
e000130a l       .text  00000000 
e000130c l       .text  00000000 
e0001314 l       .text  00000000 
e000131a l       .text  00000000 
e000131e l       .text  00000000 
e000131e l       .text  00000000 
e0001320 l       .text  00000000 
e0001322 l       .text  00000000 
e0001322 l       .text  00000000 
e0001324 l       .text  00000000 
e0001326 l       .text  00000000 
e000132a l       .text  00000000 
e000132a l       .text  00000000 
e000132c l       .text  00000000 
e0001332 l       .text  00000000 
e0001332 l       .text  00000000 
e0001334 l       .text  00000000 
e000133c l       .text  00000000 
e000133e l       .text  00000000 
e0001342 l       .text  00000000 
e0001344 l       .text  00000000 
e0001346 l       .text  00000000 
e0001348 l       .text  00000000 
e0001352 l       .text  00000000 
e0001352 l       .text  00000000 
e0001352 l       .text  00000000 
e0001352 l       .text  00000000 
e0001352 l       .text  00000000 
e0001354 l       .text  00000000 
e0001356 l       .text  00000000 
e0001358 l       .text  00000000 
e0001358 l       .text  00000000 
e000135a l       .text  00000000 
e000135c l       .text  00000000 
e0001360 l       .text  00000000 
e0001360 l       .text  00000000 
e0001362 l       .text  00000000 
e0001362 l       .text  00000000 
e000136e l       .text  00000000 
e000136e l       .text  00000000 
e0001370 l       .text  00000000 
e0001374 l       .text  00000000 
e000137c l       .text  00000000 
e000137c l       .text  00000000 
e000137e l       .text  00000000 
e0001382 l       .text  00000000 
e0001386 l       .text  00000000 
e0001386 l       .text  00000000 
e0001388 l       .text  00000000 
e0001388 l       .text  00000000 
e000138c l       .text  00000000 
e0001392 l       .text  00000000 
e0001392 l       .text  00000000 
e0001394 l       .text  00000000 
e0001396 l       .text  00000000 
e0001398 l       .text  00000000 
e000139c l       .text  00000000 
e00013a0 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013ae l       .text  00000000 
e00013b2 l       .text  00000000 
e00013b4 l       .text  00000000 
e00013b8 l       .text  00000000 
e00013bc l       .text  00000000 
e00013be l       .text  00000000 
e00013c0 l       .text  00000000 
e00013c2 l       .text  00000000 
e00013c2 l       .text  00000000 
e00013c8 l       .text  00000000 
e00013ca l       .text  00000000 
e00013ca l       .text  00000000 
e00013d0 l       .text  00000000 
e00013d0 l       .text  00000000 
0000310a l       .debug_loc     00000000 
00003136 l       .debug_loc     00000000 
00003151 l       .debug_loc     00000000 
00003177 l       .debug_loc     00000000 
000031a3 l       .debug_loc     00000000 
000031d4 l       .debug_loc     00000000 
00003205 l       .debug_loc     00000000 
00003241 l       .debug_loc     00000000 
00003272 l       .debug_loc     00000000 
00003299 l       .debug_loc     00000000 
000032ca l       .debug_loc     00000000 
000032e5 l       .debug_loc     00000000 
00003301 l       .debug_loc     00000000 
0000331c l       .debug_loc     00000000 
00003342 l       .debug_loc     00000000 
00003368 l       .debug_loc     00000000 
000033a4 l       .debug_loc     00000000 
000034af l       .debug_loc     00000000 
00003609 l       .debug_loc     00000000 
00003709 l       .debug_loc     00000000 
00003814 l       .debug_loc     00000000 
00003834 l       .debug_loc     00000000 
0000385a l       .debug_loc     00000000 
0000388a l       .debug_loc     00000000 
00003ac2 l       .debug_loc     00000000 
00003ade l       .debug_loc     00000000 
00003af9 l       .debug_loc     00000000 
00003c6e l       .debug_loc     00000000 
00003dbe l       .debug_loc     00000000 
00003ed2 l       .debug_loc     00000000 
00003ef8 l       .debug_loc     00000000 
00003f13 l       .debug_loc     00000000 
00003f2e l       .debug_loc     00000000 
00003f49 l       .debug_loc     00000000 
00003f64 l       .debug_loc     00000000 
00003f7f l       .debug_loc     00000000 
00003f9b l       .debug_loc     00000000 
00003fb6 l       .debug_loc     00000000 
00003fd1 l       .debug_loc     00000000 
00003fec l       .debug_loc     00000000 
00004007 l       .debug_loc     00000000 
00004039 l       .debug_loc     00000000 
0000406c l       .debug_loc     00000000 
00004087 l       .debug_loc     00000000 
000040da l       .debug_loc     00000000 
0000410d l       .debug_loc     00000000 
00004128 l       .debug_loc     00000000 
00004143 l       .debug_loc     00000000 
0000415e l       .debug_loc     00000000 
00004179 l       .debug_loc     00000000 
00004194 l       .debug_loc     00000000 
000041af l       .debug_loc     00000000 
000041ca l       .debug_loc     00000000 
000041e5 l       .debug_loc     00000000 
00004200 l       .debug_loc     00000000 
0000421b l       .debug_loc     00000000 
00004236 l       .debug_loc     00000000 
00004252 l       .debug_loc     00000000 
00004271 l       .debug_loc     00000000 
0000428c l       .debug_loc     00000000 
000042bd l       .debug_loc     00000000 
000042e3 l       .debug_loc     00000000 
00004314 l       .debug_loc     00000000 
00004345 l       .debug_loc     00000000 
00004360 l       .debug_loc     00000000 
0000437b l       .debug_loc     00000000 
00004396 l       .debug_loc     00000000 
000043c7 l       .debug_loc     00000000 
000043e2 l       .debug_loc     00000000 
000043fd l       .debug_loc     00000000 
00004419 l       .debug_loc     00000000 
0000443f l       .debug_loc     00000000 
00004470 l       .debug_loc     00000000 
0000448b l       .debug_loc     00000000 
000044a6 l       .debug_loc     00000000 
000044cc l       .debug_loc     00000000 
000044f2 l       .debug_loc     00000000 
0000450d l       .debug_loc     00000000 
00004528 l       .debug_loc     00000000 
00004543 l       .debug_loc     00000000 
0000455e l       .debug_loc     00000000 
0000457d l       .debug_loc     00000000 
00004598 l       .debug_loc     00000000 
000045b3 l       .debug_loc     00000000 
000045cf l       .debug_loc     00000000 
000045ea l       .debug_loc     00000000 
00004605 l       .debug_loc     00000000 
00004624 l       .debug_loc     00000000 
0000464a l       .debug_loc     00000000 
0000467b l       .debug_loc     00000000 
000046d3 l       .debug_loc     00000000 
0000471d l       .debug_loc     00000000 
0000476f l       .debug_loc     00000000 
000047ac l       .debug_loc     00000000 
000047e8 l       .debug_loc     00000000 
00004852 l       .debug_loc     00000000 
0000489b l       .debug_loc     00000000 
00004905 l       .debug_loc     00000000 
0000492b l       .debug_loc     00000000 
00004946 l       .debug_loc     00000000 
00004961 l       .debug_loc     00000000 
00004988 l       .debug_loc     00000000 
000049d0 l       .debug_loc     00000000 
000049f6 l       .debug_loc     00000000 
00004a1c l       .debug_loc     00000000 
00004a42 l       .debug_loc     00000000 
00004a5d l       .debug_loc     00000000 
00004a8d l       .debug_loc     00000000 
00004ab3 l       .debug_loc     00000000 
00004ae5 l       .debug_loc     00000000 
00004b23 l       .debug_loc     00000000 
00004b52 l       .debug_loc     00000000 
00004b6d l       .debug_loc     00000000 
00004ba0 l       .debug_loc     00000000 
00004bbb l       .debug_loc     00000000 
00004bf7 l       .debug_loc     00000000 
00004c1d l       .debug_loc     00000000 
00004c38 l       .debug_loc     00000000 
00004c53 l       .debug_loc     00000000 
00004c6e l       .debug_loc     00000000 
00004cc4 l       .debug_loc     00000000 
00004cf3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003f70 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000680 l       .debug_ranges  00000000 
00003f8e l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00003fad l       .debug_str     00000000 
00003fc5 l       .debug_str     00000000 
00003fb9 l       .debug_str     00000000 
000000b9 l       .debug_str     00000000 
000042ce l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00003fd3 l       .debug_str     00000000 
00003fdd l       .debug_str     00000000 
00004326 l       .debug_str     00000000 
00003feb l       .debug_str     00000000 
0000280e l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
00000889 l       .debug_str     00000000 
0000015f l       .debug_str     00000000 
00000cff l       .debug_str     00000000 
000043a8 l       .debug_str     00000000 
00004353 l       .debug_str     00000000 
000041f5 l       .debug_str     00000000 
000043b8 l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
00003ff5 l       .debug_str     00000000 
00004001 l       .debug_str     00000000 
0000400e l       .debug_str     00000000 
0000405d l       .debug_str     00000000 
0000404c l       .debug_str     00000000 
00004025 l       .debug_str     00000000 
00004034 l       .debug_str     00000000 
00004043 l       .debug_str     00000000 
00004070 l       .debug_str     00000000 
000002c8 l       .debug_str     00000000 
00000265 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000276 l       .debug_str     00000000 
00000281 l       .debug_str     00000000 
0000028c l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000002ba l       .debug_str     00000000 
0000407b l       .debug_str     00000000 
00004084 l       .debug_str     00000000 
0000408f l       .debug_str     00000000 
00004097 l       .debug_str     00000000 
000040a3 l       .debug_str     00000000 
000040af l       .debug_str     00000000 
000040bc l       .debug_str     00000000 
000040cc l       .debug_str     00000000 
000040dd l       .debug_str     00000000 
000040ea l       .debug_str     00000000 
000040f3 l       .debug_str     00000000 
000040fd l       .debug_str     00000000 
00004107 l       .debug_str     00000000 
00004112 l       .debug_str     00000000 
0000411c l       .debug_str     00000000 
00004127 l       .debug_str     00000000 
00004135 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00000167 l       .debug_str     00000000 
00004147 l       .debug_str     00000000 
0000413e l       .debug_str     00000000 
00000225 l       .debug_str     00000000 
0000023b l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
0000415d l       .debug_str     00000000 
00000cf5 l       .debug_str     00000000 
00004152 l       .debug_str     00000000 
000000bf l       .debug_str     00000000 
0000427c l       .debug_str     00000000 
00004171 l       .debug_str     00000000 
0000428a l       .debug_str     00000000 
00004142 l       .debug_str     00000000 
0000429b l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00004181 l       .debug_str     00000000 
00003f3c l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000bc4 l       .debug_str     00000000 
00000bba l       .debug_str     00000000 
00003f30 l       .debug_str     00000000 
00000548 l       .debug_ranges  00000000 
000042a9 l       .debug_str     00000000 
00004333 l       .debug_str     00000000 
0000436e l       .debug_str     00000000 
00000628 l       .debug_ranges  00000000 
0000420f l       .debug_str     00000000 
00000560 l       .debug_ranges  00000000 
00000588 l       .debug_ranges  00000000 
000005a8 l       .debug_ranges  00000000 
000005c0 l       .debug_ranges  00000000 
000005f8 l       .debug_ranges  00000000 
000005e0 l       .debug_ranges  00000000 
00000610 l       .debug_ranges  00000000 
0000419b l       .debug_str     00000000 
000041b1 l       .debug_str     00000000 
00003ef9 l       .debug_str     00000000 
0000092e l       .debug_str     00000000 
000041ba l       .debug_str     00000000 
000041f0 l       .debug_str     00000000 
000041dd l       .debug_str     00000000 
000041c2 l       .debug_str     00000000 
00004706 l       .debug_str     00000000 
000041d3 l       .debug_str     00000000 
000041f9 l       .debug_str     00000000 
0000420b l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
0000452e l       .debug_str     00000000 
0000421a l       .debug_str     00000000 
00004214 l       .debug_str     00000000 
00004221 l       .debug_str     00000000 
00004229 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
0000422d l       .debug_str     00000000 
00000c28 l       .debug_str     00000000 
0000454c l       .debug_str     00000000 
00004231 l       .debug_str     00000000 
0000431d l       .debug_str     00000000 
000045bd l       .debug_str     00000000 
0000439d l       .debug_str     00000000 
00004394 l       .debug_str     00000000 
000043af l       .debug_str     00000000 
000038fb l       .debug_str     00000000 
000042b7 l       .debug_str     00000000 
000042c5 l       .debug_str     00000000 
0000433d l       .debug_str     00000000 
00004240 l       .debug_str     00000000 
000042d3 l       .debug_str     00000000 
00004247 l       .debug_str     00000000 
00004059 l       .debug_str     00000000 
000042e0 l       .debug_str     00000000 
0000430a l       .debug_str     00000000 
0000435a l       .debug_str     00000000 
0000403e l       .debug_str     00000000 
00000668 l       .debug_ranges  00000000 
0000434d l       .debug_str     00000000 
00004369 l       .debug_str     00000000 
0000437c l       .debug_str     00000000 
00003b1a l       .debug_str     00000000 
00000648 l       .debug_ranges  00000000 
00004346 l       .debug_str     00000000 
0000438b l       .debug_str     00000000 
00003ae8 l       .debug_str     00000000 
00004259 l       .debug_str     00000000 
0000426d l       .debug_str     00000000 
000042ed l       .debug_str     00000000 
000042fc l       .debug_str     00000000 
00004275 l       .debug_str     00000000 
000005a4 l       .debug_frame   00000000 
e0000d94 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000de0 l       .text  00000000 
e000126e l       .text  00000000 
e0001352 l       .text  00000000 
e00013d0 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e00013d0 l       .text  00000000 
e00013d0 l       .text  00000000 
e00013d0 l       .text  00000000 
e00013d0 l       .text  00000000 
e00013d4 l       .text  00000000 
e00013dc l       .text  00000000 
e00013dc l       .text  00000000 
e00013e0 l       .text  00000000 
e00013e0 l       .text  00000000 
e00013ec l       .text  00000000 
e00013ee l       .text  00000000 
e00013ee l       .text  00000000 
e00013f2 l       .text  00000000 
e00013fe l       .text  00000000 
e0001400 l       .text  00000000 
e0001404 l       .text  00000000 
e0001406 l       .text  00000000 
e0001406 l       .text  00000000 
e000140a l       .text  00000000 
e000140a l       .text  00000000 
e000140e l       .text  00000000 
e000140e l       .text  00000000 
e0001410 l       .text  00000000 
e0001410 l       .text  00000000 
e0001414 l       .text  00000000 
e0001414 l       .text  00000000 
e0001416 l       .text  00000000 
e000141a l       .text  00000000 
e000141a l       .text  00000000 
e000141e l       .text  00000000 
e0001422 l       .text  00000000 
e0001428 l       .text  00000000 
e0001428 l       .text  00000000 
e000142c l       .text  00000000 
e000142e l       .text  00000000 
e000142e l       .text  00000000 
e0001434 l       .text  00000000 
e0001434 l       .text  00000000 
e000143a l       .text  00000000 
e000143a l       .text  00000000 
e000143c l       .text  00000000 
e000143c l       .text  00000000 
e0001442 l       .text  00000000 
e0001442 l       .text  00000000 
00004d0e l       .debug_loc     00000000 
00004d29 l       .debug_loc     00000000 
00004d5a l       .debug_loc     00000000 
00004d80 l       .debug_loc     00000000 
00004da6 l       .debug_loc     00000000 
00004dc1 l       .debug_loc     00000000 
00004de3 l       .debug_loc     00000000 
00004e0a l       .debug_loc     00000000 
00004e31 l       .debug_loc     00000000 
00004e55 l       .debug_loc     00000000 
00004e86 l       .debug_loc     00000000 
00004ea1 l       .debug_loc     00000000 
00004ed2 l       .debug_loc     00000000 
00004f2c l       .debug_loc     00000000 
00004f68 l       .debug_loc     00000000 
00004f8c l       .debug_loc     00000000 
00004fb1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000043be l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000730 l       .debug_ranges  00000000 
000043da l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000043ea l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00004518 l       .debug_str     00000000 
000043f7 l       .debug_str     00000000 
000043fb l       .debug_str     00000000 
00004406 l       .debug_str     00000000 
0000440f l       .debug_str     00000000 
00004420 l       .debug_str     00000000 
00004432 l       .debug_str     00000000 
0000443c l       .debug_str     00000000 
0000444b l       .debug_str     00000000 
0000445d l       .debug_str     00000000 
00004470 l       .debug_str     00000000 
00004484 l       .debug_str     00000000 
0000448d l       .debug_str     00000000 
00004499 l       .debug_str     00000000 
000044a8 l       .debug_str     00000000 
000044b2 l       .debug_str     00000000 
000044bf l       .debug_str     00000000 
000044c9 l       .debug_str     00000000 
000044da l       .debug_str     00000000 
000000bf l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00004135 l       .debug_str     00000000 
00004529 l       .debug_str     00000000 
00004537 l       .debug_str     00000000 
00004540 l       .debug_str     00000000 
00003a5e l       .debug_str     00000000 
000034c7 l       .debug_str     00000000 
000009c2 l       .debug_str     00000000 
000009c5 l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
000034f4 l       .debug_str     00000000 
000034e3 l       .debug_str     00000000 
000034de l       .debug_str     00000000 
0000378a l       .debug_str     00000000 
00004550 l       .debug_str     00000000 
00004524 l       .debug_str     00000000 
0000455e l       .debug_str     00000000 
0000422d l       .debug_str     00000000 
00000718 l       .debug_ranges  00000000 
00004545 l       .debug_str     00000000 
00002209 l       .debug_str     00000000 
0000452e l       .debug_str     00000000 
0000421a l       .debug_str     00000000 
00003a8d l       .debug_str     00000000 
00004231 l       .debug_str     00000000 
00004568 l       .debug_str     00000000 
0000454c l       .debug_str     00000000 
0000092e l       .debug_str     00000000 
00000798 l       .debug_frame   00000000 
e0001442 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
e0001442 l       .text  00000000 
e0001442 l       .text  00000000 
e0001442 l       .text  00000000 
e0001442 l       .text  00000000 
e000144a l       .text  00000000 
e000144e l       .text  00000000 
e000144e l       .text  00000000 
e0001452 l       .text  00000000 
e0001452 l       .text  00000000 
e0001456 l       .text  00000000 
e0001456 l       .text  00000000 
e0001462 l       .text  00000000 
e0001464 l       .text  00000000 
e0001464 l       .text  00000000 
e000146a l       .text  00000000 
e000146a l       .text  00000000 
e000146e l       .text  00000000 
e0001470 l       .text  00000000 
e0001474 l       .text  00000000 
e0001474 l       .text  00000000 
e0001476 l       .text  00000000 
e0001476 l       .text  00000000 
e0001478 l       .text  00000000 
e0001478 l       .text  00000000 
e0001480 l       .text  00000000 
e0001484 l       .text  00000000 
e0001486 l       .text  00000000 
e000148a l       .text  00000000 
e000148e l       .text  00000000 
e000148e l       .text  00000000 
e0001492 l       .text  00000000 
e0001492 l       .text  00000000 
e0001496 l       .text  00000000 
e0001498 l       .text  00000000 
e0001498 l       .text  00000000 
e000149c l       .text  00000000 
e000149c l       .text  00000000 
e000149e l       .text  00000000 
e000149e l       .text  00000000 
e00014a0 l       .text  00000000 
e00014a0 l       .text  00000000 
e00014a4 l       .text  00000000 
e00014a4 l       .text  00000000 
e00014a8 l       .text  00000000 
e00014aa l       .text  00000000 
e00014b0 l       .text  00000000 
e00014b0 l       .text  00000000 
e00014b4 l       .text  00000000 
e00014b8 l       .text  00000000 
e00014c0 l       .text  00000000 
e00014c0 l       .text  00000000 
e00014c2 l       .text  00000000 
e00014c2 l       .text  00000000 
e00014c4 l       .text  00000000 
e00014c4 l       .text  00000000 
e00014ca l       .text  00000000 
e00014ca l       .text  00000000 
e00014ca l       .text  00000000 
e00014ca l       .text  00000000 
e00014ca l       .text  00000000 
e00014ce l       .text  00000000 
e00014ce l       .text  00000000 
e00014d2 l       .text  00000000 
e00014d2 l       .text  00000000 
e00014da l       .text  00000000 
e00014da l       .text  00000000 
e00014de l       .text  00000000 
e00014e2 l       .text  00000000 
e00014e2 l       .text  00000000 
e00014e4 l       .text  00000000 
e00014e4 l       .text  00000000 
e00014e8 l       .text  00000000 
e00014e8 l       .text  00000000 
e00014ec l       .text  00000000 
e00014ec l       .text  00000000 
e00014ee l       .text  00000000 
e00014f0 l       .text  00000000 
e00014f2 l       .text  00000000 
e00014f2 l       .text  00000000 
e00014f6 l       .text  00000000 
e00014fa l       .text  00000000 
e000150a l       .text  00000000 
e000150a l       .text  00000000 
e000150e l       .text  00000000 
e000150e l       .text  00000000 
e0001510 l       .text  00000000 
e0001510 l       .text  00000000 
e0001512 l       .text  00000000 
e0001512 l       .text  00000000 
e0001516 l       .text  00000000 
e0001516 l       .text  00000000 
e000151c l       .text  00000000 
e0001520 l       .text  00000000 
e0001520 l       .text  00000000 
e0001524 l       .text  00000000 
e0001528 l       .text  00000000 
e000152a l       .text  00000000 
e000152c l       .text  00000000 
e000152c l       .text  00000000 
e000152c l       .text  00000000 
e000152c l       .text  00000000 
e000152c l       .text  00000000 
e0001530 l       .text  00000000 
e0001530 l       .text  00000000 
e0001534 l       .text  00000000 
e0001534 l       .text  00000000 
e000153c l       .text  00000000 
e0001540 l       .text  00000000 
e0001544 l       .text  00000000 
e0001546 l       .text  00000000 
e0001548 l       .text  00000000 
e0001548 l       .text  00000000 
e000154c l       .text  00000000 
e0001550 l       .text  00000000 
e0001550 l       .text  00000000 
e0001552 l       .text  00000000 
e0001554 l       .text  00000000 
e0001556 l       .text  00000000 
e000155c l       .text  00000000 
e000155c l       .text  00000000 
e000155e l       .text  00000000 
e0001562 l       .text  00000000 
e000156e l       .text  00000000 
e000157c l       .text  00000000 
e000157c l       .text  00000000 
e0001580 l       .text  00000000 
e0001582 l       .text  00000000 
e0001582 l       .text  00000000 
e0001586 l       .text  00000000 
e000158a l       .text  00000000 
e000158a l       .text  00000000 
e000158e l       .text  00000000 
e0001592 l       .text  00000000 
e0001596 l       .text  00000000 
e000159a l       .text  00000000 
e000159e l       .text  00000000 
e000159e l       .text  00000000 
e00015a2 l       .text  00000000 
e00015a6 l       .text  00000000 
e00015a8 l       .text  00000000 
e00015a8 l       .text  00000000 
e00015aa l       .text  00000000 
e00015ae l       .text  00000000 
e00015ae l       .text  00000000 
e00015b6 l       .text  00000000 
e00015ba l       .text  00000000 
e00015ba l       .text  00000000 
e00015be l       .text  00000000 
e00015c2 l       .text  00000000 
e00015c6 l       .text  00000000 
e00015c8 l       .text  00000000 
e00015cc l       .text  00000000 
e00015cc l       .text  00000000 
e00015d0 l       .text  00000000 
e00015d0 l       .text  00000000 
e00015d4 l       .text  00000000 
e00015d6 l       .text  00000000 
e00015d6 l       .text  00000000 
e00015da l       .text  00000000 
e00015da l       .text  00000000 
e00015da l       .text  00000000 
e00015da l       .text  00000000 
e00015da l       .text  00000000 
e00015de l       .text  00000000 
e00015de l       .text  00000000 
e00015e2 l       .text  00000000 
e00015e2 l       .text  00000000 
e00015ea l       .text  00000000 
e00015ea l       .text  00000000 
e00015ee l       .text  00000000 
e00015f0 l       .text  00000000 
e00015f4 l       .text  00000000 
e00015f4 l       .text  00000000 
e00015f6 l       .text  00000000 
e00015f6 l       .text  00000000 
e00015fa l       .text  00000000 
e00015fa l       .text  00000000 
e0001600 l       .text  00000000 
e0001600 l       .text  00000000 
e0001604 l       .text  00000000 
e0001604 l       .text  00000000 
e000160c l       .text  00000000 
e0001610 l       .text  00000000 
e0001610 l       .text  00000000 
e0001612 l       .text  00000000 
e0001616 l       .text  00000000 
e0001616 l       .text  00000000 
e0001618 l       .text  00000000 
e000161a l       .text  00000000 
e000161a l       .text  00000000 
e0001622 l       .text  00000000 
e0001622 l       .text  00000000 
e0001626 l       .text  00000000 
e0001626 l       .text  00000000 
e0001630 l       .text  00000000 
e0001634 l       .text  00000000 
e0001634 l       .text  00000000 
e0001638 l       .text  00000000 
e0001638 l       .text  00000000 
e000163c l       .text  00000000 
e0001640 l       .text  00000000 
e0001640 l       .text  00000000 
e0001644 l       .text  00000000 
e0001648 l       .text  00000000 
e0001648 l       .text  00000000 
e000164a l       .text  00000000 
e000164e l       .text  00000000 
e000164e l       .text  00000000 
e0001652 l       .text  00000000 
e0001656 l       .text  00000000 
e000165a l       .text  00000000 
e000165e l       .text  00000000 
e0001662 l       .text  00000000 
e0001664 l       .text  00000000 
e0001664 l       .text  00000000 
e0001668 l       .text  00000000 
e0001668 l       .text  00000000 
e000166a l       .text  00000000 
e000166c l       .text  00000000 
e000166c l       .text  00000000 
e0001674 l       .text  00000000 
e0001678 l       .text  00000000 
e0001678 l       .text  00000000 
e000167a l       .text  00000000 
e000167e l       .text  00000000 
e000167e l       .text  00000000 
e0001680 l       .text  00000000 
e0001682 l       .text  00000000 
e0001682 l       .text  00000000 
e0001684 l       .text  00000000 
e0001684 l       .text  00000000 
e0001688 l       .text  00000000 
e0001688 l       .text  00000000 
e000168a l       .text  00000000 
e000168a l       .text  00000000 
e000168e l       .text  00000000 
e000168e l       .text  00000000 
e0001690 l       .text  00000000 
e0001690 l       .text  00000000 
e0001694 l       .text  00000000 
e0001694 l       .text  00000000 
e0001696 l       .text  00000000 
e0001696 l       .text  00000000 
e0001698 l       .text  00000000 
e0001698 l       .text  00000000 
e000169a l       .text  00000000 
e000169a l       .text  00000000 
00004fd3 l       .debug_loc     00000000 
00004ff9 l       .debug_loc     00000000 
0000501f l       .debug_loc     00000000 
00005045 l       .debug_loc     00000000 
0000506b l       .debug_loc     00000000 
0000508a l       .debug_loc     00000000 
000050a9 l       .debug_loc     00000000 
000050cf l       .debug_loc     00000000 
000050ea l       .debug_loc     00000000 
00005133 l       .debug_loc     00000000 
00005159 l       .debug_loc     00000000 
0000517b l       .debug_loc     00000000 
00005196 l       .debug_loc     00000000 
000051b1 l       .debug_loc     00000000 
000051cc l       .debug_loc     00000000 
000051e7 l       .debug_loc     00000000 
00005202 l       .debug_loc     00000000 
0000521d l       .debug_loc     00000000 
0000526d l       .debug_loc     00000000 
00005288 l       .debug_loc     00000000 
000052a3 l       .debug_loc     00000000 
000052c5 l       .debug_loc     00000000 
000052e0 l       .debug_loc     00000000 
000052fb l       .debug_loc     00000000 
00005316 l       .debug_loc     00000000 
00005331 l       .debug_loc     00000000 
0000534c l       .debug_loc     00000000 
0000536b l       .debug_loc     00000000 
0000538a l       .debug_loc     00000000 
000053b0 l       .debug_loc     00000000 
000053cb l       .debug_loc     00000000 
00005414 l       .debug_loc     00000000 
0000543a l       .debug_loc     00000000 
00005455 l       .debug_loc     00000000 
00005470 l       .debug_loc     00000000 
0000548b l       .debug_loc     00000000 
000054a6 l       .debug_loc     00000000 
000054c1 l       .debug_loc     00000000 
000054dc l       .debug_loc     00000000 
000054f7 l       .debug_loc     00000000 
00005516 l       .debug_loc     00000000 
00005535 l       .debug_loc     00000000 
00005550 l       .debug_loc     00000000 
00005597 l       .debug_loc     00000000 
000055b2 l       .debug_loc     00000000 
000055cd l       .debug_loc     00000000 
000055f3 l       .debug_loc     00000000 
0000560e l       .debug_loc     00000000 
00005629 l       .debug_loc     00000000 
00005644 l       .debug_loc     00000000 
0000565f l       .debug_loc     00000000 
0000567a l       .debug_loc     00000000 
000056a0 l       .debug_loc     00000000 
000056bb l       .debug_loc     00000000 
000056e1 l       .debug_loc     00000000 
00005707 l       .debug_loc     00000000 
00005724 l       .debug_loc     00000000 
0000577f l       .debug_loc     00000000 
0000579a l       .debug_loc     00000000 
000057c0 l       .debug_loc     00000000 
000057e6 l       .debug_loc     00000000 
00005801 l       .debug_loc     00000000 
00005827 l       .debug_loc     00000000 
00005884 l       .debug_loc     00000000 
0000589f l       .debug_loc     00000000 
000058ba l       .debug_loc     00000000 
00005917 l       .debug_loc     00000000 
00005934 l       .debug_loc     00000000 
0000594f l       .debug_loc     00000000 
00005996 l       .debug_loc     00000000 
000059b1 l       .debug_loc     00000000 
000059cc l       .debug_loc     00000000 
000059e7 l       .debug_loc     00000000 
00005a02 l       .debug_loc     00000000 
00005a1d l       .debug_loc     00000000 
00005a43 l       .debug_loc     00000000 
00005a5e l       .debug_loc     00000000 
00005a79 l       .debug_loc     00000000 
00005a94 l       .debug_loc     00000000 
00005aaf l       .debug_loc     00000000 
00005adc l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000456f l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
000007d0 l       .debug_ranges  00000000 
0000458b l       .debug_str     00000000 
00004595 l       .debug_str     00000000 
0000459f l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
00000167 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000045a9 l       .debug_str     00000000 
00004664 l       .debug_str     00000000 
0000466e l       .debug_str     00000000 
000041f5 l       .debug_str     00000000 
000045c3 l       .debug_str     00000000 
000045ce l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
00004135 l       .debug_str     00000000 
000045da l       .debug_str     00000000 
000045ec l       .debug_str     00000000 
000045fc l       .debug_str     00000000 
000045b1 l       .debug_str     00000000 
00003626 l       .debug_str     00000000 
00003ac6 l       .debug_str     00000000 
00000ceb l       .debug_str     00000000 
00003430 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00003b1f l       .debug_str     00000000 
00003db8 l       .debug_str     00000000 
00004240 l       .debug_str     00000000 
0000462e l       .debug_str     00000000 
00003a89 l       .debug_str     00000000 
00004633 l       .debug_str     00000000 
00004639 l       .debug_str     00000000 
000045f0 l       .debug_str     00000000 
0000157d l       .debug_str     00000000 
00004600 l       .debug_str     00000000 
00000760 l       .debug_ranges  00000000 
00003b1a l       .debug_str     00000000 
00000748 l       .debug_ranges  00000000 
00004275 l       .debug_str     00000000 
0000463e l       .debug_str     00000000 
00004645 l       .debug_str     00000000 
00000778 l       .debug_ranges  00000000 
0000461f l       .debug_str     00000000 
0000464d l       .debug_str     00000000 
00004651 l       .debug_str     00000000 
00004655 l       .debug_str     00000000 
0000465a l       .debug_str     00000000 
0000465f l       .debug_str     00000000 
00004669 l       .debug_str     00000000 
00004626 l       .debug_str     00000000 
00000c28 l       .debug_str     00000000 
00003f21 l       .debug_str     00000000 
00004674 l       .debug_str     00000000 
00000790 l       .debug_ranges  00000000 
00004679 l       .debug_str     00000000 
0000460c l       .debug_str     00000000 
00003ae8 l       .debug_str     00000000 
00003f28 l       .debug_str     00000000 
000007a8 l       .debug_ranges  00000000 
00003a4e l       .debug_str     00000000 
00003e3b l       .debug_str     00000000 
00003b01 l       .debug_str     00000000 
00003b09 l       .debug_str     00000000 
00003758 l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
000007cc l       .debug_frame   00000000 
e00014ca l       .text  00000000 
e000152c l       .text  00000000 
e00015da l       .text  00000000 
e000169a l       .text  00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00005afc l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004681 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00000830 l       .debug_ranges  00000000 
000046ab l       .debug_str     00000000 
0000470b l       .debug_str     00000000 
000046ff l       .debug_str     00000000 
000046b7 l       .debug_str     00000000 
000046c4 l       .debug_str     00000000 
000046d8 l       .debug_str     00000000 
000046e9 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00004719 l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00004729 l       .debug_str     00000000 
00004747 l       .debug_str     00000000 
0000475e l       .debug_str     00000000 
0000476e l       .debug_str     00000000 
0000477e l       .debug_str     00000000 
0000478c l       .debug_str     00000000 
000000be l       .debug_str     00000000 
0000479a l       .debug_str     00000000 
000047af l       .debug_str     00000000 
000047c6 l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
000047df l       .debug_str     00000000 
000047fb l       .debug_str     00000000 
0000092e l       .debug_str     00000000 
00003e96 l       .debug_str     00000000 
00003eda l       .debug_str     00000000 
0000480a l       .debug_str     00000000 
00000890 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
00003c29 l       .debug_str     00000000 
000000a5 l       .debug_str     00000000 
00003c67 l       .debug_str     00000000 
00003c9a l       .debug_str     00000000 
00003c74 l       .debug_str     00000000 
00003c88 l       .debug_str     00000000 
00003c7f l       .debug_str     00000000 
00003dc7 l       .debug_str     00000000 
00003d7c l       .debug_str     00000000 
00003c94 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
e0000b52 g     F .text  00000046 sec_mmio_read32
e0000422 g     F .text  0000007a external_irq_handler
e00008ba g     F .text  0000001c dif_spi_host_output_set_enabled
e00015da g     F .text  000000c0 memrchr
00008000 g       *ABS*  00000000 _stack_len
e0001442 g     F .text  00000088 memcpy
e0003c00 g       .bss   00000000 _bss_start
e0000d5c g     F .text  00000034 base_log_internal_dv
e000a000 g       .stack 00000000 stack
e0000cb4 g     F .text  00000006 abort
e0000622 g     F .text  000000be dif_spi_host_fifo_write
e0000080 g       *ABS*  00000000 _entry_point
e0003c10 g       .bss   00000000 _bss_end
e000060c g     F .text  00000008 otp_read32
e0001c2c g     O .data  00000084 status_codes
e00005c2 g     F .text  0000002e uart_init
e0000af8 g     F .text  0000005a sec_mmio_init
e000152c g     F .text  000000ae memchr
e00000cc g       .text  00000000 _start
e000090e g     F .text  000001ea dif_spi_host_transaction
e00006e0 g     F .text  00000158 dif_spi_host_fifo_read
e0000de0 g     F .text  0000048e base_vfprintf
e0000dc6 g     F .text  0000001a base_vprintf
e0000622  w    F .text  000000be spi_host_fifo_write_alias
e0001cb0 g     O .static_critical.sec_mmio_ctx  00001f50 sec_mmio_ctx
e00014ca g     F .text  00000062 memset
e00001bc g     F .text  00000266 main
e0001c20 g     O .rodata        00000004 kUartNCOValue
e0000084 g       .vectors       00000000 _vectors_end
e0010000 g       .vectors       00000000 _stack_start
e00006e0  w    F .text  00000158 spi_host_fifo_read_alias
00002000 g       *ABS*  00000000 _min_stack
e0000838 g     F .text  00000082 dif_spi_host_configure
e0001c24 g     O .rodata        00000004 kDeviceTestStatusAddress
e0000d94 g     F .text  00000032 base_printf
e0010010 g       *ABS*  00000000 fromhost
e0001c28 g     O .rodata        00000004 kDeviceLogBypassUartAddress
00020008 g       *ABS*  00000000 tohost
e000049c g     F .text  000000c8 rom_printf
e00013d0 g     F .text  00000072 status_extract
e0000614 g     F .text  0000000e dif_spi_host_init
e000a000 g       .stack 00000000 _stack
e00000f8 g     F .text  000000c4 init_spi_host
e0000000 g       .vectors       00000000 _vectors_start
e0000c06 g     F .text  000000ae test_status_set
e0000564 g     F .text  0000005e pinmux_init
e0000cba g     F .text  000000a2 base_log_internal_core
e00005f0 g     F .text  0000001c uart_putchar



Disassembly of section .vectors:

e0000000 <_vectors_start>:
e0000000:       0840006f                j       e0000084 <_vectors_end>
e0000004:       0800006f                j       e0000084 <_vectors_end>
e0000008:       07c0006f                j       e0000084 <_vectors_end>
e000000c:       0780006f                j       e0000084 <_vectors_end>
e0000010:       0740006f                j       e0000084 <_vectors_end>
e0000014:       0700006f                j       e0000084 <_vectors_end>
e0000018:       06c0006f                j       e0000084 <_vectors_end>
e000001c:       0680006f                j       e0000084 <_vectors_end>
e0000020:       0640006f                j       e0000084 <_vectors_end>
e0000024:       0600006f                j       e0000084 <_vectors_end>
e0000028:       05c0006f                j       e0000084 <_vectors_end>
e000002c:       3f60006f                j       e0000422 <external_irq_handler>
e0000030:       0540006f                j       e0000084 <_vectors_end>
e0000034:       0500006f                j       e0000084 <_vectors_end>
e0000038:       04c0006f                j       e0000084 <_vectors_end>
e000003c:       0480006f                j       e0000084 <_vectors_end>
e0000040:       0440006f                j       e0000084 <_vectors_end>
e0000044:       0400006f                j       e0000084 <_vectors_end>
e0000048:       03c0006f                j       e0000084 <_vectors_end>
e000004c:       0380006f                j       e0000084 <_vectors_end>
e0000050:       0340006f                j       e0000084 <_vectors_end>
e0000054:       0300006f                j       e0000084 <_vectors_end>
e0000058:       02c0006f                j       e0000084 <_vectors_end>
e000005c:       0280006f                j       e0000084 <_vectors_end>
e0000060:       0240006f                j       e0000084 <_vectors_end>
e0000064:       0200006f                j       e0000084 <_vectors_end>
e0000068:       01c0006f                j       e0000084 <_vectors_end>
e000006c:       0180006f                j       e0000084 <_vectors_end>
e0000070:       0140006f                j       e0000084 <_vectors_end>
e0000074:       0100006f                j       e0000084 <_vectors_end>
e0000078:       00c0006f                j       e0000084 <_vectors_end>
e000007c:       0080006f                j       e0000084 <_vectors_end>
e0000080:       0060006f                j       e0000086 <reset_handler>

Disassembly of section .text:

e0000084 <default_exc_handler>:
default_exc_handler():
e0000084:       a0bd                    j       e00000f2 <sleep_loop>

e0000086 <reset_handler>:
reset_handler():
e0000086:       4081                    li      ra,0
e0000088:       8106                    mv      sp,ra
e000008a:       8186                    mv      gp,ra
e000008c:       8206                    mv      tp,ra
e000008e:       8286                    mv      t0,ra
e0000090:       8306                    mv      t1,ra
e0000092:       8386                    mv      t2,ra
e0000094:       8406                    mv      s0,ra
e0000096:       8486                    mv      s1,ra
e0000098:       8506                    mv      a0,ra
e000009a:       8586                    mv      a1,ra
e000009c:       8606                    mv      a2,ra
e000009e:       8686                    mv      a3,ra
e00000a0:       8706                    mv      a4,ra
e00000a2:       8786                    mv      a5,ra
e00000a4:       8806                    mv      a6,ra
e00000a6:       8886                    mv      a7,ra
e00000a8:       8906                    mv      s2,ra
e00000aa:       8986                    mv      s3,ra
e00000ac:       8a06                    mv      s4,ra
e00000ae:       8a86                    mv      s5,ra
e00000b0:       8b06                    mv      s6,ra
e00000b2:       8b86                    mv      s7,ra
e00000b4:       8c06                    mv      s8,ra
e00000b6:       8c86                    mv      s9,ra
e00000b8:       8d06                    mv      s10,ra
e00000ba:       8d86                    mv      s11,ra
e00000bc:       8e06                    mv      t3,ra
e00000be:       8e86                    mv      t4,ra
e00000c0:       8f06                    mv      t5,ra
e00000c2:       8f86                    mv      t6,ra
e00000c4:       00010117                auipc   sp,0x10
e00000c8:       f3c10113                addi    sp,sp,-196 # e0010000 <_stack_start>

e00000cc <_start>:
e00000cc:       00004d17                auipc   s10,0x4
e00000d0:       b34d0d13                addi    s10,s10,-1228 # e0003c00 <spi_host>
e00000d4:       00004d97                auipc   s11,0x4
e00000d8:       b3cd8d93                addi    s11,s11,-1220 # e0003c10 <init_spi_host.kLogFields>
e00000dc:       01bd5763                bge     s10,s11,e00000ea <main_entry>

e00000e0 <zero_loop>:
zero_loop():
e00000e0:       /-> 000d2023            sw      zero,0(s10)
e00000e4:       |   0d11                        addi    s10,s10,4
e00000e6:       \-- ffaddde3            bge     s11,s10,e00000e0 <zero_loop>

e00000ea <main_entry>:
zero_loop_end():
e00000ea:       4501                    li      a0,0
e00000ec:       4581                    li      a1,0
e00000ee:       0ce000ef                jal     ra,e00001bc <main>

e00000f2 <sleep_loop>:
sleep_loop():
e00000f2:       /-> 10500073            wfi
e00000f6:       \-- bff5                        j       e00000f2 <sleep_loop>

e00000f8 <init_spi_host>:
init_spi_host():
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:69
// Boot data from flash.
boot_data_t boot_data = {0};
static dif_spi_host_t spi_host;

void init_spi_host(dif_spi_host_t *spi_host,
                   uint32_t peripheral_clock_freq_hz) {
e00000f8:                 7179                  addi    sp,sp,-48
e00000fa:                 d606                  sw      ra,44(sp)
e00000fc:                 d422                  sw      s0,40(sp)
e00000fe:                 d226                  sw      s1,36(sp)
e0000100:                 d04a                  sw      s2,32(sp)
e0000102:                 842a                  mv      s0,a0
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:71
  dif_spi_host_config_t config = {
      .spi_clock = peripheral_clock_freq_hz / 2,
e0000104:                 0015d513              srli    a0,a1,0x1
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:78
      .chip_select = {.idle = 2, .trail = 2, .lead = 2},
      .full_cycle = true,
      .cpha = true,
      .cpol = true,
  };
  CHECK_DIF_OK(dif_spi_host_configure(spi_host, config));
e0000108:                 c42a                  sw      a0,8(sp)
e000010a:                 c62e                  sw      a1,12(sp)
e000010c:                 01020537              lui     a0,0x1020
e0000110:                 20250513              addi    a0,a0,514 # 1020202 <tohost+0x10001fa>
e0000114:                 c82a                  sw      a0,16(sp)
e0000116:                 10100513              li      a0,257
e000011a:                 00a11a23              sh      a0,20(sp)
e000011e:                 002c                  addi    a1,sp,8
e0000120:                 8522                  mv      a0,s0
e0000122:                 2f19                  jal     e0000838 <dif_spi_host_configure>
e0000124:                 00002917              auipc   s2,0x2
e0000128:                 b0490913              addi    s2,s2,-1276 # e0001c28 <kDeviceLogBypassUartAddress>
e000012c:       /-------- cd1d                  beqz    a0,e000016a <init_spi_host+0x72>
e000012e:       |         84aa                  mv      s1,a0
e0000130:       |         00092503              lw      a0,0(s2)
e0000134:       |     /-- c911                  beqz    a0,e0000148 <init_spi_host+0x50>
e0000136:       |     |   00004517              auipc   a0,0x4
e000013a:       |     |   ada50513              addi    a0,a0,-1318 # e0003c10 <init_spi_host.kLogFields>
e000013e:       |     |   4585                  li      a1,1
e0000140:       |     |   8626                  mv      a2,s1
e0000142:       |     |   41b000ef              jal     ra,e0000d5c <base_log_internal_dv>
e0000146:       |  /--|-- a829                  j       e0000160 <init_spi_host+0x68>
e0000148:       |  |  \-> 00001597              auipc   a1,0x1
e000014c:       |  |      71858593              addi    a1,a1,1816 # e0001860 <memrchr+0x286>
e0000150:       |  |      0028                  addi    a0,sp,8
e0000152:       |  |      4651                  li      a2,20
e0000154:       |  |      2ee010ef              jal     ra,e0001442 <memcpy>
e0000158:       |  |      0028                  addi    a0,sp,8
e000015a:       |  |      85a6                  mv      a1,s1
e000015c:       |  |      35f000ef              jal     ra,e0000cba <base_log_internal_core>
e0000160:       |  \----> 6531                  lui     a0,0xc
e0000162:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000166:       |         2a1000ef              jal     ra,e0000c06 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:79
  CHECK_DIF_OK(dif_spi_host_output_set_enabled(spi_host, /*enabled=*/true));
e000016a:       \-------> 4585                  li      a1,1
e000016c:                 8522                  mv      a0,s0
e000016e:                 74c000ef              jal     ra,e00008ba <dif_spi_host_output_set_enabled>
e0000172:       /-------- cd1d                  beqz    a0,e00001b0 <init_spi_host+0xb8>
e0000174:       |         842a                  mv      s0,a0
e0000176:       |         00092503              lw      a0,0(s2)
e000017a:       |     /-- c911                  beqz    a0,e000018e <init_spi_host+0x96>
e000017c:       |     |   00004517              auipc   a0,0x4
e0000180:       |     |   aa850513              addi    a0,a0,-1368 # e0003c24 <init_spi_host.kLogFields.2>
e0000184:       |     |   4585                  li      a1,1
e0000186:       |     |   8622                  mv      a2,s0
e0000188:       |     |   3d5000ef              jal     ra,e0000d5c <base_log_internal_dv>
e000018c:       |  /--|-- a829                  j       e00001a6 <init_spi_host+0xae>
e000018e:       |  |  \-> 00001597              auipc   a1,0x1
e0000192:       |  |      6e658593              addi    a1,a1,1766 # e0001874 <memrchr+0x29a>
e0000196:       |  |      0028                  addi    a0,sp,8
e0000198:       |  |      4651                  li      a2,20
e000019a:       |  |      2a8010ef              jal     ra,e0001442 <memcpy>
e000019e:       |  |      0028                  addi    a0,sp,8
e00001a0:       |  |      85a2                  mv      a1,s0
e00001a2:       |  |      319000ef              jal     ra,e0000cba <base_log_internal_core>
e00001a6:       |  \----> 6531                  lui     a0,0xc
e00001a8:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00001ac:       |         25b000ef              jal     ra,e0000c06 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:80
}
e00001b0:       \-------> 5902                  lw      s2,32(sp)
e00001b2:                 5492                  lw      s1,36(sp)
e00001b4:                 5422                  lw      s0,40(sp)
e00001b6:                 50b2                  lw      ra,44(sp)
e00001b8:                 6145                  addi    sp,sp,48
e00001ba:                 8082                  ret

e00001bc <main>:
main():
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:83


int main(int argc, char **argv) {
e00001bc:                    7171                       addi    sp,sp,-176
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:85
    
  sec_mmio_init();
e00001be:                    d706                       sw      ra,172(sp)
e00001c0:                    d522                       sw      s0,168(sp)
e00001c2:                    d326                       sw      s1,164(sp)
e00001c4:                    d14a                       sw      s2,160(sp)
e00001c6:                    cf4e                       sw      s3,156(sp)
e00001c8:                    cd52                       sw      s4,152(sp)
e00001ca:                    cb56                       sw      s5,148(sp)
e00001cc:                    c95a                       sw      s6,144(sp)
e00001ce:                    c75e                       sw      s7,140(sp)
e00001d0:                    c562                       sw      s8,136(sp)
e00001d2:                    c366                       sw      s9,132(sp)
e00001d4:                    c16a                       sw      s10,128(sp)
e00001d6:                    deee                       sw      s11,124(sp)
e00001d8:                    1900                       addi    s0,sp,176
e00001da:                    11f000ef           jal     ra,e0000af8 <sec_mmio_init>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:86
  pinmux_init();
e00001de:                    2659                       jal     e0000564 <pinmux_init>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:87
  uart_init(kUartNCOValue);
e00001e0:                    00002517           auipc   a0,0x2
e00001e4:                    a4050513           addi    a0,a0,-1472 # e0001c20 <kUartNCOValue>
e00001e8:                    4108                       lw      a0,0(a0)
e00001ea:                    2ee1                       jal     e00005c2 <uart_init>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:100
  start      = (int *) 0xff000010;
  debug_mode = (int *) 0xff000014;
  
  
  // Setup spi host configuration
  rom_printf("Testing spi_host.\r\n");
e00001ec:                    00001517           auipc   a0,0x1
e00001f0:                    56850513           addi    a0,a0,1384 # e0001754 <memrchr+0x17a>
e00001f4:                    2465                       jal     e000049c <rom_printf>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:107
  uint32_t data;
  uint64_t clkHz;
  base_addr = TOP_EARLGREY_SPI_HOST0_BASE_ADDR;
  clkHz = 10000000;
 
  CHECK_DIF_OK(dif_spi_host_init(mmio_region_from_addr(base_addr), &spi_host));
e00001f6:                    00004597           auipc   a1,0x4
e00001fa:                    a0a58593           addi    a1,a1,-1526 # e0003c00 <spi_host>
e00001fe:                    c0300537           lui     a0,0xc0300
e0000202:                    2909                       jal     e0000614 <dif_spi_host_init>
e0000204:                    00002597           auipc   a1,0x2
e0000208:                    a2458593           addi    a1,a1,-1500 # e0001c28 <kDeviceLogBypassUartAddress>
e000020c:                    0005a903           lw      s2,0(a1)
e0000210:          /-------- c121                       beqz    a0,e0000250 <main+0x94>
e0000212:          |         84aa                       mv      s1,a0
e0000214:          |     /-- 00090b63           beqz    s2,e000022a <main+0x6e>
e0000218:          |     |   00004517           auipc   a0,0x4
e000021c:          |     |   a2050513           addi    a0,a0,-1504 # e0003c38 <main.kLogFields>
e0000220:          |     |   4585                       li      a1,1
e0000222:          |     |   8626                       mv      a2,s1
e0000224:          |     |   339000ef           jal     ra,e0000d5c <base_log_internal_dv>
e0000228:          |  /--|-- a839                       j       e0000246 <main+0x8a>
e000022a:          |  |  \-> 00001597           auipc   a1,0x1
e000022e:          |  |      65e58593           addi    a1,a1,1630 # e0001888 <memrchr+0x2ae>
e0000232:          |  |      f9040513           addi    a0,s0,-112
e0000236:          |  |      4651                       li      a2,20
e0000238:          |  |      20a010ef           jal     ra,e0001442 <memcpy>
e000023c:          |  |      f9040513           addi    a0,s0,-112
e0000240:          |  |      85a6                       mv      a1,s1
e0000242:          |  |      279000ef           jal     ra,e0000cba <base_log_internal_core>
e0000246:          |  \----> 6531                       lui     a0,0xc
e0000248:          |         aad50513           addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e000024c:          |         1bb000ef           jal     ra,e0000c06 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:108
  init_spi_host(&spi_host, (uint32_t)clkHz);
e0000250:          \-------> 00004517           auipc   a0,0x4
e0000254:                    9b050513           addi    a0,a0,-1616 # e0003c00 <spi_host>
e0000258:                    009895b7           lui     a1,0x989
e000025c:                    68058593           addi    a1,a1,1664 # 989680 <tohost+0x969678>
e0000260:                    f6a42223           sw      a0,-156(s0)
e0000264:                    3d51                       jal     e00000f8 <init_spi_host>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:111
  int num_iter = 156;
  int buf_size = 63;
  uint32_t buf[num_iter][buf_size];
e0000266:                    850a                       mv      a0,sp
e0000268:                    75d9                       lui     a1,0xffff6
e000026a:                    67058613           addi    a2,a1,1648 # ffff6670 <fromhost+0x1ffe6660>
e000026e:                    00c50bb3           add     s7,a0,a2
e0000272:                    815e                       mv      sp,s7
e0000274:                    4481                       li      s1,0
e0000276:                    4d01                       li      s10,0
e0000278:                    ff000db7           lui     s11,0xff000
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:117
  dif_spi_host_segment_t segments[3];
  uint32_t addr = 0;
  uint32_t addr_swap = 0;
  int index = 0;
  
  *address = 0;
e000027c:                    000da623           sw      zero,12(s11) # ff00000c <fromhost+0x1efefffc>
e0000280:                    00193613           seqz    a2,s2
e0000284:                    f6c42023           sw      a2,-160(s0)
e0000288:                    67458593           addi    a1,a1,1652
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:118
  for(int j=0;j<num_iter;j++){
e000028c:                    00b509b3           add     s3,a0,a1
e0000290:                    0fc00a93           li      s5,252
e0000294:                    6541                       lui     a0,0x10
e0000296:                    f0050913           addi    s2,a0,-256 # ff00 <_stack_len+0x7f00>
e000029a:                    4c05                       li      s8,1
e000029c:                    03c00a13           li      s4,60
e00002a0:                    00001517           auipc   a0,0x1
e00002a4:                    5fc50513           addi    a0,a0,1532 # e000189c <memrchr+0x2c2>
e00002a8:                    f4a42a23           sw      a0,-172(s0)
e00002ac:                    6531                       lui     a0,0xc
e00002ae:                    aad50513           addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00002b2:                    f4a42e23           sw      a0,-164(s0)
e00002b6:                    00004517           auipc   a0,0x4
e00002ba:                    99650513           addi    a0,a0,-1642 # e0003c4c <main.kLogFields.7>
e00002be:                    f4a42c23           sw      a0,-168(s0)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:119
     addr = j*sizeof(buf[j]);
e00002c2:       /----------> 035d0cb3           mul     s9,s10,s5
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
 * @param bitfield Bitfield to reverse bytes of.
 * @return `bitfield` with the order of bytes reversed.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_byteswap32(uint32_t bitfield) {
  return __builtin_bswap32(bitfield);
e00002c6:       |            008cd513           srli    a0,s9,0x8
e00002ca:       |            01257533           and     a0,a0,s2
e00002ce:       |            018cd593           srli    a1,s9,0x18
e00002d2:       |            8d4d                       or      a0,a0,a1
e00002d4:       |            008c9593           slli    a1,s9,0x8
e00002d8:       |            00ff0637           lui     a2,0xff0
e00002dc:       |            8df1                       and     a1,a1,a2
e00002de:       |            018c9613           slli    a2,s9,0x18
e00002e2:       |            8dd1                       or      a1,a1,a2
e00002e4:       |            00a5eb33           or      s6,a1,a0
main():
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:121
     addr_swap = bitfield_byteswap32(addr);
     segments[0] = (dif_spi_host_segment_t) {
e00002e8:       |            f8140513           addi    a0,s0,-127
e00002ec:       |            463d                       li      a2,15
e00002ee:       |            4581                       li      a1,0
e00002f0:       |            1da010ef           jal     ra,e00014ca <memset>
e00002f4:       |            f8042823           sw      zero,-112(s0)
e00002f8:       |            454d                       li      a0,19
e00002fa:       |            f8a40a23           sb      a0,-108(s0)
e00002fe:       |            f8140593           addi    a1,s0,-127
e0000302:       |            463d                       li      a2,15
e0000304:       |            f9540513           addi    a0,s0,-107
e0000308:       |            13a010ef           jal     ra,e0001442 <memcpy>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:125
                   .type = kDifSpiHostSegmentTypeOpcode,
                   .opcode = 0x13,
     };
     segments[1] = (dif_spi_host_segment_t) {
e000030c:       |            fb842223           sw      s8,-92(s0)
e0000310:       |            fa042423           sw      zero,-88(s0)
e0000314:       |            fb842623           sw      s8,-84(s0)
e0000318:       |            fb642823           sw      s6,-80(s0)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:139
     segments[2] = (dif_spi_host_segment_t) {
                   .type = kDifSpiHostSegmentTypeRx,
                   .rx =
                      {
                          .width = kDifSpiHostWidthStandard,
                          .buf = buf[j],
e000031c:       |            019b8533           add     a0,s7,s9
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:134
     segments[2] = (dif_spi_host_segment_t) {
e0000320:       |            4591                       li      a1,4
e0000322:       |            fab42c23           sw      a1,-72(s0)
e0000326:       |            fa042e23           sw      zero,-68(s0)
e000032a:       |            fca42023           sw      a0,-64(s0)
e000032e:       |            fd542223           sw      s5,-60(s0)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:144
                          .length= sizeof(buf[j]),
                      },
     };

     CHECK_DIF_OK(
e0000332:       |            f9040613           addi    a2,s0,-112
e0000336:       |            468d                       li      a3,3
e0000338:       |            f6442503           lw      a0,-156(s0)
e000033c:       |            4581                       li      a1,0
e000033e:       |            2bc1                       jal     e000090e <dif_spi_host_transaction>
e0000340:       |  /-------- cd05                       beqz    a0,e0000378 <main+0x1bc>
e0000342:       |  |         8caa                       mv      s9,a0
e0000344:       |  |         f6042503           lw      a0,-160(s0)
e0000348:       |  |     /-- e901                       bnez    a0,e0000358 <main+0x19c>
e000034a:       |  |     |   4585                       li      a1,1
e000034c:       |  |     |   f5842503           lw      a0,-168(s0)
e0000350:       |  |     |   8666                       mv      a2,s9
e0000352:       |  |     |   20b000ef           jal     ra,e0000d5c <base_log_internal_dv>
e0000356:       |  |  /--|-- a829                       j       e0000370 <main+0x1b4>
e0000358:       |  |  |  \-> f6840513           addi    a0,s0,-152
e000035c:       |  |  |      4651                       li      a2,20
e000035e:       |  |  |      f5442583           lw      a1,-172(s0)
e0000362:       |  |  |      0e0010ef           jal     ra,e0001442 <memcpy>
e0000366:       |  |  |      f6840513           addi    a0,s0,-152
e000036a:       |  |  |      85e6                       mv      a1,s9
e000036c:       |  |  |      14f000ef           jal     ra,e0000cba <base_log_internal_core>
e0000370:       |  |  \----> f5c42503           lw      a0,-164(s0)
e0000374:       |  |         093000ef           jal     ra,e0000c06 <test_status_set>
e0000378:       |  \-------> 5575                       li      a0,-3
e000037a:       |            85ce                       mv      a1,s3
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:149
          dif_spi_host_transaction(&spi_host, 0, segments, ARRAYSIZE(segments)));
     
     for(int i = 0; i < buf_size; i += 3) {
       if(i + 2 < buf_size) {
         *payload_1 = buf[j][i];
e000037c:       |        /-> ffc5a603           lw      a2,-4(a1)
e0000380:       |        |   00cda023           sw      a2,0(s11)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:150
         *payload_2 = buf[j][i+1];
e0000384:       |        |   4190                       lw      a2,0(a1)
e0000386:       |        |   00cda223           sw      a2,4(s11)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:151
         *payload_3 = buf[j][i+2];
e000038a:       |        |   41d0                       lw      a2,4(a1)
e000038c:       |        |   00cda423           sw      a2,8(s11)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:152
         *address   = index;
e0000390:       |        |   009da623           sw      s1,12(s11)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:153
         *start = 0x1;
e0000394:       |        |   018da823           sw      s8,16(s11)
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:154
         index++;
e0000398:       |        |   0485                       addi    s1,s1,1
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:147
     for(int i = 0; i < buf_size; i += 3) {
e000039a:       |        |   050d                       addi    a0,a0,3
e000039c:       |        |   05b1                       addi    a1,a1,12
e000039e:       |        \-- fd456fe3           bltu    a0,s4,e000037c <main+0x1c0>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:118
  for(int j=0;j<num_iter;j++){
e00003a2:       |            0d05                       addi    s10,s10,1
e00003a4:       |            0fc98993           addi    s3,s3,252
e00003a8:       |            09c00513           li      a0,156
e00003ac:       \----------- f0ad1be3           bne     s10,a0,e00002c2 <main+0x106>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:159
       }
     }
  } 
 
  CHECK_DIF_OK(dif_spi_host_output_set_enabled(&spi_host, false));  
e00003b0:                    00004517           auipc   a0,0x4
e00003b4:                    85050513           addi    a0,a0,-1968 # e0003c00 <spi_host>
e00003b8:                    4581                       li      a1,0
e00003ba:                    2301                       jal     e00008ba <dif_spi_host_output_set_enabled>
e00003bc:          /-------- c129                       beqz    a0,e00003fe <main+0x242>
e00003be:          |         84aa                       mv      s1,a0
e00003c0:          |         f6042503           lw      a0,-160(s0)
e00003c4:          |     /-- e911                       bnez    a0,e00003d8 <main+0x21c>
e00003c6:          |     |   00004517           auipc   a0,0x4
e00003ca:          |     |   89a50513           addi    a0,a0,-1894 # e0003c60 <main.kLogFields.10>
e00003ce:          |     |   4585                       li      a1,1
e00003d0:          |     |   8626                       mv      a2,s1
e00003d2:          |     |   18b000ef           jal     ra,e0000d5c <base_log_internal_dv>
e00003d6:          |  /--|-- a839                       j       e00003f4 <main+0x238>
e00003d8:          |  |  \-> 00001597           auipc   a1,0x1
e00003dc:          |  |      4d858593           addi    a1,a1,1240 # e00018b0 <memrchr+0x2d6>
e00003e0:          |  |      f6840513           addi    a0,s0,-152
e00003e4:          |  |      4651                       li      a2,20
e00003e6:          |  |      05c010ef           jal     ra,e0001442 <memcpy>
e00003ea:          |  |      f6840513           addi    a0,s0,-152
e00003ee:          |  |      85a6                       mv      a1,s1
e00003f0:          |  |      0cb000ef           jal     ra,e0000cba <base_log_internal_core>
e00003f4:          |  \----> 6531                       lui     a0,0xc
e00003f6:          |         aad50513           addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00003fa:          |         00d000ef           jal     ra,e0000c06 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/spi_host_test/spi_host_test.c:161
  return 0;
}
e00003fe:          \-------> 4501                       li      a0,0
e0000400:                    f5040113           addi    sp,s0,-176
e0000404:                    5df6                       lw      s11,124(sp)
e0000406:                    4d0a                       lw      s10,128(sp)
e0000408:                    4c9a                       lw      s9,132(sp)
e000040a:                    4c2a                       lw      s8,136(sp)
e000040c:                    4bba                       lw      s7,140(sp)
e000040e:                    4b4a                       lw      s6,144(sp)
e0000410:                    4ada                       lw      s5,148(sp)
e0000412:                    4a6a                       lw      s4,152(sp)
e0000414:                    49fa                       lw      s3,156(sp)
e0000416:                    590a                       lw      s2,160(sp)
e0000418:                    549a                       lw      s1,164(sp)
e000041a:                    542a                       lw      s0,168(sp)
e000041c:                    50ba                       lw      ra,172(sp)
e000041e:                    614d                       addi    sp,sp,176
e0000420:                    8082                       ret

e0000422 <external_irq_handler>:
external_irq_handler():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:338
  putchar('\n');

  return i;
}

void external_irq_handler(void)  {
e0000422:           1101                        addi    sp,sp,-32
e0000424:           ce2a                        sw      a0,28(sp)
e0000426:           cc2e                        sw      a1,24(sp)
e0000428:           ca32                        sw      a2,20(sp)
e000042a:           c836                        sw      a3,16(sp)
e000042c:           c63a                        sw      a4,12(sp)
e000042e:           c43e                        sw      a5,8(sp)
e0000430:           c242                        sw      a6,4(sp)
e0000432:           c8200537            lui     a0,0xc8200
e0000436:           09f00593            li      a1,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:355
  p_reg5 = (int *) 0x1040401C;

  // start of """Interrupt Service Routine"""
  
  plic_check = (int *) 0xC8200004;
  while(*plic_check != mbox_id);   //check wether the intr is the correct one
e000043a:       /-> 4150                        lw      a2,4(a0)
e000043c:       \-- feb61fe3            bne     a2,a1,e000043a <external_irq_handler+0x18>
e0000440:           10404537            lui     a0,0x10404
/proc/self/cwd/sw/tests/opentitan/common/utils.c:358
  
  p_reg = (int *) 0x10404020;
 *p_reg = 0x00000000;        //clearing the pending interrupt signal
e0000444:           02052023            sw      zero,32(a0) # 10404020 <tohost+0x103e4018>
e0000448:           c82005b7            lui     a1,0xc8200
e000044c:           09f00613            li      a2,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:360
 
 *plic_check = mbox_id;      //completing interrupt
e0000450:           c1d0                        sw      a2,4(a1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:362
 
  a = *p_reg1;
e0000452:           450c                        lw      a1,8(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:363
  b = *p_reg2;
e0000454:           4910                        lw      a2,16(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:364
  c = *p_reg3;
e0000456:           4954                        lw      a3,20(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:365
  d = *p_reg4;
e0000458:           4d18                        lw      a4,24(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:366
  e = *p_reg5;
e000045a:           01c52803            lw      a6,28(a0)
e000045e:           baadc7b7            lui     a5,0xbaadc
e0000462:           0de78793            addi    a5,a5,222 # baadc0de <fromhost+0xdaacc0ce>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:369
  
  
  if( a == 0xBAADC0DE &&  b == 0xBAADC0DE && c == 0xBAADC0DE && d == 0xBAADC0DE && e == 0xBAADC0DE){
e0000466:           8dbd                        xor     a1,a1,a5
e0000468:           8e3d                        xor     a2,a2,a5
e000046a:           8dd1                        or      a1,a1,a2
e000046c:           00f6c633            xor     a2,a3,a5
e0000470:           8dd1                        or      a1,a1,a2
e0000472:           00f74633            xor     a2,a4,a5
e0000476:           8dd1                        or      a1,a1,a2
e0000478:           00f84633            xor     a2,a6,a5
e000047c:           8dd1                        or      a1,a1,a2
e000047e:       /-- e589                        bnez    a1,e0000488 <external_irq_handler+0x66>
e0000480:       |   02450513            addi    a0,a0,36
e0000484:       |   4585                        li      a1,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:371
      p_reg = (int *) 0x10404024; // completion interrupt to ariane agent
     *p_reg = 0x00000001;
e0000486:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:375
  }
  
  return;
}
e0000488:       \-> 4812                        lw      a6,4(sp)
e000048a:           47a2                        lw      a5,8(sp)
e000048c:           4732                        lw      a4,12(sp)
e000048e:           46c2                        lw      a3,16(sp)
e0000490:           4652                        lw      a2,20(sp)
e0000492:           45e2                        lw      a1,24(sp)
e0000494:           4572                        lw      a0,28(sp)
e0000496:           6105                        addi    sp,sp,32
e0000498:           30200073            mret

e000049c <rom_printf>:
rom_printf():
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:13
#include <stdarg.h>
#include <stdint.h>

#include "sw/device/silicon_creator/lib/drivers/uart.h"

rom_error_t rom_printf(const char *format, ...) {
e000049c:                          715d                 addi    sp,sp,-80
e000049e:                          d606                 sw      ra,44(sp)
e00004a0:                          d422                 sw      s0,40(sp)
e00004a2:                          d226                 sw      s1,36(sp)
e00004a4:                          d04a                 sw      s2,32(sp)
e00004a6:                          ce4e                 sw      s3,28(sp)
e00004a8:                          cc52                 sw      s4,24(sp)
e00004aa:                          ca56                 sw      s5,20(sp)
e00004ac:                          c85a                 sw      s6,16(sp)
e00004ae:                          c65e                 sw      s7,12(sp)
e00004b0:                          84aa                 mv      s1,a0
e00004b2:                          c6c6                 sw      a7,76(sp)
e00004b4:                          c4c2                 sw      a6,72(sp)
e00004b6:                          c2be                 sw      a5,68(sp)
e00004b8:                          c0ba                 sw      a4,64(sp)
e00004ba:                          de36                 sw      a3,60(sp)
e00004bc:                          dc32                 sw      a2,56(sp)
e00004be:                          da2e                 sw      a1,52(sp)
e00004c0:                          1848                 addi    a0,sp,52
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:15
  va_list args;
  va_start(args, format);
e00004c2:                          c42a                 sw      a0,8(sp)
e00004c4:                          02500a13             li      s4,37
e00004c8:                          014c4537             lui     a0,0x14c4
e00004cc:                          70d50913             addi    s2,a0,1805 # 14c470d <tohost+0x14a4705>
e00004d0:                          07800993             li      s3,120
e00004d4:                          00001b97             auipc   s7,0x1
e00004d8:                          3f0b8b93             addi    s7,s7,1008 # e00018c4 <rom_printf.kHexTable>
e00004dc:                          07300a93             li      s5,115
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:17

  while (*format != '\0') {
e00004e0:       /----------------> 0004c503             lbu     a0,0(s1)
e00004e4:       |              /-- 01450663             beq     a0,s4,e00004f0 <rom_printf+0x54>
e00004e8:       |  /-----------|-- c125                 beqz    a0,e0000548 <rom_printf+0xac>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:19
    if (*format != '%') {
      uart_putchar(*format++);
e00004ea:       |  |           |   0485                 addi    s1,s1,1
e00004ec:       |  |           |   2211                 jal     e00005f0 <uart_putchar>
e00004ee:       +--|-----------|-- bfcd                 j       e00004e0 <rom_printf+0x44>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:24
      continue;
    }

    ++format;  // Skip over the '%'.
    switch (*format++) {
e00004f0:       |  |           \-> 0014c503             lbu     a0,1(s1)
e00004f4:       |  |               00248b13             addi    s6,s1,2
e00004f8:       |  |     /-------- 03350763             beq     a0,s3,e0000526 <rom_printf+0x8a>
e00004fc:       |  |  /--|-------- 05551863             bne     a0,s5,e000054c <rom_printf+0xb0>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:27
      case 's': {
        // Print a null-terminated string.
        const char *str = va_arg(args, const char *);
e0000500:       |  |  |  |         4522                 lw      a0,8(sp)
e0000502:       |  |  |  |         00450593             addi    a1,a0,4
e0000506:       |  |  |  |         c42e                 sw      a1,8(sp)
e0000508:       |  |  |  |         410c                 lw      a1,0(a0)
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:28
        while (*str != '\0') {
e000050a:       |  |  |  |         0005c503             lbu     a0,0(a1)
e000050e:       |  |  |  |         84da                 mv      s1,s6
e0000510:       +--|--|--|-------- d961                 beqz    a0,e00004e0 <rom_printf+0x44>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:17
  while (*format != '\0') {
e0000512:       |  |  |  |         00158413             addi    s0,a1,1
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:29
          uart_putchar(*str++);
e0000516:       |  |  |  |     /-> 0ff57513             andi    a0,a0,255
e000051a:       |  |  |  |     |   28d9                 jal     e00005f0 <uart_putchar>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:28
        while (*str != '\0') {
e000051c:       |  |  |  |     |   00044503             lbu     a0,0(s0)
e0000520:       |  |  |  |     |   0405                 addi    s0,s0,1
e0000522:       |  |  |  |     \-- f975                 bnez    a0,e0000516 <rom_printf+0x7a>
e0000524:       |  |  |  |  /----- a005                 j       e0000544 <rom_printf+0xa8>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:36
        break;
      }
      case 'x': {
        // Print an `unsigned int` in hexadecimal.
        static const char kHexTable[16] = "0123456789abcdef";
        unsigned int v = va_arg(args, unsigned int);
e0000526:       |  |  |  \--|----> 4522                 lw      a0,8(sp)
e0000528:       |  |  |     |      00450593             addi    a1,a0,4
e000052c:       |  |  |     |      c42e                 sw      a1,8(sp)
e000052e:       |  |  |     |      4104                 lw      s1,0(a0)
e0000530:       |  |  |     |      4421                 li      s0,8
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:39
        for (int i = 0; i < sizeof(v) * 2; ++i) {
          int shift = sizeof(v) * 8 - 4;
          uart_putchar(kHexTable[v >> shift]);
e0000532:       |  |  |     |  /-> 01c4d513             srli    a0,s1,0x1c
e0000536:       |  |  |     |  |   955e                 add     a0,a0,s7
e0000538:       |  |  |     |  |   00054503             lbu     a0,0(a0)
e000053c:       |  |  |     |  |   2855                 jal     e00005f0 <uart_putchar>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:37
        for (int i = 0; i < sizeof(v) * 2; ++i) {
e000053e:       |  |  |     |  |   147d                 addi    s0,s0,-1
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:40
          v <<= 4;
e0000540:       |  |  |     |  |   0492                 slli    s1,s1,0x4
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:37
        for (int i = 0; i < sizeof(v) * 2; ++i) {
e0000542:       |  |  |     |  \-- f865                 bnez    s0,e0000532 <rom_printf+0x96>
e0000544:       |  |  |     \----> 84da                 mv      s1,s6
e0000546:       \--|--|----------- bf69                 j       e00004e0 <rom_printf+0x44>
e0000548:          \--|----------> 73900913             li      s2,1849
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:52
    }
  }

  va_end(args);
  return kErrorOk;
}
e000054c:             \----------> 854a                 mv      a0,s2
e000054e:                          4bb2                 lw      s7,12(sp)
e0000550:                          4b42                 lw      s6,16(sp)
e0000552:                          4ad2                 lw      s5,20(sp)
e0000554:                          4a62                 lw      s4,24(sp)
e0000556:                          49f2                 lw      s3,28(sp)
e0000558:                          5902                 lw      s2,32(sp)
e000055a:                          5492                 lw      s1,36(sp)
e000055c:                          5422                 lw      s0,40(sp)
e000055e:                          50b2                 lw      ra,44(sp)
e0000560:                          6161                 addi    sp,sp,80
e0000562:                          8082                 ret

e0000564 <pinmux_init>:
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:127
  abs_mmio_write32(
      kBase + PINMUX_MIO_OUTSEL_0_REG_OFFSET + output.mio * sizeof(uint32_t),
      output.outsel);
}

void pinmux_init(void) {
e0000564:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:129
  uint32_t bootstrap_en =
      otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_BOOTSTRAP_EN_OFFSET);
e0000566:              c606                     sw      ra,12(sp)
e0000568:              36400513                 li      a0,868
e000056c:              2045                     jal     e000060c <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
  // > of statements.

  // The +r constraint tells the compiler that this is an "inout" parameter: it
  // means that not only does the black box depend on `val`, but it also mutates
  // it in an unspecified way.
  asm volatile("" : "+r"(val));
e000056e:              862a                     mv      a2,a0
e0000570:              73900593                 li      a1,1849
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:130
  if (launder32(bootstrap_en) == kHardenedBoolTrue) {
e0000574:       /----- 02b61b63                 bne     a2,a1,e00005aa <pinmux_init+0x46>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:131
    HARDENED_CHECK_EQ(bootstrap_en, kHardenedBoolTrue);
e0000578:       |  /-- 00b50663                 beq     a0,a1,e0000584 <pinmux_init+0x20>
e000057c:       |  |   0000                     unimp
e000057e:       |  |   0000                     unimp
e0000580:       |  |   0000                     unimp
e0000582:       |  |   0000                     unimp
e0000584:       |  \-> c0460537                 lui     a0,0xc0460
e0000588:       |      4591                     li      a1,4
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
 *
 * @param addr the address to write to.
 * @param value the value to write.
 */
inline void abs_mmio_write32(uint32_t addr, uint32_t value) {
  *((volatile uint32_t *)addr) = value;
e000058a:       |      44b52c23                 sw      a1,1112(a0) # c0460458 <fromhost+0xe0450448>
e000058e:       |      44b52e23                 sw      a1,1116(a0)
e0000592:       |      46b52023                 sw      a1,1120(a0)
e0000596:       |      45e1                     li      a1,24
e0000598:       |      14b52023                 sw      a1,320(a0)
e000059c:       |      45e5                     li      a1,25
e000059e:       |      14b52223                 sw      a1,324(a0)
e00005a2:       |      14850513                 addi    a0,a0,328
e00005a6:       |      45e9                     li      a1,26
e00005a8:       |      c10c                     sw      a1,0(a0)
e00005aa:       \----> c0460537                 lui     a0,0xc0460
e00005ae:              45ed                     li      a1,27
e00005b0:              18b52823                 sw      a1,400(a0) # c0460190 <fromhost+0xe0450180>
e00005b4:              02d00593                 li      a1,45
e00005b8:              2eb52823                 sw      a1,752(a0)
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:144
    configure_input(kInputSwStrap2);
  }

  configure_input(kInputUart0);
  configure_output(kOutputUart0);
}
e00005bc:              40b2                     lw      ra,12(sp)
e00005be:              0141                     addi    sp,sp,16
e00005c0:              8082                     ret

e00005c2 <uart_init>:
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:37
                   0u);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_STATE_REG_OFFSET,
                   UINT32_MAX);
}

rom_error_t uart_init(uint32_t precalculated_nco) {
e00005c2:       c00005b7                lui     a1,0xc0000
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
e00005c6:       0005a823                sw      zero,16(a1) # c0000010 <fromhost+0xdfff0000>
e00005ca:       460d                    li      a2,3
e00005cc:       d190                    sw      a2,32(a1)
e00005ce:       0205a423                sw      zero,40(a1)
e00005d2:       0205a823                sw      zero,48(a1)
e00005d6:       0005a223                sw      zero,4(a1)
e00005da:       567d                    li      a2,-1
e00005dc:       c190                    sw      a2,0(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00005de:       0542                    slli    a0,a0,0x10
e00005e0:       00156513                ori     a0,a0,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
e00005e4:       c988                    sw      a0,16(a1)
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:51
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_CTRL_REG_OFFSET, reg);

  // Disable interrupts.
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_ENABLE_REG_OFFSET,
                   0u);
  return kErrorOk;
e00005e6:       73900513                li      a0,1849
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
e00005ea:       0005a223                sw      zero,4(a1)
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:51
e00005ee:       8082                    ret

e00005f0 <uart_putchar>:
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:66
  uint32_t reg =
      abs_mmio_read32(TOP_EARLGREY_UART0_BASE_ADDR + UART_STATUS_REG_OFFSET);
  return bitfield_bit32_read(reg, UART_STATUS_TXIDLE_BIT);
}

void uart_putchar(uint8_t byte) {
e00005f0:           c00005b7            lui     a1,0xc0000
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
e00005f4:       /-> 49d0                        lw      a2,20(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e00005f6:       |   8a05                        andi    a2,a2,1
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:68
  // If the transmit FIFO is full, wait.
  while (uart_tx_full()) {
e00005f8:       \-- fe75                        bnez    a2,e00005f4 <uart_putchar+0x4>
e00005fa:           c00005b7            lui     a1,0xc0000
e00005fe:           01c58613            addi    a2,a1,28 # c000001c <fromhost+0xdfff000c>
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
e0000602:           c208                        sw      a0,0(a2)
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
e0000604:       /-> 49c8                        lw      a0,20(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000606:       |   8921                        andi    a0,a0,8
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:74
  }
  uint32_t reg = bitfield_field32_write(0, UART_WDATA_WDATA_FIELD, byte);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_WDATA_REG_OFFSET, reg);

  // If the transmitter is active, wait.
  while (!uart_tx_idle()) {
e0000608:       \-- dd75                        beqz    a0,e0000604 <uart_putchar+0x14>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:76
  }
}
e000060a:           8082                        ret

e000060c <otp_read32>:
otp_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:18
#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"
#include "otp_ctrl_regs.h"  // Generated.

enum { kBase = TOP_EARLGREY_OTP_CTRL_CORE_BASE_ADDR };

uint32_t otp_read32(uint32_t address) {
e000060c:       c01315b7                lui     a1,0xc0131
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:19
  return sec_mmio_read32(kBase + OTP_CTRL_SW_CFG_WINDOW_REG_OFFSET + address);
e0000610:       952e                    add     a0,a0,a1
e0000612:       a381                    j       e0000b52 <sec_mmio_read32>

e0000614 <dif_spi_host_init>:
dif_spi_host_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:19
#include "spi_host_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_init(mmio_region_t base_addr,
                               dif_spi_host_t *spi_host) {
  if (spi_host == NULL) {
e0000614:       /----- c581                     beqz    a1,e000061c <dif_spi_host_init+0x8>
e0000616:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:23
    return kDifBadArg;
  }

  spi_host->base_addr = base_addr;
e0000618:       |      c188                     sw      a0,0(a1)
e000061a:       |  /-- a011                     j       e000061e <dif_spi_host_init+0xa>
e000061c:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:26

  return kDifOk;
}
e000061e:          \-> 8532                     mv      a0,a2
e0000620:              8082                     ret

e0000622 <dif_spi_host_fifo_write>:
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:156
  uint32_t val = read_32((const void *)srcaddr);
  mmio_region_write32(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, val);
}

dif_result_t dif_spi_host_fifo_write(const dif_spi_host_t *spi_host,
                                     const void *src, uint16_t len) {
e0000622:                    468d                       li      a3,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:158
  uintptr_t ptr = (uintptr_t)src;
  if (spi_host == NULL || (src == NULL && len > 0)) {
e0000624:       /----------- cd45                       beqz    a0,e00006dc <dif_spi_host_fifo_write+0xba>
e0000626:       |            00b03733           snez    a4,a1
e000062a:       |            00163793           seqz    a5,a2
e000062e:       |            8f5d                       or      a4,a4,a5
e0000630:       +----------- c755                       beqz    a4,e00006dc <dif_spi_host_fifo_write+0xba>
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
/**
 * Computes how many bytes `addr` is ahead of the previous 32-bit word alignment
 * boundary.
 */
inline ptrdiff_t misalignment32_of(uintptr_t addr) {
  return addr % alignof(uint32_t);
e0000632:       |            0035f693           andi    a3,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
    return kDifBadArg;
  }

  // If the pointer starts mis-aligned, write until we are aligned.
  while (misalignment32_of(ptr) && len > 0) {
e0000636:       |            00d036b3           snez    a3,a3
e000063a:       |            00c03733           snez    a4,a2
e000063e:       |            8ef9                       and     a3,a3,a4
e0000640:       |  /-------- ce8d                       beqz    a3,e000067a <dif_spi_host_fifo_write+0x58>
e0000642:       |  |         04800693           li      a3,72
e0000646:       |  |         6741                       lui     a4,0x10
e0000648:       |  |         fff70813           addi    a6,a4,-1 # ffff <_stack_len+0x7fff>
e000064c:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000064e:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0000650:       |  |  |  |   0ff77713           andi    a4,a4,255
e0000654:       |  |  |  \-- fed70de3           beq     a4,a3,e000064e <dif_spi_host_fifo_write+0x2c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
e0000658:       |  |  |      00058883           lb      a7,0(a1)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:165
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
e000065c:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:166
    len -= 1;
e000065e:       |  |  |      167d                       addi    a2,a2,-1
e0000660:       |  |  |      010672b3           and     t0,a2,a6
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
e0000664:       |  |  |      0035f713           andi    a4,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
  while (misalignment32_of(ptr) && len > 0) {
e0000668:       |  |  |      00e03333           snez    t1,a4
e000066c:       |  |  |      00503733           snez    a4,t0
e0000670:       |  |  |      00e37733           and     a4,t1,a4
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write8(mmio_region_t base, ptrdiff_t offset,
                               uint8_t value) {
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e0000674:       |  |  |      03178423           sb      a7,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
e0000678:       |  |  \----- fb71                       bnez    a4,e000064c <dif_spi_host_fifo_write+0x2a>
e000067a:       |  \-------> 66c1                       lui     a3,0x10
e000067c:       |            fff68893           addi    a7,a3,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  }

  // Write complete 32-bit words to the fifo.
  while (len > 3) {
e0000680:       |            01167733           and     a4,a2,a7
e0000684:       |            4791                       li      a5,4
e0000686:       |  /-------- 02f76363           bltu    a4,a5,e00006ac <dif_spi_host_fifo_write+0x8a>
e000068a:       |  |         04800713           li      a4,72
e000068e:       |  |         480d                       li      a6,3
e0000690:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000692:       |  |  |  /-> 4bd4                       lw      a3,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0000694:       |  |  |  |   0ff6f693           andi    a3,a3,255
e0000698:       |  |  |  \-- fee68de3           beq     a3,a4,e0000692 <dif_spi_host_fifo_write+0x70>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e000069c:       |  |  |      4194                       lw      a3,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e000069e:       |  |  |      d794                       sw      a3,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:173
    tx_fifo_write32(spi_host, ptr);
    ptr += 4;
    len -= 4;
e00006a0:       |  |  |      1671                       addi    a2,a2,-4
e00006a2:       |  |  |      011676b3           and     a3,a2,a7
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:172
    ptr += 4;
e00006a6:       |  |  |      0591                       addi    a1,a1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  while (len > 3) {
e00006a8:       |  |  \----- fed864e3           bltu    a6,a3,e0000690 <dif_spi_host_fifo_write+0x6e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  }

  // Clean up any leftover bytes.
  while (len > 0) {
e00006ac:       |  \-------> 011676b3           and     a3,a2,a7
e00006b0:       |  /-------- c68d                       beqz    a3,e00006da <dif_spi_host_fifo_write+0xb8>
e00006b2:       |  |         04800693           li      a3,72
e00006b6:       |  |         6741                       lui     a4,0x10
e00006b8:       |  |         fff70813           addi    a6,a4,-1 # ffff <_stack_len+0x7fff>
e00006bc:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00006be:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e00006c0:       |  |  |  |   0ff77713           andi    a4,a4,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e00006c4:       |  |  |  \-- fed70de3           beq     a4,a3,e00006be <dif_spi_host_fifo_write+0x9c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
e00006c8:       |  |  |      00058703           lb      a4,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e00006cc:       |  |  |      02e78423           sb      a4,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:180
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
    len -= 1;
e00006d0:       |  |  |      167d                       addi    a2,a2,-1
e00006d2:       |  |  |      01067733           and     a4,a2,a6
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:179
    ptr += 1;
e00006d6:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  while (len > 0) {
e00006d8:       |  |  \----- f375                       bnez    a4,e00006bc <dif_spi_host_fifo_write+0x9a>
e00006da:       |  \-------> 4681                       li      a3,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:184
  }

  return kDifOk;
}
e00006dc:       \----------> 8536                       mv      a0,a3
e00006de:                    8082                       ret

e00006e0 <dif_spi_host_fifo_read>:
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:223
  queue->length -= 4;
  return val;
}

dif_result_t dif_spi_host_fifo_read(const dif_spi_host_t *spi_host, void *dst,
                                    uint16_t len) {
e00006e0:                       7179                    addi    sp,sp,-48
e00006e2:                       d606                    sw      ra,44(sp)
e00006e4:                       d422                    sw      s0,40(sp)
e00006e6:                       d226                    sw      s1,36(sp)
e00006e8:                       d04a                    sw      s2,32(sp)
e00006ea:                       ce4e                    sw      s3,28(sp)
e00006ec:                       cc52                    sw      s4,24(sp)
e00006ee:                       ca56                    sw      s5,20(sp)
e00006f0:                       892a                    mv      s2,a0
e00006f2:                       450d                    li      a0,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:224
  if (spi_host == NULL || (dst == NULL && len > 0)) {
e00006f4:       /-------------- 12090963                beqz    s2,e0000826 <dif_spi_host_fifo_read+0x146>
e00006f8:       |               89b2                    mv      s3,a2
e00006fa:       |               84ae                    mv      s1,a1
e00006fc:       |               00b035b3                snez    a1,a1
e0000700:       |               00163613                seqz    a2,a2
e0000704:       |               8dd1                    or      a1,a1,a2
e0000706:       +-------------- 12058063                beqz    a1,e0000826 <dif_spi_host_fifo_read+0x146>
e000070a:       |               00001517                auipc   a0,0x1
e000070e:       |               1e650513                addi    a0,a0,486 # e00018f0 <rom_printf.kHexTable+0x2c>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  }

  uintptr_t ptr = (uintptr_t)dst;
  // We always have to read from the RXFIFO as a 32-bit word.  We use a
  // two-word queue to handle destination and length mis-alignments.
  queue_t queue = {0};
e0000712:       |               454c                    lw      a1,12(a0)
e0000714:       |               4510                    lw      a2,8(a0)
e0000716:       |               4154                    lw      a3,4(a0)
e0000718:       |               c62e                    sw      a1,12(sp)
e000071a:       |               6a41                    lui     s4,0x10
e000071c:       |               c432                    sw      a2,8(sp)
e000071e:       |               c236                    sw      a3,4(sp)
e0000720:       |               4108                    lw      a0,0(a0)
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
e0000722:       |               0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235

  // If the buffer is misaligned, write a byte at a time until we reach
  // alignment.
  while (misalignment32_of(ptr) && len > 0) {
e0000726:       |               00b035b3                snez    a1,a1
e000072a:       |               01303633                snez    a2,s3
e000072e:       |               8df1                    and     a1,a1,a2
e0000730:       |               f00a0413                addi    s0,s4,-256 # ff00 <_stack_len+0x7f00>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  queue_t queue = {0};
e0000734:       |               c02a                    sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
e0000736:       |  /----------- cdb1                    beqz    a1,e0000792 <dif_spi_host_fifo_read+0xb2>
e0000738:       |  |            4501                    li      a0,0
e000073a:       |  |            fffa0a93                addi    s5,s4,-1
e000073e:       |  |     /----- 00a04b63                bgtz    a0,e0000754 <dif_spi_host_fifo_read+0x74>
e0000742:       |  |  /--|----> 00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000746:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e0000748:       |  |  |  |  |   8de1                    and     a1,a1,s0
e000074a:       |  |  |  |  \-- ddf5                    beqz    a1,e0000746 <dif_spi_host_fifo_read+0x66>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e000074c:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:238
    if (queue.length < 1) {
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e000074e:       |  |  |  |      850a                    mv      a0,sp
e0000750:       |  |  |  |      2259                    jal     e00008d6 <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e0000752:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  uint64_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
e0000754:       |  |  |  >----> 45b2                    lw      a1,12(sp)
e0000756:       |  |  |  |      4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
e0000758:       |  |  |  |      00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
e000075c:       |  |  |  |      01859713                slli    a4,a1,0x18
e0000760:       |  |  |  |      8221                    srli    a2,a2,0x8
e0000762:       |  |  |  |      8e59                    or      a2,a2,a4
e0000764:       |  |  |  |      81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
inline void write_64(uint64_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_64()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
e0000766:       |  |  |  |      c62e                    sw      a1,12(sp)
e0000768:       |  |  |  |      c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e000076a:       |  |  |  |      157d                    addi    a0,a0,-1
e000076c:       |  |  |  |      c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:242
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
e000076e:       |  |  |  |      00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:243
    ptr += 1;
e0000772:       |  |  |  |      0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:244
    len -= 1;
e0000774:       |  |  |  |      19fd                    addi    s3,s3,-1
e0000776:       |  |  |  |      0159f533                and     a0,s3,s5
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
e000077a:       |  |  |  |      0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
e000077e:       |  |  |  |      00b035b3                snez    a1,a1
e0000782:       |  |  |  |      00a03533                snez    a0,a0
e0000786:       |  |  |  |      8d6d                    and     a0,a0,a1
e0000788:       |  +--|--|----- c509                    beqz    a0,e0000792 <dif_spi_host_fifo_read+0xb2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:236
    if (queue.length < 1) {
e000078a:       |  |  |  |      4502                    lw      a0,0(sp)
e000078c:       |  |  |  \----- fca044e3                bgtz    a0,e0000754 <dif_spi_host_fifo_read+0x74>
e0000790:       |  |  \-------- bf4d                    j       e0000742 <dif_spi_host_fifo_read+0x62>
e0000792:       |  \----------> fffa0513                addi    a0,s4,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  }

  // While we can write complete words to memory, operate on 4 bytes at a time.
  while (len > 3) {
e0000796:       |               00a9f533                and     a0,s3,a0
e000079a:       |               4591                    li      a1,4
e000079c:       |  /----------- 02b56e63                bltu    a0,a1,e00007d8 <dif_spi_host_fifo_read+0xf8>
e00007a0:       |  |            4a0d                    li      s4,3
e00007a2:       |  |            6541                    lui     a0,0x10
e00007a4:       |  |            fff50a93                addi    s5,a0,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:249
    if (queue.length < 4) {
e00007a8:       |  |  /-------> 4502                    lw      a0,0(sp)
e00007aa:       |  |  |  /----- 00aa4b63                blt     s4,a0,e00007c0 <dif_spi_host_fifo_read+0xe0>
e00007ae:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00007b2:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e00007b4:       |  |  |  |  |   8de1                    and     a1,a1,s0
e00007b6:       |  |  |  |  \-- ddf5                    beqz    a1,e00007b2 <dif_spi_host_fifo_read+0xd2>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00007b8:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:251
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e00007ba:       |  |  |  |      850a                    mv      a0,sp
e00007bc:       |  |  |  |      2a29                    jal     e00008d6 <enqueue_word>
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
  queue->length -= 4;
e00007be:       |  |  |  |      4502                    lw      a0,0(sp)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e00007c0:       |  |  |  \----> 45b2                    lw      a1,12(sp)
e00007c2:       |  |  |         4622                    lw      a2,8(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e00007c4:       |  |  |         c42e                    sw      a1,8(sp)
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
e00007c6:       |  |  |         1571                    addi    a0,a0,-4
e00007c8:       |  |  |         c02a                    sw      a0,0(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
e00007ca:       |  |  |         c090                    sw      a2,0(s1)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:256
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    write_32(dequeue_word(&queue), (void *)ptr);
    ptr += 4;
    len -= 4;
e00007cc:       |  |  |         19f1                    addi    s3,s3,-4
e00007ce:       |  |  |         0159f533                and     a0,s3,s5
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:255
    ptr += 4;
e00007d2:       |  |  |         0491                    addi    s1,s1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  while (len > 3) {
e00007d4:       |  |  \-------- fcaa6ae3                bltu    s4,a0,e00007a8 <dif_spi_host_fifo_read+0xc8>
e00007d8:       |  \----------> 6541                    lui     a0,0x10
e00007da:       |               fff50a13                addi    s4,a0,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  }

  // Finish up any left over buffer a byte at a time.
  while (len > 0) {
e00007de:       |               0149f533                and     a0,s3,s4
e00007e2:       |  /----------- c129                    beqz    a0,e0000824 <dif_spi_host_fifo_read+0x144>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:261
    if (queue.length < 1) {
e00007e4:       |  |  /-------> 4502                    lw      a0,0(sp)
e00007e6:       |  |  |  /----- 00a04b63                bgtz    a0,e00007fc <dif_spi_host_fifo_read+0x11c>
e00007ea:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00007ee:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e00007f0:       |  |  |  |  |   8de1                    and     a1,a1,s0
e00007f2:       |  |  |  |  \-- ddf5                    beqz    a1,e00007ee <dif_spi_host_fifo_read+0x10e>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00007f4:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:263
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e00007f6:       |  |  |  |      850a                    mv      a0,sp
e00007f8:       |  |  |  |      28f9                    jal     e00008d6 <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e00007fa:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
e00007fc:       |  |  |  \----> 45b2                    lw      a1,12(sp)
e00007fe:       |  |  |         4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
e0000800:       |  |  |         00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
e0000804:       |  |  |         01859713                slli    a4,a1,0x18
e0000808:       |  |  |         8221                    srli    a2,a2,0x8
e000080a:       |  |  |         8e59                    or      a2,a2,a4
e000080c:       |  |  |         81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
e000080e:       |  |  |         c62e                    sw      a1,12(sp)
e0000810:       |  |  |         c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e0000812:       |  |  |         157d                    addi    a0,a0,-1
e0000814:       |  |  |         c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:267
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
e0000816:       |  |  |         00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:269
    ptr += 1;
    len -= 1;
e000081a:       |  |  |         19fd                    addi    s3,s3,-1
e000081c:       |  |  |         0149f533                and     a0,s3,s4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:268
    ptr += 1;
e0000820:       |  |  |         0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  while (len > 0) {
e0000822:       |  |  \-------- f169                    bnez    a0,e00007e4 <dif_spi_host_fifo_read+0x104>
e0000824:       |  \----------> 4501                    li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:273
  }

  return kDifOk;
}
e0000826:       \-------------> 4ad2                    lw      s5,20(sp)
e0000828:                       4a62                    lw      s4,24(sp)
e000082a:                       49f2                    lw      s3,28(sp)
e000082c:                       5902                    lw      s2,32(sp)
e000082e:                       5492                    lw      s1,36(sp)
e0000830:                       5422                    lw      s0,40(sp)
e0000832:                       50b2                    lw      ra,44(sp)
e0000834:                       6145                    addi    sp,sp,48
e0000836:                       8082                    ret

e0000838 <dif_spi_host_configure>:
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:66
                                    dif_spi_host_config_t config) {
e0000838:              460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:67
  if (spi_host == NULL) {
e000083a:       /----- cd35                     beqz    a0,e00008b6 <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:70
  if (config.peripheral_clock_freq_hz == 0 || config.spi_clock == 0) {
e000083c:       |      41d4                     lw      a3,4(a1)
e000083e:       +----- cea5                     beqz    a3,e00008b6 <dif_spi_host_configure+0x7e>
e0000840:       |      4198                     lw      a4,0(a1)
e0000842:       +----- cb35                     beqz    a4,e00008b6 <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:75
      ((config.peripheral_clock_freq_hz / config.spi_clock) / 2) - 1;
e0000844:       |      02e6d6b3                 divu    a3,a3,a4
e0000848:       |      8285                     srli    a3,a3,0x1
e000084a:       |      16fd                     addi    a3,a3,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:76
  if (divider & ~SPI_HOST_CONFIGOPTS_CLKDIV_0_MASK) {
e000084c:       |      0106d713                 srli    a4,a3,0x10
e0000850:       +----- e33d                     bnez    a4,e00008b6 <dif_spi_host_configure+0x7e>
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:32
  mmio_region_write32(
e0000852:       |      4110                     lw      a2,0(a0)
e0000854:       |      40000737                 lui     a4,0x40000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000858:       |      ca18                     sw      a4,16(a2)
e000085a:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000085c:       |  /-> 4a5c                     lw      a5,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e000085e:       |  |   8ff9                     and     a5,a5,a4
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:42
  } while (active);
e0000860:       |  \-- fff5                     bnez    a5,e000085c <dif_spi_host_configure+0x24>
e0000862:       |      6741                     lui     a4,0x10
e0000864:       |      177d                     addi    a4,a4,-1
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000866:       |  /-> 4a5c                     lw      a5,20(a2)
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:51
  } while (txqd != 0 || rxqd != 0);
e0000868:       |  |   8ff9                     and     a5,a5,a4
e000086a:       |  \-- fff5                     bnez    a5,e0000866 <dif_spi_host_configure+0x2e>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e000086c:       |      00062823                 sw      zero,16(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000870:       |      00858603                 lb      a2,8(a1) # 80000008 <fromhost+0x9ffefff8>
e0000874:       |      8ef9                     and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e0000876:       |      0672                     slli    a2,a2,0x1c
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000878:       |      00958703                 lb      a4,9(a1)
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e000087c:       |      8231                     srli    a2,a2,0xc
e000087e:       |      8e55                     or      a2,a2,a3
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:89
                               config.chip_select.lead);
e0000880:       |      00a5c683                 lbu     a3,10(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
e0000884:       |      0772                     slli    a4,a4,0x1c
e0000886:       |      8321                     srli    a4,a4,0x8
e0000888:       |      8e59                     or      a2,a2,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e000088a:       |      8abd                     andi    a3,a3,15
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
e000088c:       |      00b58703                 lb      a4,11(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000890:       |      06e2                     slli    a3,a3,0x18
e0000892:       |      8e55                     or      a2,a2,a3
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
e0000894:       |      00c58683                 lb      a3,12(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000898:       |      0776                     slli    a4,a4,0x1d
e000089a:       |      8e59                     or      a2,a2,a4
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
e000089c:       |      00d58583                 lb      a1,13(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00008a0:       |      06fa                     slli    a3,a3,0x1e
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:94
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CONFIGOPTS_REG_OFFSET, reg);
e00008a2:       |      4118                     lw      a4,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e00008a4:       |      8e55                     or      a2,a2,a3
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00008a6:       |      05fe                     slli    a1,a1,0x1f
e00008a8:       |      8dd1                     or      a1,a1,a2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00008aa:       |      cf0c                     sw      a1,24(a4)
spi_host_enable():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:60
  mmio_region_write32(
e00008ac:       |      4108                     lw      a0,0(a0)
e00008ae:       |      4601                     li      a2,0
e00008b0:       |      800005b7                 lui     a1,0x80000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00008b4:       |      c90c                     sw      a1,16(a0)
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:97
}
e00008b6:       \----> 8532                     mv      a0,a2
e00008b8:              8082                     ret

e00008ba <dif_spi_host_output_set_enabled>:
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:101
  if (spi_host == NULL) {
e00008ba:       /-- cd01                        beqz    a0,e00008d2 <dif_spi_host_output_set_enabled+0x18>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:106
      mmio_region_read32(spi_host->base_addr, SPI_HOST_CONTROL_REG_OFFSET);
e00008bc:       |   4110                        lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00008be:       |   4a14                        lw      a3,16(a2)
e00008c0:       |   4501                        li      a0,0
e00008c2:       |   e0000737            lui     a4,0xe0000
e00008c6:       |   177d                        addi    a4,a4,-1
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e00008c8:       |   8ef9                        and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00008ca:       |   05f6                        slli    a1,a1,0x1d
e00008cc:       |   8dd5                        or      a1,a1,a3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e00008ce:       |   ca0c                        sw      a1,16(a2)
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:112
}
e00008d0:       |   8082                        ret
e00008d2:       \-> 450d                        li      a0,3
e00008d4:           8082                        ret

e00008d6 <enqueue_word>:
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:196
  if (queue->length % sizeof(uint32_t) == 0) {
e00008d6:              4110                     lw      a2,0(a0)
e00008d8:              00367693                 andi    a3,a2,3
e00008dc:       /----- c29d                     beqz    a3,e0000902 <enqueue_word+0x2c>
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e00008de:       |      00160693                 addi    a3,a2,1
e00008e2:       |      c114                     sw      a3,0(a0)
e00008e4:       |      962a                     add     a2,a2,a0
e00008e6:       |      00b60423                 sb      a1,8(a2)
e00008ea:       |      460d                     li      a2,3
e00008ec:       |  /-> 4114                     lw      a3,0(a0)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:202
      data >>= 8;
e00008ee:       |  |   81a1                     srli    a1,a1,0x8
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e00008f0:       |  |   00168713                 addi    a4,a3,1
e00008f4:       |  |   c118                     sw      a4,0(a0)
e00008f6:       |  |   96aa                     add     a3,a3,a0
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
e00008f8:       |  |   167d                     addi    a2,a2,-1
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e00008fa:       |  |   00b68423                 sb      a1,8(a3)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
e00008fe:       |  \-- f67d                     bnez    a2,e00008ec <enqueue_word+0x16>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
e0000900:       |      8082                     ret
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:197
    write_32(data, queue->data + queue->length);
e0000902:       \----> 962a                     add     a2,a2,a0
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0000904:              c60c                     sw      a1,8(a2)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:198
    queue->length += 4;
e0000906:              410c                     lw      a1,0(a0)
e0000908:              0591                     addi    a1,a1,4
e000090a:              c10c                     sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
e000090c:              8082                     ret

e000090e <dif_spi_host_transaction>:
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:362
}

dif_result_t dif_spi_host_transaction(const dif_spi_host_t *spi_host,
                                      uint32_t csid,
                                      dif_spi_host_segment_t *segments,
                                      size_t length) {
e000090e:                          7139                 addi    sp,sp,-64
e0000910:                          de06                 sw      ra,60(sp)
e0000912:                          dc22                 sw      s0,56(sp)
e0000914:                          da26                 sw      s1,52(sp)
e0000916:                          d84a                 sw      s2,48(sp)
e0000918:                          d64e                 sw      s3,44(sp)
e000091a:                          d452                 sw      s4,40(sp)
e000091c:                          d256                 sw      s5,36(sp)
e000091e:                          d05a                 sw      s6,32(sp)
e0000920:                          ce5e                 sw      s7,28(sp)
e0000922:                          cc62                 sw      s8,24(sp)
e0000924:                          ca66                 sw      s9,20(sp)
e0000926:                          c86a                 sw      s10,16(sp)
e0000928:                          c66e                 sw      s11,12(sp)
e000092a:                          8a2a                 mv      s4,a0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:364
  // Write to chip select ID.
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CSID_REG_OFFSET, csid);
e000092c:                          4108                 lw      a0,0(a0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e000092e:                          cd4c                 sw      a1,28(a0)
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368

  // For each segment, write the segment information to the
  // COMMAND register and transmit FIFO.
  for (size_t i = 0; i < length; ++i) {
e0000930:       /----------------- 1a068263             beqz    a3,e0000ad4 <dif_spi_host_transaction+0x1c6>
e0000934:       |                  8d36                 mv      s10,a3
e0000936:       |                  8932                 mv      s2,a2
e0000938:       |                  4401                 li      s0,0
e000093a:       |                  fff68a93             addi    s5,a3,-1
e000093e:       |                  0016b513             seqz    a0,a3
e0000942:       |                  c02a                 sw      a0,0(sp)
e0000944:       |                  6505                 lui     a0,0x1
e0000946:       |                  c0050b13             addi    s6,a0,-1024 # c00 <_min_stack-0x1400>
e000094a:       |                  4851                 li      a6,20
e000094c:       |                  4c15                 li      s8,5
e000094e:       |                  00001c97             auipc   s9,0x1
e0000952:       |                  f86c8c93             addi    s9,s9,-122 # e00018d4 <rom_printf.kHexTable+0x10>
e0000956:       |                  04800493             li      s1,72
e000095a:       |                  6541                 lui     a0,0x10
e000095c:       |                  f0050593             addi    a1,a0,-256 # ff00 <_stack_len+0x7f00>
e0000960:       |                  c22e                 sw      a1,4(sp)
e0000962:       |                  157d                 addi    a0,a0,-1
e0000964:       |                  c42a                 sw      a0,8(sp)
e0000966:       |        /-------> 000a2503             lw      a0,0(s4)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000096a:       |        |     /-> 494c                 lw      a1,20(a0)
wait_ready():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:120
  } while (!ready);
e000096c:       |        |     \-- fe05dfe3             bgez    a1,e000096a <dif_spi_host_transaction+0x5c>
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:372
    bool last_segment = i == length - 1;
    wait_ready(spi_host);
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
e0000970:       |        |         030405b3             mul     a1,s0,a6
e0000974:       |        |         95ca                 add     a1,a1,s2
e0000976:       |        |         4190                 lw      a2,0(a1)
e0000978:       |  /-----|-------- 16cc6e63             bltu    s8,a2,e0000af4 <dif_spi_host_transaction+0x1e6>
e000097c:       |  |     |         060a                 slli    a2,a2,0x2
e000097e:       |  |     |         9666                 add     a2,a2,s9
e0000980:       |  |     |         4210                 lw      a2,0(a2)
e0000982:       |  |     |         015446b3             xor     a3,s0,s5
e0000986:       |  |     |         0016bd93             seqz    s11,a3
e000098a:       |  |     |         8602                 jr      a2
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e000098c:       |  |     |     /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e000098e:       |  |     |     |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e0000992:       |  |     |     \-- fe960de3             beq     a2,s1,e000098c <dif_spi_host_transaction+0x7e>
issue_opcode():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:292
                     segment->opcode);
e0000996:       |  |     |         00458583             lb      a1,4(a1) # 3004 <_min_stack+0x1004>
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e000099a:       |  |     |         02b50423             sb      a1,40(a0)
e000099e:       |  |     |         6589                 lui     a1,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00009a0:       |  |     |     /-- 000d9463             bnez    s11,e00009a8 <dif_spi_host_transaction+0x9a>
e00009a4:       |  |     |     |   20058593             addi    a1,a1,512 # 2200 <_min_stack+0x200>
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e00009a8:       |  |     |     \-> 000a2503             lw      a0,0(s4)
e00009ac:       |  |     |  /----- a8f1                 j       e0000a88 <dif_spi_host_transaction+0x17a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00009ae:       |  |     |  |  /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e00009b0:       |  |     |  |  |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e00009b4:       |  |     |  |  \-- fe960de3             beq     a2,s1,e00009ae <dif_spi_host_transaction+0xa0>
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:301
  uint32_t address = bitfield_byteswap32(segment->address.address); // segment->address.address; //
e00009b8:       |  |     |  |      45d4                 lw      a3,12(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
  return __builtin_bswap32(bitfield);
e00009ba:       |  |     |  |      0086d613             srli    a2,a3,0x8
e00009be:       |  |     |  |      4712                 lw      a4,4(sp)
e00009c0:       |  |     |  |      8e79                 and     a2,a2,a4
e00009c2:       |  |     |  |      0186d713             srli    a4,a3,0x18
e00009c6:       |  |     |  |      8f51                 or      a4,a4,a2
e00009c8:       |  |     |  |      00869793             slli    a5,a3,0x8
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
e00009cc:       |  |     |  |      0085a883             lw      a7,8(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
e00009d0:       |  |     |  |      00ff0637             lui     a2,0xff0
e00009d4:       |  |     |  |      8ff1                 and     a5,a5,a2
e00009d6:       |  |     |  |      06e2                 slli    a3,a3,0x18
e00009d8:       |  |     |  |      8edd                 or      a3,a3,a5
e00009da:       |  |     |  |      8ed9                 or      a3,a3,a4
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
e00009dc:       |  |     |  |      4605                 li      a2,1
e00009de:       |  |     |  |  /-- 00c88363             beq     a7,a2,e00009e4 <dif_spi_host_transaction+0xd6>
e00009e2:       |  |     |  |  |   82a1                 srli    a3,a3,0x8
e00009e4:       |  |     |  |  \-> 6709                 lui     a4,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00009e6:       |  |     |  |  /-- 000d9463             bnez    s11,e00009ee <dif_spi_host_transaction+0xe0>
e00009ea:       |  |     |  |  |   20070713             addi    a4,a4,512 # 2200 <_min_stack+0x200>
e00009ee:       |  |     |  |  \-> d514                 sw      a3,40(a0)
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:313
  write_command_reg(spi_host, length, segment->address.width,
e00009f0:       |  |     |  |      41c8                 lw      a0,4(a1)
e00009f2:       |  |     |  |      fff88593             addi    a1,a7,-1
e00009f6:       |  |     |  |      0015b593             seqz    a1,a1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
e00009fa:       |  |     |  |      8dd9                 or      a1,a1,a4
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e00009fc:       |  |     |  |      00a51613             slli    a2,a0,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e0000a00:       |  |     |  |      000a2503             lw      a0,0(s4)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000a04:       |  |     |  |      01667633             and     a2,a2,s6
e0000a08:       |  |     |  |      8dd1                 or      a1,a1,a2
e0000a0a:       |  |     |  |      0025e593             ori     a1,a1,2
e0000a0e:       |  |     |  +----- a8ad                 j       e0000a88 <dif_spi_host_transaction+0x17a>
issue_dummy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:319
  write_command_reg(spi_host, segment->dummy.length, segment->dummy.width,
e0000a10:       |  |     |  |      4590                 lw      a2,8(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000a12:       |  |     |  |      167d                 addi    a2,a2,-1
e0000a14:       |  |     |  |      1ff67613             andi    a2,a2,511
e0000a18:       |  |     |  |  /-- 000d9463             bnez    s11,e0000a20 <dif_spi_host_transaction+0x112>
e0000a1c:       |  |     |  |  |   20066613             ori     a2,a2,512
e0000a20:       |  |     |  |  \-> 41cc                 lw      a1,4(a1)
e0000a22:       |  |     |  |      05aa                 slli    a1,a1,0xa
e0000a24:       |  |     |  |      0165f5b3             and     a1,a1,s6
e0000a28:       |  |     |  |      8dd1                 or      a1,a1,a2
e0000a2a:       |  |     |  +----- a8b9                 j       e0000a88 <dif_spi_host_transaction+0x17a>
issue_data_phase():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:332
      width = segment->tx.width;
e0000a2c:       |  |     |  |      0045a983             lw      s3,4(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:333
      length = segment->tx.length;
e0000a30:       |  |     |  |      00c5ab83             lw      s7,12(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:335
      spi_host_fifo_write_alias(spi_host, segment->tx.buf, segment->tx.length);
e0000a34:       |  |     |  |      458c                 lw      a1,8(a1)
e0000a36:       |  |     |  |      4522                 lw      a0,8(sp)
e0000a38:       |  |     |  |      00abf633             and     a2,s7,a0
e0000a3c:       |  |     |  |      8552                 mv      a0,s4
e0000a3e:       |  |     |  |      36d5                 jal     e0000622 <dif_spi_host_fifo_write>
e0000a40:       |  |     |  |      6589                 lui     a1,0x2
e0000a42:       |  |     |  |  /-- a015                 j       e0000a66 <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:345
      width = segment->rx.width;
e0000a44:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 2004 <_min_stack+0x4>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:346
      length = segment->rx.length;
e0000a48:       |  |     |  |  |   00c5ab83             lw      s7,12(a1)
e0000a4c:       |  |     |  |  |   6585                 lui     a1,0x1
e0000a4e:       |  |     |  |  +-- a821                 j       e0000a66 <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:338
      width = segment->bidir.width;
e0000a50:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 1004 <_min_stack-0xffc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:339
      length = segment->bidir.length;
e0000a54:       |  |     |  |  |   0105ab83             lw      s7,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:341
      spi_host_fifo_write_alias(spi_host, segment->bidir.txbuf,
e0000a58:       |  |     |  |  |   458c                 lw      a1,8(a1)
e0000a5a:       |  |     |  |  |   4522                 lw      a0,8(sp)
e0000a5c:       |  |     |  |  |   00abf633             and     a2,s7,a0
e0000a60:       |  |     |  |  |   8552                 mv      a0,s4
e0000a62:       |  |     |  |  |   36c1                 jal     e0000622 <dif_spi_host_fifo_write>
e0000a64:       |  |     |  |  |   658d                 lui     a1,0x3
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000a66:       |  |     |  |  \-> fffb8513             addi    a0,s7,-1
e0000a6a:       |  |     |  |      1ff57613             andi    a2,a0,511
e0000a6e:       |  |     |  |  /-- 000d9463             bnez    s11,e0000a76 <dif_spi_host_transaction+0x168>
e0000a72:       |  |     |  |  |   20066613             ori     a2,a2,512
e0000a76:       |  |     |  |  \-> 4851                 li      a6,20
e0000a78:       |  |     |  |      00a99693             slli    a3,s3,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e0000a7c:       |  |     |  |      000a2503             lw      a0,0(s4)
e0000a80:       |  |     |  |      0166f6b3             and     a3,a3,s6
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000a84:       |  |     |  |      8dd1                 or      a1,a1,a2
e0000a86:       |  |     |  |      8dd5                 or      a1,a1,a3
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368
  for (size_t i = 0; i < length; ++i) {
e0000a88:       |  |     |  \----> 0405                 addi    s0,s0,1
e0000a8a:       |  |     |         d10c                 sw      a1,32(a0)
e0000a8c:       |  |     \-------- eda41de3             bne     s0,s10,e0000966 <dif_spi_host_transaction+0x58>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
        return kDifBadArg;
    }
  }

  // For each segment which receives data, read from the receive FIFO.
  for (size_t i = 0; i < length; ++i) {
e0000a90:       |  |               4502                 lw      a0,0(sp)
e0000a92:       +--|-------------- e129                 bnez    a0,e0000ad4 <dif_spi_host_transaction+0x1c6>
e0000a94:       |  |               4401                 li      s0,0
e0000a96:       |  |               00c90493             addi    s1,s2,12
e0000a9a:       |  |               4995                 li      s3,5
e0000a9c:       |  |               4a91                 li      s5,4
e0000a9e:       |  |               4b51                 li      s6,20
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:399
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
e0000aa0:       |  |  /----------> ff44a503             lw      a0,-12(s1)
e0000aa4:       |  |  |     /----- 01350b63             beq     a0,s3,e0000aba <dif_spi_host_transaction+0x1ac>
e0000aa8:       |  |  |  /--|----- 03551163             bne     a0,s5,e0000aca <dif_spi_host_transaction+0x1bc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:401
      case kDifSpiHostSegmentTypeRx:
        spi_host_fifo_read_alias(spi_host, segment->rx.buf, segment->rx.length);
e0000aac:       |  |  |  |  |      03640533             mul     a0,s0,s6
e0000ab0:       |  |  |  |  |      954a                 add     a0,a0,s2
e0000ab2:       |  |  |  |  |      00850593             addi    a1,a0,8
e0000ab6:       |  |  |  |  |      0531                 addi    a0,a0,12
e0000ab8:       |  |  |  |  |  /-- a021                 j       e0000ac0 <dif_spi_host_transaction+0x1b2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:406
        break;
      case kDifSpiHostSegmentTypeBidirectional:
        spi_host_fifo_read_alias(spi_host, segment->bidir.rxbuf,
                                 segment->bidir.length);
        break;
e0000aba:       |  |  |  |  \--|-> 00448513             addi    a0,s1,4
e0000abe:       |  |  |  |     |   85a6                 mv      a1,s1
e0000ac0:       |  |  |  |     \-> 418c                 lw      a1,0(a1)
e0000ac2:       |  |  |  |         00055603             lhu     a2,0(a0)
e0000ac6:       |  |  |  |         8552                 mv      a0,s4
e0000ac8:       |  |  |  |         3921                 jal     e00006e0 <dif_spi_host_fifo_read>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
  for (size_t i = 0; i < length; ++i) {
e0000aca:       |  |  |  \-------> 0405                 addi    s0,s0,1
e0000acc:       |  |  |            1d7d                 addi    s10,s10,-1
e0000ace:       |  |  |            04d1                 addi    s1,s1,20
e0000ad0:       |  |  \----------- fc0d18e3             bnez    s10,e0000aa0 <dif_spi_host_transaction+0x192>
e0000ad4:       \--|-------------> 4501                 li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:412
      default:
          /* do nothing */;
    }
  }
  return kDifOk;
}
e0000ad6:          |           /-> 4db2                 lw      s11,12(sp)
e0000ad8:          |           |   4d42                 lw      s10,16(sp)
e0000ada:          |           |   4cd2                 lw      s9,20(sp)
e0000adc:          |           |   4c62                 lw      s8,24(sp)
e0000ade:          |           |   4bf2                 lw      s7,28(sp)
e0000ae0:          |           |   5b02                 lw      s6,32(sp)
e0000ae2:          |           |   5a92                 lw      s5,36(sp)
e0000ae4:          |           |   5a22                 lw      s4,40(sp)
e0000ae6:          |           |   59b2                 lw      s3,44(sp)
e0000ae8:          |           |   5942                 lw      s2,48(sp)
e0000aea:          |           |   54d2                 lw      s1,52(sp)
e0000aec:          |           |   5462                 lw      s0,56(sp)
e0000aee:          |           |   50f2                 lw      ra,60(sp)
e0000af0:          |           |   6121                 addi    sp,sp,64
e0000af2:          |           |   8082                 ret
e0000af4:          \-----------|-> 450d                 li      a0,3
e0000af6:                      \-- b7c5                 j       e0000ad6 <dif_spi_host_transaction+0x1c8>

e0000af8 <sec_mmio_init>:
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000af8:           4601                        li      a2,0
e0000afa:           4681                        li      a3,0
e0000afc:           4701                        li      a4,0
e0000afe:           4501                        li      a0,0
e0000b00:           00001597            auipc   a1,0x1
e0000b04:           1b058593            addi    a1,a1,432 # e0001cb0 <sec_mmio_ctx>
sec_mmio_init():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:53
  // mechanism.
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
}

void sec_mmio_init(void) {
  sec_mmio_ctx.last_index = launder32(0);
e0000b08:           c190                        sw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:54
  sec_mmio_ctx.write_count = launder32(0);
e0000b0a:           c1d4                        sw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:55
  sec_mmio_ctx.check_count = launder32(0);
e0000b0c:           c5d8                        sw      a4,12(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:56
  sec_mmio_ctx.expected_write_count = launder32(0);
e0000b0e:           c588                        sw      a0,8(a1)
e0000b10:           3e800613            li      a2,1000
e0000b14:           56fd                        li      a3,-1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:58
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
    sec_mmio_ctx.addrs[i] = UINT32_MAX;
e0000b16:       /-> 7d858713            addi    a4,a1,2008
e0000b1a:       |   7cd72c23            sw      a3,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:59
    sec_mmio_ctx.values[i] = UINT32_MAX;
e0000b1e:       |   c994                        sw      a3,16(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:57
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
e0000b20:       |   167d                        addi    a2,a2,-1
e0000b22:       |   0591                        addi    a1,a1,4
e0000b24:       \-- fa6d                        bnez    a2,e0000b16 <sec_mmio_init+0x1e>
e0000b26:           00001597            auipc   a1,0x1
e0000b2a:           18a58593            addi    a1,a1,394 # e0001cb0 <sec_mmio_ctx>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:61
  }
  uint32_t check = kSecMmioValZero ^ sec_mmio_ctx.last_index;
e0000b2e:           4190                        lw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:62
  check ^= sec_mmio_ctx.write_count;
e0000b30:           41d4                        lw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:63
  check ^= sec_mmio_ctx.check_count;
e0000b32:           45cc                        lw      a1,12(a1)
e0000b34:           8e35                        xor     a2,a2,a3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:64
  check ^= sec_mmio_ctx.expected_write_count;
e0000b36:           8db1                        xor     a1,a1,a2
e0000b38:           8d2d                        xor     a0,a0,a1
e0000b3a:           3ca595b7            lui     a1,0x3ca59
e0000b3e:           65a58593            addi    a1,a1,1626 # 3ca5965a <tohost+0x3ca39652>
e0000b42:           8d2d                        xor     a0,a0,a1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:65
  HARDENED_CHECK_EQ(check, kSecMmioValZero);
e0000b44:       /-- 00b50663            beq     a0,a1,e0000b50 <sec_mmio_init+0x58>
e0000b48:       |   0000                        unimp
e0000b4a:       |   0000                        unimp
e0000b4c:       |   0000                        unimp
e0000b4e:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:66
}
e0000b50:       \-> 8082                        ret

e0000b52 <sec_mmio_read32>:
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:78
    sec_mmio_ctx.values[i] = UINT32_MAX;
  }
  HARDENED_CHECK_EQ(sec_mmio_ctx.check_count, 0);
}

uint32_t sec_mmio_read32(uint32_t addr) {
e0000b52:           1101                        addi    sp,sp,-32
e0000b54:           ce06                        sw      ra,28(sp)
e0000b56:           cc22                        sw      s0,24(sp)
e0000b58:           ca26                        sw      s1,20(sp)
e0000b5a:           c84a                        sw      s2,16(sp)
e0000b5c:           c64e                        sw      s3,12(sp)
e0000b5e:           842a                        mv      s0,a0
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
e0000b60:           00052903            lw      s2,0(a0)
e0000b64:           21692537            lui     a0,0x21692
e0000b68:           43650993            addi    s3,a0,1078 # 21692436 <tohost+0x2167242e>
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:80
  uint32_t value = abs_mmio_read32(addr);
  uint32_t masked_value = value ^ kSecMmioMaskVal;
e0000b6c:           013944b3            xor     s1,s2,s3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:82
  barrier32(masked_value);
  upsert_register(addr, masked_value);
e0000b70:           8522                        mv      a0,s0
e0000b72:           85a6                        mv      a1,s1
e0000b74:           2015                        jal     e0000b98 <upsert_register>
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
e0000b76:           4008                        lw      a0,0(s0)
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:83
  HARDENED_CHECK_EQ((abs_mmio_read32(addr) ^ kSecMmioMaskVal), masked_value);
e0000b78:           01354533            xor     a0,a0,s3
e0000b7c:       /-- 00950663            beq     a0,s1,e0000b88 <sec_mmio_read32+0x36>
e0000b80:       |   0000                        unimp
e0000b82:       |   0000                        unimp
e0000b84:       |   0000                        unimp
e0000b86:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:85

  return value;
e0000b88:       \-> 854a                        mv      a0,s2
e0000b8a:           49b2                        lw      s3,12(sp)
e0000b8c:           4942                        lw      s2,16(sp)
e0000b8e:           44d2                        lw      s1,20(sp)
e0000b90:           4462                        lw      s0,24(sp)
e0000b92:           40f2                        lw      ra,28(sp)
e0000b94:           6105                        addi    sp,sp,32
e0000b96:           8082                        ret

e0000b98 <upsert_register>:
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:34
  const size_t last_index = sec_mmio_ctx.last_index;
e0000b98:                 00001817              auipc   a6,0x1
e0000b9c:                 11880813              addi    a6,a6,280 # e0001cb0 <sec_mmio_ctx>
e0000ba0:                 00082703              lw      a4,0(a6)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000ba4:                 4781                  li      a5,0
e0000ba6:                 4681                  li      a3,0
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
e0000ba8:       /-------- 02e7f163              bgeu    a5,a4,e0000bca <upsert_register+0x32>
e0000bac:       |         4681                  li      a3,0
e0000bae:       |         87c2                  mv      a5,a6
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:37
    if (sec_mmio_ctx.addrs[i] == addr) {
e0000bb0:       |  /----> 7d878613              addi    a2,a5,2008
e0000bb4:       |  |      7d862603              lw      a2,2008(a2)
e0000bb8:       |  |  /-- 00a60863              beq     a2,a0,e0000bc8 <upsert_register+0x30>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
e0000bbc:       |  |  |   0685                  addi    a3,a3,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000bbe:       |  |  |   8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
e0000bc0:       |  |  |   0791                  addi    a5,a5,4
e0000bc2:       |  \--|-- fee667e3              bltu    a2,a4,e0000bb0 <upsert_register+0x18>
e0000bc6:       +-----|-- a011                  j       e0000bca <upsert_register+0x32>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:38
      sec_mmio_ctx.values[i] = value;
e0000bc8:       |     \-> cb8c                  sw      a1,16(a5)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000bca:       \-------> 8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
  if (launder32(i) == last_index && launder32(i) < kSecMmioRegFileSize) {
e0000bcc:             /-- 02e61463              bne     a2,a4,e0000bf4 <upsert_register+0x5c>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000bd0:             |   8636                  mv      a2,a3
e0000bd2:             |   3e700713              li      a4,999
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
e0000bd6:             +-- 00c76f63              bltu    a4,a2,e0000bf4 <upsert_register+0x5c>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:43
    sec_mmio_ctx.addrs[i] = addr;
e0000bda:             |   00269613              slli    a2,a3,0x2
e0000bde:             |   9642                  add     a2,a2,a6
e0000be0:             |   7d860713              addi    a4,a2,2008
e0000be4:             |   7ca72c23              sw      a0,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:44
    sec_mmio_ctx.values[i] = value;
e0000be8:             |   ca0c                  sw      a1,16(a2)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:45
    ++sec_mmio_ctx.last_index;
e0000bea:             |   00082503              lw      a0,0(a6)
e0000bee:             |   0505                  addi    a0,a0,1
e0000bf0:             |   00a82023              sw      a0,0(a6)
e0000bf4:             \-> 3e800513              li      a0,1000
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:49
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
e0000bf8:             /-- 00a6e663              bltu    a3,a0,e0000c04 <upsert_register+0x6c>
e0000bfc:             |   0000                  unimp
e0000bfe:             |   0000                  unimp
e0000c00:             |   0000                  unimp
e0000c02:             |   0000                  unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:50
}
e0000c04:             \-> 8082                  ret

e0000c06 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
e0000c06:                    1101                       addi    sp,sp,-32
e0000c08:                    ce06                       sw      ra,28(sp)
e0000c0a:                    65b1                       lui     a1,0xc
e0000c0c:                    aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
e0000c10:             /----- 02b50063           beq     a0,a1,e0000c30 <test_status_set+0x2a>
e0000c14:             |      65a5                       lui     a1,0x9
e0000c16:             |      05b5                       addi    a1,a1,13
e0000c18:          /--|----- 02b50d63           beq     a0,a1,e0000c52 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000c1c:          |  |      00001597           auipc   a1,0x1
e0000c20:          |  |      00858593           addi    a1,a1,8 # e0001c24 <kDeviceTestStatusAddress>
e0000c24:          |  |      418c                       lw      a1,0(a1)
e0000c26:          |  |  /-- c191                       beqz    a1,e0000c2a <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000c28:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
e0000c2a:          |  |  \-> 40f2                       lw      ra,28(sp)
e0000c2c:          |  |      6105                       addi    sp,sp,32
e0000c2e:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000c30:          |  \----> 00001517           auipc   a0,0x1
e0000c34:          |         ff850513           addi    a0,a0,-8 # e0001c28 <kDeviceLogBypassUartAddress>
e0000c38:          |         4108                       lw      a0,0(a0)
e0000c3a:          |  /----- ed0d                       bnez    a0,e0000c74 <test_status_set+0x6e>
e0000c3c:          |  |      00001597           auipc   a1,0x1
e0000c40:          |  |      d1458593           addi    a1,a1,-748 # e0001950 <rom_printf.kHexTable+0x8c>
e0000c44:          |  |      0028                       addi    a0,sp,8
e0000c46:          |  |      4651                       li      a2,20
e0000c48:          |  |      7fa000ef           jal     ra,e0001442 <memcpy>
e0000c4c:          |  |      0028                       addi    a0,sp,8
e0000c4e:          |  |      20b5                       jal     e0000cba <base_log_internal_core>
e0000c50:          |  |  /-- a805                       j       e0000c80 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0000c52:          \--|--|-> 00001517           auipc   a0,0x1
e0000c56:             |  |   fd650513           addi    a0,a0,-42 # e0001c28 <kDeviceLogBypassUartAddress>
e0000c5a:             |  |   4108                       lw      a0,0(a0)
e0000c5c:       /-----|--|-- ed05                       bnez    a0,e0000c94 <test_status_set+0x8e>
e0000c5e:       |     |  |   00001597           auipc   a1,0x1
e0000c62:       |     |  |   cde58593           addi    a1,a1,-802 # e000193c <rom_printf.kHexTable+0x78>
e0000c66:       |     |  |   0028                       addi    a0,sp,8
e0000c68:       |     |  |   4651                       li      a2,20
e0000c6a:       |     |  |   7d8000ef           jal     ra,e0001442 <memcpy>
e0000c6e:       |     |  |   0028                       addi    a0,sp,8
e0000c70:       |     |  |   20a9                       jal     e0000cba <base_log_internal_core>
e0000c72:       |  /--|--|-- a03d                       j       e0000ca0 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000c74:       |  |  \--|-> 00003517           auipc   a0,0x3
e0000c78:       |  |     |   01450513           addi    a0,a0,20 # e0003c88 <test_status_set.kLogFields.2>
e0000c7c:       |  |     |   4581                       li      a1,0
e0000c7e:       |  |     |   28f9                       jal     e0000d5c <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000c80:       |  |     \-> 00001517           auipc   a0,0x1
e0000c84:       |  |         fa450513           addi    a0,a0,-92 # e0001c24 <kDeviceTestStatusAddress>
e0000c88:       |  |         4108                       lw      a0,0(a0)
e0000c8a:       |  |  /----- c505                       beqz    a0,e0000cb2 <test_status_set+0xac>
e0000c8c:       |  |  |      65b1                       lui     a1,0xc
e0000c8e:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
e0000c92:       |  |  |  /-- a839                       j       e0000cb0 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0000c94:       \--|--|--|-> 00003517           auipc   a0,0x3
e0000c98:          |  |  |   fe050513           addi    a0,a0,-32 # e0003c74 <test_status_set.kLogFields>
e0000c9c:          |  |  |   4581                       li      a1,0
e0000c9e:          |  |  |   287d                       jal     e0000d5c <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000ca0:          \--|--|-> 00001517           auipc   a0,0x1
e0000ca4:             |  |   f8450513           addi    a0,a0,-124 # e0001c24 <kDeviceTestStatusAddress>
e0000ca8:             |  |   4108                       lw      a0,0(a0)
e0000caa:             +--|-- c501                       beqz    a0,e0000cb2 <test_status_set+0xac>
e0000cac:             |  |   65a5                       lui     a1,0x9
e0000cae:             |  |   05b5                       addi    a1,a1,13
e0000cb0:             |  \-> c10c                       sw      a1,0(a0)
e0000cb2:             \----> 2009                       jal     e0000cb4 <abort>

e0000cb4 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
e0000cb4:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
e0000cb8:       \-- bff5                        j       e0000cb4 <abort>

e0000cba <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
e0000cba:              7179                     addi    sp,sp,-48
e0000cbc:              c606                     sw      ra,12(sp)
e0000cbe:              c422                     sw      s0,8(sp)
e0000cc0:              c226                     sw      s1,4(sp)
e0000cc2:              842a                     mv      s0,a0
e0000cc4:              d646                     sw      a7,44(sp)
e0000cc6:              d442                     sw      a6,40(sp)
e0000cc8:              d23e                     sw      a5,36(sp)
e0000cca:              d03a                     sw      a4,32(sp)
e0000ccc:              ce36                     sw      a3,28(sp)
e0000cce:              cc32                     sw      a2,24(sp)
e0000cd0:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
e0000cd2:              4148                     lw      a0,4(a0)
e0000cd4:              800005b7                 lui     a1,0x80000
e0000cd8:              fff58613                 addi    a2,a1,-1 # 7fffffff <fromhost+0x9ffeffef>
e0000cdc:              4581                     li      a1,0
e0000cde:              04f000ef                 jal     ra,e000152c <memchr>
e0000ce2:              4054                     lw      a3,4(s0)
e0000ce4:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
e0000ce8:              02f00593                 li      a1,47
e0000cec:              8536                     mv      a0,a3
e0000cee:              0ed000ef                 jal     ra,e00015da <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
e0000cf2:       /----- c501                     beqz    a0,e0000cfa <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
e0000cf4:       |      00150693                 addi    a3,a0,1
e0000cf8:       |  /-- a011                     j       e0000cfc <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
e0000cfa:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e0000cfc:          \-> 4008                     lw      a0,0(s0)
e0000cfe:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
e0000d00:       /----- 00a5ea63                 bltu    a1,a0,e0000d14 <base_log_internal_core+0x5a>
e0000d04:       |      050a                     slli    a0,a0,0x2
e0000d06:       |      00001597                 auipc   a1,0x1
e0000d0a:       |      c7a58593                 addi    a1,a1,-902 # e0001980 <rom_printf.kHexTable+0xbc>
e0000d0e:       |      952e                     add     a0,a0,a1
e0000d10:       |      410c                     lw      a1,0(a0)
e0000d12:       |  /-- a029                     j       e0000d1c <base_log_internal_core+0x62>
e0000d14:       \--|-> 00001597                 auipc   a1,0x1
e0000d18:          |   c6758593                 addi    a1,a1,-921 # e000197b <rom_printf.kHexTable+0xb7>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
e0000d1c:          \-> 00003497                 auipc   s1,0x3
e0000d20:              ee848493                 addi    s1,s1,-280 # e0003c04 <base_log_internal_core.global_log_counter>
e0000d24:              0004d603                 lhu     a2,0(s1)
e0000d28:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e0000d2a:              00001517                 auipc   a0,0x1
e0000d2e:              c3a50513                 addi    a0,a0,-966 # e0001964 <rom_printf.kHexTable+0xa0>
e0000d32:              208d                     jal     e0000d94 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
e0000d34:              00049503                 lh      a0,0(s1)
e0000d38:              0505                     addi    a0,a0,1
e0000d3a:              00a49023                 sh      a0,0(s1)
e0000d3e:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
e0000d40:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
e0000d42:              4808                     lw      a0,16(s0)
e0000d44:              084c                     addi    a1,sp,20
e0000d46:              2041                     jal     e0000dc6 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
e0000d48:              00001517                 auipc   a0,0x1
e0000d4c:              a1d50513                 addi    a0,a0,-1507 # e0001765 <memrchr+0x18b>
e0000d50:              2091                     jal     e0000d94 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
e0000d52:              4492                     lw      s1,4(sp)
e0000d54:              4422                     lw      s0,8(sp)
e0000d56:              40b2                     lw      ra,12(sp)
e0000d58:              6145                     addi    sp,sp,48
e0000d5a:              8082                     ret

e0000d5c <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
e0000d5c:              1101                     addi    sp,sp,-32
e0000d5e:              ce46                     sw      a7,28(sp)
e0000d60:              cc42                     sw      a6,24(sp)
e0000d62:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
e0000d64:              00001797                 auipc   a5,0x1
e0000d68:              ec478793                 addi    a5,a5,-316 # e0001c28 <kDeviceLogBypassUartAddress>
e0000d6c:              439c                     lw      a5,0(a5)
e0000d6e:              c83a                     sw      a4,16(sp)
e0000d70:              c636                     sw      a3,12(sp)
e0000d72:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000d74:              c388                     sw      a0,0(a5)
e0000d76:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
e0000d78:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e0000d7a:       /----- c989                     beqz    a1,e0000d8c <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
e0000d7c:       |  /-> 4512                     lw      a0,4(sp)
e0000d7e:       |  |   00450613                 addi    a2,a0,4
e0000d82:       |  |   c232                     sw      a2,4(sp)
e0000d84:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e0000d86:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000d88:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
e0000d8a:       |  \-- f9ed                     bnez    a1,e0000d7c <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
e0000d8c:       \----> 6105                     addi    sp,sp,32
e0000d8e:              8082                     ret

e0000d90 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
e0000d90:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
e0000d92:       8082                    ret

e0000d94 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84
void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}

size_t base_printf(const char *format, ...) {
e0000d94:       7179                    addi    sp,sp,-48
e0000d96:       c606                    sw      ra,12(sp)
e0000d98:       d646                    sw      a7,44(sp)
e0000d9a:       d442                    sw      a6,40(sp)
e0000d9c:       d23e                    sw      a5,36(sp)
e0000d9e:       d03a                    sw      a4,32(sp)
e0000da0:       ce36                    sw      a3,28(sp)
e0000da2:       cc32                    sw      a2,24(sp)
e0000da4:       ca2e                    sw      a1,20(sp)
e0000da6:       00003597                auipc   a1,0x3
e0000daa:       e6258593                addi    a1,a1,-414 # e0003c08 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
e0000dae:       4190                    lw      a2,0(a1)
e0000db0:       41cc                    lw      a1,4(a1)
e0000db2:       872a                    mv      a4,a0
e0000db4:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
e0000db6:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000db8:       0854                    addi    a3,sp,20
e0000dba:       8532                    mv      a0,a2
e0000dbc:       863a                    mv      a2,a4
e0000dbe:       200d                    jal     e0000de0 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
e0000dc0:       40b2                    lw      ra,12(sp)
e0000dc2:       6145                    addi    sp,sp,48
e0000dc4:       8082                    ret

e0000dc6 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
e0000dc6:       00003697                auipc   a3,0x3
e0000dca:       e4268693                addi    a3,a3,-446 # e0003c08 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000dce:       4290                    lw      a2,0(a3)
e0000dd0:       42d4                    lw      a3,4(a3)
e0000dd2:       872e                    mv      a4,a1
e0000dd4:       87aa                    mv      a5,a0
e0000dd6:       8532                    mv      a0,a2
e0000dd8:       85b6                    mv      a1,a3
e0000dda:       863e                    mv      a2,a5
e0000ddc:       86ba                    mv      a3,a4
e0000dde:       a009                    j       e0000de0 <base_vfprintf>

e0000de0 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
e0000de0:                                                                    715d                       addi    sp,sp,-80
e0000de2:                                                                    c686                       sw      ra,76(sp)
e0000de4:                                                                    c4a2                       sw      s0,72(sp)
e0000de6:                                                                    c2a6                       sw      s1,68(sp)
e0000de8:                                                                    c0ca                       sw      s2,64(sp)
e0000dea:                                                                    de4e                       sw      s3,60(sp)
e0000dec:                                                                    dc52                       sw      s4,56(sp)
e0000dee:                                                                    da56                       sw      s5,52(sp)
e0000df0:                                                                    d85a                       sw      s6,48(sp)
e0000df2:                                                                    d65e                       sw      s7,44(sp)
e0000df4:                                                                    d462                       sw      s8,40(sp)
e0000df6:                                                                    d266                       sw      s9,36(sp)
e0000df8:                                                                    d06a                       sw      s10,32(sp)
e0000dfa:                                                                    ce6e                       sw      s11,28(sp)
e0000dfc:                                                                    8cb2                       mv      s9,a2
e0000dfe:                                                                    892a                       mv      s2,a0
e0000e00:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
e0000e02:                                                                /-- c199                       beqz    a1,e0000e08 <base_vfprintf+0x28>
e0000e04:                                                                |   89ae                       mv      s3,a1
e0000e06:                                                             /--|-- a029                       j       e0000e10 <base_vfprintf+0x30>
e0000e08:                                                             |  \-> 00000997           auipc   s3,0x0
e0000e0c:                                                             |      f8898993           addi    s3,s3,-120 # e0000d90 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
e0000e10:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
e0000e12:                                                                    000cc503           lbu     a0,0(s9)
e0000e16:       /----------------------------------------------------------- 42050563           beqz    a0,e0001240 <base_vfprintf+0x460>
e0000e1a:       |                                                            4a81                       li      s5,0
e0000e1c:       |                                                            02500c13           li      s8,37
e0000e20:       |                                                            4d25                       li      s10,9
e0000e22:       |                                                            4a29                       li      s4,10
e0000e24:       |                                                            658d                       lui     a1,0x3
e0000e26:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_min_stack+0xc22>
e0000e2a:       |                                                            c02e                       sw      a1,0(sp)
e0000e2c:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
e0000e2e:       |        |                                               /-> 0ff57413           andi    s0,a0,255
e0000e32:       |        |                                            /--|-- 01840963           beq     s0,s8,e0000e44 <base_vfprintf+0x64>
e0000e36:       |        |                                            +--|-- c419                       beqz    s0,e0000e44 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
e0000e38:       |        |                                            |  |   009c8533           add     a0,s9,s1
e0000e3c:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
e0000e40:       |        |                                            |  |   0485                       addi    s1,s1,1
e0000e42:       |        |                                            |  \-- b7f5                       j       e0000e2e <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
e0000e44:       |        |                                            \--/-X c491                       beqz    s1,e0000e50 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
e0000e46:       |        |                                               |   854a                       mv      a0,s2
e0000e48:       |        |                                               |   85e6                       mv      a1,s9
e0000e4a:       |        |                                               |   8626                       mv      a2,s1
e0000e4c:       |        |                                               |   9982                       jalr    s3
e0000e4e:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
e0000e50:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,e0001242 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
e0000e54:       |  |     |                                                   009c8533           add     a0,s9,s1
e0000e58:       |  |     |                                                   00154603           lbu     a2,1(a0)
e0000e5c:       |  |     |                                                   02100713           li      a4,33
e0000e60:       |  |     |                                            /----- 00e61863           bne     a2,a4,e0000e70 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000e64:       |  |     |                                            |      00254583           lbu     a1,2(a0)
e0000e68:       |  |     |                                            |      00250693           addi    a3,a0,2
e0000e6c:       |  |     |                                            |      4b05                       li      s6,1
e0000e6e:       |  |     |                                            |  /-- a029                       j       e0000e78 <base_vfprintf+0x98>
e0000e70:       |  |     |                                            \--|-> 4b01                       li      s6,0
e0000e72:       |  |     |                                               |   00150693           addi    a3,a0,1
e0000e76:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000e78:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,e000122e <base_vfprintf+0x44e>
e0000e7c:       |  |  |  |                                                   4481                       li      s1,0
e0000e7e:       |  |  |  |                                                   4b81                       li      s7,0
e0000e80:       |  |  |  |                                                   4501                       li      a0,0
e0000e82:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
e0000e86:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
e0000e8a:       |  |  |  |                                                   00168c93           addi    s9,a3,1
e0000e8e:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
e0000e92:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000e96:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
e0000e9a:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,e0000ed0 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
e0000e9e:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
e0000ea2:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,e0000eb8 <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
e0000ea4:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
e0000ea8:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
e0000eaa:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000eae:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000eb2:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
e0000eb4:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,e0000e8e <base_vfprintf+0xae>
e0000eb6:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       e000122e <base_vfprintf+0x44e>
e0000eb8:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
e0000ebc:       |  |  |  |                                   |     |  |      03000613           li      a2,48
e0000ec0:       |  |  |  |                                   |     |  |      02000513           li      a0,32
e0000ec4:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,e0000ea4 <base_vfprintf+0xc4>
e0000ec8:       |  |  |  |                                   |     |         03000513           li      a0,48
e0000ecc:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
e0000ece:       |  |  |  |                                   |     \-------- b7c5                       j       e0000eae <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
e0000ed0:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,e0000ed8 <base_vfprintf+0xf8>
e0000ed2:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,e0000ee0 <base_vfprintf+0x100>
e0000ed6:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       e0001262 <base_vfprintf+0x482>
e0000ed8:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
e0000edc:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,e0001262 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000ee0:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
e0000ee4:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,e0000f36 <base_vfprintf+0x156>
e0000ee8:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
e0000eea:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
e0000eee:       |  |  |  |  |                                         |      aa658593           addi    a1,a1,-1370 # e0001990 <rom_printf.kHexTable+0xcc>
e0000ef2:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
e0000ef4:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
e0000ef6:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
e0000ef8:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,e00011b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
e0000efc:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
e0000efe:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
e0000f02:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
e0000f04:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
e0000f08:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,e0000f20 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
e0000f0c:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
e0000f10:       |  |  |  |  |  |                                      |  |   b1b58593           addi    a1,a1,-1253 # e0001a27 <rom_printf.kHexTable+0x163>
e0000f14:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
e0000f16:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
e0000f18:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
e0000f1a:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
e0000f1c:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0000f20:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
e0000f24:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
e0000f28:       |  |  |  |  |  |                                      |      b1c80813           addi    a6,a6,-1252 # e0001a40 <kDigitsLow>
e0000f2c:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
e0000f2e:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
e0000f30:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
e0000f32:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
e0000f34:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       e000117c <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000f36:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
e0000f3a:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,e0000f74 <base_vfprintf+0x194>
e0000f3e:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,e00011b0 <base_vfprintf+0x3d0>
e0000f42:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,e00011b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
e0000f46:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
e0000f4a:       |  |  |  |  |  |        |                                |   adf58593           addi    a1,a1,-1313 # e0001a25 <rom_printf.kHexTable+0x161>
e0000f4e:       |  |  |  |  |  |        |                             /--|-- a851                       j       e0000fe2 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
e0000f50:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,e0000f74 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
e0000f54:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
e0000f56:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
e0000f5a:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0000f5c:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
e0000f5e:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
e0000f62:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0000f64:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000f66:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
e0000f6a:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
e0000f6e:       |  |  |  |  |  |        |                             |  |   b0388893           addi    a7,a7,-1277 # e0001a6d <kDigitsHigh>
e0000f72:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       e0001156 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
e0000f74:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
e0000f76:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
e0000f7a:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
e0000f7c:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
e0000f7e:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
e0000f82:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
e0000f86:       |  |  |  |  |  |        |           |                 |      aeb80813           addi    a6,a6,-1301 # e0001a6d <kDigitsHigh>
e0000f8a:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       e0001176 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
e0000f8c:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,e00011b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
e0000f90:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
e0000f92:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
e0000f96:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e0000f98:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
e0000f9a:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
e0000f9e:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e0000fa0:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000fa2:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
e0000fa6:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
e0000faa:       |  |  |  |  |  |        |        |  |                 |      ac788893           addi    a7,a7,-1337 # e0001a6d <kDigitsHigh>
e0000fae:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       e00011a4 <base_vfprintf+0x3c4>
e0000fb0:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
e0000fb2:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
e0000fb6:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
e0000fb8:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
e0000fba:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,e00011ca <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
e0000fbe:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,e0001222 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
e0000fc2:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
e0000fc6:       |  |  |  |  |  |  |     |  |  |  |  |                 |      a6a58593           addi    a1,a1,-1430 # e0001a2c <rom_printf.kHexTable+0x168>
e0000fca:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
e0000fcc:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       e00011ba <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
e0000fce:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,e00011b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
e0000fd2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
e0000fd4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
e0000fd8:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
e0000fda:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
e0000fdc:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
e0000fe0:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
e0000fe2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
e0000fe4:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       e00011ba <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
e0000fe6:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,e00011b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
e0000fea:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
e0000fec:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
e0000ff0:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
e0000ff2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
e0000ff4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
e0000ff8:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
e0000ffc:       |  |  |  |  |  |  |  |  |  |  |  |  |                        a4880813           addi    a6,a6,-1464 # e0001a40 <kDigitsLow>
e0001000:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
e0001002:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       e0001178 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
e0001004:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,e00011b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0001008:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
e000100c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     a2158593           addi    a1,a1,-1503 # e0001a29 <rom_printf.kHexTable+0x165>
e0001010:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
e0001012:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0001014:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
e0001016:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
e0001018:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
e000101c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
e000101e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0001020:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
e0001024:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
e0001028:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     a1c80813           addi    a6,a6,-1508 # e0001a40 <kDigitsLow>
e000102c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
e000102e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
e0001032:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
e0001034:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0001036:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
e0001038:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     e0001352 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
e000103a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
e000103e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       e00011c0 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
e0001040:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
e0001042:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
e0001046:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
e0001048:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
e000104a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
e000104c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
e0001050:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
e0001054:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0001056:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
e0001058:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
e000105a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
e000105e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     e00013d0 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
e0001060:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0001062:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0001064:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
e0001068:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
e000106c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e000106e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
e0001070:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,e0001068 <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0001072:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
e0001076:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e000107a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9c158593           addi    a1,a1,-1599 # e0001a37 <rom_printf.kHexTable+0x173>
e000107e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0001080:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e0001082:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0001084:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e0001086:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
e000108a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e000108c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e000108e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
e0001092:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0001096:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9a658593           addi    a1,a1,-1626 # e0001a38 <rom_printf.kHexTable+0x174>
e000109a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e000109c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
e000109e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00010a0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
e00010a2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e00010a6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  97a58593           addi    a1,a1,-1670 # e0001a1c <rom_printf.kHexTable+0x158>
e00010aa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
e00010ac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00010ae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00010b0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
e00010b4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,e00011da <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
e00010b8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e00010bc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               98258593           addi    a1,a1,-1662 # e0001a3a <rom_printf.kHexTable+0x176>
e00010c0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e00010c2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00010c4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e00010c6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e00010ca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
e00010cc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
e00010ce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00010d0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00010d2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e00010d4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00010d6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
e00010da:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               96a80813           addi    a6,a6,-1686 # e0001a40 <kDigitsLow>
e00010de:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
e00010e0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00010e2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
e00010e4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
e00010e6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
e00010e8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     e0001352 <write_digits>
e00010ea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
e00010ec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e00010f0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               95058593           addi    a1,a1,-1712 # e0001a3c <rom_printf.kHexTable+0x178>
e00010f4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e00010f6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00010f8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e00010fa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
e00010fc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       e00011f4 <base_vfprintf+0x414>
e00010fe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
e0001100:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
e0001104:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
e0001106:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,e000120c <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
e000110a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e000110c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
e0001110:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0001112:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
e0001114:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       e00011ba <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
e0001116:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,e00011b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
e000111a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
e000111c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
e0001120:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0001122:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0001124:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
e0001128:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
e000112c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         91880813           addi    a6,a6,-1768 # e0001a40 <kDigitsLow>
e0001130:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
e0001132:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       e0001178 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
e0001134:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,e0001160 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
e0001138:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
e000113a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
e000113e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0001140:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
e0001142:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
e0001146:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0001148:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e000114a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
e000114e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
e0001152:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   8f288893           addi    a7,a7,-1806 # e0001a40 <kDigitsLow>
e0001156:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
e0001158:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
e000115a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
e000115c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
e000115e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       e00011ac <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
e0001160:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
e0001162:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
e0001166:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
e0001168:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
e000116a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
e000116e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
e0001172:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      8d280813           addi    a6,a6,-1838 # e0001a40 <kDigitsLow>
e0001176:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
e0001178:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
e000117a:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
e000117c:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
e000117e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     e0001352 <write_digits>
e0001180:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       e00011be <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
e0001182:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,e00011b0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
e0001186:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
e0001188:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
e000118c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e000118e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
e0001190:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
e0001194:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e0001196:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0001198:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
e000119c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
e00011a0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   8a488893           addi    a7,a7,-1884 # e0001a40 <kDigitsLow>
e00011a4:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
e00011a6:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
e00011a8:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
e00011aa:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
e00011ac:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     e000126e <hex_dump>
e00011ae:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       e00011be <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
e00011b0:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
e00011b4:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   8cd58593           addi    a1,a1,-1843 # e0001a7d <kUnknownSpec>
e00011b8:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
e00011ba:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
e00011bc:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
e00011be:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
e00011c0:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
e00011c4:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,e0000e2c <base_vfprintf+0x4c>
e00011c8:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       e0001242 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
e00011ca:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
e00011ce:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
e00011d2:       |  |  |     |     |  |                 |  |  |  |  |         87280813           addi    a6,a6,-1934 # e0001a40 <kDigitsLow>
e00011d6:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
e00011d8:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       e0001178 <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00011da:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
e00011dc:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
e00011e0:       |  |  |     |     |  |                    |     |  |         86480813           addi    a6,a6,-1948 # e0001a40 <kDigitsLow>
e00011e4:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
e00011e6:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
e00011e8:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
e00011ea:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
e00011ec:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
e00011ee:       |  |  |     |     |  |                    |     |  |         2295                       jal     e0001352 <write_digits>
e00011f0:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
e00011f4:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
e00011f8:       |  |  |     |     |  |                    |     |            84a58593           addi    a1,a1,-1974 # e0001a3e <rom_printf.kHexTable+0x17a>
e00011fc:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
e00011fe:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
e0001200:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
e0001202:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
e0001206:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
e000120a:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       e00011c0 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e000120c:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
e000120e:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0001210:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
e0001214:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
e0001218:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e000121a:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,e0001210 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
e000121c:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
e0001220:       |  |  |     |     |  +-------------------------------------- bf69                       j       e00011ba <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
e0001222:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
e0001226:       |  |  |     |        |                                       80f58593           addi    a1,a1,-2033 # e0001a31 <rom_printf.kHexTable+0x16d>
e000122a:       |  |  |     |        |                                       4615                       li      a2,5
e000122c:       |  |  |     |        \-------------------------------------- b779                       j       e00011ba <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
e000122e:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
e0001232:       |  |        |                                                82258593           addi    a1,a1,-2014 # e0001a50 <kErrorNul>
e0001236:       |  |        |                                                4645                       li      a2,17
e0001238:       |  |        |                                            /-> 854a                       mv      a0,s2
e000123a:       |  |        |                                            |   9982                       jalr    s3
e000123c:       |  |        |                                            |   9aaa                       add     s5,s5,a0
e000123e:       |  +--------|--------------------------------------------|-- a011                       j       e0001242 <base_vfprintf+0x462>
e0001240:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
e0001242:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
e0001244:                   |                                            |   4df2                       lw      s11,28(sp)
e0001246:                   |                                            |   5d02                       lw      s10,32(sp)
e0001248:                   |                                            |   5c92                       lw      s9,36(sp)
e000124a:                   |                                            |   5c22                       lw      s8,40(sp)
e000124c:                   |                                            |   5bb2                       lw      s7,44(sp)
e000124e:                   |                                            |   5b42                       lw      s6,48(sp)
e0001250:                   |                                            |   5ad2                       lw      s5,52(sp)
e0001252:                   |                                            |   5a62                       lw      s4,56(sp)
e0001254:                   |                                            |   59f2                       lw      s3,60(sp)
e0001256:                   |                                            |   4906                       lw      s2,64(sp)
e0001258:                   |                                            |   4496                       lw      s1,68(sp)
e000125a:                   |                                            |   4426                       lw      s0,72(sp)
e000125c:                   |                                            |   40b6                       lw      ra,76(sp)
e000125e:                   |                                            |   6161                       addi    sp,sp,80
e0001260:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
e0001262:                   \--------------------------------------------|-> 00000597           auipc   a1,0x0
e0001266:                                                                |   7ff58593           addi    a1,a1,2047 # e0001a61 <kErrorTooWide>
e000126a:                                                                |   4631                       li      a2,12
e000126c:                                                                \-- b7f1                       j       e0001238 <base_vfprintf+0x458>

e000126e <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
e000126e:                    715d                       addi    sp,sp,-80
e0001270:                    c686                       sw      ra,76(sp)
e0001272:                    c4a2                       sw      s0,72(sp)
e0001274:                    c2a6                       sw      s1,68(sp)
e0001276:                    c0ca                       sw      s2,64(sp)
e0001278:                    de4e                       sw      s3,60(sp)
e000127a:                    dc52                       sw      s4,56(sp)
e000127c:                    da56                       sw      s5,52(sp)
e000127e:                    d85a                       sw      s6,48(sp)
e0001280:                    d65e                       sw      s7,44(sp)
e0001282:                    d462                       sw      s8,40(sp)
e0001284:                    d266                       sw      s9,36(sp)
e0001286:                    d06a                       sw      s10,32(sp)
e0001288:                    8bc6                       mv      s7,a7
e000128a:                    8a42                       mv      s4,a6
e000128c:                    8b36                       mv      s6,a3
e000128e:                    8ab2                       mv      s5,a2
e0001290:                    892e                       mv      s2,a1
e0001292:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
e0001294:          /-------- 02e6fc63           bgeu    a3,a4,e00012cc <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
e0001298:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
e000129c:          |         850a                       mv      a0,sp
e000129e:          |         02000613           li      a2,32
e00012a2:          |         85be                       mv      a1,a5
e00012a4:          |         241d                       jal     e00014ca <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e00012a6:          +-------- c09d                       beqz    s1,e00012cc <hex_dump+0x5e>
e00012a8:          |         4c01                       li      s8,0
e00012aa:          |  /----> 02000513           li      a0,32
e00012ae:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
e00012b0:          |  |  /-- 00a4e463           bltu    s1,a0,e00012b8 <hex_dump+0x4a>
e00012b4:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00012b8:          |  |  \-> 858a                       mv      a1,sp
e00012ba:          |  |      854e                       mv      a0,s3
e00012bc:          |  |      8622                       mv      a2,s0
e00012be:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
e00012c0:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00012c2:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e00012c4:          |  \----- f0fd                       bnez    s1,e00012aa <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e00012c6:          |     /-- 000b1663           bnez    s6,e00012d2 <hex_dump+0x64>
e00012ca:       /--|-----|-- a0ad                       j       e0001334 <hex_dump+0xc6>
e00012cc:       |  \-----|-> 4c01                       li      s8,0
e00012ce:       +--------|-- 060b0363           beqz    s6,e0001334 <hex_dump+0xc6>
e00012d2:       |        \-> 4401                       li      s0,0
e00012d4:       |            4601                       li      a2,0
e00012d6:       |            fffb0493           addi    s1,s6,-1
e00012da:       |            8b0a                       mv      s6,sp
e00012dc:       |            02000c93           li      s9,32
e00012e0:       |            5d7d                       li      s10,-1
e00012e2:       |     /----> 8526                       mv      a0,s1
e00012e4:       |     |  /-- 000a1363           bnez    s4,e00012ea <hex_dump+0x7c>
e00012e8:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
e00012ea:       |     |  \-> 9556                       add     a0,a0,s5
e00012ec:       |     |      00054503           lbu     a0,0(a0)
e00012f0:       |     |      00455593           srli    a1,a0,0x4
e00012f4:       |     |      95de                       add     a1,a1,s7
e00012f6:       |     |      00058583           lb      a1,0(a1)
e00012fa:       |     |      00cb06b3           add     a3,s6,a2
e00012fe:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e0001302:       |     |      893d                       andi    a0,a0,15
e0001304:       |     |      955e                       add     a0,a0,s7
e0001306:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
e000130a:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e000130c:       |     |      00a680a3           sb      a0,1(a3)
e0001310:       |     |  /-- 01961963           bne     a2,s9,e0001322 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
e0001314:       |     |  |   858a                       mv      a1,sp
e0001316:       |     |  |   02000613           li      a2,32
e000131a:       |     |  |   854e                       mv      a0,s3
e000131c:       |     |  |   9902                       jalr    s2
e000131e:       |     |  |   4601                       li      a2,0
e0001320:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0001322:       |     |  \-> 14fd                       addi    s1,s1,-1
e0001324:       |     |      0405                       addi    s0,s0,1
e0001326:       |     \----- fba49ee3           bne     s1,s10,e00012e2 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
e000132a:       +----------- c609                       beqz    a2,e0001334 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
e000132c:       |            858a                       mv      a1,sp
e000132e:       |            854e                       mv      a0,s3
e0001330:       |            9902                       jalr    s2
e0001332:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
e0001334:       \----------> 8562                       mv      a0,s8
e0001336:                    5d02                       lw      s10,32(sp)
e0001338:                    5c92                       lw      s9,36(sp)
e000133a:                    5c22                       lw      s8,40(sp)
e000133c:                    5bb2                       lw      s7,44(sp)
e000133e:                    5b42                       lw      s6,48(sp)
e0001340:                    5ad2                       lw      s5,52(sp)
e0001342:                    5a62                       lw      s4,56(sp)
e0001344:                    59f2                       lw      s3,60(sp)
e0001346:                    4906                       lw      s2,64(sp)
e0001348:                    4496                       lw      s1,68(sp)
e000134a:                    4426                       lw      s0,72(sp)
e000134c:                    40b6                       lw      ra,76(sp)
e000134e:                    6161                       addi    sp,sp,80
e0001350:                    8082                       ret

e0001352 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
e0001352:              7179                     addi    sp,sp,-48
e0001354:              d606                     sw      ra,44(sp)
e0001356:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
e0001358:       /----- ca05                     beqz    a2,e0001388 <write_digits+0x36>
e000135a:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e000135c:       |      02b10293                 addi    t0,sp,43
e0001360:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
e0001362:       |  |   02f65633                 divu    a2,a2,a5
e0001366:       |  |   02f605b3                 mul     a1,a2,a5
e000136a:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
e000136e:       |  |   95c2                     add     a1,a1,a6
e0001370:       |  |   00058e03                 lb      t3,0(a1)
e0001374:       |  |   007285b3                 add     a1,t0,t2
e0001378:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e000137c:       |  |   13fd                     addi    t2,t2,-1
e000137e:       |  \-- fef371e3                 bgeu    t1,a5,e0001360 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e0001382:       |      40700633                 neg     a2,t2
e0001386:       |  /-- a031                     j       e0001392 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
e0001388:       \--|-> 00080583                 lb      a1,0(a6)
e000138c:          |   02b105a3                 sb      a1,43(sp)
e0001390:          |   4605                     li      a2,1
e0001392:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e0001394:          /-- c291                     beqz    a3,e0001398 <write_digits+0x46>
e0001396:          |   85b6                     mv      a1,a3
e0001398:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
e000139c:          /-- 00d5e463                 bltu    a1,a3,e00013a4 <write_digits+0x52>
e00013a0:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00013a4:       /--\-X 00b67e63                 bgeu    a2,a1,e00013c0 <write_digits+0x6e>
e00013a8:       |      40c586b3                 sub     a3,a1,a2
e00013ac:       |      007c                     addi    a5,sp,12
e00013ae:       |      40c78633                 sub     a2,a5,a2
e00013b2:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
e00013b4:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00013b8:       |  |   16fd                     addi    a3,a3,-1
e00013ba:       |  |   167d                     addi    a2,a2,-1
e00013bc:       |  \-- fee5                     bnez    a3,e00013b4 <write_digits+0x62>
e00013be:       |      862e                     mv      a2,a1
e00013c0:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
e00013c2:              8d91                     sub     a1,a1,a2
e00013c4:              02058593                 addi    a1,a1,32
e00013c8:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
e00013ca:              50b2                     lw      ra,44(sp)
e00013cc:              6145                     addi    sp,sp,48
e00013ce:              8082                     ret

e00013d0 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
e00013d0:              00052813                 slti    a6,a0,0
e00013d4:              41f55793                 srai    a5,a0,0x1f
e00013d8:              8fe9                     and     a5,a5,a0
e00013da:              8bfd                     andi    a5,a5,31
e00013dc:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
e00013e0:              00e87833                 and     a6,a6,a4
e00013e4:              02000713                 li      a4,32
e00013e8:          /-- 00081363                 bnez    a6,e00013ee <status_extract+0x1e>
e00013ec:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
e00013ee:          \-> 00271813                 slli    a6,a4,0x2
e00013f2:              00001797                 auipc   a5,0x1
e00013f6:              83a78793                 addi    a5,a5,-1990 # e0001c2c <status_codes>
e00013fa:              97c2                     add     a5,a5,a6
e00013fc:              439c                     lw      a5,0(a5)
e00013fe:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
e0001400:              00173593                 seqz    a1,a4
e0001404:       /----- cb1d                     beqz    a4,e000143a <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0001406:       |      00555713                 srli    a4,a0,0x5
e000140a:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
e000140e:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0001410:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
e0001414:       |      8a7d                     andi    a2,a2,31
e0001416:       |      04066613                 ori     a2,a2,64
e000141a:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
e000141e:       |      01555613                 srli    a2,a0,0x15
e0001422:       |      8a7d                     andi    a2,a2,31
e0001424:       |      04066613                 ori     a2,a2,64
e0001428:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
e000142c:       |      8169                     srli    a0,a0,0x1a
e000142e:       |      897d                     andi    a0,a0,31
e0001430:       |      04056513                 ori     a0,a0,64
e0001434:       |      00a68123                 sb      a0,2(a3)
e0001438:       |  /-- a011                     j       e000143c <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
e000143a:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
e000143c:          \-> 0015c513                 xori    a0,a1,1
e0001440:              8082                     ret

e0001442 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
e0001442:                       00153693                seqz    a3,a0
e0001446:                       0015b713                seqz    a4,a1
e000144a:                       8ed9                    or      a3,a3,a4
e000144c:       /-------------- eab5                    bnez    a3,e00014c0 <memcpy+0x7e>
e000144e:       |               4711                    li      a4,4
e0001450:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001452:       |        /----- 00e66c63                bltu    a2,a4,e000146a <memcpy+0x28>
e0001456:       |        |      00a5c6b3                xor     a3,a1,a0
e000145a:       |        |      0036f793                andi    a5,a3,3
e000145e:       |        |      8832                    mv      a6,a2
e0001460:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
e0001462:       |        |  /-- eb91                    bnez    a5,e0001476 <memcpy+0x34>
e0001464:       |        |  |   40a006b3                neg     a3,a0
e0001468:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e000146a:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e000146e:       |           |   9b71                    andi    a4,a4,-4
e0001470:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001474:       |  /--------|-- c6b9                    beqz    a3,e00014c2 <memcpy+0x80>
e0001476:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0001478:       |  |        /-> 00f58733                add     a4,a1,a5
e000147c:       |  |        |   00070883                lb      a7,0(a4)
e0001480:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e0001484:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0001486:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e000148a:       |  |        \-- fef697e3                bne     a3,a5,e0001478 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e000148e:       |  |  /-------- 0106fb63                bgeu    a3,a6,e00014a4 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001492:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001496:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001498:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e000149c:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e000149e:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e00014a0:       |  |  |  +----- ff06e9e3                bltu    a3,a6,e0001492 <memcpy+0x50>
e00014a4:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,e00014c0 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
e00014a8:       |  |  |  |      8e15                    sub     a2,a2,a3
e00014aa:       |  |  |  |      00d50733                add     a4,a0,a3
e00014ae:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
e00014b0:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
e00014b4:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
e00014b8:       |  |  |  |  |   167d                    addi    a2,a2,-1
e00014ba:       |  |  |  |  |   0705                    addi    a4,a4,1
e00014bc:       |  |  |  |  |   0585                    addi    a1,a1,1
e00014be:       |  |  |  |  \-- fa6d                    bnez    a2,e00014b0 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
e00014c0:       \--|--|--|----> 8082                    ret
e00014c2:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00014c4:             |  \----- fd06e7e3                bltu    a3,a6,e0001492 <memcpy+0x50>
e00014c8:             \-------- bff1                    j       e00014a4 <memcpy+0x62>

e00014ca <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
e00014ca:                 4691                  li      a3,4
e00014cc:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e00014ce:             /-- 00d66663              bltu    a2,a3,e00014da <memset+0x10>
e00014d2:             |   40a006b3              neg     a3,a0
e00014d6:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e00014da:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e00014de:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e00014e2:          /----- cb01                  beqz    a4,e00014f2 <memset+0x28>
e00014e4:          |      87aa                  mv      a5,a0
e00014e6:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
e00014e8:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
e00014ec:          |  |   16fd                  addi    a3,a3,-1
e00014ee:          |  |   0785                  addi    a5,a5,1
e00014f0:          |  \-- fee5                  bnez    a3,e00014e8 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00014f2:       /--\----X 02080263              beqz    a6,e0001516 <memset+0x4c>
e00014f6:       |         00e808b3              add     a7,a6,a4
e00014fa:       |         0ff5f813              andi    a6,a1,255
e00014fe:       |         010107b7              lui     a5,0x1010
e0001502:       |         10178793              addi    a5,a5,257 # 1010101 <tohost+0xff00f9>
e0001506:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000150a:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e000150e:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001510:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e0001512:       |     \-- ff176ce3              bltu    a4,a7,e000150a <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
e0001516:       \--/----X 00c77a63              bgeu    a4,a2,e000152a <memset+0x60>
e000151a:          |      8e19                  sub     a2,a2,a4
e000151c:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
e0001520:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
e0001524:          |  |   167d                  addi    a2,a2,-1
e0001526:          |  |   0685                  addi    a3,a3,1
e0001528:          |  \-- fe65                  bnez    a2,e0001520 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
e000152a:          \----> 8082                  ret

e000152c <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
e000152c:                             4691                      li      a3,4
e000152e:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001530:                         /-- 00d66663                  bltu    a2,a3,e000153c <memchr+0x10>
e0001534:                         |   40a006b3                  neg     a3,a0
e0001538:                         |   0036fe93                  andi    t4,a3,3
e000153c:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001540:                      /----- 000e8b63                  beqz    t4,e0001556 <memchr+0x2a>
e0001544:                      |      85aa                      mv      a1,a0
e0001546:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
e0001548:                      |  /-> 0005c683                  lbu     a3,0(a1)
e000154c:       /--------------|--|-- 09c68563                  beq     a3,t3,e00015d6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
e0001550:       |              |  |   17fd                      addi    a5,a5,-1
e0001552:       |              |  |   0585                      addi    a1,a1,1
e0001554:       |              |  \-- fbf5                      bnez    a5,e0001548 <memchr+0x1c>
e0001556:       |              \----> 41d605b3                  sub     a1,a2,t4
e000155a:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e000155c:       |  /----------------- c9a9                      beqz    a1,e00015ae <memchr+0x82>
e000155e:       |  |                  01d58833                  add     a6,a1,t4
e0001562:       |  |                  010105b7                  lui     a1,0x1010
e0001566:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
e000156a:       |  |                  02be02b3                  mul     t0,t3,a1
e000156e:       |  |                  0ff00893                  li      a7,255
e0001572:       |  |                  65c1                      lui     a1,0x10
e0001574:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_stack_len+0x7f00>
e0001578:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000157c:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001580:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
e0001582:       |  |              |   0056c7b3                  xor     a5,a3,t0
e0001586:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e000158a:       |  |              |   0ff6f713                  andi    a4,a3,255
e000158e:       +--|--------------|-- 05170463                  beq     a4,a7,e00015d6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e0001592:       |  |              |   0076f733                  and     a4,a3,t2
e0001596:       |  |  /-----------|-- 02770b63                  beq     a4,t2,e00015cc <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e000159a:       |  |  |           |   0066f6b3                  and     a3,a3,t1
e000159e:       |  |  |  /--------|-- 02668963                  beq     a3,t1,e00015d0 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e00015a2:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
e00015a6:       |  |  |  |  /-----|-- c69d                      beqz    a3,e00015d4 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00015a8:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
e00015aa:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,e000157c <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
e00015ae:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,e00015c8 <memchr+0x9c>
e00015b2:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
e00015b6:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
e00015ba:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
e00015be:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,e00015d6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
e00015c2:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
e00015c4:       |     |  |  |  |  |   0585                      addi    a1,a1,1
e00015c6:       |     |  |  |  |  \-- fa75                      bnez    a2,e00015ba <memchr+0x8e>
e00015c8:       |     |  |  |  \----> 4581                      li      a1,0
e00015ca:       +-----|--|--|-------- a031                      j       e00015d6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
e00015cc:       |     \--|--|-------> 0585                      addi    a1,a1,1
e00015ce:       +--------|--|-------- a021                      j       e00015d6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
e00015d0:       |        \--|-------> 0589                      addi    a1,a1,2
e00015d2:       +-----------|-------- a011                      j       e00015d6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
e00015d4:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e00015d6:       \-------------------> 852e                      mv      a0,a1
e00015d8:                             8082                      ret

e00015da <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
e00015da:                          4691                 li      a3,4
e00015dc:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e00015de:                      /-- 00d66663             bltu    a2,a3,e00015ea <memrchr+0x10>
e00015e2:                      |   40a006b3             neg     a3,a0
e00015e6:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e00015ea:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e00015ee:                          9af1                 andi    a3,a3,-4
e00015f0:                          006687b3             add     a5,a3,t1
e00015f4:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
e00015f6:                      /-- 00f66363             bltu    a2,a5,e00015fc <memrchr+0x22>
e00015fa:                      |   86be                 mv      a3,a5
e00015fc:                      \-> 0ff5f393             andi    t2,a1,255
e0001600:                   /--/-X 00c7fd63             bgeu    a5,a2,e000161a <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
e0001604:                   |  |   00c50733             add     a4,a0,a2
e0001608:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
e000160c:                   |  |   fff60713             addi    a4,a2,-1
e0001610:                   |  |   863a                 mv      a2,a4
e0001612:                   |  \-- fe7597e3             bne     a1,t2,e0001600 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e0001616:                   |      953a                 add     a0,a0,a4
e0001618:                   |      8082                 ret
e000161a:                   \----> 010105b7             lui     a1,0x1010
e000161e:                          10158593             addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
e0001622:                          02b382b3             mul     t0,t2,a1
e0001626:                          00ff0837             lui     a6,0xff0
e000162a:                          65c1                 lui     a1,0x10
e000162c:                          f0058793             addi    a5,a1,-256 # ff00 <_stack_len+0x7f00>
e0001630:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
e0001634:       /--------------/-X 04d37563             bgeu    t1,a3,e000167e <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001638:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e000163c:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
e0001640:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001644:       |              |   01875593             srli    a1,a4,0x18
e0001648:       |  /-----------|-- cd95                 beqz    a1,e0001684 <memrchr+0xaa>
e000164a:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e000164e:       |  |           |   010775b3             and     a1,a4,a6
e0001652:       |  |  /--------|-- 03058c63             beq     a1,a6,e000168a <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e0001656:       |  |  |        |   00f775b3             and     a1,a4,a5
e000165a:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,e0001690 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e000165e:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
e0001662:       |  |  |  |     |   16f1                 addi    a3,a3,-4
e0001664:       |  |  |  |     \-- fd1598e3             bne     a1,a7,e0001634 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001668:       |  |  |  |         9536                 add     a0,a0,a3
e000166a:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
e000166c:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
e0001670:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
e0001674:       |  |  |  |     |   fff68613             addi    a2,a3,-1
e0001678:       |  |  |  |     |   86b2                 mv      a3,a2
e000167a:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,e0001696 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
e000167e:       \--|--|--|--|--\-X f6fd                 bnez    a3,e000166c <memrchr+0x92>
e0001680:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001682:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
e0001684:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001688:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
e000168a:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e000168e:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
e0001690:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001694:                   |      8082                 ret
e0001696:                   \----> 9532                 add     a0,a0,a2
e0001698:                          8082                 ret
