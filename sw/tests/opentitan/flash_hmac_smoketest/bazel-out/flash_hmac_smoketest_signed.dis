
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest_prog_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest_prog_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xf0000480

Program Header:
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x00001fc8 flags rw-
    LOAD off    0x00001000 vaddr 0xf0000000 paddr 0xf0000000 align 2**12
         filesz 0x000061cc memsz 0x000061cc flags rwx
    LOAD off    0x00007fc8 vaddr 0xe0001fc8 paddr 0xf00061cc align 2**12
         filesz 0x000000a4 memsz 0x00000224 flags rw-
    LOAD off    0x000001ec vaddr 0xe00021ec paddr 0xf0006270 align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0xf0079000 paddr 0xf0079000 align 2**12
         filesz 0x00000000 memsz 0x00007000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                     Size      VMA       LMA       File off  Algn  Flags
  0 .manifest                00000400  f0000000  f0000000  00001000  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .vectors                 00000080  f0000400  f0000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .crt                     000000c6  f0000480  f0000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array              00000000  f0000548  f0000548  0000806c  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .text                    00003f00  f0000548  f0000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .shutdown                00000000  f0004448  f0004448  0000806c  2**2  CONTENTS
  6 .rodata                  00001d84  f0004448  f0004448  00005448  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .static_critical         00001fc8  e0000000  e0000000  00001000  2**2  ALLOC
  8 .data                    000000a4  e0001fc8  f00061cc  00007fc8  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss                     00000180  e000206c  f0006270  0000806c  2**2  ALLOC
 10 .freertos.heap           00008000  e00021ec  f0006270  000081ec  2**2  ALLOC
 11 .non_volatile_scratch    00005000  f007b000  f007b000  00009000  2**11  ALLOC
 12 .non_volatile_counter_0  00000800  f007a800  f007a800  00009000  2**11  ALLOC
 13 .non_volatile_counter_1  00000800  f007a000  f007a000  00009000  2**11  ALLOC
 14 .non_volatile_counter_2  00000800  f0079800  f0079800  00009000  2**11  ALLOC
 15 .non_volatile_counter_3  00000800  f0079000  f0079000  00009000  2**11  ALLOC
 16 .logs.fields             000004b0  00010000  00010000  0000806c  2**2  CONTENTS, READONLY
 17 .riscv.attributes        00000042  00000000  00000000  0000851c  2**0  CONTENTS, READONLY
 18 .debug_info              0001479f  00000000  00000000  0000855e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev            00003732  00000000  00000000  0001ccfd  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges           00000088  00000000  00000000  0002042f  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line              0000d4df  00000000  00000000  000204b7  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc               0000dba5  00000000  00000000  0002d996  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges            00001350  00000000  00000000  0003b53b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str               00007f20  00000000  00000000  0003c88b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame             00001824  00000000  00000000  000447ac  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .ot.status_create_record 00000980  00000000  00000000  00045fd0  2**2  CONTENTS, READONLY
SYMBOL TABLE:
f0000000 l    d  .manifest      00000000 .manifest
f0000400 l    d  .vectors       00000000 .vectors
f0000480 l    d  .crt   00000000 .crt
f0000548 l    d  .init_array    00000000 .init_array
f0000548 l    d  .text  00000000 .text
f0004448 l    d  .shutdown      00000000 .shutdown
f0004448 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc8 l    d  .data  00000000 .data
e000206c l    d  .bss   00000000 .bss
e00021ec l    d  .freertos.heap 00000000 .freertos.heap
f007b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
f007a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
f007a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
f0079800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
f0079000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
00010000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .ot.status_create_record       00000000 .ot.status_create_record
00000000 l    df *ABS*  00000000 manifest_def.c
f0000000 l     O .manifest      00000400 kManifest_
00000000 l       .debug_str     00000000 
000056f1 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
0000571e l       .debug_str     00000000 
00005a04 l       .debug_str     00000000 
000059fb l       .debug_str     00000000 
00005729 l       .debug_str     00000000 
00005763 l       .debug_str     00000000 
00005825 l       .debug_str     00000000 
00005854 l       .debug_str     00000000 
00005860 l       .debug_str     00000000 
00005871 l       .debug_str     00000000 
00005885 l       .debug_str     00000000 
00005890 l       .debug_str     00000000 
000058b4 l       .debug_str     00000000 
00000689 l       .debug_str     00000000 
000058c6 l       .debug_str     00000000 
000058d4 l       .debug_str     00000000 
000058e2 l       .debug_str     00000000 
00005919 l       .debug_str     00000000 
0000593f l       .debug_str     00000000 
00005964 l       .debug_str     00000000 
00005974 l       .debug_str     00000000 
0000597f l       .debug_str     00000000 
00005988 l       .debug_str     00000000 
00005994 l       .debug_str     00000000 
0000574c l       .debug_str     00000000 
00005737 l       .debug_str     00000000 
000046f6 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000578f l       .debug_str     00000000 
00005773 l       .debug_str     00000000 
00005837 l       .debug_str     00000000 
0000581c l       .debug_str     00000000 
000057ad l       .debug_str     00000000 
000057c5 l       .debug_str     00000000 
000057e5 l       .debug_str     00000000 
000057f9 l       .debug_str     00000000 
0000580b l       .debug_str     00000000 
000057cf l       .debug_str     00000000 
000057bb l       .debug_str     00000000 
000058a1 l       .debug_str     00000000 
000058dc l       .debug_str     00000000 
000058ce l       .debug_str     00000000 
0000127d l       .debug_str     00000000 
0000126e l       .debug_str     00000000 
00005923 l       .debug_str     00000000 
00005910 l       .debug_str     00000000 
000058f3 l       .debug_str     00000000 
00005901 l       .debug_str     00000000 
0000594d l       .debug_str     00000000 
00005938 l       .debug_str     00000000 
000059e6 l       .debug_str     00000000 
000059d3 l       .debug_str     00000000 
00001058 l       .debug_str     00000000 
000059b8 l       .debug_str     00000000 
0000599f l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
00005a0f l       .debug_str     00000000 
00000ac0 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
f0000400 l       .vectors       00000000 
f0000400 l       .vectors       00000000 
f0000404 l       .vectors       00000000 
f0000408 l       .vectors       00000000 
f000040c l       .vectors       00000000 
f0000410 l       .vectors       00000000 
f0000414 l       .vectors       00000000 
f0000418 l       .vectors       00000000 
f000041c l       .vectors       00000000 
f0000420 l       .vectors       00000000 
f0000424 l       .vectors       00000000 
f0000428 l       .vectors       00000000 
f000042c l       .vectors       00000000 
f0000430 l       .vectors       00000000 
f0000434 l       .vectors       00000000 
f0000438 l       .vectors       00000000 
f000043c l       .vectors       00000000 
f0000440 l       .vectors       00000000 
f0000444 l       .vectors       00000000 
f0000448 l       .vectors       00000000 
f000044c l       .vectors       00000000 
f0000450 l       .vectors       00000000 
f0000454 l       .vectors       00000000 
f0000458 l       .vectors       00000000 
f000045c l       .vectors       00000000 
f0000460 l       .vectors       00000000 
f0000464 l       .vectors       00000000 
f0000468 l       .vectors       00000000 
f000046c l       .vectors       00000000 
f0000470 l       .vectors       00000000 
f0000474 l       .vectors       00000000 
f0000478 l       .vectors       00000000 
f000047c l       .vectors       00000000 
f0000480 l       .crt   00000000 
f0000480 l       .crt   00000000 
f0000488 l       .crt   00000000 
f0000490 l       .crt   00000000 
f0000498 l       .crt   00000000 
f000049c l       .crt   00000000 
f00004a4 l       .crt   00000000 
f00004a8 l       .crt   00000000 
f00004b0 l       .crt   00000000 
f00004b2 l       .crt   00000000 
f00004ba l       .crt   00000000 
f00004c2 l       .crt   00000000 
f00004c4 l       .crt   00000000 
f00004cc l       .crt   00000000 
f00004e4 l       .crt   00000000 init_array_loop_end
f00004d4 l       .crt   00000000 
f00004d8 l       .crt   00000000 init_array_loop
f00004d8 l       .crt   00000000 
f00004d8 l       .crt   00000000 
f00004dc l       .crt   00000000 
f00004de l       .crt   00000000 
f00004e0 l       .crt   00000000 
f00004e4 l       .crt   00000000 
f00004e4 l       .crt   00000000 
0000a20e l       .debug_info    00000000 
0000137e l       .debug_abbrev  00000000 
f0000480 l       .vectors       00000000 
f00004e8 l       .crt   00000000 
000009d8 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
f00004e8 l       .crt   00000000 
f00004e8 l       .crt   00000000 
f00004ec l       .crt   00000000 
f00004f0 l       .crt   00000000 
f00004f4 l       .crt   00000000 
f00004f8 l       .crt   00000000 
f00004fc l       .crt   00000000 
f00004fe l       .crt   00000000 
f0000502 l       .crt   00000000 
f0000504 l       .crt   00000000 
f0000508 l       .crt   00000000 
f000050a l       .crt   00000000 
f000050c l       .crt   00000000 
f000050c l       .crt   00000000 
f0000510 l       .crt   00000000 
f0000514 l       .crt   00000000 
f0000518 l       .crt   00000000 
f000051c l       .crt   00000000 
f0000520 l       .crt   00000000 
f0000524 l       .crt   00000000 
f0000528 l       .crt   00000000 
f000052c l       .crt   00000000 
f0000530 l       .crt   00000000 
f0000532 l       .crt   00000000 
f0000536 l       .crt   00000000 
f0000538 l       .crt   00000000 
f000053c l       .crt   00000000 
f000053e l       .crt   00000000 
f0000542 l       .crt   00000000 
f0000544 l       .crt   00000000 
0000b57e l       .debug_info    00000000 
000016e8 l       .debug_abbrev  00000000 
f0000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
f0000548 l       .text  00000000 
f0000548 l       .text  00000000 
f0000550 l       .text  00000000 
f0000552 l       .text  00000000 
f0000554 l       .text  00000000 
f0000556 l       .text  00000000 
f0000558 l       .text  00000000 
f000055a l       .text  00000000 
f000055c l       .text  00000000 
f000055e l       .text  00000000 
f0000560 l       .text  00000000 
f0000562 l       .text  00000000 
f0000564 l       .text  00000000 
f0000566 l       .text  00000000 
f0000568 l       .text  00000000 
f000056a l       .text  00000000 
f000056c l       .text  00000000 
f000056e l       .text  00000000 
f0000570 l       .text  00000000 
f0000572 l       .text  00000000 
f0000574 l       .text  00000000 
f0000576 l       .text  00000000 
f0000578 l       .text  00000000 
f000057a l       .text  00000000 
f000057c l       .text  00000000 
f000057e l       .text  00000000 
f0000580 l       .text  00000000 
f0000582 l       .text  00000000 
f0000584 l       .text  00000000 
f0000586 l       .text  00000000 
f0000588 l       .text  00000000 
f000058a l       .text  00000000 
f000058e l       .text  00000000 
f0000592 l       .text  00000000 
f0000594 l       .text  00000000 
f0000598 l       .text  00000000 
f000059c l       .text  00000000 
f000059c l       .text  00000000 
f00005a0 l       .text  00000000 
f00005a4 l       .text  00000000 
f00005aa l       .text  00000000 
f00005ae l       .text  00000000 
f00005b2 l       .text  00000000 
f00005b6 l       .text  00000000 
f00005b8 l       .text  00000000 
f00005bc l       .text  00000000 
f00005be l       .text  00000000 
000044a0 l       .debug_info    00000000 
00000b63 l       .debug_abbrev  00000000 
f00005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
f00005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
f00005c0 l       .text  00000000 
f00005c0 l       .text  00000000 
f00005c4 l       .text  00000000 
f00005c8 l       .text  00000000 
f00005ca l       .text  00000000 
f00005ce l       .text  00000000 
f00005d0 l       .text  00000000 
f00005d4 l       .text  00000000 
f00005d6 l       .text  00000000 
f00005da l       .text  00000000 
f00005de l       .text  00000000 
f00005e0 l       .text  00000000 
f00005e2 l       .text  00000000 
f00005e4 l       .text  00000000 
f00005e8 l     F .text  0000001e save_current_sp_to_tcb
f00005e8 l       .text  00000000 
f00005e8 l       .text  00000000 
f00005f0 l       .text  00000000 
f00005f4 l       .text  00000000 
f00005f8 l       .text  00000000 
f0000600 l       .text  00000000 
f0000604 l       .text  00000000 
f0000608 l       .text  00000000 
f0000608 l       .text  00000000 
f000060c l       .text  00000000 
f000060e l       .text  00000000 
f0000610 l       .text  00000000 
f0000612 l       .text  00000000 
f0000614 l       .text  00000000 
f0000616 l       .text  00000000 
f0000618 l       .text  00000000 
f000061a l       .text  00000000 
f000061c l       .text  00000000 
f000061e l       .text  00000000 
f0000620 l       .text  00000000 
f0000622 l       .text  00000000 
f0000624 l       .text  00000000 
f0000626 l       .text  00000000 
f0000628 l       .text  00000000 
f000062a l       .text  00000000 
f000062c l       .text  00000000 
f000062e l       .text  00000000 
f0000630 l       .text  00000000 
f0000632 l       .text  00000000 
f0000634 l       .text  00000000 
f0000636 l       .text  00000000 
f0000638 l       .text  00000000 
f000063a l       .text  00000000 
f000063c l       .text  00000000 
f000063e l       .text  00000000 
f0000640 l       .text  00000000 
f0000642 l       .text  00000000 
f0000644 l       .text  00000000 
f0000648 l       .text  00000000 
f000064a l       .text  00000000 
f000064c l       .text  00000000 
f000064e l       .text  00000000 
f0000650 l       .text  00000000 
f0000652 l       .text  00000000 
f0000656 l       .text  00000000 
f000065c l       .text  00000000 
f000065c l       .text  00000000 
f0000660 l       .text  00000000 
f0000662 l       .text  00000000 
f0000664 l       .text  00000000 
f0000666 l       .text  00000000 
f0000668 l       .text  00000000 
f000066a l       .text  00000000 
f000066c l       .text  00000000 
f000066e l       .text  00000000 
f0000670 l       .text  00000000 
f0000672 l       .text  00000000 
f0000674 l       .text  00000000 
f0000676 l       .text  00000000 
f0000678 l       .text  00000000 
f000067a l       .text  00000000 
f000067c l       .text  00000000 
f000067e l       .text  00000000 
f0000680 l       .text  00000000 
f0000682 l       .text  00000000 
f0000684 l       .text  00000000 
f0000686 l       .text  00000000 
f0000688 l       .text  00000000 
f000068a l       .text  00000000 
f000068c l       .text  00000000 
f000068e l       .text  00000000 
f0000690 l       .text  00000000 
f0000692 l       .text  00000000 
f0000694 l       .text  00000000 
f0000696 l       .text  00000000 
f0000698 l       .text  00000000 
f000069c l       .text  00000000 
f000069e l       .text  00000000 
f00006a2 l       .text  00000000 
f00006a4 l       .text  00000000 
f00006a6 l       .text  00000000 
f00006a8 l       .text  00000000 
f00006ac l       .text  00000000 
f00006b0 l       .text  00000000 
f00006b0 l       .text  00000000 
f00006b4 l       .text  00000000 
f00006b6 l       .text  00000000 
f00006b8 l       .text  00000000 
f00006ba l       .text  00000000 
f00006bc l       .text  00000000 
f00006be l       .text  00000000 
f00006c0 l       .text  00000000 
f00006c2 l       .text  00000000 
f00006c4 l       .text  00000000 
f00006c6 l       .text  00000000 
f00006c8 l       .text  00000000 
f00006ca l       .text  00000000 
f00006cc l       .text  00000000 
f00006ce l       .text  00000000 
f00006d0 l       .text  00000000 
f00006d2 l       .text  00000000 
f00006d4 l       .text  00000000 
f00006d6 l       .text  00000000 
f00006d8 l       .text  00000000 
f00006da l       .text  00000000 
f00006dc l       .text  00000000 
f00006de l       .text  00000000 
f00006e0 l       .text  00000000 
f00006e2 l       .text  00000000 
f00006e4 l       .text  00000000 
f00006e6 l       .text  00000000 
f00006e8 l       .text  00000000 
f00006ea l       .text  00000000 
f00006ec l       .text  00000000 
f00006f0 l       .text  00000000 
f00006f2 l       .text  00000000 
f00006f6 l       .text  00000000 
f00006f8 l       .text  00000000 
f00006fa l       .text  00000000 
f00006fc l       .text  00000000 
f0000700 l       .text  00000000 
f0000704 l       .text  00000000 
f0000704 l       .text  00000000 
f0000708 l       .text  00000000 
f000070a l       .text  00000000 
f000070c l       .text  00000000 
f000070e l       .text  00000000 
f0000710 l       .text  00000000 
f0000712 l       .text  00000000 
f0000714 l       .text  00000000 
f0000716 l       .text  00000000 
f0000718 l       .text  00000000 
f000071a l       .text  00000000 
f000071c l       .text  00000000 
f000071e l       .text  00000000 
f0000720 l       .text  00000000 
f0000722 l       .text  00000000 
f0000724 l       .text  00000000 
f0000726 l       .text  00000000 
f0000728 l       .text  00000000 
f000072a l       .text  00000000 
f000072c l       .text  00000000 
f000072e l       .text  00000000 
f0000730 l       .text  00000000 
f0000732 l       .text  00000000 
f0000734 l       .text  00000000 
f0000736 l       .text  00000000 
f0000738 l       .text  00000000 
f000073a l       .text  00000000 
f000073c l       .text  00000000 
f000073e l       .text  00000000 
f0000740 l       .text  00000000 
f0000744 l       .text  00000000 
f0000746 l       .text  00000000 
f000074a l       .text  00000000 
f000074c l       .text  00000000 
f000074e l       .text  00000000 
f0000750 l       .text  00000000 
f0000754 l       .text  00000000 
f0000758 l       .text  00000000 
f0000758 l       .text  00000000 
f000075c l       .text  00000000 
f000075e l       .text  00000000 
f0000760 l       .text  00000000 
f0000762 l       .text  00000000 
f0000764 l       .text  00000000 
f0000766 l       .text  00000000 
f0000768 l       .text  00000000 
f000076a l       .text  00000000 
f000076c l       .text  00000000 
f000076e l       .text  00000000 
f0000770 l       .text  00000000 
f0000772 l       .text  00000000 
f0000774 l       .text  00000000 
f0000776 l       .text  00000000 
f0000778 l       .text  00000000 
f000077a l       .text  00000000 
f000077c l       .text  00000000 
f000077e l       .text  00000000 
f0000780 l       .text  00000000 
f0000782 l       .text  00000000 
f0000784 l       .text  00000000 
f0000786 l       .text  00000000 
f0000788 l       .text  00000000 
f000078a l       .text  00000000 
f000078c l       .text  00000000 
f000078e l       .text  00000000 
f0000790 l       .text  00000000 
f0000792 l       .text  00000000 
f0000794 l       .text  00000000 
f0000798 l       .text  00000000 
f000079a l       .text  00000000 
f000079e l       .text  00000000 
f00007a0 l       .text  00000000 
f00007a2 l       .text  00000000 
f00007a4 l       .text  00000000 
f00007a8 l       .text  00000000 
f00007ac l       .text  00000000 
f00007ac l       .text  00000000 
f00007b4 l       .text  00000000 
f00007b8 l       .text  00000000 
f00007bc l       .text  00000000 
f00007c4 l       .text  00000000 
f00007c8 l       .text  00000000 
f00007ca l       .text  00000000 
f00007ce l       .text  00000000 
f00007d0 l       .text  00000000 
f00007d4 l       .text  00000000 
f00007d6 l       .text  00000000 
f00007d8 l       .text  00000000 
f00007da l       .text  00000000 
f00007dc l       .text  00000000 
f00007de l       .text  00000000 
f00007e0 l       .text  00000000 
f00007e2 l       .text  00000000 
f00007e4 l       .text  00000000 
f00007e6 l       .text  00000000 
f00007e8 l       .text  00000000 
f00007ea l       .text  00000000 
f00007ec l       .text  00000000 
f00007ee l       .text  00000000 
f00007f0 l       .text  00000000 
f00007f2 l       .text  00000000 
f00007f4 l       .text  00000000 
f00007f6 l       .text  00000000 
f00007f8 l       .text  00000000 
f00007fa l       .text  00000000 
f00007fc l       .text  00000000 
f00007fe l       .text  00000000 
f0000800 l       .text  00000000 
f0000802 l       .text  00000000 
f0000804 l       .text  00000000 
f0000806 l       .text  00000000 
f0000808 l       .text  00000000 
f000080a l       .text  00000000 
f000080c l       .text  00000000 
f0000810 l       .text  00000000 
0000a353 l       .debug_info    00000000 
0000139d l       .debug_abbrev  00000000 
f0000814 l       .text  00000000 
00000000 l    df *ABS*  00000000 flash_hmac_smoketest.c
f0000814 l       .text  00000000 
f0000814 l       .text  00000000 
f0000814 l       .text  00000000 
f0000816 l       .text  00000000 
f0000816 l       .text  00000000 
f0000816 l       .text  00000000 
f000081c l       .text  00000000 
f000081c l       .text  00000000 
f000081c l       .text  00000000 
f0000826 l       .text  00000000 
f000082a l       .text  00000000 
f000082a l       .text  00000000 
f0000832 l       .text  00000000 
00010000 l     O .logs.fields   00000014 test_setup.kLogFields
f0000834 l       .text  00000000 
f0000842 l       .text  00000000 
f0000842 l       .text  00000000 
f0000844 l       .text  00000000 
f000084c l       .text  00000000 
f00046c0 l     O .rodata        00000014 test_setup.log_fields
f000084c l       .text  00000000 
f000085a l       .text  00000000 
f000085a l       .text  00000000 
f0000860 l       .text  00000000 
f0000864 l       .text  00000000 
f0004680 l     O .rodata        00000020 kExpectedShaDigest
f0000864 l       .text  00000000 
f00008b8 l     F .text  000002f2 run_test
f0000874 l       .text  00000000 
f0000874 l       .text  00000000 
f000087c l       .text  00000000 
e0001fc8 l     O .data  00000020 kHmacKey
f000087c l       .text  00000000 
f00046a0 l     O .rodata        00000020 kExpectedHmacDigest
f0000894 l       .text  00000000 
f0000894 l       .text  00000000 
f000089c l       .text  00000000 
f000089c l       .text  00000000 
f00008a2 l       .text  00000000 
f00008a2 l       .text  00000000 
f00008a4 l       .text  00000000 
f00008a6 l       .text  00000000 
f00008ac l       .text  00000000 
f00008b0 l       .text  00000000 
f00008b8 l       .text  00000000 
f00008b8 l       .text  00000000 
f00008b8 l       .text  00000000 
f00008b8 l       .text  00000000 
f00008b8 l       .text  00000000 
f00008ba l       .text  00000000 
f00008c2 l       .text  00000000 
f00008c4 l       .text  00000000 
f00008c6 l       .text  00000000 
f00008ca l       .text  00000000 
f00008ca l       .text  00000000 
f00008cc l       .text  00000000 
f00008cc l       .text  00000000 
f00008de l       .text  00000000 
f00008e2 l       .text  00000000 
f00008e2 l       .text  00000000 
f00008e6 l       .text  00000000 
000100c8 l     O .logs.fields   00000014 test_start.kLogFields.28
f00008e8 l       .text  00000000 
f00008f2 l       .text  00000000 
f00008f2 l       .text  00000000 
f00008fa l       .text  00000000 
f00008fa l       .text  00000000 
f0000906 l       .text  00000000 
f000090c l       .text  00000000 
f0000910 l       .text  00000000 
f0000910 l       .text  00000000 
f0000914 l       .text  00000000 
000100b4 l     O .logs.fields   00000014 test_start.kLogFields
f0000916 l       .text  00000000 
f000091e l       .text  00000000 
f000091e l       .text  00000000 
f0000924 l       .text  00000000 
f0000926 l       .text  00000000 
f000092e l       .text  00000000 
f0004738 l     O .rodata        00000014 test_start.log_fields.30
f000092e l       .text  00000000 
f0000938 l       .text  00000000 
f0000938 l       .text  00000000 
f0000940 l       .text  00000000 
f0004724 l     O .rodata        00000014 test_start.log_fields
f0000940 l       .text  00000000 
f0000948 l       .text  00000000 
f0000948 l       .text  00000000 
f000094e l       .text  00000000 
f0000958 l       .text  00000000 
f00045f0 l     O .rodata        0000008e kData
f0000958 l       .text  00000000 
f000096a l       .text  00000000 
f0000970 l       .text  00000000 
f0000970 l       .text  00000000 
f0000974 l       .text  00000000 
f0000976 l       .text  00000000 
f0000976 l       .text  00000000 
f000097e l       .text  00000000 
f000097e l       .text  00000000 
f0000980 l       .text  00000000 
f0000988 l       .text  00000000 
f0000988 l       .text  00000000 
f000098a l       .text  00000000 
f0000998 l       .text  00000000 
f000099a l       .text  00000000 
00010014 l     O .logs.fields   00000014 run_test.kLogFields
f00009a8 l       .text  00000000 
f00009a8 l       .text  00000000 
f00009aa l       .text  00000000 
f00009b2 l       .text  00000000 
f00046d4 l     O .rodata        00000014 run_test.log_fields.8
f00009b2 l       .text  00000000 
f00009be l       .text  00000000 
f00009be l       .text  00000000 
f00009c0 l       .text  00000000 
f00009c8 l       .text  00000000 
00010028 l     O .logs.fields   00000014 run_test.kLogFields.3
f00009c8 l       .text  00000000 
f00009d6 l       .text  00000000 
f00009d6 l       .text  00000000 
f00009dc l       .text  00000000 
f00009e0 l       .text  00000000 
f00009e0 l       .text  00000000 
f00009e4 l       .text  00000000 
f00009ea l       .text  00000000 
f00009ea l       .text  00000000 
f00009ee l       .text  00000000 
f00009f0 l       .text  00000000 
f00009f0 l       .text  00000000 
f00009f8 l       .text  00000000 
f00009f8 l       .text  00000000 
f00009fa l       .text  00000000 
f0000a02 l       .text  00000000 
f0000a02 l       .text  00000000 
f0000a04 l       .text  00000000 
f0000a12 l       .text  00000000 
f0000a14 l       .text  00000000 
0001003c l     O .logs.fields   00000014 run_test.kLogFields.9
f0000a22 l       .text  00000000 
f0000a22 l       .text  00000000 
f0000a24 l       .text  00000000 
f0000a2c l       .text  00000000 
f00046e8 l     O .rodata        00000014 run_test.log_fields.14
f0000a2c l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a3a l       .text  00000000 
f0000a42 l       .text  00000000 
00010050 l     O .logs.fields   00000014 run_test.kLogFields.11
f0000a42 l       .text  00000000 
f0000a50 l       .text  00000000 
f0000a50 l       .text  00000000 
f0000a56 l       .text  00000000 
f0000a5a l       .text  00000000 
f0000a5a l       .text  00000000 
f0000a64 l       .text  00000000 
f0000a6a l       .text  00000000 
f0000a6a l       .text  00000000 
f0000a6e l       .text  00000000 
f0000a70 l       .text  00000000 
f0000a70 l       .text  00000000 
f0000a78 l       .text  00000000 
f0000a78 l       .text  00000000 
f0000a7a l       .text  00000000 
f0000a82 l       .text  00000000 
f0000a82 l       .text  00000000 
f0000a84 l       .text  00000000 
f0000a92 l       .text  00000000 
f0000a94 l       .text  00000000 
00010064 l     O .logs.fields   00000014 run_test.kLogFields.15
f0000aa2 l       .text  00000000 
f0000aa2 l       .text  00000000 
f0000aa4 l       .text  00000000 
f0000aac l       .text  00000000 
f00046fc l     O .rodata        00000014 run_test.log_fields.20
f0000aac l       .text  00000000 
f0000ab8 l       .text  00000000 
f0000ab8 l       .text  00000000 
f0000aba l       .text  00000000 
f0000ac2 l       .text  00000000 
00010078 l     O .logs.fields   00000014 run_test.kLogFields.17
f0000ac2 l       .text  00000000 
f0000ad0 l       .text  00000000 
f0000ad0 l       .text  00000000 
f0000ad6 l       .text  00000000 
f0000ada l       .text  00000000 
f0000ada l       .text  00000000 
f0000ae0 l       .text  00000000 
f0000ae4 l       .text  00000000 
f0000ae4 l       .text  00000000 
f0000ae8 l       .text  00000000 
000100dc l     O .logs.fields   00000014 run_hmac.kLogFields
f0000aea l       .text  00000000 
f0000af8 l       .text  00000000 
f0000af8 l       .text  00000000 
f0000afa l       .text  00000000 
f0000b02 l       .text  00000000 
f000474c l     O .rodata        00000014 run_hmac.log_fields
f0000b02 l       .text  00000000 
f0000b10 l       .text  00000000 
f0000b10 l       .text  00000000 
f0000b16 l       .text  00000000 
f0000b1a l       .text  00000000 
f0000b1a l       .text  00000000 
f0000b20 l       .text  00000000 
f0000b26 l       .text  00000000 
f0000b26 l       .text  00000000 
f0000b2a l       .text  00000000 
f0000b2c l       .text  00000000 
f0000b2c l       .text  00000000 
f0000b34 l       .text  00000000 
f0000b34 l       .text  00000000 
f0000b36 l       .text  00000000 
f0000b3e l       .text  00000000 
f0000b3e l       .text  00000000 
f0000b40 l       .text  00000000 
f0000b4e l       .text  00000000 
f0000b50 l       .text  00000000 
0001008c l     O .logs.fields   00000014 run_test.kLogFields.21
f0000b5e l       .text  00000000 
f0000b5e l       .text  00000000 
f0000b60 l       .text  00000000 
f0000b68 l       .text  00000000 
f0004710 l     O .rodata        00000014 run_test.log_fields.26
f0000b68 l       .text  00000000 
f0000b74 l       .text  00000000 
f0000b74 l       .text  00000000 
f0000b76 l       .text  00000000 
f0000b7e l       .text  00000000 
000100a0 l     O .logs.fields   00000014 run_test.kLogFields.23
f0000b7e l       .text  00000000 
f0000b8c l       .text  00000000 
f0000b8c l       .text  00000000 
f0000b92 l       .text  00000000 
f0000b96 l       .text  00000000 
f0000b96 l       .text  00000000 
f0000b9c l       .text  00000000 
f0000b9e l       .text  00000000 
f0000b9e l       .text  00000000 
f0000ba2 l       .text  00000000 
f0000baa l       .text  00000000 
f0000baa l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000003c l       .debug_loc     00000000 
00000062 l       .debug_loc     00000000 
00000093 l       .debug_loc     00000000 
000000b9 l       .debug_loc     00000000 
00000163 l       .debug_loc     00000000 
00000189 l       .debug_loc     00000000 
00000233 l       .debug_loc     00000000 
000002f9 l       .debug_loc     00000000 
0000031f l       .debug_loc     00000000 
00000350 l       .debug_loc     00000000 
00000381 l       .debug_loc     00000000 
000003b2 l       .debug_loc     00000000 
000003e5 l       .debug_loc     00000000 
00000418 l       .debug_loc     00000000 
00000449 l       .debug_loc     00000000 
0000047c l       .debug_loc     00000000 
000004af l       .debug_loc     00000000 
000004e0 l       .debug_loc     00000000 
00000513 l       .debug_loc     00000000 
00000546 l       .debug_loc     00000000 
0000056c l       .debug_loc     00000000 
0000059d l       .debug_loc     00000000 
000005ce l       .debug_loc     00000000 
00000601 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000090 l       .debug_ranges  00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
000000d6 l       .debug_str     00000000 
000001c9 l       .debug_str     00000000 
000001b8 l       .debug_str     00000000 
000000e6 l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000001b3 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
0000122f l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
0000016d l       .debug_str     00000000 
00000145 l       .debug_str     00000000 
00000133 l       .debug_str     00000000 
0000010c l       .debug_str     00000000 
0000011d l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000006ee l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
000046f6 l       .debug_str     00000000 
00006595 l       .debug_str     00000000 
0000586d l       .debug_str     00000000 
000006fe l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00000018 l       .debug_ranges  00000000 
0000070e l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
000006f7 l       .debug_str     00000000 
00000716 l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000060 l       .debug_ranges  00000000 
00000078 l       .debug_ranges  00000000 
00000281 l       .debug_str     00000000 
000003c9 l       .debug_str     00000000 
000003b4 l       .debug_str     00000000 
00000f0b l       .debug_str     00000000 
00000f23 l       .debug_str     00000000 
0000031b l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002c7 l       .debug_str     00000000 
00000298 l       .debug_str     00000000 
000002ae l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
000002f1 l       .debug_str     00000000 
000002fc l       .debug_str     00000000 
00000307 l       .debug_str     00000000 
0000039e l       .debug_str     00000000 
0000038a l       .debug_str     00000000 
0000033e l       .debug_str     00000000 
0000034d l       .debug_str     00000000 
0000035c l       .debug_str     00000000 
0000036b l       .debug_str     00000000 
0000037a l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
000003e6 l       .debug_str     00000000 
00000409 l       .debug_str     00000000 
000003f9 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
0000041b l       .debug_str     00000000 
00000424 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
0000136b l       .debug_str     00000000 
000004a6 l       .debug_str     00000000 
000004bb l       .debug_str     00000000 
000004d4 l       .debug_str     00000000 
000004e6 l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000509 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000531 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
0000055f l       .debug_str     00000000 
00000556 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
000006e4 l       .debug_str     00000000 
00002c12 l       .debug_str     00000000 
00000577 l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
000005b1 l       .debug_str     00000000 
000005c1 l       .debug_str     00000000 
000005cf l       .debug_str     00000000 
000005da l       .debug_str     00000000 
000005e3 l       .debug_str     00000000 
000005fc l       .debug_str     00000000 
00000617 l       .debug_str     00000000 
00003f00 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
0000063c l       .debug_str     00000000 
0000064b l       .debug_str     00000000 
0000066c l       .debug_str     00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
000006ac l       .debug_str     00000000 
000006bd l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 hmac_testutils.c
f0000baa l       .text  00000000 
f0000baa l       .text  00000000 
f0000baa l       .text  00000000 
f0000bac l       .text  00000000 
f0000bb4 l       .text  00000000 
f0000bb8 l       .text  00000000 
f0000bb8 l       .text  00000000 
f0000bbe l       .text  00000000 
f0000bc0 l       .text  00000000 
f0000bca l       .text  00000000 
f0000bcc l       .text  00000000 
f0000be6 l       .text  00000000 
f0000be6 l       .text  00000000 
f0000bea l       .text  00000000 
f0000bea l       .text  00000000 
f0000bee l       .text  00000000 
f0000bfe l       .text  00000000 
f0000bfe l       .text  00000000 
f0000c00 l       .text  00000000 
f0000c02 l       .text  00000000 
f0000c14 l       .text  00000000 
f0000c18 l       .text  00000000 
f0000c18 l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c1e l       .text  00000000 
f0000c22 l       .text  00000000 
000100f0 l     O .logs.fields   00000014 hmac_testutils_check_message_length.kLogFields
f0000c24 l       .text  00000000 
f0000c36 l       .text  00000000 
f0000c36 l       .text  00000000 
f0000c38 l       .text  00000000 
f0000c40 l       .text  00000000 
f0000c42 l       .text  00000000 
f0000c44 l       .text  00000000 
f0000c44 l       .text  00000000 
f0000c56 l       .text  00000000 
f0000c56 l       .text  00000000 
f0000c5e l       .text  00000000 
f00048a0 l     O .rodata        00000014 hmac_testutils_check_message_length.log_fields
f0000c5e l       .text  00000000 
f0000c6e l       .text  00000000 
f0000c72 l       .text  00000000 
f0000c72 l       .text  00000000 
f0000c88 l       .text  00000000 
f0000c88 l       .text  00000000 
f0000c8a l       .text  00000000 
f0000c8a l       .text  00000000 
f0000c8e l       .text  00000000 
f0000c8e l       .text  00000000 
f0000ca2 l       .text  00000000 
f0000ca6 l       .text  00000000 
f0000ca6 l       .text  00000000 
f0000cae l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cc2 l       .text  00000000 
f0000cc2 l       .text  00000000 
f0000cc6 l       .text  00000000 
f0000cca l       .text  00000000 
f0000cca l       .text  00000000 
f0000cd2 l       .text  00000000 
f0000cd4 l       .text  00000000 
f0000cd4 l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce2 l       .text  00000000 
f0000ce2 l       .text  00000000 
f0000ce2 l       .text  00000000 
f0000cee l       .text  00000000 
f0000d00 l       .text  00000000 
f0000d00 l       .text  00000000 
f0000d08 l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d18 l       .text  00000000 
f0000d20 l       .text  00000000 
f0000d20 l       .text  00000000 
f0000d34 l       .text  00000000 
f0000d34 l       .text  00000000 
f0000d3c l       .text  00000000 
f0000d40 l       .text  00000000 
f0000d40 l       .text  00000000 
f0000d42 l       .text  00000000 
f0000d46 l       .text  00000000 
f0000d4a l       .text  00000000 
0001012c l     O .logs.fields   00000014 compute_hmac_testutils_fifo_empty_usec.kLogFields
f0000d4c l       .text  00000000 
f0000d5a l       .text  00000000 
f0000d5a l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d64 l       .text  00000000 
f00048dc l     O .rodata        00000014 compute_hmac_testutils_fifo_empty_usec.log_fields
f0000d64 l       .text  00000000 
f0000d70 l       .text  00000000 
f0000d70 l       .text  00000000 
f0000d86 l       .text  00000000 
f0000d86 l       .text  00000000 
f0000d88 l       .text  00000000 
f0000d88 l       .text  00000000 
f0000d8c l       .text  00000000 
f0000d8c l       .text  00000000 
f0000da0 l       .text  00000000 
f0000da0 l       .text  00000000 
f0000da4 l       .text  00000000 
f0000da4 l       .text  00000000 
f0000dba l       .text  00000000 
f0000dc2 l       .text  00000000 
f0000dc6 l       .text  00000000 
f0000dc6 l       .text  00000000 
f0000dd6 l       .text  00000000 
f0000dd6 l       .text  00000000 
f0000dda l       .text  00000000 
f0000dde l       .text  00000000 
f0000de2 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000dec l       .text  00000000 
f0000dec l       .text  00000000 
f0000dee l       .text  00000000 
f0000dee l       .text  00000000 
f0000df2 l       .text  00000000 
f0000df2 l       .text  00000000 
f0000df6 l       .text  00000000 
f0000df8 l       .text  00000000 
f0000df8 l       .text  00000000 
f0000dfa l       .text  00000000 
f0000dfa l       .text  00000000 
f0000e0a l       .text  00000000 
f0000e0a l       .text  00000000 
f0000e0c l       .text  00000000 
f0000e12 l       .text  00000000 
f0000e12 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e18 l       .text  00000000 
f0000e18 l       .text  00000000 
f0000e1e l       .text  00000000 
f0000e26 l       .text  00000000 
f0000e2e l       .text  00000000 
f0000e30 l       .text  00000000 
f0000e44 l       .text  00000000 
f0000e44 l       .text  00000000 
f0000e4c l       .text  00000000 
f0000e50 l       .text  00000000 
f0000e50 l       .text  00000000 
f0000e66 l       .text  00000000 
f0000e6a l       .text  00000000 
f0000e6a l       .text  00000000 
f0000e6c l       .text  00000000 
f0000e74 l       .text  00000000 
f0000e76 l       .text  00000000 
f0000e7a l       .text  00000000 
f0000e7a l       .text  00000000 
f0000e90 l       .text  00000000 
f0000e92 l       .text  00000000 
f0000e92 l       .text  00000000 
f0000e94 l       .text  00000000 
f0000e9c l       .text  00000000 
f0000e9c l       .text  00000000 
f0000eac l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb2 l       .text  00000000 
f0000ec0 l       .text  00000000 
f0000ec0 l       .text  00000000 
f0000ecc l       .text  00000000 
f0000ecc l       .text  00000000 
f0000ecc l       .text  00000000 
f0000ecc l       .text  00000000 
f0000ecc l       .text  00000000 
f0000ece l       .text  00000000 
f0000ece l       .text  00000000 
f0000ece l       .text  00000000 
f0000edc l       .text  00000000 
f0000eee l       .text  00000000 
f0000eee l       .text  00000000 
f0000ef0 l       .text  00000000 
f0000ef8 l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f08 l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f24 l       .text  00000000 
f0000f24 l       .text  00000000 
f0000f2c l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f32 l       .text  00000000 
f0000f36 l       .text  00000000 
f0000f3a l       .text  00000000 
00010140 l     O .logs.fields   00000014 compute_hmac_testutils_finish_timeout_usec.kLogFields
f0000f3c l       .text  00000000 
f0000f4a l       .text  00000000 
f0000f4a l       .text  00000000 
f0000f4c l       .text  00000000 
f0000f54 l       .text  00000000 
f00048f0 l     O .rodata        00000014 compute_hmac_testutils_finish_timeout_usec.log_fields
f0000f54 l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f76 l       .text  00000000 
f0000f76 l       .text  00000000 
f0000f78 l       .text  00000000 
f0000f78 l       .text  00000000 
f0000f7c l       .text  00000000 
f0000f7c l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f94 l       .text  00000000 
f0000f94 l       .text  00000000 
f0000faa l       .text  00000000 
f0000fb2 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fc6 l       .text  00000000 
f0000fc6 l       .text  00000000 
f0000fca l       .text  00000000 
f0000fce l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fd6 l       .text  00000000 
f0000fd6 l       .text  00000000 
f0000fde l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000ff0 l       .text  00000000 
f0000ff0 l       .text  00000000 
f0000ff2 l       .text  00000000 
f0000ff8 l       .text  00000000 
f0000ff8 l       .text  00000000 
f0000ffa l       .text  00000000 
f0000ffe l       .text  00000000 
f0000ffe l       .text  00000000 
f0001004 l       .text  00000000 
f000100c l       .text  00000000 
f0001014 l       .text  00000000 
f0001016 l       .text  00000000 
f000102a l       .text  00000000 
f000102a l       .text  00000000 
f0001032 l       .text  00000000 
f0001036 l       .text  00000000 
f0001036 l       .text  00000000 
f000104c l       .text  00000000 
f000104e l       .text  00000000 
f000104e l       .text  00000000 
f0001050 l       .text  00000000 
f0001058 l       .text  00000000 
f000105a l       .text  00000000 
f000105e l       .text  00000000 
f000105e l       .text  00000000 
f0001074 l       .text  00000000 
f0001076 l       .text  00000000 
f0001076 l       .text  00000000 
f000107c l       .text  00000000 
f0001084 l       .text  00000000 
f0001086 l       .text  00000000 
f0001086 l       .text  00000000 
f0001092 l       .text  00000000 
f0001092 l       .text  00000000 
f00010a2 l       .text  00000000 
f00010ae l       .text  00000000 
f00010b0 l       .text  00000000 
f00010b6 l       .text  00000000 
f00010be l       .text  00000000 
f00010be l       .text  00000000 
f00010be l       .text  00000000 
f00010be l       .text  00000000 
f00010be l       .text  00000000 
f00010c0 l       .text  00000000 
f00010c6 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010cc l       .text  00000000 
f00010d0 l       .text  00000000 
f00010d0 l       .text  00000000 
f00010d4 l       .text  00000000 
f00010e4 l       .text  00000000 
f00010e6 l       .text  00000000 
f00010e6 l       .text  00000000 
f00010f2 l       .text  00000000 
f00010fa l       .text  00000000 
f00010fe l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001104 l       .text  00000000 
f0001104 l       .text  00000000 
f0001118 l       .text  00000000 
f000111c l       .text  00000000 
f000111c l       .text  00000000 
f0001124 l       .text  00000000 
f0001126 l       .text  00000000 
f0001128 l       .text  00000000 
f0001128 l       .text  00000000 
f000113a l       .text  00000000 
f000113a l       .text  00000000 
f0001142 l       .text  00000000 
f0001142 l       .text  00000000 
f000114a l       .text  00000000 
00010104 l     O .logs.fields   00000014 hmac_testutils_finish_and_check_polled.kLogFields
f000114c l       .text  00000000 
f000115a l       .text  00000000 
f000115a l       .text  00000000 
f000115c l       .text  00000000 
f0001164 l       .text  00000000 
f00048b4 l     O .rodata        00000014 hmac_testutils_finish_and_check_polled.log_fields
f0001164 l       .text  00000000 
f0001170 l       .text  00000000 
f0001170 l       .text  00000000 
f0001186 l       .text  00000000 
f0001188 l       .text  00000000 
f0001188 l       .text  00000000 
f000118c l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f00011a0 l       .text  00000000 
f00011a0 l       .text  00000000 
f00011a4 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011ae l       .text  00000000 
f00011ae l       .text  00000000 
f00011ba l       .text  00000000 
f00011ba l       .text  00000000 
f00011ba l       .text  00000000 
f00011ba l       .text  00000000 
f00011ba l       .text  00000000 
f00011bc l       .text  00000000 
f00011bc l       .text  00000000 
f00011d4 l       .text  00000000 
f00011d4 l       .text  00000000 
f00011d6 l       .text  00000000 
f00011d8 l       .text  00000000 
f00011da l       .text  00000000 
f00011dc l       .text  00000000 
f00048c8 l     O .rodata        00000014 hmac_testutils_push_message.log_fields
00010118 l     O .logs.fields   00000014 hmac_testutils_push_message.kLogFields
f0001202 l       .text  00000000 
f0001202 l       .text  00000000 
f0001206 l       .text  00000000 
f0001206 l       .text  00000000 
f000120a l       .text  00000000 
f000120e l       .text  00000000 
f0001210 l       .text  00000000 
f0001210 l       .text  00000000 
f000121e l       .text  00000000 
f000121e l       .text  00000000 
f000122a l       .text  00000000 
f000122e l       .text  00000000 
f000122e l       .text  00000000 
f0001230 l       .text  00000000 
f0001234 l       .text  00000000 
f0001238 l       .text  00000000 
f000123e l       .text  00000000 
f000123e l       .text  00000000 
f0001240 l       .text  00000000 
f0001248 l       .text  00000000 
f0001248 l       .text  00000000 
f000124a l       .text  00000000 
f0001250 l       .text  00000000 
f0001250 l       .text  00000000 
f0001260 l       .text  00000000 
f0001260 l       .text  00000000 
f0001262 l       .text  00000000 
f0001262 l       .text  00000000 
f0001266 l       .text  00000000 
f0001266 l       .text  00000000 
f000126a l       .text  00000000 
f000126a l       .text  00000000 
f000126e l       .text  00000000 
f0001272 l       .text  00000000 
f0001272 l       .text  00000000 
f0001274 l       .text  00000000 
f0001274 l       .text  00000000 
f0001276 l       .text  00000000 
f0001276 l       .text  00000000 
f000127a l       .text  00000000 
f000127a l       .text  00000000 
f000127e l       .text  00000000 
f000127e l       .text  00000000 
f0001292 l       .text  00000000 
f0001296 l       .text  00000000 
f000129e l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a2 l       .text  00000000 
f00012b4 l       .text  00000000 
f00012b4 l       .text  00000000 
f00012bc l       .text  00000000 
f00012be l       .text  00000000 
f00012c0 l       .text  00000000 
f00012c0 l       .text  00000000 
f00012d0 l       .text  00000000 
f00012d0 l       .text  00000000 
f00012d4 l       .text  00000000 
f00012d6 l       .text  00000000 
f00012d6 l       .text  00000000 
f00012f0 l       .text  00000000 
f00012fc l       .text  00000000 
f00012fc l       .text  00000000 
00000000 l     O .ot.status_create_record       00000080 hmac_testutils_check_message_length.kOtStatusRecord
00000080 l     O .ot.status_create_record       00000080 hmac_testutils_fifo_empty_polled.kOtStatusRecord
00000100 l     O .ot.status_create_record       00000080 hmac_testutils_finish_polled.kOtStatusRecord
00000180 l     O .ot.status_create_record       00000080 hmac_testutils_finish_and_check_polled.kOtStatusRecord
00000200 l     O .ot.status_create_record       00000080 hmac_testutils_push_message.kOtStatusRecord
00000280 l     O .ot.status_create_record       00000080 compute_hmac_testutils_fifo_empty_usec.kOtStatusRecord
00000300 l     O .ot.status_create_record       00000080 compute_hmac_testutils_finish_timeout_usec.kOtStatusRecord
00000634 l       .debug_loc     00000000 
0000064f l       .debug_loc     00000000 
000006b3 l       .debug_loc     00000000 
00000710 l       .debug_loc     00000000 
00000737 l       .debug_loc     00000000 
0000075e l       .debug_loc     00000000 
0000078f l       .debug_loc     00000000 
000007b5 l       .debug_loc     00000000 
000007d0 l       .debug_loc     00000000 
0000082d l       .debug_loc     00000000 
00000877 l       .debug_loc     00000000 
00000892 l       .debug_loc     00000000 
000008b8 l       .debug_loc     00000000 
000008f4 l       .debug_loc     00000000 
00000913 l       .debug_loc     00000000 
00000932 l       .debug_loc     00000000 
0000094e l       .debug_loc     00000000 
00000975 l       .debug_loc     00000000 
0000099c l       .debug_loc     00000000 
000009df l       .debug_loc     00000000 
00000a06 l       .debug_loc     00000000 
00000a21 l       .debug_loc     00000000 
00000a48 l       .debug_loc     00000000 
00000a6f l       .debug_loc     00000000 
00000a8b l       .debug_loc     00000000 
00000aa6 l       .debug_loc     00000000 
00000ac1 l       .debug_loc     00000000 
00000b1e l       .debug_loc     00000000 
00000b7b l       .debug_loc     00000000 
00000bc5 l       .debug_loc     00000000 
00000be0 l       .debug_loc     00000000 
00000c06 l       .debug_loc     00000000 
00000c42 l       .debug_loc     00000000 
00000c61 l       .debug_loc     00000000 
00000c80 l       .debug_loc     00000000 
00000c9c l       .debug_loc     00000000 
00000cc3 l       .debug_loc     00000000 
00000cea l       .debug_loc     00000000 
00000d2d l       .debug_loc     00000000 
00000d54 l       .debug_loc     00000000 
00000d7b l       .debug_loc     00000000 
00000d97 l       .debug_loc     00000000 
00000db2 l       .debug_loc     00000000 
00000dcd l       .debug_loc     00000000 
00000de8 l       .debug_loc     00000000 
00000e2f l       .debug_loc     00000000 
00000e60 l       .debug_loc     00000000 
00000e86 l       .debug_loc     00000000 
00000eb7 l       .debug_loc     00000000 
00000efe l       .debug_loc     00000000 
00000f45 l       .debug_loc     00000000 
00000f8c l       .debug_loc     00000000 
00000fc8 l       .debug_loc     00000000 
00000fe3 l       .debug_loc     00000000 
0000102e l       .debug_loc     00000000 
0000106a l       .debug_loc     00000000 
00001090 l       .debug_loc     00000000 
000010b6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000071a l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000218 l       .debug_ranges  00000000 
00000741 l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000074e l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
0000075e l       .debug_str     00000000 
00000409 l       .debug_str     00000000 
000003f9 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
0000077c l       .debug_str     00000000 
0000066c l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
00000793 l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000ac2 l       .debug_str     00000000 
00000acb l       .debug_str     00000000 
000000a8 l       .debug_ranges  00000000 
0000070e l       .debug_str     00000000 
00003d6c l       .debug_str     00000000 
00004763 l       .debug_str     00000000 
00001310 l       .debug_str     00000000 
00000960 l       .debug_str     00000000 
000000c0 l       .debug_ranges  00000000 
000000e0 l       .debug_ranges  00000000 
0000098e l       .debug_str     00000000 
00000993 l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000007ce l       .debug_str     00000000 
000007b6 l       .debug_str     00000000 
000007a3 l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
0000064b l       .debug_str     00000000 
0000113a l       .debug_str     00000000 
000000f8 l       .debug_ranges  00000000 
00000110 l       .debug_ranges  00000000 
00000128 l       .debug_ranges  00000000 
00000ad5 l       .debug_str     00000000 
00000aa5 l       .debug_str     00000000 
00000ade l       .debug_str     00000000 
00000140 l       .debug_ranges  00000000 
00000158 l       .debug_ranges  00000000 
00000170 l       .debug_ranges  00000000 
000006bd l       .debug_str     00000000 
00000ae9 l       .debug_str     00000000 
00000188 l       .debug_ranges  00000000 
000001a0 l       .debug_ranges  00000000 
000001b8 l       .debug_ranges  00000000 
00000617 l       .debug_str     00000000 
000046f6 l       .debug_str     00000000 
00006595 l       .debug_str     00000000 
00003b3a l       .debug_str     00000000 
00000af2 l       .debug_str     00000000 
000001d0 l       .debug_ranges  00000000 
00005c4d l       .debug_str     00000000 
000066bb l       .debug_str     00000000 
000001e8 l       .debug_ranges  00000000 
00000200 l       .debug_ranges  00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00000909 l       .debug_str     00000000 
000007e8 l       .debug_str     00000000 
000007ec l       .debug_str     00000000 
000007f7 l       .debug_str     00000000 
00000800 l       .debug_str     00000000 
00000811 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
0000083c l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
00000861 l       .debug_str     00000000 
00000875 l       .debug_str     00000000 
0000087e l       .debug_str     00000000 
0000088a l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000008a3 l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000008cb l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
0000091a l       .debug_str     00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
00000928 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
0000055f l       .debug_str     00000000 
00000556 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00000944 l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
00003f00 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
00000959 l       .debug_str     00000000 
00000967 l       .debug_str     00000000 
00001136 l       .debug_str     00000000 
0000049f l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000998 l       .debug_str     00000000 
00001132 l       .debug_str     00000000 
000009b7 l       .debug_str     00000000 
000009aa l       .debug_str     00000000 
0000620f l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
000009c6 l       .debug_str     00000000 
000009d7 l       .debug_str     00000000 
000009e4 l       .debug_str     00000000 
000009ef l       .debug_str     00000000 
000009f9 l       .debug_str     00000000 
00000a0a l       .debug_str     00000000 
00000a15 l       .debug_str     00000000 
000009af l       .debug_str     00000000 
00000a28 l       .debug_str     00000000 
00000a34 l       .debug_str     00000000 
00000a50 l       .debug_str     00000000 
00000a7b l       .debug_str     00000000 
00000a8b l       .debug_str     00000000 
00000a92 l       .debug_str     00000000 
0000004c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_hmac_autogen.c
f00012fc l       .text  00000000 
f00012fc l       .text  00000000 
f00012fc l       .text  00000000 
f00012fc l       .text  00000000 
f00012fe l       .text  00000000 
f0001300 l       .text  00000000 
f0001304 l       .text  00000000 
f0001304 l       .text  00000000 
f000130c l       .text  00000000 
f000130e l       .text  00000000 
f0001310 l       .text  00000000 
f0001312 l       .text  00000000 
f000131a l       .text  00000000 
f000131a l       .text  00000000 
000010dc l       .debug_loc     00000000 
00001102 l       .debug_loc     00000000 
00001128 l       .debug_loc     00000000 
00001143 l       .debug_loc     00000000 
0000115e l       .debug_loc     00000000 
0000117a l       .debug_loc     00000000 
00001196 l       .debug_loc     00000000 
000011b1 l       .debug_loc     00000000 
000011cc l       .debug_loc     00000000 
000011e7 l       .debug_loc     00000000 
00001202 l       .debug_loc     00000000 
0000121d l       .debug_loc     00000000 
00001238 l       .debug_loc     00000000 
0000125e l       .debug_loc     00000000 
00001284 l       .debug_loc     00000000 
0000129f l       .debug_loc     00000000 
000012ba l       .debug_loc     00000000 
000012d5 l       .debug_loc     00000000 
000012f0 l       .debug_loc     00000000 
0000130b l       .debug_loc     00000000 
00001326 l       .debug_loc     00000000 
0000134c l       .debug_loc     00000000 
00001367 l       .debug_loc     00000000 
00001382 l       .debug_loc     00000000 
0000139d l       .debug_loc     00000000 
000013c4 l       .debug_loc     00000000 
000013f3 l       .debug_loc     00000000 
0000140e l       .debug_loc     00000000 
00001429 l       .debug_loc     00000000 
00001444 l       .debug_loc     00000000 
00001464 l       .debug_loc     00000000 
0000147f l       .debug_loc     00000000 
000014a6 l       .debug_loc     00000000 
000014d5 l       .debug_loc     00000000 
000014f0 l       .debug_loc     00000000 
0000150b l       .debug_loc     00000000 
00001526 l       .debug_loc     00000000 
00001541 l       .debug_loc     00000000 
0000155c l       .debug_loc     00000000 
00001577 l       .debug_loc     00000000 
00001592 l       .debug_loc     00000000 
000015ad l       .debug_loc     00000000 
000015c8 l       .debug_loc     00000000 
000015e3 l       .debug_loc     00000000 
00001609 l       .debug_loc     00000000 
0000162f l       .debug_loc     00000000 
0000165e l       .debug_loc     00000000 
00001679 l       .debug_loc     00000000 
00001694 l       .debug_loc     00000000 
000016af l       .debug_loc     00000000 
000016cf l       .debug_loc     00000000 
000016f5 l       .debug_loc     00000000 
0000171b l       .debug_loc     00000000 
00001736 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000afd l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000248 l       .debug_ranges  00000000 
00000b2a l       .debug_str     00000000 
00000b64 l       .debug_str     00000000 
00000b57 l       .debug_str     00000000 
00000b34 l       .debug_str     00000000 
00000b45 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00000b8b l       .debug_str     00000000 
00000b73 l       .debug_str     00000000 
00000bd6 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000bae l       .debug_str     00000000 
00000bc3 l       .debug_str     00000000 
00000c08 l       .debug_str     00000000 
00000be3 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00000577 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
00000b94 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000e0e l       .debug_str     00000000 
00000ce2 l       .debug_str     00000000 
00000bdf l       .debug_str     00000000 
0000122f l       .debug_str     00000000 
00000c31 l       .debug_str     00000000 
00000cf8 l       .debug_str     00000000 
00000e2c l       .debug_str     00000000 
00000d0f l       .debug_str     00000000 
00000c44 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00005b34 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
00000d2e l       .debug_str     00000000 
00000d3b l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
00000e53 l       .debug_str     00000000 
00000d46 l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
00000cb8 l       .debug_str     00000000 
00000d63 l       .debug_str     00000000 
00000d7c l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00000e62 l       .debug_str     00000000 
00000d8f l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
00000e7d l       .debug_str     00000000 
00000e8d l       .debug_str     00000000 
00000da8 l       .debug_str     00000000 
00000e98 l       .debug_str     00000000 
00000dc1 l       .debug_str     00000000 
00000dda l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
0000055f l       .debug_str     00000000 
00000556 l       .debug_str     00000000 
00000df3 l       .debug_str     00000000 
00000e1d l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00000e70 l       .debug_str     00000000 
00000ea3 l       .debug_str     00000000 
00000108 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_hmac.c
f000131a l       .text  00000000 
f000131a l       .text  00000000 
f000131a l       .text  00000000 
f000131a l       .text  00000000 
f000131c l       .text  00000000 
f0001320 l       .text  00000000 
f0001320 l       .text  00000000 
f0001324 l       .text  00000000 
f0001324 l       .text  00000000 
f000132a l       .text  00000000 
f000132a l       .text  00000000 
f000132c l       .text  00000000 
f000132e l       .text  00000000 
f0001332 l       .text  00000000 
f0001332 l       .text  00000000 
f0001334 l       .text  00000000 
f0001334 l       .text  00000000 
f0001336 l       .text  00000000 
f0001338 l       .text  00000000 
f000133c l       .text  00000000 
f000133c l       .text  00000000 
f0001340 l       .text  00000000 
f0001348 l       .text  00000000 
f000134a l       .text  00000000 
f000134c l       .text  00000000 
f0001354 l       .text  00000000 
f0001356 l       .text  00000000 
f0001358 l       .text  00000000 
f000135c l       .text  00000000 
f000135c l       .text  00000000 
f0001360 l       .text  00000000 
f0001360 l       .text  00000000 
f0001362 l       .text  00000000 
f0001362 l       .text  00000000 
f000136a l       .text  00000000 
f000136a l       .text  00000000 
f000136c l       .text  00000000 
f000136c l       .text  00000000 
f000136e l       .text  00000000 
f000136e l       .text  00000000 
f0001370 l       .text  00000000 
f0001370 l       .text  00000000 
f0001372 l       .text  00000000 
f0001372 l       .text  00000000 
f0001374 l       .text  00000000 
f0001376 l       .text  00000000 
f000137a l       .text  00000000 
f000137a l       .text  00000000 
f000137e l       .text  00000000 
f000137e l       .text  00000000 
f0001382 l       .text  00000000 
f0001382 l       .text  00000000 
f000138a l       .text  00000000 
f000138a l       .text  00000000 
f000138e l       .text  00000000 
f000138e l       .text  00000000 
f0001390 l       .text  00000000 
f0001390 l       .text  00000000 
f0001392 l       .text  00000000 
f0001392 l       .text  00000000 
f0001394 l       .text  00000000 
f0001394 l       .text  00000000 
f0001398 l       .text  00000000 
f0001398 l       .text  00000000 
f000139a l       .text  00000000 
f000139a l       .text  00000000 
f00013a6 l       .text  00000000 
f00013a6 l       .text  00000000 
f00013a6 l       .text  00000000 
f00013a6 l       .text  00000000 
f00013a6 l       .text  00000000 
f00013a6 l       .text  00000000 
f00013a8 l       .text  00000000 
f00013aa l       .text  00000000 
f00013aa l       .text  00000000 
f00013ae l       .text  00000000 
f00013ae l       .text  00000000 
f00013b4 l       .text  00000000 
f00013b4 l       .text  00000000 
f00013b6 l       .text  00000000 
f00013b8 l       .text  00000000 
f00013bc l       .text  00000000 
f00013bc l       .text  00000000 
f00013be l       .text  00000000 
f00013be l       .text  00000000 
f00013c0 l       .text  00000000 
f00013c2 l       .text  00000000 
f00013c6 l       .text  00000000 
f00013c6 l       .text  00000000 
f00013ca l       .text  00000000 
f00013d2 l       .text  00000000 
f00013d4 l       .text  00000000 
f00013d6 l       .text  00000000 
f00013de l       .text  00000000 
f00013e0 l       .text  00000000 
f00013e0 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013ea l       .text  00000000 
f00013ea l       .text  00000000 
f00013ec l       .text  00000000 
f00013ec l       .text  00000000 
f00013f2 l       .text  00000000 
f00013f2 l       .text  00000000 
f00013f4 l       .text  00000000 
f00013f4 l       .text  00000000 
f00013f6 l       .text  00000000 
f00013f6 l       .text  00000000 
f00013f8 l       .text  00000000 
f00013f8 l       .text  00000000 
f00013fa l       .text  00000000 
f00013fa l       .text  00000000 
f00013fe l       .text  00000000 
f00013fe l       .text  00000000 
f0001400 l       .text  00000000 
f0001400 l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f0001414 l       .text  00000000 
f000141a l       .text  00000000 
f000141a l       .text  00000000 
f000141c l       .text  00000000 
f0001420 l       .text  00000000 
f0001420 l       .text  00000000 
f0001424 l       .text  00000000 
f0001424 l       .text  00000000 
f0001428 l       .text  00000000 
f0001428 l       .text  00000000 
f0001434 l       .text  00000000 
f000143a l       .text  00000000 
f000143a l       .text  00000000 
f000143c l       .text  00000000 
f000143c l       .text  00000000 
f000143e l       .text  00000000 
f000143e l       .text  00000000 
f0001444 l       .text  00000000 
f0001444 l       .text  00000000 
f0001446 l       .text  00000000 
f000144e l       .text  00000000 
f000144e l       .text  00000000 
f0001452 l       .text  00000000 
f0001452 l       .text  00000000 
f0001454 l       .text  00000000 
f0001454 l       .text  00000000 
f000145a l       .text  00000000 
f000145a l       .text  00000000 
f000145c l       .text  00000000 
f000145e l       .text  00000000 
f000145e l       .text  00000000 
f0001460 l       .text  00000000 
f0001460 l       .text  00000000 
f0001462 l       .text  00000000 
f0001464 l       .text  00000000 
f0001466 l       .text  00000000 
f0001466 l       .text  00000000 
f0001468 l       .text  00000000 
f000146a l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f000147a l       .text  00000000 
f0001480 l       .text  00000000 
f0001480 l       .text  00000000 
f0001482 l       .text  00000000 
f0001482 l       .text  00000000 
f0001484 l       .text  00000000 
f0001484 l       .text  00000000 
f0001486 l       .text  00000000 
f0001486 l       .text  00000000 
f0001488 l       .text  00000000 
f000148a l       .text  00000000 
f000148a l       .text  00000000 
f000148c l       .text  00000000 
f000148c l       .text  00000000 
f0001490 l       .text  00000000 
f0001498 l       .text  00000000 
f0001498 l       .text  00000000 
f0001498 l       .text  00000000 
f0001498 l       .text  00000000 
f0001498 l       .text  00000000 
f0001498 l       .text  00000000 
f00014a0 l       .text  00000000 
f00014a6 l       .text  00000000 
f00014a8 l       .text  00000000 
f00014a8 l       .text  00000000 
f00014ac l       .text  00000000 
f00014ac l       .text  00000000 
f00014b0 l       .text  00000000 
f00014b0 l       .text  00000000 
f00014b2 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014ba l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c4 l       .text  00000000 
f00014c6 l       .text  00000000 
f00014c6 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014ca l       .text  00000000 
f00014ca l       .text  00000000 
f00014ce l       .text  00000000 
f00014ce l       .text  00000000 
f00014d0 l       .text  00000000 
f00014d0 l       .text  00000000 
f00014d2 l       .text  00000000 
f00014da l       .text  00000000 
f00014da l       .text  00000000 
f00014dc l       .text  00000000 
f00014dc l       .text  00000000 
f00014e6 l       .text  00000000 
f00014e6 l       .text  00000000 
f00014e6 l       .text  00000000 
f00014e6 l       .text  00000000 
f00014e6 l       .text  00000000 
f00014e6 l       .text  00000000 
f00014ee l       .text  00000000 
f00014f4 l       .text  00000000 
f00014f6 l       .text  00000000 
f00014f6 l       .text  00000000 
f00014fa l       .text  00000000 
f00014fa l       .text  00000000 
f00014fe l       .text  00000000 
f00014fe l       .text  00000000 
f0001500 l       .text  00000000 
f0001500 l       .text  00000000 
f0001506 l       .text  00000000 
f0001506 l       .text  00000000 
f0001508 l       .text  00000000 
f0001508 l       .text  00000000 
f000150c l       .text  00000000 
f000150c l       .text  00000000 
f000150e l       .text  00000000 
f0001514 l       .text  00000000 
f0001518 l       .text  00000000 
f0001520 l       .text  00000000 
f0001520 l       .text  00000000 
f0001522 l       .text  00000000 
f0001522 l       .text  00000000 
f0001526 l       .text  00000000 
f0001526 l       .text  00000000 
f0001528 l       .text  00000000 
f0001528 l       .text  00000000 
f0001530 l       .text  00000000 
f0001530 l       .text  00000000 
f0001532 l       .text  00000000 
f0001532 l       .text  00000000 
f0001534 l       .text  00000000 
f0001536 l       .text  00000000 
f0001536 l       .text  00000000 
f0001538 l       .text  00000000 
f0001538 l       .text  00000000 
f000153a l       .text  00000000 
f000153c l       .text  00000000 
f0001540 l       .text  00000000 
f0001540 l       .text  00000000 
f0001542 l       .text  00000000 
f0001542 l       .text  00000000 
f0001544 l       .text  00000000 
f0001544 l       .text  00000000 
f0001546 l       .text  00000000 
f0001546 l       .text  00000000 
f000154c l       .text  00000000 
f000154c l       .text  00000000 
f000154e l       .text  00000000 
f000154e l       .text  00000000 
f0001552 l       .text  00000000 
f0001552 l       .text  00000000 
f0001556 l       .text  00000000 
f0001556 l       .text  00000000 
f000155e l       .text  00000000 
f0001560 l       .text  00000000 
f0001560 l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
00001751 l       .debug_loc     00000000 
00001782 l       .debug_loc     00000000 
000017b3 l       .debug_loc     00000000 
000017db l       .debug_loc     00000000 
0000180c l       .debug_loc     00000000 
00001849 l       .debug_loc     00000000 
00001865 l       .debug_loc     00000000 
00001881 l       .debug_loc     00000000 
000018a3 l       .debug_loc     00000000 
000018de l       .debug_loc     00000000 
000018f9 l       .debug_loc     00000000 
00001914 l       .debug_loc     00000000 
00001936 l       .debug_loc     00000000 
00001951 l       .debug_loc     00000000 
00001973 l       .debug_loc     00000000 
000019a4 l       .debug_loc     00000000 
000019cc l       .debug_loc     00000000 
000019fd l       .debug_loc     00000000 
00001a4b l       .debug_loc     00000000 
00001a67 l       .debug_loc     00000000 
00001a83 l       .debug_loc     00000000 
00001a9e l       .debug_loc     00000000 
00001ac0 l       .debug_loc     00000000 
00001adb l       .debug_loc     00000000 
00001af7 l       .debug_loc     00000000 
00001b19 l       .debug_loc     00000000 
00001b3b l       .debug_loc     00000000 
00001b56 l       .debug_loc     00000000 
00001b78 l       .debug_loc     00000000 
00001b9e l       .debug_loc     00000000 
00001bb9 l       .debug_loc     00000000 
00001bdf l       .debug_loc     00000000 
00001c05 l       .debug_loc     00000000 
00001c2b l       .debug_loc     00000000 
00001c5c l       .debug_loc     00000000 
00001c9b l       .debug_loc     00000000 
00001cb6 l       .debug_loc     00000000 
00001cd1 l       .debug_loc     00000000 
00001cec l       .debug_loc     00000000 
00001d07 l       .debug_loc     00000000 
00001d22 l       .debug_loc     00000000 
00001d3d l       .debug_loc     00000000 
00001d58 l       .debug_loc     00000000 
00001d73 l       .debug_loc     00000000 
00001d8e l       .debug_loc     00000000 
00001db1 l       .debug_loc     00000000 
00001dcc l       .debug_loc     00000000 
00001de7 l       .debug_loc     00000000 
00001e02 l       .debug_loc     00000000 
00001e1f l       .debug_loc     00000000 
00001e3c l       .debug_loc     00000000 
00001e62 l       .debug_loc     00000000 
00001e7d l       .debug_loc     00000000 
00001e9f l       .debug_loc     00000000 
00001ed0 l       .debug_loc     00000000 
00001f10 l       .debug_loc     00000000 
00001f36 l       .debug_loc     00000000 
00001f58 l       .debug_loc     00000000 
00001f73 l       .debug_loc     00000000 
00001fae l       .debug_loc     00000000 
00001fc9 l       .debug_loc     00000000 
0000200c l       .debug_loc     00000000 
0000202e l       .debug_loc     00000000 
00002050 l       .debug_loc     00000000 
0000206b l       .debug_loc     00000000 
00002086 l       .debug_loc     00000000 
000020a1 l       .debug_loc     00000000 
000020bc l       .debug_loc     00000000 
000020f7 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000ec2 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000300 l       .debug_ranges  00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000002c7 l       .debug_str     00000000 
00000298 l       .debug_str     00000000 
000002ae l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
000002f1 l       .debug_str     00000000 
000002fc l       .debug_str     00000000 
00000307 l       .debug_str     00000000 
0000038a l       .debug_str     00000000 
0000033e l       .debug_str     00000000 
0000034d l       .debug_str     00000000 
0000035c l       .debug_str     00000000 
0000036b l       .debug_str     00000000 
0000037a l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00000c31 l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00000edf l       .debug_str     00000000 
00001732 l       .debug_str     00000000 
00001739 l       .debug_str     00000000 
00000f06 l       .debug_str     00000000 
00000f1e l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
000003c9 l       .debug_str     00000000 
000003b4 l       .debug_str     00000000 
00000f0b l       .debug_str     00000000 
00000f23 l       .debug_str     00000000 
0000031b l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
0000039e l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
00000cb8 l       .debug_str     00000000 
00005b34 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
00000f35 l       .debug_str     00000000 
00000f3d l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00000f41 l       .debug_str     00000000 
00000f61 l       .debug_str     00000000 
000005e3 l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
0000586d l       .debug_str     00000000 
0000479d l       .debug_str     00000000 
000002b8 l       .debug_ranges  00000000 
00001015 l       .debug_str     00000000 
000002d0 l       .debug_ranges  00000000 
000004f5 l       .debug_str     00000000 
00001009 l       .debug_str     00000000 
000005fc l       .debug_str     00000000 
00000f70 l       .debug_str     00000000 
0000055f l       .debug_str     00000000 
00000556 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000f7b l       .debug_str     00000000 
00000f90 l       .debug_str     00000000 
00000fa9 l       .debug_str     00000000 
00000a92 l       .debug_str     00000000 
000046f6 l       .debug_str     00000000 
00006595 l       .debug_str     00000000 
00001022 l       .debug_str     00000000 
0000102d l       .debug_str     00000000 
00001037 l       .debug_str     00000000 
000066e7 l       .debug_str     00000000 
00001047 l       .debug_str     00000000 
00003d2f l       .debug_str     00000000 
00000fbc l       .debug_str     00000000 
00000a34 l       .debug_str     00000000 
00001054 l       .debug_str     00000000 
00000928 l       .debug_str     00000000 
00001060 l       .debug_str     00000000 
00001068 l       .debug_str     00000000 
00001072 l       .debug_str     00000000 
000006ac l       .debug_str     00000000 
00000fd2 l       .debug_str     00000000 
00000c44 l       .debug_str     00000000 
00000fe8 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000409 l       .debug_str     00000000 
000003f9 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000a7b l       .debug_str     00000000 
0000107c l       .debug_str     00000000 
0000108a l       .debug_str     00000000 
000009ff l       .debug_str     00000000 
0000108f l       .debug_str     00000000 
000002e8 l       .debug_ranges  00000000 
00000ff4 l       .debug_str     00000000 
0000109a l       .debug_str     00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
000001ec l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f0001570 l       .text  00000000 
f0001574 l       .text  00000000 
f0001576 l       .text  00000000 
f000157a l       .text  00000000 
f0001582 l       .text  00000000 
f000158a l       .text  00000000 
00010154 l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
f000158c l       .text  00000000 
f000159a l       .text  00000000 
f0004a9c l     O .rodata        00000014 ottf_machine_ecall_handler.log_fields
f00015a2 l       .text  00000000 
f00015ae l       .text  00000000 
f00015b6 l       .text  00000000 
f00015b6 l       .text  00000000 
f00015b6 l       .text  00000000 
f00015b6 l       .text  00000000 
f00015b6 l       .text  00000000 
e000206c l     O .bss   00000004 status_report_list_cnt
f00015b6 l       .text  00000000 
f00015be l       .text  00000000 
f00015c6 l       .text  00000000 
f00015ca l       .text  00000000 
f00015d6 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015de l       .text  00000000 
f00015e0 l       .text  00000000 
f00015e8 l       .text  00000000 
f00015e8 l       .text  00000000 
f00015e8 l       .text  00000000 
f00015e8 l       .text  00000000 
f00015e8 l       .text  00000000 
f00015ea l       .text  00000000 
f00015f0 l       .text  00000000 
f00015f6 l       .text  00000000 
f00015fa l       .text  00000000 
f00015fa l       .text  00000000 
f000160e l       .text  00000000 
f0001610 l       .text  00000000 
f0001612 l       .text  00000000 
f0001612 l       .text  00000000 
f0001618 l       .text  00000000 
00010168 l     O .logs.fields   00000014 _ottf_main.kLogFields
f000161a l       .text  00000000 
f0001628 l       .text  00000000 
f0001628 l       .text  00000000 
f0004ab4 l     O .rodata        00000014 _ottf_main.log_fields
f0001632 l       .text  00000000 
f0001640 l       .text  00000000 
f0001640 l       .text  00000000 
f000164a l       .text  00000000 
f000164e l       .text  00000000 
f000164e l       .text  00000000 
f0001652 l       .text  00000000 
0001017c l     O .logs.fields   00000014 _ottf_main.kLogFields.3
f0001654 l       .text  00000000 
f0001662 l       .text  00000000 
f0001662 l       .text  00000000 
f000166c l       .text  00000000 
f0004ac8 l     O .rodata        00000014 _ottf_main.log_fields.5
f000166c l       .text  00000000 
f000167a l       .text  00000000 
f000167a l       .text  00000000 
f0001680 l       .text  00000000 
f0001684 l       .text  00000000 
f0001684 l       .text  00000000 
f000168c l       .text  00000000 
f000169c l       .text  00000000 
f00016a0 l       .text  00000000 
f00016a2 l       .text  00000000 
f0001758 l     F .text  0000017e test_wrapper
f00016a2 l       .text  00000000 
f00016aa l       .text  00000000 
f00016b2 l       .text  00000000 
f00016c0 l       .text  00000000 
f00016c0 l       .text  00000000 
f00016c4 l       .text  00000000 
f00016c4 l       .text  00000000 
f00016ce l       .text  00000000 
f00016d0 l       .text  00000000 
f00016d0 l       .text  00000000 
f00016e4 l       .text  00000000 
f00016e4 l       .text  00000000 
f00016e8 l       .text  00000000 
f00016ec l       .text  00000000 
f00016ec l       .text  00000000 
f00016ee l       .text  00000000 
f00016f2 l       .text  00000000 
f00016f2 l       .text  00000000 
00010190 l     O .logs.fields   00000014 _ottf_main.kLogFields.7
f00016f4 l       .text  00000000 
f0001702 l       .text  00000000 
f0001702 l       .text  00000000 
f0004adc l     O .rodata        00000014 _ottf_main.log_fields.9
f000170c l       .text  00000000 
f0001718 l       .text  00000000 
f0001718 l       .text  00000000 
f000172e l       .text  00000000 
f000172e l       .text  00000000 
f0001734 l       .text  00000000 
f0001734 l       .text  00000000 
f000173a l       .text  00000000 
f000173c l       .text  00000000 
f0001742 l       .text  00000000 
f0001746 l       .text  00000000 
f0001746 l       .text  00000000 
f000174c l       .text  00000000 
f0001758 l       .text  00000000 
f0001758 l       .text  00000000 
f0001758 l       .text  00000000 
f0001758 l       .text  00000000 
f0001758 l       .text  00000000 
f000175a l       .text  00000000 
f000175a l       .text  00000000 
f000176e l       .text  00000000 
f0001772 l       .text  00000000 
f0001772 l       .text  00000000 
f0001774 l       .text  00000000 
f0001778 l       .text  00000000 
f0001778 l       .text  00000000 
f000177a l       .text  00000000 
f000177e l       .text  00000000 
f0001782 l       .text  00000000 
f000178c l       .text  00000000 
f000178c l       .text  00000000 
f0001798 l       .text  00000000 
f000179a l       .text  00000000 
f00017a6 l       .text  00000000 
f00017a8 l       .text  00000000 
f00017aa l       .text  00000000 
f00017aa l       .text  00000000 
f00017b0 l       .text  00000000 
000101a4 l     O .logs.fields   00000014 report_test_status.kLogFields
f00017b2 l       .text  00000000 
f00017c0 l       .text  00000000 
f00017c0 l       .text  00000000 
f00017c4 l       .text  00000000 
f00017ca l       .text  00000000 
f00017d2 l       .text  00000000 
f0004af0 l     O .rodata        00000014 report_test_status.log_fields
f00017d2 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e4 l       .text  00000000 
f00017e4 l       .text  00000000 
f00017e8 l       .text  00000000 
000101b8 l     O .logs.fields   00000014 report_test_status.kLogFields.12
f00017ec l       .text  00000000 
f00017fa l       .text  00000000 
f00017fa l       .text  00000000 
f00017fc l       .text  00000000 
f0001804 l       .text  00000000 
f0004b04 l     O .rodata        00000014 report_test_status.log_fields.14
f0001804 l       .text  00000000 
f0001810 l       .text  00000000 
f0001810 l       .text  00000000 
f0001818 l       .text  00000000 
f0001818 l       .text  00000000 
f0001820 l       .text  00000000 
f0001824 l       .text  00000000 
f0001824 l       .text  00000000 
f0001828 l       .text  00000000 
f0004b18 l     O .rodata        00000014 report_test_status.log_fields.17
f000183c l       .text  00000000 
000101cc l     O .logs.fields   00000014 report_test_status.kLogFields.15
f0001844 l       .text  00000000 
f0001844 l       .text  00000000 
f0001848 l       .text  00000000 
f000184e l       .text  00000000 
f000184e l       .text  00000000 
f0001852 l       .text  00000000 
f0001858 l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001862 l       .text  00000000 
f000186a l       .text  00000000 
f000186a l       .text  00000000 
f0001872 l       .text  00000000 
f0001872 l       .text  00000000 
f0001874 l       .text  00000000 
f0001876 l       .text  00000000 
f000187a l       .text  00000000 
f000187a l       .text  00000000 
f000187e l       .text  00000000 
f0001882 l       .text  00000000 
000101e0 l     O .logs.fields   00000014 report_test_status.kLogFields.18
f0001886 l       .text  00000000 
f0001894 l       .text  00000000 
f0001894 l       .text  00000000 
f0001896 l       .text  00000000 
f000189e l       .text  00000000 
f0004b2c l     O .rodata        00000014 report_test_status.log_fields.20
f000189e l       .text  00000000 
f00018aa l       .text  00000000 
f00018aa l       .text  00000000 
f00018b0 l       .text  00000000 
f00018b2 l       .text  00000000 
f00018b2 l       .text  00000000 
f00018c8 l       .text  00000000 
f00018ce l       .text  00000000 
f00018d6 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018d6 l       .text  00000000 
00000380 l     O .ot.status_create_record       00000080 _ottf_main.kOtStatusRecord
00002112 l       .debug_loc     00000000 
0000212d l       .debug_loc     00000000 
00002148 l       .debug_loc     00000000 
00002163 l       .debug_loc     00000000 
0000217e l       .debug_loc     00000000 
00002199 l       .debug_loc     00000000 
000021b4 l       .debug_loc     00000000 
000021e5 l       .debug_loc     00000000 
00002200 l       .debug_loc     00000000 
0000221b l       .debug_loc     00000000 
00002236 l       .debug_loc     00000000 
00002276 l       .debug_loc     00000000 
000022b6 l       .debug_loc     00000000 
000022f2 l       .debug_loc     00000000 
00002324 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000010a2 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000348 l       .debug_ranges  00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
000013cd l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
0000143e l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00001426 l       .debug_str     00000000 
00000793 l       .debug_str     00000000 
00001104 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
0000098e l       .debug_str     00000000 
00000993 l       .debug_str     00000000 
000007ce l       .debug_str     00000000 
000007b6 l       .debug_str     00000000 
000007a3 l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
000010d3 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
000010e9 l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
00001173 l       .debug_str     00000000 
00001124 l       .debug_str     00000000 
00005ece l       .debug_str     00000000 
0000113f l       .debug_str     00000000 
00001157 l       .debug_str     00000000 
00001168 l       .debug_str     00000000 
00001111 l       .debug_str     00000000 
00001100 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
0000119b l       .debug_str     00000000 
00003f00 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000011ae l       .debug_str     00000000 
0000136b l       .debug_str     00000000 
000004a6 l       .debug_str     00000000 
000004bb l       .debug_str     00000000 
000004d4 l       .debug_str     00000000 
000004e6 l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000509 l       .debug_str     00000000 
00001228 l       .debug_str     00000000 
000011c5 l       .debug_str     00000000 
000011d2 l       .debug_str     00000000 
000011e6 l       .debug_str     00000000 
000011f7 l       .debug_str     00000000 
00001208 l       .debug_str     00000000 
00001219 l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00000909 l       .debug_str     00000000 
000007e8 l       .debug_str     00000000 
000007ec l       .debug_str     00000000 
000007f7 l       .debug_str     00000000 
00000800 l       .debug_str     00000000 
00000811 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
0000083c l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
00000861 l       .debug_str     00000000 
00000875 l       .debug_str     00000000 
0000087e l       .debug_str     00000000 
0000088a l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000008a3 l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000008cb l       .debug_str     00000000 
00001234 l       .debug_str     00000000 
00001235 l       .debug_str     00000000 
0000091a l       .debug_str     00000000 
00001240 l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
00001253 l       .debug_str     00000000 
0000125f l       .debug_str     00000000 
0000127d l       .debug_str     00000000 
0000126e l       .debug_str     00000000 
0000129a l       .debug_str     00000000 
00001286 l       .debug_str     00000000 
000013e8 l       .debug_str     00000000 
000013f8 l       .debug_str     00000000 
000012a7 l       .debug_str     00000000 
0000140e l       .debug_str     00000000 
000012b3 l       .debug_str     00000000 
00000959 l       .debug_str     00000000 
000012c1 l       .debug_str     00000000 
000012d2 l       .debug_str     00000000 
000012e0 l       .debug_str     00000000 
000012ea l       .debug_str     00000000 
000012fb l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00001309 l       .debug_str     00000000 
000001e5 l       .debug_str     00000000 
000005b1 l       .debug_str     00000000 
000005c1 l       .debug_str     00000000 
00001314 l       .debug_str     00000000 
00001326 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
0000133c l       .debug_str     00000000 
00001350 l       .debug_str     00000000 
00001431 l       .debug_str     00000000 
00001447 l       .debug_str     00000000 
0000049f l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
00001364 l       .debug_str     00000000 
00001377 l       .debug_str     00000000 
000004f5 l       .debug_str     00000000 
00000e0a l       .debug_str     00000000 
00001381 l       .debug_str     00000000 
000006e4 l       .debug_str     00000000 
0000139c l       .debug_str     00000000 
000013b8 l       .debug_str     00000000 
00000280 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
f00018d6 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018e0 l       .text  00000000 
f00018e0 l       .text  00000000 
00000000 l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000013b8 l       .debug_str     00000000 
00000340 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
f00018e0 l       .text  00000000 
f00018e0 l       .text  00000000 
f00018e0 l       .text  00000000 
f00018e2 l       .text  00000000 
f00018e2 l       .text  00000000 
f00018e4 l       .text  00000000 
f00018ec l       .text  00000000 
f0004bf0 l     O .rodata        00000014 vApplicationMallocFailedHook.log_fields
f00018ee l       .text  00000000 
f0001902 l       .text  00000000 
f0001902 l       .text  00000000 
000101f4 l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
f000190c l       .text  00000000 
f0001922 l       .text  00000000 
f0001922 l       .text  00000000 
f0001928 l       .text  00000000 
f0001928 l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192e l       .text  00000000 
f000192e l       .text  00000000 
f0001930 l       .text  00000000 
f0001934 l       .text  00000000 
f000193a l       .text  00000000 
f000193a l       .text  00000000 
f0004c04 l     O .rodata        00000014 vApplicationStackOverflowHook.log_fields
f000193c l       .text  00000000 
f000194a l       .text  00000000 
f000194a l       .text  00000000 
f0001954 l       .text  00000000 
00010208 l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
f0001954 l       .text  00000000 
f0001962 l       .text  00000000 
f0001962 l       .text  00000000 
f0001968 l       .text  00000000 
f0001968 l       .text  00000000 
f000196c l       .text  00000000 
f000196c l       .text  00000000 
f000196c l       .text  00000000 
0000233f l       .debug_loc     00000000 
0000235a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000148c l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000390 l       .debug_ranges  00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
000014d8 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000014f5 l       .debug_str     00000000 
00001513 l       .debug_str     00000000 
00001519 l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
000014c2 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
000014d2 l       .debug_str     00000000 
0000129a l       .debug_str     00000000 
00001286 l       .debug_str     00000000 
00000364 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
f000196c l       .text  00000000 
f000196c l       .text  00000000 
f000196c l       .text  00000000 
f000196e l       .text  00000000 
f000196e l       .text  00000000 
f0001970 l       .text  00000000 
f0001976 l       .text  00000000 
f0001976 l       .text  00000000 
f000197c l       .text  00000000 
f000197c l       .text  00000000 
f0001982 l       .text  00000000 
f0001982 l       .text  00000000 
f0001986 l       .text  00000000 
f0001986 l       .text  00000000 
f000198a l       .text  00000000 
f0001996 l       .text  00000000 
f0001996 l       .text  00000000 
00000000 l       .debug_str     00000000 
00001524 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00001559 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00001235 l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000015a7 l       .debug_str     00000000 
00001560 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
00001581 l       .debug_str     00000000 
00001593 l       .debug_str     00000000 
000003a8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_console.c
e0002070 l     O .bss   00000004 ottf_console_uart
e0002114 l     O .bss   00000010 ottf_console_spi_device
f0001996 l       .text  00000000 
f0001996 l       .text  00000000 
f0001996 l       .text  00000000 
f0001998 l       .text  00000000 
f0001998 l       .text  00000000 
f000199c l       .text  00000000 
f00019a4 l       .text  00000000 
f00019a6 l       .text  00000000 
f00019a8 l       .text  00000000 
f00019a8 l       .text  00000000 
f00019aa l       .text  00000000 
f00019b0 l       .text  00000000 
f00019b4 l       .text  00000000 
f00019b4 l       .text  00000000 
f00019c8 l       .text  00000000 
f00019c8 l       .text  00000000 
f00019ca l       .text  00000000 
f00019ce l       .text  00000000 
f00019d2 l       .text  00000000 
f00019d2 l       .text  00000000 
f00019d6 l       .text  00000000 
f00019da l       .text  00000000 
f00019de l       .text  00000000 
0001021c l     O .logs.fields   00000014 ottf_console_init.kLogFields
f00019e2 l       .text  00000000 
f00019f0 l       .text  00000000 
f00019f0 l       .text  00000000 
f00019f2 l       .text  00000000 
f00019fa l       .text  00000000 
f00019fa l       .text  00000000 
f0001a08 l       .text  00000000 
f0001a0c l       .text  00000000 
f0001a0c l       .text  00000000 
f0001a14 l       .text  00000000 
00010230 l     O .logs.fields   00000014 ottf_console_init.kLogFields.2
f0001a16 l       .text  00000000 
f0001a24 l       .text  00000000 
f0001a24 l       .text  00000000 
f0001a26 l       .text  00000000 
f0001a2e l       .text  00000000 
f0001a2e l       .text  00000000 
f0001a42 l       .text  00000000 
f0001a42 l       .text  00000000 
f0001a46 l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a4e l       .text  00000000 
f0001a52 l       .text  00000000 
f0001a56 l       .text  00000000 
0001026c l     O .logs.fields   00000014 ottf_console_init.kLogFields.12
f0001a58 l       .text  00000000 
f0001a66 l       .text  00000000 
f0001a66 l       .text  00000000 
f0001a68 l       .text  00000000 
f0001a70 l       .text  00000000 
f000549c l     O .rodata        00000014 ottf_console_init.log_fields.4
f0001a70 l       .text  00000000 
f0001a7e l       .text  00000000 
f0001a7e l       .text  00000000 
f0001a84 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a9e l       .text  00000000 
f0001aa2 l       .text  00000000 
f0001aa2 l       .text  00000000 
f0001aaa l       .text  00000000 
00010244 l     O .logs.fields   00000014 ottf_console_init.kLogFields.5
f0001aac l       .text  00000000 
f0001aba l       .text  00000000 
f0001aba l       .text  00000000 
f0001abc l       .text  00000000 
f0001ac4 l       .text  00000000 
f00054b0 l     O .rodata        00000014 ottf_console_init.log_fields.7
f0001ac4 l       .text  00000000 
f0001ad2 l       .text  00000000 
f0001ad2 l       .text  00000000 
f0001ad8 l       .text  00000000 
f0001adc l       .text  00000000 
f0001adc l       .text  00000000 
f0001af0 l       .text  00000000 
f0001af0 l       .text  00000000 
f0001af4 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001afa l       .text  00000000 
f0001afe l       .text  00000000 
f0001b02 l       .text  00000000 
00010258 l     O .logs.fields   00000014 ottf_console_init.kLogFields.8
f0001b04 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b14 l       .text  00000000 
f0001b1c l       .text  00000000 
f00054d8 l     O .rodata        00000014 ottf_console_init.log_fields.14
f0001b1c l       .text  00000000 
f0001b28 l       .text  00000000 
f0001b28 l       .text  00000000 
f0001b3e l       .text  00000000 
f0001b3e l       .text  00000000 
f0001b44 l       .text  00000000 
f0001b44 l       .text  00000000 
f0001b4a l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b52 l       .text  00000000 
f0001b56 l       .text  00000000 
f0001b56 l       .text  00000000 
f0001b5c l       .text  00000000 
f0001b64 l       .text  00000000 
f00054c4 l     O .rodata        00000014 ottf_console_init.log_fields.10
f0001b64 l       .text  00000000 
f0001b70 l       .text  00000000 
f0001b70 l       .text  00000000 
f0001b86 l       .text  00000000 
f0001b86 l       .text  00000000 
f0001b8c l       .text  00000000 
f0001b8c l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b94 l       .text  00000000 
f0001b9a l       .text  00000000 
f0001b9e l       .text  00000000 
f0001b9e l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001bae l       .text  00000000 
f0005488 l     O .rodata        00000014 ottf_console_init.log_fields
f0001bae l       .text  00000000 
f0001bba l       .text  00000000 
f0001bba l       .text  00000000 
f0001bd0 l       .text  00000000 
f0001bd0 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001be0 l       .text  00000000 
f0001be0 l       .text  00000000 
f0001be2 l       .text  00000000 
f0001be8 l       .text  00000000 
f0001bec l       .text  00000000 
f0001bec l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf6 l       .text  00000000 
f0001bfe l       .text  00000000 
f0001bfe l       .text  00000000 
f0001bfe l       .text  00000000 
f0001bfe l       .text  00000000 
f0001bfe l       .text  00000000 
f0001c00 l       .text  00000000 
f0001c00 l       .text  00000000 
f0001c00 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c14 l       .text  00000000 
f0001c14 l       .text  00000000 
f0001c18 l       .text  00000000 
f0001c1c l       .text  00000000 
f0001c1c l       .text  00000000 
f0001c20 l       .text  00000000 
00010280 l     O .logs.fields   00000014 ottf_console_configure_uart.kLogFields
f0001c22 l       .text  00000000 
f0001c30 l       .text  00000000 
f0001c30 l       .text  00000000 
f0001c3a l       .text  00000000 
f00054ec l     O .rodata        00000014 ottf_console_configure_uart.log_fields
f0001c3a l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c4e l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c66 l       .text  00000000 
f0001c66 l       .text  00000000 
f0001c78 l       .text  00000000 
f0001c7c l       .text  00000000 
f0001c7c l       .text  00000000 
f0001c7e l       .text  00000000 
f0001c82 l       .text  00000000 
f0001c82 l       .text  00000000 
00010294 l     O .logs.fields   00000014 ottf_console_configure_uart.kLogFields.17
f0001c84 l       .text  00000000 
f0001c92 l       .text  00000000 
f0001c92 l       .text  00000000 
f0005500 l     O .rodata        00000014 ottf_console_configure_uart.log_fields.19
f0001c9c l       .text  00000000 
f0001ca8 l       .text  00000000 
f0001ca8 l       .text  00000000 
f0001cbe l       .text  00000000 
f0001cbe l       .text  00000000 
f0001cc4 l       .text  00000000 
f0001cc4 l       .text  00000000 
f0001cca l       .text  00000000 
f0001ccc l       .text  00000000 
f0001cd2 l       .text  00000000 
f0001cd6 l       .text  00000000 
f0001cd6 l       .text  00000000 
f0001cea l       .text  00000000 
f0001cea l       .text  00000000 
f0001cfc l       .text  00000000 
f0001d00 l       .text  00000000 
f0001d00 l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d06 l       .text  00000000 
f0001d06 l       .text  00000000 
000102a8 l     O .logs.fields   00000014 ottf_console_configure_uart.kLogFields.20
f0001d08 l       .text  00000000 
f0001d16 l       .text  00000000 
f0001d16 l       .text  00000000 
f0005514 l     O .rodata        00000014 ottf_console_configure_uart.log_fields.22
f0001d20 l       .text  00000000 
f0001d2c l       .text  00000000 
f0001d2c l       .text  00000000 
f0001d42 l       .text  00000000 
f0001d42 l       .text  00000000 
f0001d44 l       .text  00000000 
f0001d46 l       .text  00000000 
f0001d46 l       .text  00000000 
f0001d4c l       .text  00000000 
f0001d4c l       .text  00000000 
f0001d52 l       .text  00000000 
f0001d54 l       .text  00000000 
f0001d5a l       .text  00000000 
f0001d5e l       .text  00000000 
f0001d5e l       .text  00000000 
f0001d7a l       .text  00000000 
f0001d7e l       .text  00000000 
f0001d7e l       .text  00000000 
f0001d82 l       .text  00000000 
000102bc l     O .logs.fields   00000014 ottf_console_configure_uart.kLogFields.24
f0001d84 l       .text  00000000 
f0001d92 l       .text  00000000 
f0001d92 l       .text  00000000 
f0001d9c l       .text  00000000 
f0005528 l     O .rodata        00000014 ottf_console_configure_uart.log_fields.26
f0001d9c l       .text  00000000 
f0001daa l       .text  00000000 
f0001daa l       .text  00000000 
f0001db0 l       .text  00000000 
f0001db4 l       .text  00000000 
f0001db4 l       .text  00000000 
f0001dc0 l       .text  00000000 
f0001dc0 l       .text  00000000 
f0001dc8 l       .text  00000000 
f0001dca l       .text  00000000 
f0001dcc l       .text  00000000 
f0001dcc l       .text  00000000 
f0001dd4 l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de0 l       .text  00000000 
f0001de2 l       .text  00000000 
f0001de2 l       .text  00000000 
f0001de2 l       .text  00000000 
f0001dec l       .text  00000000 
f0001dfc l       .text  00000000 
f0001dfc l       .text  00000000 
f0001e00 l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e08 l       .text  00000000 
000102d0 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields
f0001e0a l       .text  00000000 
f0001e18 l       .text  00000000 
f0001e18 l       .text  00000000 
f0001e22 l       .text  00000000 
f000553c l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields
f0001e22 l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e36 l       .text  00000000 
f0001e3a l       .text  00000000 
f0001e3a l       .text  00000000 
f0001e46 l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e64 l       .text  00000000 
f0001e64 l       .text  00000000 
f0001e6c l       .text  00000000 
f0001e70 l       .text  00000000 
f0001e70 l       .text  00000000 
f0001e74 l       .text  00000000 
000102e4 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.28
f0001e76 l       .text  00000000 
f0001e84 l       .text  00000000 
f0001e84 l       .text  00000000 
f0001e86 l       .text  00000000 
f0001e8e l       .text  00000000 
f0005550 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.30
f0001e8e l       .text  00000000 
f0001e9c l       .text  00000000 
f0001e9c l       .text  00000000 
f0001ea2 l       .text  00000000 
f0001ea6 l       .text  00000000 
f0001ea6 l       .text  00000000 
f0001eb0 l       .text  00000000 
f0001eb4 l       .text  00000000 
f0001eb4 l       .text  00000000 
f0001eb8 l       .text  00000000 
000102f8 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.31
f0001eba l       .text  00000000 
f0001ec8 l       .text  00000000 
f0001ec8 l       .text  00000000 
f0001eca l       .text  00000000 
f0001ed2 l       .text  00000000 
f0005564 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.33
f0001ed2 l       .text  00000000 
f0001ee0 l       .text  00000000 
f0001ee0 l       .text  00000000 
f0001ee6 l       .text  00000000 
f0001eea l       .text  00000000 
f0001eea l       .text  00000000 
f0001ef0 l       .text  00000000 
f0001f06 l       .text  00000000 
f0001f06 l       .text  00000000 
f0001f0a l       .text  00000000 
f0001f12 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f2a l       .text  00000000 
f0001f2e l       .text  00000000 
f0001f2e l       .text  00000000 
f0001f32 l       .text  00000000 
0001030c l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.34
f0001f34 l       .text  00000000 
f0001f42 l       .text  00000000 
f0001f42 l       .text  00000000 
f0001f44 l       .text  00000000 
f0001f4c l       .text  00000000 
f0005578 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.36
f0001f4c l       .text  00000000 
f0001f5a l       .text  00000000 
f0001f5a l       .text  00000000 
f0001f60 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f7a l       .text  00000000 
f0001f7e l       .text  00000000 
f0001f7e l       .text  00000000 
f0001f82 l       .text  00000000 
00010320 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.37
f0001f84 l       .text  00000000 
f0001f92 l       .text  00000000 
f0001f92 l       .text  00000000 
f0001f94 l       .text  00000000 
f0001f9c l       .text  00000000 
f000558c l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.39
f0001f9c l       .text  00000000 
f0001faa l       .text  00000000 
f0001faa l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fb4 l       .text  00000000 
f0001fb4 l       .text  00000000 
f0001fb6 l       .text  00000000 
f0001fb6 l       .text  00000000 
f0001fba l       .text  00000000 
f0001fba l       .text  00000000 
f0001fbe l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fca l       .text  00000000 
f0001fdc l       .text  00000000 
f0001fe0 l       .text  00000000 
f0001fe0 l       .text  00000000 
f0001fe4 l       .text  00000000 
00010334 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.40
f0001fe6 l       .text  00000000 
f0001ff4 l       .text  00000000 
f0001ff4 l       .text  00000000 
f0001ff6 l       .text  00000000 
f0001ffe l       .text  00000000 
f00055a0 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.42
f0001ffe l       .text  00000000 
f000200c l       .text  00000000 
f000200c l       .text  00000000 
f0002012 l       .text  00000000 
f0002016 l       .text  00000000 
e0002074 l     O .bss   00000004 flow_control_state
f0002016 l       .text  00000000 
f000201e l       .text  00000000 
f0002022 l       .text  00000000 
f0002022 l       .text  00000000 
f0002026 l       .text  00000000 
f0002026 l       .text  00000000 
f0002032 l       .text  00000000 
f0002034 l       .text  00000000 
f0002038 l       .text  00000000 
f0002040 l       .text  00000000 
f0002040 l       .text  00000000 
f0002040 l       .text  00000000 
f0002040 l       .text  00000000 
f0002040 l       .text  00000000 
f0002042 l       .text  00000000 
f000204a l       .text  00000000 
f000204c l       .text  00000000 
f000204e l       .text  00000000 
f000204e l       .text  00000000 
f0002054 l       .text  00000000 
f0002054 l       .text  00000000 
f0002058 l       .text  00000000 
f000205c l       .text  00000000 
f000205c l       .text  00000000 
f0002060 l       .text  00000000 
00010370 l     O .logs.fields   00000014 ottf_console_flow_control.kLogFields
f0002062 l       .text  00000000 
f0002070 l       .text  00000000 
f0002070 l       .text  00000000 
f0002072 l       .text  00000000 
f000207a l       .text  00000000 
f00055dc l     O .rodata        00000014 ottf_console_flow_control.log_fields
f000207a l       .text  00000000 
f0002088 l       .text  00000000 
f0002088 l       .text  00000000 
f000208e l       .text  00000000 
f0002092 l       .text  00000000 
f0002092 l       .text  00000000 
f00021e2 l     F .text  000001f0 manage_flow_control
f0002098 l       .text  00000000 
f000209a l       .text  00000000 
f000209a l       .text  00000000 
f00020a2 l       .text  00000000 
f00020a6 l       .text  00000000 
f00020a6 l       .text  00000000 
f00020aa l       .text  00000000 
00010384 l     O .logs.fields   00000014 ottf_console_flow_control.kLogFields.48
f00020ac l       .text  00000000 
f00020ba l       .text  00000000 
f00020ba l       .text  00000000 
f00020bc l       .text  00000000 
f00020c4 l       .text  00000000 
f00055f0 l     O .rodata        00000014 ottf_console_flow_control.log_fields.50
f00020c4 l       .text  00000000 
f00020d2 l       .text  00000000 
f00020d2 l       .text  00000000 
f00020d8 l       .text  00000000 
f00020dc l       .text  00000000 
f00020dc l       .text  00000000 
f00020e2 l       .text  00000000 
f00020e4 l       .text  00000000 
f00020e6 l       .text  00000000 
f00020ea l       .text  00000000 
f00020f2 l       .text  00000000 
f00020f2 l       .text  00000000 
f00020f2 l       .text  00000000 
f00020f2 l       .text  00000000 
f00020f2 l       .text  00000000 
f00020f4 l       .text  00000000 
f00020f4 l       .text  00000000 
f00020f4 l       .text  00000000 
f00020fc l       .text  00000000 
f0002100 l       .text  00000000 
f0002106 l       .text  00000000 
f000210a l       .text  00000000 
f0002124 l       .text  00000000 
e0002078 l     O .bss   00000004 flow_control_irqs
f0002124 l       .text  00000000 
f0002132 l       .text  00000000 
f0002132 l       .text  00000000 
f000213e l       .text  00000000 
f000213e l       .text  00000000 
f0002142 l       .text  00000000 
f0002146 l       .text  00000000 
f0002146 l       .text  00000000 
f000214a l       .text  00000000 
00010348 l     O .logs.fields   00000014 ottf_console_flow_control_isr.kLogFields
f000214c l       .text  00000000 
f000215a l       .text  00000000 
f000215a l       .text  00000000 
f000215c l       .text  00000000 
f0002164 l       .text  00000000 
f00055b4 l     O .rodata        00000014 ottf_console_flow_control_isr.log_fields
f0002164 l       .text  00000000 
f0002172 l       .text  00000000 
f0002172 l       .text  00000000 
f0002178 l       .text  00000000 
f000217c l       .text  00000000 
f000217c l       .text  00000000 
f0002180 l       .text  00000000 
f0002180 l       .text  00000000 
f0002182 l       .text  00000000 
f0002188 l       .text  00000000 
f0002188 l       .text  00000000 
f0002190 l       .text  00000000 
f0002194 l       .text  00000000 
f0002194 l       .text  00000000 
f0002198 l       .text  00000000 
0001035c l     O .logs.fields   00000014 ottf_console_flow_control_isr.kLogFields.44
f000219a l       .text  00000000 
f00021a8 l       .text  00000000 
f00021a8 l       .text  00000000 
f00021aa l       .text  00000000 
f00021b2 l       .text  00000000 
f00055c8 l     O .rodata        00000014 ottf_console_flow_control_isr.log_fields.46
f00021b2 l       .text  00000000 
f00021c0 l       .text  00000000 
f00021c0 l       .text  00000000 
f00021c6 l       .text  00000000 
f00021ca l       .text  00000000 
f00021ca l       .text  00000000 
f00021ce l       .text  00000000 
f00021d2 l       .text  00000000 
f00021d6 l       .text  00000000 
f00021e2 l       .text  00000000 
f00021e2 l       .text  00000000 
f00021e2 l       .text  00000000 
f00021e2 l       .text  00000000 
f00021e2 l       .text  00000000 
f00021e4 l       .text  00000000 
f00021e4 l       .text  00000000 
f00021ec l       .text  00000000 
f00021f4 l       .text  00000000 
f00021f6 l       .text  00000000 
f00021f8 l       .text  00000000 
f00021fa l       .text  00000000 
f00021fc l       .text  00000000 
f0002200 l       .text  00000000 
f0002200 l       .text  00000000 
f0002208 l       .text  00000000 
f000220a l       .text  00000000 
f0002214 l       .text  00000000 
f0002216 l       .text  00000000 
f0002230 l       .text  00000000 
f0002230 l       .text  00000000 
f0002234 l       .text  00000000 
f0002234 l       .text  00000000 
f0002236 l       .text  00000000 
f0002236 l       .text  00000000 
f0002238 l       .text  00000000 
f000223c l       .text  00000000 
f0002240 l       .text  00000000 
f0002240 l       .text  00000000 
f0002242 l       .text  00000000 
f0002242 l       .text  00000000 
f0002246 l       .text  00000000 
f0002246 l       .text  00000000 
f0002250 l       .text  00000000 
f0002256 l       .text  00000000 
f0002256 l       .text  00000000 
f000225e l       .text  00000000 
00010398 l     O .logs.fields   00000014 manage_flow_control.kLogFields
f0002260 l       .text  00000000 
f000226e l       .text  00000000 
f000226e l       .text  00000000 
f0002270 l       .text  00000000 
f0002278 l       .text  00000000 
f0002278 l       .text  00000000 
f0002280 l       .text  00000000 
f0002288 l       .text  00000000 
f0002292 l       .text  00000000 
f0002298 l       .text  00000000 
f00022a0 l       .text  00000000 
f00022a0 l       .text  00000000 
f00022a2 l       .text  00000000 
f00022a4 l       .text  00000000 
f00022a4 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022bc l       .text  00000000 
f00022bc l       .text  00000000 
f00022be l       .text  00000000 
f00022c6 l       .text  00000000 
f00022c8 l       .text  00000000 
f00022cc l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d2 l       .text  00000000 
f00022d2 l       .text  00000000 
f00022d6 l       .text  00000000 
f00022e4 l       .text  00000000 
f00022e4 l       .text  00000000 
f00022ec l       .text  00000000 
f00022ec l       .text  00000000 
f00022f6 l       .text  00000000 
f00022fa l       .text  00000000 
f00022fa l       .text  00000000 
f0002302 l       .text  00000000 
000103ac l     O .logs.fields   00000014 manage_flow_control.kLogFields.51
f0002304 l       .text  00000000 
f0002312 l       .text  00000000 
f0002312 l       .text  00000000 
f0002314 l       .text  00000000 
f000231c l       .text  00000000 
f0005604 l     O .rodata        00000014 manage_flow_control.log_fields
f000231c l       .text  00000000 
f000232a l       .text  00000000 
f000232a l       .text  00000000 
f000232e l       .text  00000000 
f0002336 l       .text  00000000 
f0005618 l     O .rodata        00000014 manage_flow_control.log_fields.53
f0002336 l       .text  00000000 
f0002344 l       .text  00000000 
f0002344 l       .text  00000000 
f0002346 l       .text  00000000 
f0002350 l       .text  00000000 
f0002350 l       .text  00000000 
f0002354 l       .text  00000000 
f0002354 l       .text  00000000 
f0002362 l       .text  00000000 
f0002366 l       .text  00000000 
f0002366 l       .text  00000000 
f000236e l       .text  00000000 
000103c0 l     O .logs.fields   00000014 manage_flow_control.kLogFields.54
f0002370 l       .text  00000000 
f000237e l       .text  00000000 
f000237e l       .text  00000000 
f0002380 l       .text  00000000 
f0002388 l       .text  00000000 
f000562c l     O .rodata        00000014 manage_flow_control.log_fields.56
f0002388 l       .text  00000000 
f0002396 l       .text  00000000 
f0002396 l       .text  00000000 
f000239c l       .text  00000000 
f00023a0 l       .text  00000000 
f00023a0 l       .text  00000000 
f00023a4 l       .text  00000000 
f00023b0 l       .text  00000000 
f00023b0 l       .text  00000000 
f00023ba l       .text  00000000 
f00023bc l       .text  00000000 
f00023c6 l       .text  00000000 
f00023c6 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d2 l       .text  00000000 
00000400 l     O .ot.status_create_record       00000080 ottf_console_init.kOtStatusRecord
00000480 l     O .ot.status_create_record       00000080 ottf_console_init.kOtStatusRecord.11
00000500 l     O .ot.status_create_record       00000080 ottf_console_init.kOtStatusRecord.15
00000580 l     O .ot.status_create_record       00000080 ottf_console_configure_uart.kOtStatusRecord
00000600 l     O .ot.status_create_record       00000080 ottf_console_configure_uart.kOtStatusRecord.23
0000238b l       .debug_loc     00000000 
000023fe l       .debug_loc     00000000 
00002419 l       .debug_loc     00000000 
0000244a l       .debug_loc     00000000 
00002465 l       .debug_loc     00000000 
00002496 l       .debug_loc     00000000 
000024b1 l       .debug_loc     00000000 
000024cc l       .debug_loc     00000000 
000024fd l       .debug_loc     00000000 
00002518 l       .debug_loc     00000000 
0000253e l       .debug_loc     00000000 
0000256f l       .debug_loc     00000000 
000025a0 l       .debug_loc     00000000 
00002608 l       .debug_loc     00000000 
00002639 l       .debug_loc     00000000 
0000266a l       .debug_loc     00000000 
0000269b l       .debug_loc     00000000 
000026cc l       .debug_loc     00000000 
000026fd l       .debug_loc     00000000 
00002739 l       .debug_loc     00000000 
0000276a l       .debug_loc     00000000 
0000279e l       .debug_loc     00000000 
000027cf l       .debug_loc     00000000 
000027f5 l       .debug_loc     00000000 
00002826 l       .debug_loc     00000000 
00002841 l       .debug_loc     00000000 
00002872 l       .debug_loc     00000000 
0000289a l       .debug_loc     00000000 
000028cb l       .debug_loc     00000000 
000028fc l       .debug_loc     00000000 
0000296f l       .debug_loc     00000000 
000029f0 l       .debug_loc     00000000 
00002a2e l       .debug_loc     00000000 
00002a55 l       .debug_loc     00000000 
00002a7c l       .debug_loc     00000000 
00002aa2 l       .debug_loc     00000000 
00002ad3 l       .debug_loc     00000000 
00002aee l       .debug_loc     00000000 
00002b09 l       .debug_loc     00000000 
00002b3a l       .debug_loc     00000000 
00002b62 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000015bb l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000480 l       .debug_ranges  00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00001314 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
00000793 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
000003a8 l       .debug_ranges  00000000 
0000098e l       .debug_str     00000000 
00000993 l       .debug_str     00000000 
000003c0 l       .debug_ranges  00000000 
0000049b l       .debug_str     00000000 
000003d8 l       .debug_ranges  00000000 
000003f0 l       .debug_ranges  00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000007ce l       .debug_str     00000000 
000007b6 l       .debug_str     00000000 
000007a3 l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
000037f0 l       .debug_str     00000000 
00000408 l       .debug_ranges  00000000 
0000380c l       .debug_str     00000000 
00001793 l       .debug_str     00000000 
0000382d l       .debug_str     00000000 
0000143e l       .debug_str     00000000 
00003882 l       .debug_str     00000000 
00001832 l       .debug_str     00000000 
0000158e l       .debug_str     00000000 
00000e2c l       .debug_str     00000000 
000001e5 l       .debug_str     00000000 
000015ef l       .debug_str     00000000 
0000176e l       .debug_str     00000000 
00001758 l       .debug_str     00000000 
000052de l       .debug_str     00000000 
00001739 l       .debug_str     00000000 
00001616 l       .debug_str     00000000 
00001607 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00001740 l       .debug_str     00000000 
0000172a l       .debug_str     00000000 
00001627 l       .debug_str     00000000 
000016a0 l       .debug_str     00000000 
00001708 l       .debug_str     00000000 
00001685 l       .debug_str     00000000 
0000166c l       .debug_str     00000000 
00001630 l       .debug_str     00000000 
0000164e l       .debug_str     00000000 
00001714 l       .debug_str     00000000 
00001700 l       .debug_str     00000000 
000016a9 l       .debug_str     00000000 
000016c3 l       .debug_str     00000000 
000016e3 l       .debug_str     00000000 
00001786 l       .debug_str     00000000 
000017a1 l       .debug_str     00000000 
00001798 l       .debug_str     00000000 
000017ac l       .debug_str     00000000 
0000184c l       .debug_str     00000000 
000017bf l       .debug_str     00000000 
000017db l       .debug_str     00000000 
000017f7 l       .debug_str     00000000 
00001815 l       .debug_str     00000000 
00003870 l       .debug_str     00000000 
0000384b l       .debug_str     00000000 
0000388b l       .debug_str     00000000 
00000420 l       .debug_ranges  00000000 
00003885 l       .debug_str     00000000 
00000438 l       .debug_ranges  00000000 
0000070e l       .debug_str     00000000 
00003d6c l       .debug_str     00000000 
00004763 l       .debug_str     00000000 
00001310 l       .debug_str     00000000 
00000960 l       .debug_str     00000000 
00000450 l       .debug_ranges  00000000 
00000468 l       .debug_ranges  00000000 
00000133 l       .debug_str     00000000 
0000010c l       .debug_str     00000000 
0000011d l       .debug_str     00000000 
00000909 l       .debug_str     00000000 
000007e8 l       .debug_str     00000000 
000007ec l       .debug_str     00000000 
000007f7 l       .debug_str     00000000 
00000800 l       .debug_str     00000000 
00000811 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
0000083c l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
00000861 l       .debug_str     00000000 
00000875 l       .debug_str     00000000 
0000087e l       .debug_str     00000000 
0000088a l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000008a3 l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000008cb l       .debug_str     00000000 
0000136b l       .debug_str     00000000 
000004a6 l       .debug_str     00000000 
000004bb l       .debug_str     00000000 
000004d4 l       .debug_str     00000000 
000004e6 l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000509 l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00000c08 l       .debug_str     00000000 
00000be3 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
0000188d l       .debug_str     00000000 
00001868 l       .debug_str     00000000 
0000187a l       .debug_str     00000000 
0000189d l       .debug_str     00000000 
000018b4 l       .debug_str     00000000 
000018cd l       .debug_str     00000000 
000018e7 l       .debug_str     00000000 
000018ff l       .debug_str     00000000 
000019af l       .debug_str     00000000 
0000190b l       .debug_str     00000000 
00001922 l       .debug_str     00000000 
00001939 l       .debug_str     00000000 
00001950 l       .debug_str     00000000 
00001967 l       .debug_str     00000000 
0000197f l       .debug_str     00000000 
00001997 l       .debug_str     00000000 
00001a71 l       .debug_str     00000000 
000019c2 l       .debug_str     00000000 
000019d9 l       .debug_str     00000000 
000019f0 l       .debug_str     00000000 
00001a03 l       .debug_str     00000000 
00001a19 l       .debug_str     00000000 
00001a2f l       .debug_str     00000000 
00001a45 l       .debug_str     00000000 
00001a5a l       .debug_str     00000000 
0000351a l       .debug_str     00000000 
00001a7e l       .debug_str     00000000 
00001a98 l       .debug_str     00000000 
00001abe l       .debug_str     00000000 
00001ae4 l       .debug_str     00000000 
00001b06 l       .debug_str     00000000 
00001b2b l       .debug_str     00000000 
00001b50 l       .debug_str     00000000 
00001b75 l       .debug_str     00000000 
00001b99 l       .debug_str     00000000 
00001bbf l       .debug_str     00000000 
00001be5 l       .debug_str     00000000 
00001c0b l       .debug_str     00000000 
00001c2d l       .debug_str     00000000 
00001c52 l       .debug_str     00000000 
00001c77 l       .debug_str     00000000 
00001c9c l       .debug_str     00000000 
00001cc0 l       .debug_str     00000000 
00001ce6 l       .debug_str     00000000 
00001d0c l       .debug_str     00000000 
00001d32 l       .debug_str     00000000 
00001d54 l       .debug_str     00000000 
00001d79 l       .debug_str     00000000 
00001d9e l       .debug_str     00000000 
00001dc3 l       .debug_str     00000000 
00001de7 l       .debug_str     00000000 
00001e0d l       .debug_str     00000000 
00001e33 l       .debug_str     00000000 
00001e59 l       .debug_str     00000000 
00001e7b l       .debug_str     00000000 
00001ea0 l       .debug_str     00000000 
00001ec5 l       .debug_str     00000000 
00001eea l       .debug_str     00000000 
00001f0e l       .debug_str     00000000 
00001f34 l       .debug_str     00000000 
00001f53 l       .debug_str     00000000 
00001f72 l       .debug_str     00000000 
00001f91 l       .debug_str     00000000 
00001fb0 l       .debug_str     00000000 
00001fcf l       .debug_str     00000000 
00001fee l       .debug_str     00000000 
0000200d l       .debug_str     00000000 
0000202c l       .debug_str     00000000 
0000204b l       .debug_str     00000000 
0000206a l       .debug_str     00000000 
0000208a l       .debug_str     00000000 
000020aa l       .debug_str     00000000 
000020ca l       .debug_str     00000000 
000020ea l       .debug_str     00000000 
0000210a l       .debug_str     00000000 
0000212a l       .debug_str     00000000 
0000214a l       .debug_str     00000000 
0000216a l       .debug_str     00000000 
0000218a l       .debug_str     00000000 
000021aa l       .debug_str     00000000 
000021ca l       .debug_str     00000000 
000021ea l       .debug_str     00000000 
0000220a l       .debug_str     00000000 
0000222a l       .debug_str     00000000 
0000224a l       .debug_str     00000000 
0000226a l       .debug_str     00000000 
0000228a l       .debug_str     00000000 
000022aa l       .debug_str     00000000 
000022ca l       .debug_str     00000000 
000022ea l       .debug_str     00000000 
0000230a l       .debug_str     00000000 
0000232a l       .debug_str     00000000 
0000235e l       .debug_str     00000000 
00002392 l       .debug_str     00000000 
000023c6 l       .debug_str     00000000 
000023f5 l       .debug_str     00000000 
0000241f l       .debug_str     00000000 
0000244f l       .debug_str     00000000 
0000247d l       .debug_str     00000000 
000024a9 l       .debug_str     00000000 
000024cf l       .debug_str     00000000 
000024f4 l       .debug_str     00000000 
0000251a l       .debug_str     00000000 
0000253e l       .debug_str     00000000 
0000255b l       .debug_str     00000000 
00002584 l       .debug_str     00000000 
000025ad l       .debug_str     00000000 
000025d5 l       .debug_str     00000000 
000025fa l       .debug_str     00000000 
0000261f l       .debug_str     00000000 
00002642 l       .debug_str     00000000 
00002667 l       .debug_str     00000000 
00002688 l       .debug_str     00000000 
000026ab l       .debug_str     00000000 
000026d0 l       .debug_str     00000000 
000026f6 l       .debug_str     00000000 
0000271b l       .debug_str     00000000 
00002741 l       .debug_str     00000000 
00002765 l       .debug_str     00000000 
00002782 l       .debug_str     00000000 
000027ab l       .debug_str     00000000 
000027d4 l       .debug_str     00000000 
000027fc l       .debug_str     00000000 
00002821 l       .debug_str     00000000 
00002846 l       .debug_str     00000000 
00002869 l       .debug_str     00000000 
0000288e l       .debug_str     00000000 
000028af l       .debug_str     00000000 
000028d2 l       .debug_str     00000000 
000028f7 l       .debug_str     00000000 
0000291d l       .debug_str     00000000 
00002942 l       .debug_str     00000000 
00002968 l       .debug_str     00000000 
0000298c l       .debug_str     00000000 
000029a9 l       .debug_str     00000000 
000029d2 l       .debug_str     00000000 
000029fb l       .debug_str     00000000 
00002a23 l       .debug_str     00000000 
00002a48 l       .debug_str     00000000 
00002a6d l       .debug_str     00000000 
00002a90 l       .debug_str     00000000 
00002ab5 l       .debug_str     00000000 
00002ad6 l       .debug_str     00000000 
00002af9 l       .debug_str     00000000 
00002b1e l       .debug_str     00000000 
00002b42 l       .debug_str     00000000 
00002b66 l       .debug_str     00000000 
00002b9a l       .debug_str     00000000 
00002bc7 l       .debug_str     00000000 
00002bec l       .debug_str     00000000 
00002c14 l       .debug_str     00000000 
00002c3c l       .debug_str     00000000 
00002c64 l       .debug_str     00000000 
00002c8c l       .debug_str     00000000 
00002caf l       .debug_str     00000000 
00002cd5 l       .debug_str     00000000 
00002cf8 l       .debug_str     00000000 
00002d1e l       .debug_str     00000000 
00002d45 l       .debug_str     00000000 
00002d68 l       .debug_str     00000000 
00002d90 l       .debug_str     00000000 
00002db4 l       .debug_str     00000000 
00002dd9 l       .debug_str     00000000 
00002e00 l       .debug_str     00000000 
00002e26 l       .debug_str     00000000 
00002e4c l       .debug_str     00000000 
00002e6e l       .debug_str     00000000 
00002e94 l       .debug_str     00000000 
00002eb9 l       .debug_str     00000000 
00002edd l       .debug_str     00000000 
00002f01 l       .debug_str     00000000 
00002f2a l       .debug_str     00000000 
00002f4b l       .debug_str     00000000 
00002f6e l       .debug_str     00000000 
00002f94 l       .debug_str     00000000 
00002fbc l       .debug_str     00000000 
00002fe1 l       .debug_str     00000000 
00003011 l       .debug_str     00000000 
0000303d l       .debug_str     00000000 
0000306e l       .debug_str     00000000 
0000309c l       .debug_str     00000000 
000030cd l       .debug_str     00000000 
00003100 l       .debug_str     00000000 
00003125 l       .debug_str     00000000 
0000314d l       .debug_str     00000000 
00003173 l       .debug_str     00000000 
00003198 l       .debug_str     00000000 
000031bc l       .debug_str     00000000 
000031e1 l       .debug_str     00000000 
00003207 l       .debug_str     00000000 
00003229 l       .debug_str     00000000 
0000324c l       .debug_str     00000000 
0000326d l       .debug_str     00000000 
0000328f l       .debug_str     00000000 
000032b2 l       .debug_str     00000000 
000032d3 l       .debug_str     00000000 
000032f1 l       .debug_str     00000000 
00003313 l       .debug_str     00000000 
0000333a l       .debug_str     00000000 
00003361 l       .debug_str     00000000 
00003387 l       .debug_str     00000000 
000033ac l       .debug_str     00000000 
000033da l       .debug_str     00000000 
0000340c l       .debug_str     00000000 
0000343e l       .debug_str     00000000 
00003468 l       .debug_str     00000000 
0000348f l       .debug_str     00000000 
000034b4 l       .debug_str     00000000 
000034db l       .debug_str     00000000 
00003500 l       .debug_str     00000000 
0000091a l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
00001309 l       .debug_str     00000000 
00003f00 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
00003533 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
000005b1 l       .debug_str     00000000 
000005c1 l       .debug_str     00000000 
0000354e l       .debug_str     00000000 
00003567 l       .debug_str     00000000 
00003575 l       .debug_str     00000000 
000035e1 l       .debug_str     00000000 
000035d1 l       .debug_str     00000000 
00003588 l       .debug_str     00000000 
00003591 l       .debug_str     00000000 
0000359d l       .debug_str     00000000 
00001896 l       .debug_str     00000000 
000035bd l       .debug_str     00000000 
000035c7 l       .debug_str     00000000 
00000e70 l       .debug_str     00000000 
000035ab l       .debug_str     00000000 
000035f3 l       .debug_str     00000000 
00003604 l       .debug_str     00000000 
00003615 l       .debug_str     00000000 
00003638 l       .debug_str     00000000 
00003655 l       .debug_str     00000000 
00003649 l       .debug_str     00000000 
00003663 l       .debug_str     00000000 
0000367d l       .debug_str     00000000 
00003692 l       .debug_str     00000000 
000036ab l       .debug_str     00000000 
000036ba l       .debug_str     00000000 
000036d7 l       .debug_str     00000000 
000036ec l       .debug_str     00000000 
0000370d l       .debug_str     00000000 
00003722 l       .debug_str     00000000 
000014c2 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
0000373e l       .debug_str     00000000 
00003757 l       .debug_str     00000000 
00003776 l       .debug_str     00000000 
0000378f l       .debug_str     00000000 
000037a7 l       .debug_str     00000000 
000037c0 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
00000944 l       .debug_str     00000000 
00000959 l       .debug_str     00000000 
000037dc l       .debug_str     00000000 
0000385f l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
000003d4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_spi_device.c
f00023d2 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d4 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023de l       .text  00000000 
f00023de l       .text  00000000 
f00023e0 l       .text  00000000 
f00023e2 l       .text  00000000 
f00023ea l       .text  00000000 
f00023ea l       .text  00000000 
f00023ea l       .text  00000000 
f00023ea l       .text  00000000 
f00023ea l       .text  00000000 
f00023ec l       .text  00000000 
f00023ee l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f6 l       .text  00000000 
f00023f6 l       .text  00000000 
f00023fa l       .text  00000000 
f00023fa l       .text  00000000 
f00023fc l       .text  00000000 
f0002400 l       .text  00000000 
f0002400 l       .text  00000000 
f0002402 l       .text  00000000 
f0002402 l       .text  00000000 
f0002404 l       .text  00000000 
f0002404 l       .text  00000000 
f0002406 l       .text  00000000 
f0002406 l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240c l       .text  00000000 
f000240c l       .text  00000000 
f000240e l       .text  00000000 
f000240e l       .text  00000000 
f0002410 l       .text  00000000 
f0002410 l       .text  00000000 
f0002412 l       .text  00000000 
f0002412 l       .text  00000000 
f0002414 l       .text  00000000 
f0002414 l       .text  00000000 
f0002418 l       .text  00000000 
f0002418 l       .text  00000000 
f000241a l       .text  00000000 
f000241c l       .text  00000000 
f000241e l       .text  00000000 
f000241e l       .text  00000000 
f0002420 l       .text  00000000 
f0002420 l       .text  00000000 
f000242a l       .text  00000000 
f000242a l       .text  00000000 
f000242c l       .text  00000000 
f000242e l       .text  00000000 
f000242e l       .text  00000000 
f0002430 l       .text  00000000 
f000243a l       .text  00000000 
f000243a l       .text  00000000 
00002b93 l       .debug_loc     00000000 
00002bb9 l       .debug_loc     00000000 
00002bdf l       .debug_loc     00000000 
00002bfa l       .debug_loc     00000000 
00002c16 l       .debug_loc     00000000 
00002c31 l       .debug_loc     00000000 
00002c58 l       .debug_loc     00000000 
00002c87 l       .debug_loc     00000000 
00002cae l       .debug_loc     00000000 
00002cd0 l       .debug_loc     00000000 
00002cf2 l       .debug_loc     00000000 
00002d12 l       .debug_loc     00000000 
00002d32 l       .debug_loc     00000000 
00002d4d l       .debug_loc     00000000 
00002d6f l       .debug_loc     00000000 
00002d95 l       .debug_loc     00000000 
00002dbb l       .debug_loc     00000000 
00002de1 l       .debug_loc     00000000 
00002dfc l       .debug_loc     00000000 
00002e1e l       .debug_loc     00000000 
00002e44 l       .debug_loc     00000000 
00002e5f l       .debug_loc     00000000 
00002e7a l       .debug_loc     00000000 
00002e95 l       .debug_loc     00000000 
00002eb0 l       .debug_loc     00000000 
00002ecb l       .debug_loc     00000000 
00002ef1 l       .debug_loc     00000000 
00002f17 l       .debug_loc     00000000 
00002f32 l       .debug_loc     00000000 
00002f54 l       .debug_loc     00000000 
00002f7a l       .debug_loc     00000000 
00002f95 l       .debug_loc     00000000 
00002fb7 l       .debug_loc     00000000 
00002fd2 l       .debug_loc     00000000 
00002fed l       .debug_loc     00000000 
00003008 l       .debug_loc     00000000 
00003023 l       .debug_loc     00000000 
0000303e l       .debug_loc     00000000 
00003059 l       .debug_loc     00000000 
00003074 l       .debug_loc     00000000 
0000309b l       .debug_loc     00000000 
000030b6 l       .debug_loc     00000000 
000030d1 l       .debug_loc     00000000 
000030ec l       .debug_loc     00000000 
00003107 l       .debug_loc     00000000 
00003122 l       .debug_loc     00000000 
0000313d l       .debug_loc     00000000 
00003164 l       .debug_loc     00000000 
00003186 l       .debug_loc     00000000 
000031a8 l       .debug_loc     00000000 
000031c3 l       .debug_loc     00000000 
000031de l       .debug_loc     00000000 
000031f9 l       .debug_loc     00000000 
00003214 l       .debug_loc     00000000 
00003238 l       .debug_loc     00000000 
00003253 l       .debug_loc     00000000 
00003277 l       .debug_loc     00000000 
0000329d l       .debug_loc     00000000 
00003329 l       .debug_loc     00000000 
0000334a l       .debug_loc     00000000 
00003371 l       .debug_loc     00000000 
00003395 l       .debug_loc     00000000 
000033b9 l       .debug_loc     00000000 
000033d4 l       .debug_loc     00000000 
00003402 l       .debug_loc     00000000 
00003424 l       .debug_loc     00000000 
00003447 l       .debug_loc     00000000 
0000346c l       .debug_loc     00000000 
000034c4 l       .debug_loc     00000000 
000034ea l       .debug_loc     00000000 
0000350c l       .debug_loc     00000000 
00003532 l       .debug_loc     00000000 
00003553 l       .debug_loc     00000000 
00003575 l       .debug_loc     00000000 
00003590 l       .debug_loc     00000000 
000035b1 l       .debug_loc     00000000 
000035d3 l       .debug_loc     00000000 
000035ee l       .debug_loc     00000000 
00003609 l       .debug_loc     00000000 
00003624 l       .debug_loc     00000000 
0000363f l       .debug_loc     00000000 
0000365a l       .debug_loc     00000000 
00003675 l       .debug_loc     00000000 
00003690 l       .debug_loc     00000000 
000036ab l       .debug_loc     00000000 
000036d2 l       .debug_loc     00000000 
000036f4 l       .debug_loc     00000000 
00003716 l       .debug_loc     00000000 
00003731 l       .debug_loc     00000000 
00003762 l       .debug_loc     00000000 
00003793 l       .debug_loc     00000000 
000037ae l       .debug_loc     00000000 
000037e2 l       .debug_loc     00000000 
00003825 l       .debug_loc     00000000 
0000387a l       .debug_loc     00000000 
000038ab l       .debug_loc     00000000 
000038de l       .debug_loc     00000000 
000038f9 l       .debug_loc     00000000 
00003914 l       .debug_loc     00000000 
0000392f l       .debug_loc     00000000 
00003951 l       .debug_loc     00000000 
0000396c l       .debug_loc     00000000 
0000398e l       .debug_loc     00000000 
000039a9 l       .debug_loc     00000000 
000039cb l       .debug_loc     00000000 
000039ee l       .debug_loc     00000000 
00003a10 l       .debug_loc     00000000 
00003a3c l       .debug_loc     00000000 
00003a57 l       .debug_loc     00000000 
00003a79 l       .debug_loc     00000000 
00003a94 l       .debug_loc     00000000 
00003ab6 l       .debug_loc     00000000 
00003ad1 l       .debug_loc     00000000 
00003af3 l       .debug_loc     00000000 
00003b0e l       .debug_loc     00000000 
00003b30 l       .debug_loc     00000000 
00003b4c l       .debug_loc     00000000 
00003b6e l       .debug_loc     00000000 
00003b8a l       .debug_loc     00000000 
00003bac l       .debug_loc     00000000 
00003bce l       .debug_loc     00000000 
00003be9 l       .debug_loc     00000000 
00003c04 l       .debug_loc     00000000 
00003c1f l       .debug_loc     00000000 
00003c5b l       .debug_loc     00000000 
00003c97 l       .debug_loc     00000000 
00003cb8 l       .debug_loc     00000000 
00003cd3 l       .debug_loc     00000000 
00003cf5 l       .debug_loc     00000000 
00003d31 l       .debug_loc     00000000 
00003d4d l       .debug_loc     00000000 
00003d89 l       .debug_loc     00000000 
00003dc5 l       .debug_loc     00000000 
00003de7 l       .debug_loc     00000000 
00003e23 l       .debug_loc     00000000 
00003e67 l       .debug_loc     00000000 
00003e82 l       .debug_loc     00000000 
00003f2a l       .debug_loc     00000000 
00003f45 l       .debug_loc     00000000 
00003f60 l       .debug_loc     00000000 
00003f7b l       .debug_loc     00000000 
00003f96 l       .debug_loc     00000000 
00003fb1 l       .debug_loc     00000000 
00003fcc l       .debug_loc     00000000 
00003fee l       .debug_loc     00000000 
00004014 l       .debug_loc     00000000 
0000403a l       .debug_loc     00000000 
0000405a l       .debug_loc     00000000 
0000407a l       .debug_loc     00000000 
0000409a l       .debug_loc     00000000 
000040b5 l       .debug_loc     00000000 
000040d0 l       .debug_loc     00000000 
000040eb l       .debug_loc     00000000 
00004106 l       .debug_loc     00000000 
00004121 l       .debug_loc     00000000 
0000413c l       .debug_loc     00000000 
0000415e l       .debug_loc     00000000 
00004184 l       .debug_loc     00000000 
000041aa l       .debug_loc     00000000 
000041ca l       .debug_loc     00000000 
000041ea l       .debug_loc     00000000 
0000420a l       .debug_loc     00000000 
00004225 l       .debug_loc     00000000 
00004240 l       .debug_loc     00000000 
0000425b l       .debug_loc     00000000 
00004276 l       .debug_loc     00000000 
00004291 l       .debug_loc     00000000 
000042ac l       .debug_loc     00000000 
000042ce l       .debug_loc     00000000 
000042f4 l       .debug_loc     00000000 
0000431a l       .debug_loc     00000000 
0000433a l       .debug_loc     00000000 
0000435a l       .debug_loc     00000000 
0000437a l       .debug_loc     00000000 
00004395 l       .debug_loc     00000000 
000043b0 l       .debug_loc     00000000 
000043cb l       .debug_loc     00000000 
000043e6 l       .debug_loc     00000000 
00004401 l       .debug_loc     00000000 
0000441c l       .debug_loc     00000000 
0000443e l       .debug_loc     00000000 
00004464 l       .debug_loc     00000000 
0000448a l       .debug_loc     00000000 
000044aa l       .debug_loc     00000000 
000044ca l       .debug_loc     00000000 
000044ea l       .debug_loc     00000000 
00004510 l       .debug_loc     00000000 
00004536 l       .debug_loc     00000000 
0000455c l       .debug_loc     00000000 
00004582 l       .debug_loc     00000000 
000045a8 l       .debug_loc     00000000 
000045ce l       .debug_loc     00000000 
000045e9 l       .debug_loc     00000000 
00004604 l       .debug_loc     00000000 
0000461f l       .debug_loc     00000000 
0000463a l       .debug_loc     00000000 
00004655 l       .debug_loc     00000000 
00004670 l       .debug_loc     00000000 
0000468b l       .debug_loc     00000000 
000046a6 l       .debug_loc     00000000 
000046c1 l       .debug_loc     00000000 
000046dc l       .debug_loc     00000000 
000046f7 l       .debug_loc     00000000 
00004712 l       .debug_loc     00000000 
0000472d l       .debug_loc     00000000 
00004748 l       .debug_loc     00000000 
0000476c l       .debug_loc     00000000 
00004792 l       .debug_loc     00000000 
000047ad l       .debug_loc     00000000 
000047c8 l       .debug_loc     00000000 
000047e3 l       .debug_loc     00000000 
000047fe l       .debug_loc     00000000 
00004824 l       .debug_loc     00000000 
0000483f l       .debug_loc     00000000 
0000485a l       .debug_loc     00000000 
00004875 l       .debug_loc     00000000 
00004890 l       .debug_loc     00000000 
000048ab l       .debug_loc     00000000 
000048d1 l       .debug_loc     00000000 
000048ec l       .debug_loc     00000000 
00004910 l       .debug_loc     00000000 
0000492b l       .debug_loc     00000000 
00004946 l       .debug_loc     00000000 
00004961 l       .debug_loc     00000000 
0000497c l       .debug_loc     00000000 
00004997 l       .debug_loc     00000000 
000049b2 l       .debug_loc     00000000 
000049cd l       .debug_loc     00000000 
000049e9 l       .debug_loc     00000000 
00004a18 l       .debug_loc     00000000 
00004a33 l       .debug_loc     00000000 
00004a4e l       .debug_loc     00000000 
00004a69 l       .debug_loc     00000000 
00004a84 l       .debug_loc     00000000 
00004a9f l       .debug_loc     00000000 
00004aba l       .debug_loc     00000000 
00004ad5 l       .debug_loc     00000000 
00004af0 l       .debug_loc     00000000 
00004b0b l       .debug_loc     00000000 
00004b26 l       .debug_loc     00000000 
00004b44 l       .debug_loc     00000000 
00004b6a l       .debug_loc     00000000 
00004b85 l       .debug_loc     00000000 
00004ba5 l       .debug_loc     00000000 
00004bc0 l       .debug_loc     00000000 
00004be6 l       .debug_loc     00000000 
00004c01 l       .debug_loc     00000000 
00004c1c l       .debug_loc     00000000 
00004c37 l       .debug_loc     00000000 
00004c52 l       .debug_loc     00000000 
00004c6d l       .debug_loc     00000000 
00004ca8 l       .debug_loc     00000000 
00004cc9 l       .debug_loc     00000000 
00004cea l       .debug_loc     00000000 
00004d05 l       .debug_loc     00000000 
00004d2b l       .debug_loc     00000000 
00004d5f l       .debug_loc     00000000 
00004d81 l       .debug_loc     00000000 
00004da7 l       .debug_loc     00000000 
00004dcd l       .debug_loc     00000000 
00004de8 l       .debug_loc     00000000 
00004e03 l       .debug_loc     00000000 
00004e1e l       .debug_loc     00000000 
00004e44 l       .debug_loc     00000000 
00004e5f l       .debug_loc     00000000 
00004e7a l       .debug_loc     00000000 
00004e95 l       .debug_loc     00000000 
00004ebb l       .debug_loc     00000000 
00004ee1 l       .debug_loc     00000000 
00004f65 l       .debug_loc     00000000 
00004f85 l       .debug_loc     00000000 
00004fc6 l       .debug_loc     00000000 
00004ff1 l       .debug_loc     00000000 
00005013 l       .debug_loc     00000000 
00005035 l       .debug_loc     00000000 
00005055 l       .debug_loc     00000000 
00005075 l       .debug_loc     00000000 
00005095 l       .debug_loc     00000000 
000050b7 l       .debug_loc     00000000 
000050d8 l       .debug_loc     00000000 
000050fa l       .debug_loc     00000000 
00005115 l       .debug_loc     00000000 
00005130 l       .debug_loc     00000000 
0000514b l       .debug_loc     00000000 
00005166 l       .debug_loc     00000000 
00005181 l       .debug_loc     00000000 
0000519c l       .debug_loc     00000000 
000051b7 l       .debug_loc     00000000 
000051d2 l       .debug_loc     00000000 
0000520e l       .debug_loc     00000000 
0000522c l       .debug_loc     00000000 
00005247 l       .debug_loc     00000000 
00005299 l       .debug_loc     00000000 
000052bd l       .debug_loc     00000000 
000052e3 l       .debug_loc     00000000 
00005309 l       .debug_loc     00000000 
0000532d l       .debug_loc     00000000 
00005348 l       .debug_loc     00000000 
0000536e l       .debug_loc     00000000 
00005392 l       .debug_loc     00000000 
000053b6 l       .debug_loc     00000000 
000053dc l       .debug_loc     00000000 
000053f7 l       .debug_loc     00000000 
00005412 l       .debug_loc     00000000 
00005443 l       .debug_loc     00000000 
00005461 l       .debug_loc     00000000 
0000547c l       .debug_loc     00000000 
000054ad l       .debug_loc     00000000 
000054d1 l       .debug_loc     00000000 
000054ec l       .debug_loc     00000000 
00005510 l       .debug_loc     00000000 
0000552b l       .debug_loc     00000000 
0000554f l       .debug_loc     00000000 
00005575 l       .debug_loc     00000000 
0000559b l       .debug_loc     00000000 
000055b6 l       .debug_loc     00000000 
000055d1 l       .debug_loc     00000000 
000055ec l       .debug_loc     00000000 
00005607 l       .debug_loc     00000000 
00005622 l       .debug_loc     00000000 
0000563d l       .debug_loc     00000000 
00005663 l       .debug_loc     00000000 
00005689 l       .debug_loc     00000000 
000056a4 l       .debug_loc     00000000 
000056bf l       .debug_loc     00000000 
000056da l       .debug_loc     00000000 
000056f5 l       .debug_loc     00000000 
00005710 l       .debug_loc     00000000 
0000572b l       .debug_loc     00000000 
00005751 l       .debug_loc     00000000 
00005777 l       .debug_loc     00000000 
00005792 l       .debug_loc     00000000 
000057ad l       .debug_loc     00000000 
000057c8 l       .debug_loc     00000000 
000057e3 l       .debug_loc     00000000 
000057fe l       .debug_loc     00000000 
00005819 l       .debug_loc     00000000 
0000583f l       .debug_loc     00000000 
00005865 l       .debug_loc     00000000 
00005880 l       .debug_loc     00000000 
0000589b l       .debug_loc     00000000 
000058b6 l       .debug_loc     00000000 
000058d1 l       .debug_loc     00000000 
000058ec l       .debug_loc     00000000 
00005907 l       .debug_loc     00000000 
0000592d l       .debug_loc     00000000 
00005953 l       .debug_loc     00000000 
0000596e l       .debug_loc     00000000 
00005989 l       .debug_loc     00000000 
000059a4 l       .debug_loc     00000000 
000059bf l       .debug_loc     00000000 
000059da l       .debug_loc     00000000 
000059f5 l       .debug_loc     00000000 
00005a1b l       .debug_loc     00000000 
00005a63 l       .debug_loc     00000000 
00005a7e l       .debug_loc     00000000 
00005a99 l       .debug_loc     00000000 
00005ab4 l       .debug_loc     00000000 
00005acf l       .debug_loc     00000000 
00005aea l       .debug_loc     00000000 
00005b05 l       .debug_loc     00000000 
00005b20 l       .debug_loc     00000000 
00005b45 l       .debug_loc     00000000 
00005b60 l       .debug_loc     00000000 
00005b7b l       .debug_loc     00000000 
00005b96 l       .debug_loc     00000000 
00005bb1 l       .debug_loc     00000000 
00005bcc l       .debug_loc     00000000 
00005bf0 l       .debug_loc     00000000 
00005c0b l       .debug_loc     00000000 
00005c31 l       .debug_loc     00000000 
00005c57 l       .debug_loc     00000000 
00005c7d l       .debug_loc     00000000 
00005ca3 l       .debug_loc     00000000 
00005cbe l       .debug_loc     00000000 
00005ce6 l       .debug_loc     00000000 
00005d19 l       .debug_loc     00000000 
00005d34 l       .debug_loc     00000000 
00005d62 l       .debug_loc     00000000 
00005dab l       .debug_loc     00000000 
00005dde l       .debug_loc     00000000 
00005e04 l       .debug_loc     00000000 
00005e1f l       .debug_loc     00000000 
00005e3a l       .debug_loc     00000000 
00005e60 l       .debug_loc     00000000 
00005e7b l       .debug_loc     00000000 
00005ea0 l       .debug_loc     00000000 
00005ebc l       .debug_loc     00000000 
00005eda l       .debug_loc     00000000 
00005f00 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003890 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000760 l       .debug_ranges  00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
0000166c l       .debug_str     00000000 
00001630 l       .debug_str     00000000 
0000164e l       .debug_str     00000000 
00001700 l       .debug_str     00000000 
000016a9 l       .debug_str     00000000 
000016c3 l       .debug_str     00000000 
000016e3 l       .debug_str     00000000 
00000c08 l       .debug_str     00000000 
00000be3 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00003940 l       .debug_str     00000000 
000038b3 l       .debug_str     00000000 
000038d2 l       .debug_str     00000000 
000038ec l       .debug_str     00000000 
00003908 l       .debug_str     00000000 
00003924 l       .debug_str     00000000 
000039ee l       .debug_str     00000000 
00003962 l       .debug_str     00000000 
0000397d l       .debug_str     00000000 
0000399a l       .debug_str     00000000 
000039b5 l       .debug_str     00000000 
000039d0 l       .debug_str     00000000 
00003ab3 l       .debug_str     00000000 
00003a08 l       .debug_str     00000000 
00003a30 l       .debug_str     00000000 
00003a60 l       .debug_str     00000000 
00003a90 l       .debug_str     00000000 
00003b5b l       .debug_str     00000000 
00003ad5 l       .debug_str     00000000 
00003af8 l       .debug_str     00000000 
00003b1c l       .debug_str     00000000 
00003b3d l       .debug_str     00000000 
00003bd6 l       .debug_str     00000000 
00003b7c l       .debug_str     00000000 
00003b9a l       .debug_str     00000000 
00003bb7 l       .debug_str     00000000 
00003bf3 l       .debug_str     00000000 
00003c0a l       .debug_str     00000000 
00003c22 l       .debug_str     00000000 
00003c37 l       .debug_str     00000000 
00003c4f l       .debug_str     00000000 
00003c6c l       .debug_str     00000000 
00003c86 l       .debug_str     00000000 
00003ca1 l       .debug_str     00000000 
00003cb9 l       .debug_str     00000000 
00003cd4 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
0000127d l       .debug_str     00000000 
0000126e l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00003533 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00003d5e l       .debug_str     00000000 
00003cf4 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00001616 l       .debug_str     00000000 
00001607 l       .debug_str     00000000 
00003d08 l       .debug_str     00000000 
00001739 l       .debug_str     00000000 
00001740 l       .debug_str     00000000 
0000172a l       .debug_str     00000000 
00001627 l       .debug_str     00000000 
000016a0 l       .debug_str     00000000 
00001708 l       .debug_str     00000000 
00001685 l       .debug_str     00000000 
00001714 l       .debug_str     00000000 
00003d21 l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
00000cb8 l       .debug_str     00000000 
00005b34 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
00000c31 l       .debug_str     00000000 
0000354e l       .debug_str     00000000 
00001732 l       .debug_str     00000000 
00003857 l       .debug_str     00000000 
000004c8 l       .debug_ranges  00000000 
00000fbc l       .debug_str     00000000 
00003f09 l       .debug_str     00000000 
00003826 l       .debug_str     00000000 
0000170f l       .debug_str     00000000 
00003f2d l       .debug_str     00000000 
0000471e l       .debug_str     00000000 
00003d69 l       .debug_str     00000000 
00003f4b l       .debug_str     00000000 
000040a6 l       .debug_str     00000000 
00004722 l       .debug_str     00000000 
00003f69 l       .debug_str     00000000 
00003d34 l       .debug_str     00000000 
00000e70 l       .debug_str     00000000 
00003f88 l       .debug_str     00000000 
00000e8d l       .debug_str     00000000 
0000472a l       .debug_str     00000000 
00003fb1 l       .debug_str     00000000 
0000473a l       .debug_str     00000000 
00000c44 l       .debug_str     00000000 
00003fd4 l       .debug_str     00000000 
00003ff7 l       .debug_str     00000000 
00004021 l       .debug_str     00000000 
000047ae l       .debug_str     00000000 
0000479a l       .debug_str     00000000 
000047a1 l       .debug_str     00000000 
0000403d l       .debug_str     00000000 
00004059 l       .debug_str     00000000 
000004e0 l       .debug_ranges  00000000 
000004f8 l       .debug_ranges  00000000 
00000510 l       .debug_ranges  00000000 
00000530 l       .debug_ranges  00000000 
00004089 l       .debug_str     00000000 
000040ae l       .debug_str     00000000 
000040d7 l       .debug_str     00000000 
000040fa l       .debug_str     00000000 
00004141 l       .debug_str     00000000 
00004810 l       .debug_str     00000000 
00005c33 l       .debug_str     00000000 
00003fea l       .debug_str     00000000 
00004932 l       .debug_str     00000000 
00003ac2 l       .debug_str     00000000 
00000550 l       .debug_ranges  00000000 
00000568 l       .debug_ranges  00000000 
00000580 l       .debug_ranges  00000000 
00000598 l       .debug_ranges  00000000 
000005b0 l       .debug_ranges  00000000 
000005c8 l       .debug_ranges  00000000 
000005e0 l       .debug_ranges  00000000 
000005f8 l       .debug_ranges  00000000 
00000610 l       .debug_ranges  00000000 
00000628 l       .debug_ranges  00000000 
00004120 l       .debug_str     00000000 
00000e90 l       .debug_str     00000000 
00004841 l       .debug_str     00000000 
00003955 l       .debug_str     00000000 
0000493d l       .debug_str     00000000 
00004893 l       .debug_str     00000000 
0000484e l       .debug_str     00000000 
00004952 l       .debug_str     00000000 
00003d47 l       .debug_str     00000000 
00003d62 l       .debug_str     00000000 
0000606d l       .debug_str     00000000 
0000176e l       .debug_str     00000000 
00001758 l       .debug_str     00000000 
000052de l       .debug_str     00000000 
00003d71 l       .debug_str     00000000 
00004146 l       .debug_str     00000000 
00000640 l       .debug_ranges  00000000 
00004172 l       .debug_str     00000000 
00000658 l       .debug_ranges  00000000 
0000419e l       .debug_str     00000000 
00000670 l       .debug_ranges  00000000 
000041ca l       .debug_str     00000000 
00000688 l       .debug_ranges  00000000 
000041f6 l       .debug_str     00000000 
00004956 l       .debug_str     00000000 
0000421c l       .debug_str     00000000 
00004242 l       .debug_str     00000000 
000042c8 l       .debug_str     00000000 
00004272 l       .debug_str     00000000 
000042a2 l       .debug_str     00000000 
00004962 l       .debug_str     00000000 
000042d2 l       .debug_str     00000000 
0000416a l       .debug_str     00000000 
0000496f l       .debug_str     00000000 
0000497d l       .debug_str     00000000 
000042f8 l       .debug_str     00000000 
0000431e l       .debug_str     00000000 
00000689 l       .debug_str     00000000 
00004986 l       .debug_str     00000000 
00001442 l       .debug_str     00000000 
0000498a l       .debug_str     00000000 
00003d84 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00003da3 l       .debug_str     00000000 
00003b70 l       .debug_str     00000000 
00003dc8 l       .debug_str     00000000 
00003e1f l       .debug_str     00000000 
00003e04 l       .debug_str     00000000 
00003deb l       .debug_str     00000000 
00003df6 l       .debug_str     00000000 
00004347 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
00003e3c l       .debug_str     00000000 
00004369 l       .debug_str     00000000 
0000499b l       .debug_str     00000000 
000049a5 l       .debug_str     00000000 
000049b3 l       .debug_str     00000000 
00004397 l       .debug_str     00000000 
000049bc l       .debug_str     00000000 
000043c5 l       .debug_str     00000000 
000004f5 l       .debug_str     00000000 
000006a0 l       .debug_ranges  00000000 
000006b8 l       .debug_ranges  00000000 
000043f8 l       .debug_str     00000000 
0000441c l       .debug_str     00000000 
00004446 l       .debug_str     00000000 
00004470 l       .debug_str     00000000 
00004a12 l       .debug_str     00000000 
00004494 l       .debug_str     00000000 
00004ad5 l       .debug_str     00000000 
000006d0 l       .debug_ranges  00000000 
00004adc l       .debug_str     00000000 
000006e8 l       .debug_ranges  00000000 
00000700 l       .debug_ranges  00000000 
00000718 l       .debug_ranges  00000000 
00000730 l       .debug_ranges  00000000 
000044b1 l       .debug_str     00000000 
000049d9 l       .debug_str     00000000 
000044d3 l       .debug_str     00000000 
00003e59 l       .debug_str     00000000 
000044f5 l       .debug_str     00000000 
00003e69 l       .debug_str     00000000 
00004514 l       .debug_str     00000000 
00004533 l       .debug_str     00000000 
0000455e l       .debug_str     00000000 
00004589 l       .debug_str     00000000 
000045af l       .debug_str     00000000 
000045d5 l       .debug_str     00000000 
000045fb l       .debug_str     00000000 
00004621 l       .debug_str     00000000 
00004647 l       .debug_str     00000000 
0000466d l       .debug_str     00000000 
00004687 l       .debug_str     00000000 
00004b1c l       .debug_str     00000000 
00004b24 l       .debug_str     00000000 
000046a1 l       .debug_str     00000000 
00003e78 l       .debug_str     00000000 
00003ee8 l       .debug_str     00000000 
00003ec9 l       .debug_str     00000000 
00003e9b l       .debug_str     00000000 
00003eaa l       .debug_str     00000000 
00003eba l       .debug_str     00000000 
000046c0 l       .debug_str     00000000 
0000049f l       .debug_str     00000000 
00004b2a l       .debug_str     00000000 
00000748 l       .debug_ranges  00000000 
00004b28 l       .debug_str     00000000 
000046de l       .debug_str     00000000 
00004b37 l       .debug_str     00000000 
00004b3d l       .debug_str     00000000 
000046fb l       .debug_str     00000000 
00004780 l       .debug_str     00000000 
00004768 l       .debug_str     00000000 
000057c5 l       .debug_str     00000000 
00004742 l       .debug_str     00000000 
00004756 l       .debug_str     00000000 
00004752 l       .debug_str     00000000 
000047e2 l       .debug_str     00000000 
000047b6 l       .debug_str     00000000 
000047a8 l       .debug_str     00000000 
000047b1 l       .debug_str     00000000 
00003f61 l       .debug_str     00000000 
00004913 l       .debug_str     00000000 
000048f6 l       .debug_str     00000000 
0000487a l       .debug_str     00000000 
000048a7 l       .debug_str     00000000 
000048df l       .debug_str     00000000 
000048e6 l       .debug_str     00000000 
0000481d l       .debug_str     00000000 
0000485e l       .debug_str     00000000 
000048bb l       .debug_str     00000000 
00004a17 l       .debug_str     00000000 
000049ff l       .debug_str     00000000 
000049ca l       .debug_str     00000000 
000049d3 l       .debug_str     00000000 
000049e2 l       .debug_str     00000000 
000049f1 l       .debug_str     00000000 
00004ab9 l       .debug_str     00000000 
00004a9f l       .debug_str     00000000 
00003be9 l       .debug_str     00000000 
00004a50 l       .debug_str     00000000 
00004a6b l       .debug_str     00000000 
00004a88 l       .debug_str     00000000 
00004a31 l       .debug_str     00000000 
00004b04 l       .debug_str     00000000 
00004aee l       .debug_str     00000000 
00004ae4 l       .debug_str     00000000 
000004b0 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_spi_device_autogen.c
f000243a l       .text  00000000 
f000243a l       .text  00000000 
f000243a l       .text  00000000 
f000243a l       .text  00000000 
f000243c l       .text  00000000 
f000243e l       .text  00000000 
f0002442 l       .text  00000000 
f0002442 l       .text  00000000 
f000244a l       .text  00000000 
f000244c l       .text  00000000 
f000244e l       .text  00000000 
f0002450 l       .text  00000000 
f0002458 l       .text  00000000 
f0002458 l       .text  00000000 
00005f1b l       .debug_loc     00000000 
00005f41 l       .debug_loc     00000000 
00005f67 l       .debug_loc     00000000 
00005f82 l       .debug_loc     00000000 
00005f9d l       .debug_loc     00000000 
00005fb9 l       .debug_loc     00000000 
00005fd5 l       .debug_loc     00000000 
00005ff0 l       .debug_loc     00000000 
0000600b l       .debug_loc     00000000 
00006026 l       .debug_loc     00000000 
00006041 l       .debug_loc     00000000 
0000605c l       .debug_loc     00000000 
00006077 l       .debug_loc     00000000 
0000609d l       .debug_loc     00000000 
000060c3 l       .debug_loc     00000000 
000060de l       .debug_loc     00000000 
000060f9 l       .debug_loc     00000000 
00006114 l       .debug_loc     00000000 
0000612f l       .debug_loc     00000000 
0000614a l       .debug_loc     00000000 
00006165 l       .debug_loc     00000000 
0000618b l       .debug_loc     00000000 
000061a6 l       .debug_loc     00000000 
000061c1 l       .debug_loc     00000000 
000061dc l       .debug_loc     00000000 
00006203 l       .debug_loc     00000000 
00006232 l       .debug_loc     00000000 
0000624d l       .debug_loc     00000000 
00006268 l       .debug_loc     00000000 
00006283 l       .debug_loc     00000000 
000062a3 l       .debug_loc     00000000 
000062be l       .debug_loc     00000000 
000062e5 l       .debug_loc     00000000 
00006314 l       .debug_loc     00000000 
0000632f l       .debug_loc     00000000 
0000634a l       .debug_loc     00000000 
00006365 l       .debug_loc     00000000 
00006380 l       .debug_loc     00000000 
0000639b l       .debug_loc     00000000 
000063b6 l       .debug_loc     00000000 
000063d1 l       .debug_loc     00000000 
000063ec l       .debug_loc     00000000 
00006407 l       .debug_loc     00000000 
00006422 l       .debug_loc     00000000 
00006448 l       .debug_loc     00000000 
0000646e l       .debug_loc     00000000 
0000649d l       .debug_loc     00000000 
000064b8 l       .debug_loc     00000000 
000064d3 l       .debug_loc     00000000 
000064ee l       .debug_loc     00000000 
0000650e l       .debug_loc     00000000 
00006534 l       .debug_loc     00000000 
0000655a l       .debug_loc     00000000 
00006575 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004b45 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000938 l       .debug_ranges  00000000 
00000b2a l       .debug_str     00000000 
00000b64 l       .debug_str     00000000 
00000b57 l       .debug_str     00000000 
00000b34 l       .debug_str     00000000 
00000b45 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00004b95 l       .debug_str     00000000 
00004b78 l       .debug_str     00000000 
00004cb9 l       .debug_str     00000000 
00004baa l       .debug_str     00000000 
00004bd0 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00004c1c l       .debug_str     00000000 
00004c3d l       .debug_str     00000000 
00004c59 l       .debug_str     00000000 
00004c7b l       .debug_str     00000000 
00004c9b l       .debug_str     00000000 
00000c08 l       .debug_str     00000000 
00000be3 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00003cf4 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
000015fc l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004ccc l       .debug_str     00000000 
00000b94 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000e0e l       .debug_str     00000000 
00004ce7 l       .debug_str     00000000 
00000bdf l       .debug_str     00000000 
0000122f l       .debug_str     00000000 
00000c31 l       .debug_str     00000000 
00004d03 l       .debug_str     00000000 
00000e2c l       .debug_str     00000000 
00004d20 l       .debug_str     00000000 
00000c44 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00005b34 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
00004d45 l       .debug_str     00000000 
00000d3b l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
00000e53 l       .debug_str     00000000 
00004d63 l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
00000cb8 l       .debug_str     00000000 
00004d86 l       .debug_str     00000000 
00004da5 l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00000e62 l       .debug_str     00000000 
00004dbe l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
00000e7d l       .debug_str     00000000 
00000e8d l       .debug_str     00000000 
00004ddd l       .debug_str     00000000 
00000e98 l       .debug_str     00000000 
00004dfc l       .debug_str     00000000 
00004e1b l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
00001616 l       .debug_str     00000000 
00001607 l       .debug_str     00000000 
00004e3a l       .debug_str     00000000 
00004e51 l       .debug_str     00000000 
00004e66 l       .debug_str     00000000 
00000e70 l       .debug_str     00000000 
00004e8a l       .debug_str     00000000 
0000087c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 irq.c
f0002458 l       .text  00000000 
f0002458 l       .text  00000000 
f0002458 l       .text  00000000 
f0002458 l       .text  00000000 
f000245a l       .text  00000000 
f000245c l       .text  00000000 
f000245c l       .text  00000000 
f0002460 l       .text  00000000 
f000246a l       .text  00000000 
f000246a l       .text  00000000 
f000246c l       .text  00000000 
f000246c l       .text  00000000 
f0002470 l       .text  00000000 
f000247a l       .text  00000000 
f000247a l       .text  00000000 
f000247a l       .text  00000000 
f000247a l       .text  00000000 
f000247a l       .text  00000000 
f000247a l       .text  00000000 
f000247c l       .text  00000000 
f0002480 l       .text  00000000 
f0002480 l       .text  00000000 
f0002484 l       .text  00000000 
f0002486 l       .text  00000000 
f000248e l       .text  00000000 
f000248e l       .text  00000000 
f0002492 l       .text  00000000 
f0002492 l       .text  00000000 
f0002496 l       .text  00000000 
f0002498 l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a2 l       .text  00000000 
f00024a6 l       .text  00000000 
f00024a6 l       .text  00000000 
f00024aa l       .text  00000000 
f00024ac l       .text  00000000 
f00024b4 l       .text  00000000 
f00024b4 l       .text  00000000 
f00024b8 l       .text  00000000 
f00024b8 l       .text  00000000 
f00024bc l       .text  00000000 
f00024be l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c8 l       .text  00000000 
f00024ca l       .text  00000000 
f00024ca l       .text  00000000 
f00024ce l       .text  00000000 
f00024d0 l       .text  00000000 
f00024d8 l       .text  00000000 
f00024d8 l       .text  00000000 
f00024da l       .text  00000000 
f00024da l       .text  00000000 
f00024de l       .text  00000000 
f00024e0 l       .text  00000000 
f00024e8 l       .text  00000000 
f00024e8 l       .text  00000000 
00006590 l       .debug_loc     00000000 
000065ab l       .debug_loc     00000000 
000065db l       .debug_loc     00000000 
0000660b l       .debug_loc     00000000 
00006637 l       .debug_loc     00000000 
00006667 l       .debug_loc     00000000 
00006693 l       .debug_loc     00000000 
000066c3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004eaf l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000009a8 l       .debug_ranges  00000000 
00004ecb l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00004ee1 l       .debug_str     00000000 
00004ef9 l       .debug_str     00000000 
00004f0e l       .debug_str     00000000 
000040a6 l       .debug_str     00000000 
000014c2 l       .debug_str     00000000 
00003c4c l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
00001560 l       .debug_str     00000000 
00001581 l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000960 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
f00024e8 l       .text  00000000 
f00024e8 l       .text  00000000 
f00024e8 l       .text  00000000 
f00024ea l       .text  00000000 
f0002502 l       .text  00000000 
f0002504 l       .text  00000000 
f0002506 l       .text  00000000 
f0002508 l       .text  00000000 
f0002508 l       .text  00000000 
f000250c l       .text  00000000 
f000250e l       .text  00000000 
f000250e l       .text  00000000 
f0002510 l       .text  00000000 
f0002512 l       .text  00000000 
f0002512 l       .text  00000000 
f0002516 l       .text  00000000 
f0002516 l       .text  00000000 
f0002524 l       .text  00000000 
f0002524 l       .text  00000000 
f0005990 l     O .rodata        00000078 exc_frame
f0002542 l       .text  00000000 
f0002542 l       .text  00000000 
f0002548 l       .text  00000000 
f000254e l       .text  00000000 
f000254e l       .text  00000000 
f0002552 l       .text  00000000 
f0002552 l       .text  00000000 
f0002554 l       .text  00000000 
f000255a l       .text  00000000 
f000255a l       .text  00000000 
f000255c l       .text  00000000 
f0002560 l       .text  00000000 
f0002564 l       .text  00000000 
f0002564 l       .text  00000000 
f0002568 l       .text  00000000 
f0002568 l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f0002580 l       .text  00000000 
f0002580 l       .text  00000000 
f0002590 l       .text  00000000 
f0002594 l       .text  00000000 
f00025ac l       .text  00000000 
f00025ac l       .text  00000000 
f00025b4 l       .text  00000000 
f00025b4 l       .text  00000000 
f00025b8 l       .text  00000000 
f00025b8 l       .text  00000000 
f00025c4 l       .text  00000000 
f00025c8 l       .text  00000000 
f00025ce l       .text  00000000 
f00025ce l       .text  00000000 
f00025d6 l       .text  00000000 
f00025de l       .text  00000000 
f00025e0 l       .text  00000000 
f00025e2 l       .text  00000000 
f00025e2 l       .text  00000000 
f00025ea l       .text  00000000 
000103d4 l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
f00025ec l       .text  00000000 
f0002606 l       .text  00000000 
f0002608 l       .text  00000000 
f000260a l       .text  00000000 
f000260c l       .text  00000000 
f0002616 l       .text  00000000 
f000261a l       .text  00000000 
f0002622 l       .text  00000000 
f0005a08 l     O .rodata        00000014 ottf_generic_fault_print.log_fields
f0002622 l       .text  00000000 
f000263a l       .text  00000000 
f000263c l       .text  00000000 
f000263e l       .text  00000000 
f0002640 l       .text  00000000 
f000264a l       .text  00000000 
f000264e l       .text  00000000 
f0002656 l       .text  00000000 
f0002656 l       .text  00000000 
f0002656 l       .text  00000000 
f0002656 l       .text  00000000 
f0002656 l       .text  00000000 
f0002658 l       .text  00000000 
f000265c l       .text  00000000 
f000265e l       .text  00000000 
f000265e l       .text  00000000 
f0002660 l       .text  00000000 
f0002660 l       .text  00000000 
f0002662 l       .text  00000000 
f0002662 l       .text  00000000 
f0002664 l       .text  00000000 
f0002668 l       .text  00000000 
f000267e l       .text  00000000 
f000268a l       .text  00000000 
f000268a l       .text  00000000 
f0002690 l       .text  00000000 
f0002690 l       .text  00000000 
f000269c l       .text  00000000 
f000269c l       .text  00000000 
f00026a2 l       .text  00000000 
f00026a2 l       .text  00000000 
f00026ae l       .text  00000000 
f00026ae l       .text  00000000 
f00026b4 l       .text  00000000 
f00026b4 l       .text  00000000 
f00026c0 l       .text  00000000 
f00026c0 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d8 l       .text  00000000 
f00026d8 l       .text  00000000 
f00026e4 l       .text  00000000 
f00026e4 l       .text  00000000 
f00026ea l       .text  00000000 
f00026ea l       .text  00000000 
f00026f8 l       .text  00000000 
f00026f8 l       .text  00000000 
f00026fc l     F .text  00000022 generic_fault_handler
f00026fc l       .text  00000000 
f00026fc l       .text  00000000 
f00026fc l       .text  00000000 
f00026fc l       .text  00000000 
f00026fc l       .text  00000000 
f00026fc l       .text  00000000 
f00026fe l       .text  00000000 
f0002702 l       .text  00000000 
f0002704 l       .text  00000000 
f0002704 l       .text  00000000 
f0002706 l       .text  00000000 
f0002708 l       .text  00000000 
f0002708 l       .text  00000000 
f0005a44 l     O .rodata        00000080 exception_reason
f000270a l       .text  00000000 
f0002718 l       .text  00000000 
f000271a l       .text  00000000 
f000271c l       .text  00000000 
f000271c l       .text  00000000 
f000271e l       .text  00000000 
f000271e l       .text  00000000 
f000271e l       .text  00000000 
f000271e l       .text  00000000 
f000271e l       .text  00000000 
f000271e l       .text  00000000 
f0002720 l       .text  00000000 
f0002724 l       .text  00000000 
f0002726 l       .text  00000000 
f0002726 l       .text  00000000 
f0002728 l       .text  00000000 
f000272a l       .text  00000000 
f0002734 l       .text  00000000 
f0002736 l       .text  00000000 
f0002736 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f000273a l       .text  00000000 
f000273e l       .text  00000000 
f0002740 l       .text  00000000 
f0002740 l       .text  00000000 
f0002742 l       .text  00000000 
f0002744 l       .text  00000000 
f000274e l       .text  00000000 
f0002750 l       .text  00000000 
f0002750 l       .text  00000000 
f0002752 l       .text  00000000 
f0002752 l       .text  00000000 
f0002752 l       .text  00000000 
f0002752 l       .text  00000000 
f0002752 l       .text  00000000 
f0002752 l       .text  00000000 
f0002754 l       .text  00000000 
f000275a l       .text  00000000 
f000275c l       .text  00000000 
f000275c l       .text  00000000 
f000276a l       .text  00000000 
f000276a l       .text  00000000 
f000276e l       .text  00000000 
f0002772 l       .text  00000000 
f0002772 l       .text  00000000 
f0002776 l       .text  00000000 
000103e8 l     O .logs.fields   00000014 ottf_external_isr.kLogFields
f0002778 l       .text  00000000 
f0002784 l       .text  00000000 
f0002784 l       .text  00000000 
f0002786 l       .text  00000000 
f000278e l       .text  00000000 
f0005a1c l     O .rodata        00000014 ottf_external_isr.log_fields
f000278e l       .text  00000000 
f000279a l       .text  00000000 
f000279a l       .text  00000000 
f00027a0 l       .text  00000000 
f00027a2 l       .text  00000000 
f00027a2 l       .text  00000000 
f00027a4 l       .text  00000000 
f00027a4 l       .text  00000000 
f00027b0 l       .text  00000000 
f00027b2 l       .text  00000000 
f00027b2 l       .text  00000000 
f00027b4 l       .text  00000000 
f00027b8 l       .text  00000000 
f00027ba l       .text  00000000 
f00027be l       .text  00000000 
f00027be l       .text  00000000 
f00027c0 l       .text  00000000 
f00027c0 l       .text  00000000 
f00027c2 l       .text  00000000 
f00027ce l       .text  00000000 
f00027d2 l       .text  00000000 
f00027d2 l       .text  00000000 
f00027d6 l       .text  00000000 
000103fc l     O .logs.fields   00000014 ottf_external_isr.kLogFields.10
f00027d8 l       .text  00000000 
f00027e4 l       .text  00000000 
f00027e4 l       .text  00000000 
f00027e6 l       .text  00000000 
f00027ee l       .text  00000000 
f0005a30 l     O .rodata        00000014 ottf_external_isr.log_fields.12
f00027ee l       .text  00000000 
f00027fa l       .text  00000000 
f00027fa l       .text  00000000 
f0002800 l       .text  00000000 
f0002802 l       .text  00000000 
f0002802 l       .text  00000000 
f0002806 l       .text  00000000 
f0002808 l       .text  00000000 
f000280c l       .text  00000000 
f0002814 l       .text  00000000 
f0002814 l       .text  00000000 
f0002816 l       .text  00000000 
f0002818 l       .text  00000000 
f0002824 l       .text  00000000 
f0002824 l       .text  00000000 
f0002826 l       .text  00000000 
f0002826 l       .text  00000000 
f0002826 l       .text  00000000 
f0002826 l     F .text  0000001c generic_internal_irq_handler
f0002826 l       .text  00000000 
f0002826 l       .text  00000000 
f0002826 l       .text  00000000 
f0002828 l       .text  00000000 
f000282c l       .text  00000000 
f000282e l       .text  00000000 
f000282e l       .text  00000000 
f0002830 l       .text  00000000 
f0002832 l       .text  00000000 
f000283c l       .text  00000000 
f0002840 l       .text  00000000 
f0002840 l       .text  00000000 
f0002842 l       .text  00000000 
f0002842 l       .text  00000000 
f0002842 l       .text  00000000 
f0002842 l       .text  00000000 
f0002842 l       .text  00000000 
f0002842 l       .text  00000000 
f0002844 l       .text  00000000 
f0002848 l       .text  00000000 
f000284a l       .text  00000000 
f000284a l       .text  00000000 
f000284c l       .text  00000000 
f000284c l       .text  00000000 
f0002852 l       .text  00000000 
f0002852 l       .text  00000000 
f0002856 l       .text  00000000 
f0002858 l       .text  00000000 
f000285c l       .text  00000000 
f000285e l       .text  00000000 
f0002862 l       .text  00000000 
f0002862 l       .text  00000000 
f000286e l       .text  00000000 
f000286e l       .text  00000000 
f0002870 l       .text  00000000 
f0002874 l       .text  00000000 
f0002874 l       .text  00000000 
f0002880 l       .text  00000000 
f0002880 l       .text  00000000 
f0002882 l       .text  00000000 
f0002884 l       .text  00000000 
f0002892 l       .text  00000000 
f0002892 l       .text  00000000 
f0002894 l       .text  00000000 
f0002894 l       .text  00000000 
f0002894 l       .text  00000000 
000066eb l       .debug_loc     00000000 
00006711 l       .debug_loc     00000000 
00006742 l       .debug_loc     00000000 
00006773 l       .debug_loc     00000000 
00006799 l       .debug_loc     00000000 
000067bf l       .debug_loc     00000000 
000067da l       .debug_loc     00000000 
0000680d l       .debug_loc     00000000 
00006833 l       .debug_loc     00000000 
00006859 l       .debug_loc     00000000 
00006874 l       .debug_loc     00000000 
000068e7 l       .debug_loc     00000000 
00006902 l       .debug_loc     00000000 
00006933 l       .debug_loc     00000000 
0000694e l       .debug_loc     00000000 
0000697f l       .debug_loc     00000000 
000069b0 l       .debug_loc     00000000 
000069cb l       .debug_loc     00000000 
00006a12 l       .debug_loc     00000000 
00006a50 l       .debug_loc     00000000 
00006a90 l       .debug_loc     00000000 
00006ac1 l       .debug_loc     00000000 
00006adc l       .debug_loc     00000000 
00006b0d l       .debug_loc     00000000 
00006b3e l       .debug_loc     00000000 
00006b7a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004f24 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000a00 l       .debug_ranges  00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000562b l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
00004f87 l       .debug_str     00000000 
0000143e l       .debug_str     00000000 
00004f80 l       .debug_str     00000000 
000056b6 l       .debug_str     00000000 
000056bd l       .debug_str     00000000 
000056c2 l       .debug_str     00000000 
000056c8 l       .debug_str     00000000 
000056cb l       .debug_str     00000000 
000056d3 l       .debug_str     00000000 
000056dd l       .debug_str     00000000 
000056e8 l       .debug_str     00000000 
000004f5 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00004f55 l       .debug_str     00000000 
00005692 l       .debug_str     00000000 
00003527 l       .debug_str     00000000 
000018ff l       .debug_str     00000000 
0000551a l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00004f62 l       .debug_str     00000000 
00003655 l       .debug_str     00000000 
00003649 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00004f6c l       .debug_str     00000000 
00004f76 l       .debug_str     00000000 
00005053 l       .debug_str     00000000 
00004f91 l       .debug_str     00000000 
00004fa9 l       .debug_str     00000000 
00004fc2 l       .debug_str     00000000 
00004fdc l       .debug_str     00000000 
00004fef l       .debug_str     00000000 
00005007 l       .debug_str     00000000 
00005020 l       .debug_str     00000000 
00005032 l       .debug_str     00000000 
00005047 l       .debug_str     00000000 
00005093 l       .debug_str     00000000 
0000505c l       .debug_str     00000000 
00005078 l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
0000136b l       .debug_str     00000000 
000004a6 l       .debug_str     00000000 
000004bb l       .debug_str     00000000 
000004d4 l       .debug_str     00000000 
000004e6 l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000509 l       .debug_str     00000000 
00005508 l       .debug_str     00000000 
000050ac l       .debug_str     00000000 
000050ce l       .debug_str     00000000 
000050ee l       .debug_str     00000000 
0000510e l       .debug_str     00000000 
0000512e l       .debug_str     00000000 
0000514e l       .debug_str     00000000 
0000516d l       .debug_str     00000000 
00005191 l       .debug_str     00000000 
000051b0 l       .debug_str     00000000 
000051cf l       .debug_str     00000000 
000051ee l       .debug_str     00000000 
00005210 l       .debug_str     00000000 
00005232 l       .debug_str     00000000 
00005254 l       .debug_str     00000000 
0000527b l       .debug_str     00000000 
0000529e l       .debug_str     00000000 
000052c1 l       .debug_str     00000000 
000052e2 l       .debug_str     00000000 
00005306 l       .debug_str     00000000 
0000532e l       .debug_str     00000000 
00005353 l       .debug_str     00000000 
00005379 l       .debug_str     00000000 
000053a1 l       .debug_str     00000000 
000053c4 l       .debug_str     00000000 
000053e8 l       .debug_str     00000000 
00005407 l       .debug_str     00000000 
00005426 l       .debug_str     00000000 
00005445 l       .debug_str     00000000 
00005466 l       .debug_str     00000000 
00005486 l       .debug_str     00000000 
000054ab l       .debug_str     00000000 
000054ca l       .debug_str     00000000 
000054e9 l       .debug_str     00000000 
00005553 l       .debug_str     00000000 
00005525 l       .debug_str     00000000 
0000553f l       .debug_str     00000000 
00005565 l       .debug_str     00000000 
00005570 l       .debug_str     00000000 
0000558f l       .debug_str     00000000 
000055a3 l       .debug_str     00000000 
000055b2 l       .debug_str     00000000 
000055c2 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
00005644 l       .debug_str     00000000 
000055ce l       .debug_str     00000000 
0000565b l       .debug_str     00000000 
000014d2 l       .debug_str     00000000 
00005671 l       .debug_str     00000000 
00005683 l       .debug_str     00000000 
0000382d l       .debug_str     00000000 
000055df l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
0000370d l       .debug_str     00000000 
000036d7 l       .debug_str     00000000 
000005b1 l       .debug_str     00000000 
000005c1 l       .debug_str     00000000 
000055f5 l       .debug_str     00000000 
0000560e l       .debug_str     00000000 
000056a4 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
000009c4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic_autogen.c
f0002894 l       .text  00000000 
f0002894 l       .text  00000000 
f0002894 l       .text  00000000 
f0002894 l       .text  00000000 
f0002896 l       .text  00000000 
f0002898 l       .text  00000000 
f000289c l       .text  00000000 
f000289c l       .text  00000000 
f00028a4 l       .text  00000000 
f00028a6 l       .text  00000000 
f00028a8 l       .text  00000000 
f00028aa l       .text  00000000 
f00028b2 l       .text  00000000 
f00028b2 l       .text  00000000 
00006bab l       .debug_loc     00000000 
00006bd1 l       .debug_loc     00000000 
00006bf7 l       .debug_loc     00000000 
00006c12 l       .debug_loc     00000000 
00006c2d l       .debug_loc     00000000 
00006c49 l       .debug_loc     00000000 
00006c65 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005a20 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000a50 l       .debug_ranges  00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00005a6a l       .debug_str     00000000 
00005a50 l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00003638 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
0000364d l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00005a7c l       .debug_str     00000000 
00000b94 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000e0e l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
00003655 l       .debug_str     00000000 
00003649 l       .debug_str     00000000 
00005a94 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
00000ae4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
f00028b2 l       .text  00000000 
f00028b2 l       .text  00000000 
f00028b2 l       .text  00000000 
f00028b2 l       .text  00000000 
f00028c2 l       .text  00000000 
f00028c2 l       .text  00000000 
f00028d4 l       .text  00000000 
f00028d6 l       .text  00000000 
f00028d6 l       .text  00000000 
f00028de l       .text  00000000 
f00028de l       .text  00000000 
f00028e2 l       .text  00000000 
f00028e4 l       .text  00000000 
f00028e4 l       .text  00000000 
f00028e6 l       .text  00000000 
f00028e6 l       .text  00000000 
f00028ea l       .text  00000000 
f00028ea l       .text  00000000 
f00028ee l       .text  00000000 
f00028ee l       .text  00000000 
f00028f2 l       .text  00000000 
f00028f2 l       .text  00000000 
f00028f4 l       .text  00000000 
f00028f4 l       .text  00000000 
f00028f6 l       .text  00000000 
f00028f6 l       .text  00000000 
f00028fa l       .text  00000000 
f0002902 l       .text  00000000 
f0002902 l       .text  00000000 
f0002902 l       .text  00000000 
f0002902 l       .text  00000000 
f0002902 l       .text  00000000 
f0002902 l       .text  00000000 
f000290e l       .text  00000000 
f000291e l       .text  00000000 
f000291e l       .text  00000000 
f0002920 l       .text  00000000 
f0002920 l       .text  00000000 
f0002922 l       .text  00000000 
f0002922 l       .text  00000000 
f0002926 l       .text  00000000 
f0002926 l       .text  00000000 
f0002928 l       .text  00000000 
f0002928 l       .text  00000000 
f000292c l       .text  00000000 
f0002934 l       .text  00000000 
f0002934 l       .text  00000000 
f0002934 l       .text  00000000 
f0002934 l       .text  00000000 
f0002934 l       .text  00000000 
f0002934 l       .text  00000000 
f000293c l       .text  00000000 
f000293c l       .text  00000000 
f000294c l       .text  00000000 
f000294c l       .text  00000000 
f000294e l       .text  00000000 
f000294e l       .text  00000000 
f0002950 l       .text  00000000 
f0002950 l       .text  00000000 
f0002956 l       .text  00000000 
f0002956 l       .text  00000000 
f0002958 l       .text  00000000 
f0002958 l       .text  00000000 
f000295c l       .text  00000000 
f0002964 l       .text  00000000 
f0002964 l       .text  00000000 
f0002964 l       .text  00000000 
f0002964 l       .text  00000000 
f0002964 l       .text  00000000 
f0002964 l       .text  00000000 
f000296c l       .text  00000000 
f000296c l       .text  00000000 
f0002978 l       .text  00000000 
f0002978 l       .text  00000000 
f000297a l       .text  00000000 
f000297a l       .text  00000000 
f0002980 l       .text  00000000 
f0002984 l       .text  00000000 
f0002984 l       .text  00000000 
f0002986 l       .text  00000000 
f0002986 l       .text  00000000 
f000298a l       .text  00000000 
f0002992 l       .text  00000000 
f0002992 l       .text  00000000 
f0002992 l       .text  00000000 
f0002992 l       .text  00000000 
f0002992 l       .text  00000000 
f0002992 l       .text  00000000 
f000299a l       .text  00000000 
f000299a l       .text  00000000 
f00029a0 l       .text  00000000 
f00029a0 l       .text  00000000 
f00029a2 l       .text  00000000 
f00029a2 l       .text  00000000 
f00029a4 l       .text  00000000 
f00029a4 l       .text  00000000 
f00029aa l       .text  00000000 
f00029aa l       .text  00000000 
f00029ac l       .text  00000000 
f00029ac l       .text  00000000 
f00029b0 l       .text  00000000 
f00029b8 l       .text  00000000 
f00029b8 l       .text  00000000 
00006c80 l       .debug_loc     00000000 
00006ca6 l       .debug_loc     00000000 
00006cd9 l       .debug_loc     00000000 
00006cf8 l       .debug_loc     00000000 
00006d17 l       .debug_loc     00000000 
00006d32 l       .debug_loc     00000000 
00006d6b l       .debug_loc     00000000 
00006d86 l       .debug_loc     00000000 
00006db6 l       .debug_loc     00000000 
00006dd1 l       .debug_loc     00000000 
00006dec l       .debug_loc     00000000 
00006e07 l       .debug_loc     00000000 
00006e22 l       .debug_loc     00000000 
00006e3d l       .debug_loc     00000000 
00006e58 l       .debug_loc     00000000 
00006e73 l       .debug_loc     00000000 
00006e8e l       .debug_loc     00000000 
00006ea9 l       .debug_loc     00000000 
00006ec4 l       .debug_loc     00000000 
00006edf l       .debug_loc     00000000 
00006efa l       .debug_loc     00000000 
00006f15 l       .debug_loc     00000000 
00006f33 l       .debug_loc     00000000 
00006f59 l       .debug_loc     00000000 
00006f78 l       .debug_loc     00000000 
00006f9e l       .debug_loc     00000000 
00006fb9 l       .debug_loc     00000000 
00006fd4 l       .debug_loc     00000000 
00006fef l       .debug_loc     00000000 
0000700a l       .debug_loc     00000000 
00007029 l       .debug_loc     00000000 
00007044 l       .debug_loc     00000000 
0000705f l       .debug_loc     00000000 
0000707a l       .debug_loc     00000000 
00007095 l       .debug_loc     00000000 
000070b5 l       .debug_loc     00000000 
000070d0 l       .debug_loc     00000000 
000070eb l       .debug_loc     00000000 
00007106 l       .debug_loc     00000000 
00007121 l       .debug_loc     00000000 
0000713c l       .debug_loc     00000000 
00007159 l       .debug_loc     00000000 
00007174 l       .debug_loc     00000000 
0000718f l       .debug_loc     00000000 
000071aa l       .debug_loc     00000000 
000071c5 l       .debug_loc     00000000 
000071e0 l       .debug_loc     00000000 
00007200 l       .debug_loc     00000000 
0000721b l       .debug_loc     00000000 
00007236 l       .debug_loc     00000000 
00007251 l       .debug_loc     00000000 
0000726c l       .debug_loc     00000000 
0000728c l       .debug_loc     00000000 
000072a7 l       .debug_loc     00000000 
000072c2 l       .debug_loc     00000000 
000072dd l       .debug_loc     00000000 
000072fd l       .debug_loc     00000000 
00007318 l       .debug_loc     00000000 
00007333 l       .debug_loc     00000000 
0000734e l       .debug_loc     00000000 
0000736e l       .debug_loc     00000000 
00007389 l       .debug_loc     00000000 
000073a4 l       .debug_loc     00000000 
000073bf l       .debug_loc     00000000 
000073da l       .debug_loc     00000000 
000073fa l       .debug_loc     00000000 
00007415 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005aa8 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000ab0 l       .debug_ranges  00000000 
00005ac8 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00005ade l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00000c08 l       .debug_str     00000000 
00000be3 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00005b7d l       .debug_str     00000000 
00004f67 l       .debug_str     00000000 
000004f5 l       .debug_str     00000000 
00000a68 l       .debug_ranges  00000000 
00000a80 l       .debug_ranges  00000000 
000050a5 l       .debug_str     00000000 
00005c2e l       .debug_str     00000000 
00005af4 l       .debug_str     00000000 
00000bdf l       .debug_str     00000000 
00005b1b l       .debug_str     00000000 
00005b0d l       .debug_str     00000000 
00005b34 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
000036d7 l       .debug_str     00000000 
0000370d l       .debug_str     00000000 
00000c31 l       .debug_str     00000000 
00005b8f l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
0000479d l       .debug_str     00000000 
00005b12 l       .debug_str     00000000 
00000e8d l       .debug_str     00000000 
00005b2b l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
00000cb8 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00003722 l       .debug_str     00000000 
00005c3e l       .debug_str     00000000 
00000a98 l       .debug_ranges  00000000 
000036ba l       .debug_str     00000000 
00001300 l       .debug_str     00000000 
000036ec l       .debug_str     00000000 
000040cd l       .debug_str     00000000 
00005c43 l       .debug_str     00000000 
00005b3e l       .debug_str     00000000 
00005b54 l       .debug_str     00000000 
00005b63 l       .debug_str     00000000 
00000c44 l       .debug_str     00000000 
00005bab l       .debug_str     00000000 
00000d3b l       .debug_str     00000000 
000055df l       .debug_str     00000000 
00005c54 l       .debug_str     00000000 
00005c5f l       .debug_str     00000000 
000055f5 l       .debug_str     00000000 
00005c72 l       .debug_str     00000000 
00005bc6 l       .debug_str     00000000 
00005c80 l       .debug_str     00000000 
00005be5 l       .debug_str     00000000 
00005c0a l       .debug_str     00000000 
00000f61 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
00003655 l       .debug_str     00000000 
00003649 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000e70 l       .debug_str     00000000 
00000b18 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
f00029b8 l       .text  00000000 
f00029b8 l       .text  00000000 
f00029b8 l       .text  00000000 
f00029ba l       .text  00000000 
f00029ba l       .text  00000000 
f00029ba l       .text  00000000 
f00029c2 l       .text  00000000 
f00029cc l       .text  00000000 
f00029cc l       .text  00000000 
f00029ce l       .text  00000000 
f00029e0 l       .text  00000000 
f00029e0 l       .text  00000000 
f00029e8 l       .text  00000000 
f00029ec l       .text  00000000 
f00029ec l       .text  00000000 
f00029ee l       .text  00000000 
f00029f2 l       .text  00000000 
f00029f6 l       .text  00000000 
00010410 l     O .logs.fields   00000014 rand_testutils_init.kLogFields
f00029f8 l       .text  00000000 
f0002a04 l       .text  00000000 
f0002a04 l       .text  00000000 
f0002a06 l       .text  00000000 
f0002a0e l       .text  00000000 
f0005b5c l     O .rodata        00000014 rand_testutils_init.log_fields
f0002a0e l       .text  00000000 
f0002a18 l       .text  00000000 
f0002a18 l       .text  00000000 
f0002a2c l       .text  00000000 
f0002a2c l       .text  00000000 
f0002a32 l       .text  00000000 
f0002a32 l       .text  00000000 
f0002a38 l       .text  00000000 
f0002a3a l       .text  00000000 
f0002a40 l       .text  00000000 
f0002a42 l       .text  00000000 
f0002a42 l       .text  00000000 
f0002a66 l       .text  00000000 
f0002a6e l       .text  00000000 
f0002a76 l       .text  00000000 
f0002a7a l       .text  00000000 
f0002a7e l       .text  00000000 
f0002a86 l       .text  00000000 
f0002a86 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
0001044c l     O .logs.fields   00000014 reseed_lfsr.kLogFields
00010460 l     O .logs.fields   00000014 reseed_lfsr.kLogFields.8
00010424 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
00010438 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
00000680 l     O .ot.status_create_record       00000080 rand_testutils_init.kOtStatusRecord
00000700 l     O .ot.status_create_record       00000080 rand_testutils_gen32_range.kOtStatusRecord
00000780 l     O .ot.status_create_record       00000080 rand_testutils_gen32_range.kOtStatusRecord.6
00007430 l       .debug_loc     00000000 
00007461 l       .debug_loc     00000000 
0000747c l       .debug_loc     00000000 
000074ad l       .debug_loc     00000000 
000074e0 l       .debug_loc     00000000 
00007513 l       .debug_loc     00000000 
0000755a l       .debug_loc     00000000 
000075ac l       .debug_loc     00000000 
000075c7 l       .debug_loc     00000000 
000075e7 l       .debug_loc     00000000 
0000760d l       .debug_loc     00000000 
00007628 l       .debug_loc     00000000 
0000764e l       .debug_loc     00000000 
00007674 l       .debug_loc     00000000 
0000768f l       .debug_loc     00000000 
000076ab l       .debug_loc     00000000 
000076c6 l       .debug_loc     00000000 
000076e1 l       .debug_loc     00000000 
000076fc l       .debug_loc     00000000 
00007731 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005e58 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000b40 l       .debug_ranges  00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000133c l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
00000793 l       .debug_str     00000000 
00001104 l       .debug_str     00000000 
000010fc l       .debug_str     00000000 
0000098e l       .debug_str     00000000 
00000993 l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000007ce l       .debug_str     00000000 
000007b6 l       .debug_str     00000000 
000007a3 l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
00005e7f l       .debug_str     00000000 
00005e9a l       .debug_str     00000000 
00005f22 l       .debug_str     00000000 
00005f54 l       .debug_str     00000000 
00005f58 l       .debug_str     00000000 
00005f37 l       .debug_str     00000000 
0000049f l       .debug_str     00000000 
00000909 l       .debug_str     00000000 
000007e8 l       .debug_str     00000000 
000007ec l       .debug_str     00000000 
000007f7 l       .debug_str     00000000 
00000800 l       .debug_str     00000000 
00000811 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
0000083c l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
00000861 l       .debug_str     00000000 
00000875 l       .debug_str     00000000 
0000087e l       .debug_str     00000000 
0000088a l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000008a3 l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000008cb l       .debug_str     00000000 
0000136b l       .debug_str     00000000 
000004a6 l       .debug_str     00000000 
000004bb l       .debug_str     00000000 
000004d4 l       .debug_str     00000000 
000004e6 l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000509 l       .debug_str     00000000 
00001228 l       .debug_str     00000000 
000011c5 l       .debug_str     00000000 
000011d2 l       .debug_str     00000000 
000011e6 l       .debug_str     00000000 
000011f7 l       .debug_str     00000000 
00001208 l       .debug_str     00000000 
00001219 l       .debug_str     00000000 
0000091a l       .debug_str     00000000 
00001309 l       .debug_str     00000000 
000001e5 l       .debug_str     00000000 
00003f00 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
000005b1 l       .debug_str     00000000 
000005c1 l       .debug_str     00000000 
00005ef7 l       .debug_str     00000000 
00005eb6 l       .debug_str     00000000 
00005ec3 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00005ec7 l       .debug_str     00000000 
0000070e l       .debug_str     00000000 
000006f7 l       .debug_str     00000000 
00000716 l       .debug_str     00000000 
00005f0d l       .debug_str     00000000 
00000b10 l       .debug_ranges  00000000 
00005ed3 l       .debug_str     00000000 
00001111 l       .debug_str     00000000 
00001100 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
0000063c l       .debug_str     00000000 
00005f3d l       .debug_str     00000000 
00005f5c l       .debug_str     00000000 
000049fa l       .debug_str     00000000 
00000689 l       .debug_str     00000000 
00005f6e l       .debug_str     00000000 
00005f62 l       .debug_str     00000000 
00005f67 l       .debug_str     00000000 
00001157 l       .debug_str     00000000 
00000b28 l       .debug_ranges  00000000 
000004f5 l       .debug_str     00000000 
00004b28 l       .debug_str     00000000 
00000944 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
00001173 l       .debug_str     00000000 
00001124 l       .debug_str     00000000 
00005ece l       .debug_str     00000000 
0000113f l       .debug_str     00000000 
00001168 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
00000bdc l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a94 l       .text  00000000 
f0002a96 l       .text  00000000 
f0002a9a l       .text  00000000 
f0002a9a l       .text  00000000 
f0002aa2 l       .text  00000000 
f0002aa4 l       .text  00000000 
f0002aa6 l       .text  00000000 
f0002aa8 l       .text  00000000 
f0002ab0 l       .text  00000000 
f0002ab0 l       .text  00000000 
00007b2a l       .debug_loc     00000000 
00007b50 l       .debug_loc     00000000 
00007b76 l       .debug_loc     00000000 
00007b91 l       .debug_loc     00000000 
00007bac l       .debug_loc     00000000 
00007bc7 l       .debug_loc     00000000 
00007bf6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006092 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000c10 l       .debug_ranges  00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
0000613f l       .debug_str     00000000 
000060c7 l       .debug_str     00000000 
000060e5 l       .debug_str     00000000 
00006103 l       .debug_str     00000000 
00006121 l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00001326 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00001104 l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
00000cb8 l       .debug_str     00000000 
00005b34 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00006156 l       .debug_str     00000000 
00000b94 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000e0e l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
00001111 l       .debug_str     00000000 
00001100 l       .debug_str     00000000 
00006173 l       .debug_str     00000000 
00000cd8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 status.c
f0002ab0 l       .text  00000000 
f0002ab0 l       .text  00000000 
f0002ab0 l       .text  00000000 
f0002ab2 l       .text  00000000 
f0002ab6 l       .text  00000000 
f0002abc l       .text  00000000 
f0002ac0 l       .text  00000000 
f0002ac2 l       .text  00000000 
f0002ac6 l       .text  00000000 
f0002aca l       .text  00000000 
f0002ad2 l       .text  00000000 
0001049c l     O .logs.fields   00000014 test_status_set.kLogFields.5
f0002ad4 l       .text  00000000 
f0002ae2 l       .text  00000000 
f0002ae2 l       .text  00000000 
f0002ae4 l       .text  00000000 
f0002aec l       .text  00000000 
f0005bec l     O .rodata        00000014 test_status_set.log_fields.7
f0002aec l       .text  00000000 
f0002af8 l       .text  00000000 
f0002af8 l       .text  00000000 
f0002b00 l       .text  00000000 
f0002b02 l       .text  00000000 
f0002b02 l       .text  00000000 
f0002b04 l       .text  00000000 
f0002b04 l       .text  00000000 
f0002b08 l       .text  00000000 
f0002b08 l       .text  00000000 
f0002b14 l       .text  00000000 
f0002b14 l       .text  00000000 
f0002b18 l       .text  00000000 
f0002b1c l       .text  00000000 
f0005bd8 l     O .rodata        00000014 test_status_set.log_fields.4
f0002b1e l       .text  00000000 
f0002b28 l       .text  00000000 
f0002b28 l       .text  00000000 
f0002b32 l       .text  00000000 
f0002b32 l       .text  00000000 
f0002b3a l       .text  00000000 
f0005bc4 l     O .rodata        00000014 test_status_set.log_fields
f0002b3c l       .text  00000000 
f0002b46 l       .text  00000000 
f0002b46 l       .text  00000000 
f0002b48 l       .text  00000000 
00010488 l     O .logs.fields   00000014 test_status_set.kLogFields.2
f0002b50 l       .text  00000000 
f0002b5c l       .text  00000000 
f0002b5c l       .text  00000000 
f0002b64 l       .text  00000000 
f0002b66 l       .text  00000000 
f0002b66 l       .text  00000000 
f0002b76 l       .text  00000000 
00010474 l     O .logs.fields   00000014 test_status_set.kLogFields
f0002b76 l       .text  00000000 
f0002b82 l       .text  00000000 
f0002b82 l       .text  00000000 
f0002b8a l       .text  00000000 
f0002b8c l       .text  00000000 
f0002b8c l       .text  00000000 
f0002b90 l       .text  00000000 
f0002b94 l       .text  00000000 
f0002b94 l       .text  00000000 
f0002b94 l       .text  00000000 
00007c11 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000618c l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
000005b1 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
0000136b l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000004a6 l       .debug_str     00000000 
000004bb l       .debug_str     00000000 
000004d4 l       .debug_str     00000000 
000004e6 l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
00000509 l       .debug_str     00000000 
000061ba l       .debug_str     00000000 
000061d3 l       .debug_str     00000000 
000005c1 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
000014d2 l       .debug_str     00000000 
00000d0c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 hart.c
f0002b94 l       .text  00000000 
f0002b94 l       .text  00000000 
f0002b94 l       .text  00000000 
f0002b94 l       .text  00000000 
f0002b98 l       .text  00000000 
f0002b98 l       .text  00000000 
f0002ba2 l       .text  00000000 
f0002ba2 l       .text  00000000 
00007c5b l       .debug_loc     00000000 
00007c76 l       .debug_loc     00000000 
00007c9d l       .debug_loc     00000000 
00007cc4 l       .debug_loc     00000000 
00007ce0 l       .debug_loc     00000000 
00007d1d l       .debug_loc     00000000 
00007d44 l       .debug_loc     00000000 
00007d6b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000061eb l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000c28 l       .debug_ranges  00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
000009c6 l       .debug_str     00000000 
000009ef l       .debug_str     00000000 
000009e4 l       .debug_str     00000000 
000009d7 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00006229 l       .debug_str     00000000 
0000113a l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000620f l       .debug_str     00000000 
00006208 l       .debug_str     00000000 
00006216 l       .debug_str     00000000 
000014d2 l       .debug_str     00000000 
0000623a l       .debug_str     00000000 
00000d38 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ibex.c
f0002ba2 l       .text  00000000 
f0002ba2 l       .text  00000000 
f0002ba2 l       .text  00000000 
f0002ba2 l       .text  00000000 
f0002ba6 l       .text  00000000 
f0002ba6 l       .text  00000000 
f0002ba8 l       .text  00000000 
f0002bb0 l       .text  00000000 
f0002bb0 l       .text  00000000 
f0002bb0 l       .text  00000000 
f0002bb0 l       .text  00000000 
f0002bb0 l       .text  00000000 
f0002bb0 l       .text  00000000 
f0002bb4 l       .text  00000000 
f0002bb4 l       .text  00000000 
f0002bb6 l       .text  00000000 
f0002bbe l       .text  00000000 
f0002bbe l       .text  00000000 
f0002bbe l       .text  00000000 
f0002bbe l       .text  00000000 
f0002bbe l       .text  00000000 
f0002bbe l       .text  00000000 
f0002bc2 l       .text  00000000 
f0002bc2 l       .text  00000000 
f0002bc4 l       .text  00000000 
f0002bcc l       .text  00000000 
f0002bcc l       .text  00000000 
00007d87 l       .debug_loc     00000000 
00007da2 l       .debug_loc     00000000 
00007dbd l       .debug_loc     00000000 
00007dd8 l       .debug_loc     00000000 
00007df3 l       .debug_loc     00000000 
00007e1a l       .debug_loc     00000000 
00007e41 l       .debug_loc     00000000 
00007e5d l       .debug_loc     00000000 
00007e78 l       .debug_loc     00000000 
00007e94 l       .debug_loc     00000000 
00007ebb l       .debug_loc     00000000 
00007ee2 l       .debug_loc     00000000 
00007f08 l       .debug_loc     00000000 
00007f2f l       .debug_loc     00000000 
00007f56 l       .debug_loc     00000000 
00007f72 l       .debug_loc     00000000 
00007f8d l       .debug_loc     00000000 
00007fb4 l       .debug_loc     00000000 
00007fdb l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000624c l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000c80 l       .debug_ranges  00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
000055ce l       .debug_str     00000000 
000056c2 l       .debug_str     00000000 
000055b2 l       .debug_str     00000000 
000055a3 l       .debug_str     00000000 
000056bd l       .debug_str     00000000 
00006269 l       .debug_str     00000000 
000009c6 l       .debug_str     00000000 
000009d7 l       .debug_str     00000000 
000009e4 l       .debug_str     00000000 
000009ef l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000998 l       .debug_str     00000000 
00001132 l       .debug_str     00000000 
00000a28 l       .debug_str     00000000 
00000a15 l       .debug_str     00000000 
000009af l       .debug_str     00000000 
00000c50 l       .debug_ranges  00000000 
00006279 l       .debug_str     00000000 
00000c68 l       .debug_ranges  00000000 
000009b7 l       .debug_str     00000000 
000009aa l       .debug_str     00000000 
0000620f l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000d98 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 log.c
f0002bcc l       .text  00000000 
f0002bcc l       .text  00000000 
f0002bcc l       .text  00000000 
f0002bce l       .text  00000000 
f0002bd4 l       .text  00000000 
f0002bd6 l       .text  00000000 
f0002be4 l       .text  00000000 
f0002bec l       .text  00000000 
f0002bf2 l       .text  00000000 
f0002bf2 l       .text  00000000 
f0002bf4 l       .text  00000000 
f0002bf8 l       .text  00000000 
f0002bf8 l       .text  00000000 
f0002c02 l       .text  00000000 
f0002c02 l       .text  00000000 
f0002c04 l       .text  00000000 
f0002c08 l       .text  00000000 
f0002c08 l       .text  00000000 
f0002c0a l       .text  00000000 
f0002c12 l       .text  00000000 
f0002c12 l       .text  00000000 
f0002c14 l       .text  00000000 
f0002c14 l       .text  00000000 
f0002c18 l       .text  00000000 
f0002c18 l       .text  00000000 
f0002c28 l       .text  00000000 
f0002c2c l       .text  00000000 
f0002c2c l       .text  00000000 
f0002c34 l       .text  00000000 
e0002084 l     O .bss   00000002 base_log_internal_core.global_log_counter
f0002c3c l       .text  00000000 
f0002c44 l       .text  00000000 
f0002c46 l       .text  00000000 
f0002c50 l       .text  00000000 
f0002c50 l       .text  00000000 
f0002c5c l       .text  00000000 
f0002c5c l       .text  00000000 
f0002c5e l       .text  00000000 
f0002c60 l       .text  00000000 
f0002c64 l       .text  00000000 
f0002c64 l       .text  00000000 
f0002c6e l       .text  00000000 
f0002c6e l       .text  00000000 
f0002c72 l       .text  00000000 
f0002c74 l       .text  00000000 
f0002c78 l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c82 l       .text  00000000 
f0002c88 l       .text  00000000 
f0002c90 l       .text  00000000 
f0002c90 l       .text  00000000 
f0002c96 l       .text  00000000 
f0002c96 l       .text  00000000 
f0002c9a l       .text  00000000 
f0002c9a l       .text  00000000 
f0002c9c l       .text  00000000 
f0002c9c l       .text  00000000 
f0002c9e l       .text  00000000 
f0002c9e l       .text  00000000 
f0002ca0 l       .text  00000000 
f0002ca4 l       .text  00000000 
f0002ca8 l       .text  00000000 
f0002caa l       .text  00000000 
f0002caa l       .text  00000000 
f0002cac l       .text  00000000 
f0002cac l       .text  00000000 
f0002cae l       .text  00000000 
f0002cae l       .text  00000000 
f0002cb2 l       .text  00000000 
f0002cba l       .text  00000000 
f0002cba l       .text  00000000 
00007ff7 l       .debug_loc     00000000 
00008033 l       .debug_loc     00000000 
0000804e l       .debug_loc     00000000 
00008095 l       .debug_loc     00000000 
000080b0 l       .debug_loc     00000000 
000080cc l       .debug_loc     00000000 
000080e7 l       .debug_loc     00000000 
00008102 l       .debug_loc     00000000 
0000811d l       .debug_loc     00000000 
0000815b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000628e l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000cc8 l       .debug_ranges  00000000 
0000059a l       .debug_str     00000000 
000062aa l       .debug_str     00000000 
000062fe l       .debug_str     00000000 
00006302 l       .debug_str     00000000 
00006310 l       .debug_str     00000000 
0000025d l       .debug_str     00000000 
0000127d l       .debug_str     00000000 
0000126e l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000062bd l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
000062d0 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000062d7 l       .debug_str     00000000 
000055c2 l       .debug_str     00000000 
000062df l       .debug_str     00000000 
000062f6 l       .debug_str     00000000 
000062ec l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
0000631a l       .debug_str     00000000 
000004f5 l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000e34 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 print.c
f0002cba l     F .text  0000000c base_dev_null
e0002088 l     O .bss   00000008 base_stdout
f0002cba l       .text  00000000 
f0002cba l       .text  00000000 
f0002cba l       .text  00000000 
f0002cbc l       .text  00000000 
f0002cbc l       .text  00000000 
f0002cbe l       .text  00000000 
f0002cc6 l       .text  00000000 
f0002cc6 l       .text  00000000 
f0002cc6 l       .text  00000000 
f0002cc6 l       .text  00000000 
f0002cc6 l       .text  00000000 
f0002cc6 l       .text  00000000 
f0002ce4 l     F .text  00000054 base_dev_uart
f0002cd4 l       .text  00000000 
f0002cd8 l       .text  00000000 
f0002cda l       .text  00000000 
f0002cda l       .text  00000000 
f0002cdc l       .text  00000000 
f0002ce4 l       .text  00000000 
f0002ce4 l       .text  00000000 
f0002ce4 l       .text  00000000 
f0002ce4 l       .text  00000000 
f0002ce4 l       .text  00000000 
f0002ce6 l       .text  00000000 
f0002ce6 l       .text  00000000 
f0002cf0 l       .text  00000000 
f0002cf0 l       .text  00000000 
f0002cf2 l       .text  00000000 
f0002cf2 l       .text  00000000 
f0002cf4 l       .text  00000000 
f0002cf6 l       .text  00000000 
f0002cf8 l       .text  00000000 
f0002cfa l       .text  00000000 
f0002cfa l       .text  00000000 
f0002d02 l       .text  00000000 
f0002d08 l       .text  00000000 
f0002d08 l       .text  00000000 
f0002d0a l       .text  00000000 
f0002d0c l       .text  00000000 
f0002d10 l       .text  00000000 
f0002d10 l       .text  00000000 
f0002d14 l       .text  00000000 
f0002d1c l       .text  00000000 
f0002d1e l       .text  00000000 
f0002d22 l       .text  00000000 
f0002d2a l       .text  00000000 
f0002d2c l       .text  00000000 
f0002d38 l       .text  00000000 
f0002d38 l       .text  00000000 
f0002d38 l       .text  00000000 
f0002d38 l       .text  00000000 
f0002d38 l       .text  00000000 
f0002d3a l       .text  00000000 
f0002d3c l       .text  00000000 
f0002d4a l       .text  00000000 
f0002d4a l       .text  00000000 
f0002d58 l       .text  00000000 
f0002d58 l       .text  00000000 
f0002d5a l       .text  00000000 
f0002d5a l       .text  00000000 
f0002d5c l       .text  00000000 
f0002d5c l       .text  00000000 
f0002d60 l       .text  00000000 
f0002d62 l       .text  00000000 
f0002d64 l       .text  00000000 
f0002d64 l       .text  00000000 
f0002d66 l       .text  00000000 
f0002d6a l       .text  00000000 
f0002d72 l       .text  00000000 
f0002d72 l       .text  00000000 
f0002d72 l       .text  00000000 
f0002d72 l       .text  00000000 
f0002d72 l       .text  00000000 
f0002d72 l       .text  00000000 
f0002d80 l       .text  00000000 
f0002d80 l       .text  00000000 
f0002d82 l       .text  00000000 
f0002d82 l       .text  00000000 
f0002d88 l       .text  00000000 
f0002d8a l       .text  00000000 
f0002d8c l       .text  00000000 
f0002d94 l       .text  00000000 
f0002d94 l       .text  00000000 
f0002d94 l       .text  00000000 
f0002d94 l       .text  00000000 
f0002d94 l       .text  00000000 
f0002d96 l       .text  00000000 
f0002db0 l       .text  00000000 
f0002db2 l       .text  00000000 
f0002db4 l       .text  00000000 
f0002db6 l       .text  00000000 
f0002db6 l       .text  00000000 
f0002dba l       .text  00000000 
f0002dba l       .text  00000000 
f0002dbe l       .text  00000000 
f0002dc2 l       .text  00000000 
f0002dc2 l       .text  00000000 
f0002dc4 l       .text  00000000 
f0002dcc l       .text  00000000 
f0002de4 l       .text  00000000 
f0002de4 l       .text  00000000 
f0002dec l       .text  00000000 
f0002df2 l       .text  00000000 
f0002df6 l       .text  00000000 
f0002dfe l       .text  00000000 
f0002dfe l       .text  00000000 
f0002e00 l       .text  00000000 
f0002e02 l       .text  00000000 
f0002e0c l       .text  00000000 
f0002e0c l       .text  00000000 
f0002e14 l       .text  00000000 
f0002e14 l       .text  00000000 
f0002e16 l       .text  00000000 
f0002e1a l       .text  00000000 
f0002e1c l       .text  00000000 
f0002e24 l       .text  00000000 
f0002e24 l       .text  00000000 
f0002e28 l       .text  00000000 
f0002e2c l       .text  00000000 
f0002e2c l       .text  00000000 
f0002e30 l       .text  00000000 
f0002e30 l       .text  00000000 
f0002e36 l       .text  00000000 
f0002e36 l       .text  00000000 
f0002e3e l       .text  00000000 
f0002e44 l       .text  00000000 
f0002e44 l       .text  00000000 
f0002e48 l       .text  00000000 
f0002e4e l       .text  00000000 
f0002e50 l       .text  00000000 
f0002e58 l       .text  00000000 
f0002e5c l       .text  00000000 
f0002e60 l       .text  00000000 
f0002e64 l       .text  00000000 
f0002e66 l       .text  00000000 
f0002e6e l       .text  00000000 
f0002e72 l       .text  00000000 
f0002e72 l       .text  00000000 
f0002e76 l       .text  00000000 
f0002e7c l       .text  00000000 
f0002e84 l       .text  00000000 
f0002e84 l       .text  00000000 
f0002e88 l       .text  00000000 
f0002e90 l       .text  00000000 
f0002e94 l       .text  00000000 
f0002e94 l       .text  00000000 
f0002e9c l       .text  00000000 
f0002ea4 l       .text  00000000 
f0002ea4 l       .text  00000000 
f0002ea6 l       .text  00000000 
f0002eac l       .text  00000000 
f0002eb4 l       .text  00000000 
f0002eb4 l       .text  00000000 
f0002eb8 l       .text  00000000 
f0002ebc l       .text  00000000 
f0002ebc l       .text  00000000 
f0002ec4 l       .text  00000000 
f0002ed4 l       .text  00000000 
f0002ed4 l       .text  00000000 
f0002ed8 l       .text  00000000 
f0002ee4 l       .text  00000000 
f0002ee4 l       .text  00000000 
f0002ee8 l       .text  00000000 
f0002ef6 l       .text  00000000 
f0002ef6 l       .text  00000000 
f0002ef8 l       .text  00000000 
f0002efc l       .text  00000000 
f0005cdc l     O .rodata        00000010 kDigitsLow
f0002f12 l       .text  00000000 
f0002f12 l       .text  00000000 
f0002f1a l       .text  00000000 
f0002f1a l       .text  00000000 
f0002f22 l       .text  00000000 
f0002f2a l       .text  00000000 
f0002f34 l       .text  00000000 
f0002f34 l       .text  00000000 
f0002f3c l       .text  00000000 
f0002f3c l       .text  00000000 
f0002f40 l       .text  00000000 
f0002f40 l       .text  00000000 
f0002f4a l       .text  00000000 
f0002f4a l       .text  00000000 
f0002f52 l       .text  00000000 
f0002f52 l       .text  00000000 
f0005d09 l     O .rodata        00000010 kDigitsHigh
f0002f60 l       .text  00000000 
f0002f60 l       .text  00000000 
f0002f68 l       .text  00000000 
f0002f68 l       .text  00000000 
f0002f72 l       .text  00000000 
f0002f72 l       .text  00000000 
f0002f80 l       .text  00000000 
f0002f80 l       .text  00000000 
f0002f88 l       .text  00000000 
f0002f88 l       .text  00000000 
f0002f8c l       .text  00000000 
f0002f96 l       .text  00000000 
f0002f96 l       .text  00000000 
f0002f9e l       .text  00000000 
f0002f9e l       .text  00000000 
f0002fac l       .text  00000000 
f0002fac l       .text  00000000 
f0002fb4 l       .text  00000000 
f0002fbe l       .text  00000000 
f0002fc2 l       .text  00000000 
f0002fc6 l       .text  00000000 
f0002fd2 l       .text  00000000 
f0002fd2 l       .text  00000000 
f0002fda l       .text  00000000 
f0002fda l       .text  00000000 
f0002fde l       .text  00000000 
f0002fe8 l       .text  00000000 
f0002fec l       .text  00000000 
f0002fec l       .text  00000000 
f0002fee l       .text  00000000 
f0002fee l       .text  00000000 
f0002ff2 l       .text  00000000 
f0002ffa l       .text  00000000 
f0002ffa l       .text  00000000 
f0002ffe l       .text  00000000 
f0003008 l       .text  00000000 
f0003008 l       .text  00000000 
f0003018 l       .text  00000000 
f0003018 l       .text  00000000 
f0003020 l       .text  00000000 
f0003020 l       .text  00000000 
f0003024 l       .text  00000000 
f0003032 l       .text  00000000 
f0003032 l       .text  00000000 
f000303c l       .text  00000000 
f000303c l       .text  00000000 
f000303e l       .text  00000000 
f00033f0 l     F .text  00000090 write_digits
f0003054 l       .text  00000000 
f0003054 l       .text  00000000 
f0003058 l       .text  00000000 
f0003058 l       .text  00000000 
f0003060 l       .text  00000000 
f0003060 l       .text  00000000 
f000306a l       .text  00000000 
f000306a l       .text  00000000 
f000306c l       .text  00000000 
f0003076 l       .text  00000000 
f0003076 l       .text  00000000 
f0003080 l       .text  00000000 
f0003080 l       .text  00000000 
f0003082 l       .text  00000000 
f0003082 l       .text  00000000 
f0003084 l       .text  00000000 
f0003088 l       .text  00000000 
f0003088 l       .text  00000000 
f000308c l       .text  00000000 
f000308e l       .text  00000000 
f0003092 l       .text  00000000 
f0003092 l       .text  00000000 
f000309a l       .text  00000000 
f000309a l       .text  00000000 
f000309c l       .text  00000000 
f00030a4 l       .text  00000000 
f00030a8 l       .text  00000000 
f00030a8 l       .text  00000000 
f00030aa l       .text  00000000 
f00030aa l       .text  00000000 
f00030ac l       .text  00000000 
f00030ac l       .text  00000000 
f00030b4 l       .text  00000000 
f00030b6 l       .text  00000000 
f00030b6 l       .text  00000000 
f00030c4 l       .text  00000000 
f00030c4 l       .text  00000000 
f00030c6 l       .text  00000000 
f00030d4 l       .text  00000000 
f00030d4 l       .text  00000000 
f00030d6 l       .text  00000000 
f00030d8 l       .text  00000000 
f00030d8 l       .text  00000000 
f00030de l       .text  00000000 
f00030ec l       .text  00000000 
f00030ee l       .text  00000000 
f00030ee l       .text  00000000 
f00030f6 l       .text  00000000 
f00030f6 l       .text  00000000 
f00030f8 l       .text  00000000 
f00030f8 l       .text  00000000 
f00030fa l       .text  00000000 
f000310e l       .text  00000000 
f000310e l       .text  00000000 
f0003110 l       .text  00000000 
f000311e l       .text  00000000 
f000311e l       .text  00000000 
f0003122 l       .text  00000000 
f0003122 l       .text  00000000 
f000312a l       .text  00000000 
f0003132 l       .text  00000000 
f0003136 l       .text  00000000 
f0003138 l       .text  00000000 
f0003138 l       .text  00000000 
f0003140 l       .text  00000000 
f0003140 l       .text  00000000 
f0003142 l       .text  00000000 
f000314a l       .text  00000000 
f000314a l       .text  00000000 
f000314e l       .text  00000000 
f0003158 l       .text  00000000 
f0003158 l       .text  00000000 
f0003168 l       .text  00000000 
f0003168 l       .text  00000000 
f0003170 l       .text  00000000 
f0003170 l       .text  00000000 
f0003174 l       .text  00000000 
f0003174 l       .text  00000000 
f000317e l       .text  00000000 
f000317e l       .text  00000000 
f0003186 l       .text  00000000 
f0003186 l       .text  00000000 
f0003192 l       .text  00000000 
f0003192 l       .text  00000000 
f000319c l       .text  00000000 
f00031a4 l       .text  00000000 
f00031a4 l       .text  00000000 
f00031ae l       .text  00000000 
f00031ae l       .text  00000000 
f00031ba l       .text  00000000 
f00031ba l       .text  00000000 
f00031c4 l       .text  00000000 
f00031c6 l       .text  00000000 
f00031ce l       .text  00000000 
f00031ce l       .text  00000000 
f00031d2 l       .text  00000000 
f00031dc l       .text  00000000 
f00031dc l       .text  00000000 
f00031e4 l       .text  00000000 
f00031e4 l       .text  00000000 
f00031f0 l       .text  00000000 
f00031f0 l       .text  00000000 
f00032fe l     F .text  000000f2 hex_dump
f00031fa l       .text  00000000 
f00031fc l       .text  00000000 
f0003204 l       .text  00000000 
f0005d19 l     O .rodata        0000000f kUnknownSpec
f0003204 l       .text  00000000 
f000320e l       .text  00000000 
f0003212 l       .text  00000000 
f0003214 l       .text  00000000 
f0003214 l       .text  00000000 
f000321a l       .text  00000000 
f0003220 l       .text  00000000 
f0003228 l       .text  00000000 
f0003228 l       .text  00000000 
f0003238 l       .text  00000000 
f0003238 l       .text  00000000 
f0003240 l       .text  00000000 
f0003240 l       .text  00000000 
f0003242 l       .text  00000000 
f0003242 l       .text  00000000 
f0003256 l       .text  00000000 
f0003256 l       .text  00000000 
f0003258 l       .text  00000000 
f0003258 l       .text  00000000 
f0003266 l       .text  00000000 
f0003266 l       .text  00000000 
f0003268 l       .text  00000000 
f0003268 l       .text  00000000 
f000326e l       .text  00000000 
f000326e l       .text  00000000 
f0003276 l       .text  00000000 
f0003276 l       .text  00000000 
f0003278 l       .text  00000000 
f0003278 l       .text  00000000 
f000327a l       .text  00000000 
f000327a l       .text  00000000 
f0003282 l       .text  00000000 
f0003284 l       .text  00000000 
f0003286 l       .text  00000000 
f0003288 l       .text  00000000 
f0003288 l       .text  00000000 
f000328a l       .text  00000000 
f0003292 l       .text  00000000 
f0003292 l       .text  00000000 
f000329e l       .text  00000000 
f000329e l       .text  00000000 
f00032a6 l       .text  00000000 
f0005cec l     O .rodata        00000011 kErrorNul
f00032a6 l       .text  00000000 
f00032b0 l       .text  00000000 
f00032b0 l       .text  00000000 
f00032b4 l       .text  00000000 
f00032b6 l       .text  00000000 
f00032b8 l       .text  00000000 
f00032c0 l       .text  00000000 
f00032c2 l       .text  00000000 
f00032c2 l       .text  00000000 
f00032d2 l       .text  00000000 
f00032de l       .text  00000000 
f00032e2 l       .text  00000000 
f00032ea l       .text  00000000 
f0005cfd l     O .rodata        0000000c kErrorTooWide
f00032ea l       .text  00000000 
f00032f6 l       .text  00000000 
f00032f6 l       .text  00000000 
f00032fe l       .text  00000000 
f00032fe l       .text  00000000 
f00032fe l       .text  00000000 
f00032fe l       .text  00000000 
f00032fe l       .text  00000000 
f0003300 l       .text  00000000 
f000331a l       .text  00000000 
f000331c l       .text  00000000 
f000331e l       .text  00000000 
f0003320 l       .text  00000000 
f0003322 l       .text  00000000 
f0003326 l       .text  00000000 
f0003326 l       .text  00000000 
f000332a l       .text  00000000 
f000332e l       .text  00000000 
f000332e l       .text  00000000 
f000333c l       .text  00000000 
f000333c l       .text  00000000 
f000333e l       .text  00000000 
f0003340 l       .text  00000000 
f0003340 l       .text  00000000 
f0003344 l       .text  00000000 
f0003344 l       .text  00000000 
f000334c l       .text  00000000 
f000334c l       .text  00000000 
f000334e l       .text  00000000 
f0003350 l       .text  00000000 
f0003350 l       .text  00000000 
f0003352 l       .text  00000000 
f0003352 l       .text  00000000 
f0003358 l       .text  00000000 
f0003360 l       .text  00000000 
f0003360 l       .text  00000000 
f0003362 l       .text  00000000 
f0003362 l       .text  00000000 
f0003366 l       .text  00000000 
f000336a l       .text  00000000 
f000336c l       .text  00000000 
f000336c l       .text  00000000 
f0003376 l       .text  00000000 
f000337e l       .text  00000000 
f000337e l       .text  00000000 
f0003380 l       .text  00000000 
f0003388 l       .text  00000000 
f000338e l       .text  00000000 
f0003392 l       .text  00000000 
f0003396 l       .text  00000000 
f0003398 l       .text  00000000 
f000339e l       .text  00000000 
f00033a0 l       .text  00000000 
f00033a8 l       .text  00000000 
f00033ae l       .text  00000000 
f00033b2 l       .text  00000000 
f00033b2 l       .text  00000000 
f00033b4 l       .text  00000000 
f00033b6 l       .text  00000000 
f00033b6 l       .text  00000000 
f00033b8 l       .text  00000000 
f00033ba l       .text  00000000 
f00033be l       .text  00000000 
f00033be l       .text  00000000 
f00033c0 l       .text  00000000 
f00033c6 l       .text  00000000 
f00033c6 l       .text  00000000 
f00033c8 l       .text  00000000 
f00033d2 l       .text  00000000 
f00033d4 l       .text  00000000 
f00033d6 l       .text  00000000 
f00033d8 l       .text  00000000 
f00033dc l       .text  00000000 
f00033e4 l       .text  00000000 
f00033e4 l       .text  00000000 
f00033f0 l       .text  00000000 
f00033f0 l       .text  00000000 
f00033f0 l       .text  00000000 
f00033f0 l       .text  00000000 
f00033f0 l       .text  00000000 
f00033f2 l       .text  00000000 
f00033f4 l       .text  00000000 
f00033f6 l       .text  00000000 
f00033f6 l       .text  00000000 
f00033f8 l       .text  00000000 
f00033fa l       .text  00000000 
f00033fe l       .text  00000000 
f00033fe l       .text  00000000 
f0003400 l       .text  00000000 
f0003400 l       .text  00000000 
f0003408 l       .text  00000000 
f0003408 l       .text  00000000 
f000340c l       .text  00000000 
f0003414 l       .text  00000000 
f000341c l       .text  00000000 
f000341c l       .text  00000000 
f000341e l       .text  00000000 
f0003422 l       .text  00000000 
f0003426 l       .text  00000000 
f0003426 l       .text  00000000 
f0003428 l       .text  00000000 
f000342a l       .text  00000000 
f000342a l       .text  00000000 
f0003430 l       .text  00000000 
f0003438 l       .text  00000000 
f0003438 l       .text  00000000 
f000343c l       .text  00000000 
f0003442 l       .text  00000000 
f0003442 l       .text  00000000 
f0003444 l       .text  00000000 
f0003444 l       .text  00000000 
f000344c l       .text  00000000 
f000344c l       .text  00000000 
f0003456 l       .text  00000000 
f000345a l       .text  00000000 
f000345c l       .text  00000000 
f0003460 l       .text  00000000 
f0003464 l       .text  00000000 
f0003466 l       .text  00000000 
f0003468 l       .text  00000000 
f000346a l       .text  00000000 
f000346a l       .text  00000000 
f0003470 l       .text  00000000 
f0003472 l       .text  00000000 
f0003472 l       .text  00000000 
f0003474 l       .text  00000000 
f0003480 l       .text  00000000 
f0003480 l       .text  00000000 
00008178 l       .debug_loc     00000000 
000081a7 l       .debug_loc     00000000 
000081cd l       .debug_loc     00000000 
000081e8 l       .debug_loc     00000000 
00008214 l       .debug_loc     00000000 
00008245 l       .debug_loc     00000000 
00008276 l       .debug_loc     00000000 
000082a7 l       .debug_loc     00000000 
000082d8 l       .debug_loc     00000000 
000082ff l       .debug_loc     00000000 
00008330 l       .debug_loc     00000000 
0000834b l       .debug_loc     00000000 
00008367 l       .debug_loc     00000000 
00008382 l       .debug_loc     00000000 
000083b3 l       .debug_loc     00000000 
000083e4 l       .debug_loc     00000000 
00008415 l       .debug_loc     00000000 
00008580 l       .debug_loc     00000000 
0000859f l       .debug_loc     00000000 
0000870a l       .debug_loc     00000000 
0000886a l       .debug_loc     00000000 
00008890 l       .debug_loc     00000000 
00008910 l       .debug_loc     00000000 
00008b93 l       .debug_loc     00000000 
00008baf l       .debug_loc     00000000 
00008bca l       .debug_loc     00000000 
00008d3f l       .debug_loc     00000000 
00008e8f l       .debug_loc     00000000 
00008fa3 l       .debug_loc     00000000 
00008fbe l       .debug_loc     00000000 
00008fd9 l       .debug_loc     00000000 
00008ff4 l       .debug_loc     00000000 
0000900f l       .debug_loc     00000000 
0000902a l       .debug_loc     00000000 
00009045 l       .debug_loc     00000000 
00009061 l       .debug_loc     00000000 
0000907c l       .debug_loc     00000000 
00009097 l       .debug_loc     00000000 
000090b2 l       .debug_loc     00000000 
000090e2 l       .debug_loc     00000000 
000090fd l       .debug_loc     00000000 
0000912f l       .debug_loc     00000000 
0000916d l       .debug_loc     00000000 
00009188 l       .debug_loc     00000000 
000091d0 l       .debug_loc     00000000 
0000920e l       .debug_loc     00000000 
00009234 l       .debug_loc     00000000 
0000924f l       .debug_loc     00000000 
0000926a l       .debug_loc     00000000 
00009285 l       .debug_loc     00000000 
000092a0 l       .debug_loc     00000000 
000092bb l       .debug_loc     00000000 
000092d6 l       .debug_loc     00000000 
000092f1 l       .debug_loc     00000000 
0000930c l       .debug_loc     00000000 
00009327 l       .debug_loc     00000000 
00009342 l       .debug_loc     00000000 
0000935e l       .debug_loc     00000000 
0000939e l       .debug_loc     00000000 
000093b9 l       .debug_loc     00000000 
000093ea l       .debug_loc     00000000 
00009410 l       .debug_loc     00000000 
00009441 l       .debug_loc     00000000 
00009472 l       .debug_loc     00000000 
0000948d l       .debug_loc     00000000 
000094a9 l       .debug_loc     00000000 
000094c4 l       .debug_loc     00000000 
000094ea l       .debug_loc     00000000 
0000951b l       .debug_loc     00000000 
00009541 l       .debug_loc     00000000 
00009572 l       .debug_loc     00000000 
0000958e l       .debug_loc     00000000 
000095b4 l       .debug_loc     00000000 
000095e5 l       .debug_loc     00000000 
00009600 l       .debug_loc     00000000 
0000961b l       .debug_loc     00000000 
00009641 l       .debug_loc     00000000 
00009667 l       .debug_loc     00000000 
00009682 l       .debug_loc     00000000 
0000969d l       .debug_loc     00000000 
000096d7 l       .debug_loc     00000000 
000096f2 l       .debug_loc     00000000 
0000970d l       .debug_loc     00000000 
00009729 l       .debug_loc     00000000 
00009744 l       .debug_loc     00000000 
0000975f l       .debug_loc     00000000 
0000979f l       .debug_loc     00000000 
000097c5 l       .debug_loc     00000000 
000097f6 l       .debug_loc     00000000 
0000985a l       .debug_loc     00000000 
0000988b l       .debug_loc     00000000 
000098e8 l       .debug_loc     00000000 
00009907 l       .debug_loc     00000000 
0000995a l       .debug_loc     00000000 
000099a1 l       .debug_loc     00000000 
00009a45 l       .debug_loc     00000000 
00009a77 l       .debug_loc     00000000 
00009ac0 l       .debug_loc     00000000 
00009af1 l       .debug_loc     00000000 
00009b17 l       .debug_loc     00000000 
00009b77 l       .debug_loc     00000000 
00009b9d l       .debug_loc     00000000 
00009bce l       .debug_loc     00000000 
00009bff l       .debug_loc     00000000 
00009c25 l       .debug_loc     00000000 
00009c40 l       .debug_loc     00000000 
00009c80 l       .debug_loc     00000000 
00009cb1 l       .debug_loc     00000000 
00009cef l       .debug_loc     00000000 
00009d2d l       .debug_loc     00000000 
00009d6a l       .debug_loc     00000000 
00009d85 l       .debug_loc     00000000 
00009db8 l       .debug_loc     00000000 
00009dd3 l       .debug_loc     00000000 
00009e0f l       .debug_loc     00000000 
00009e4b l       .debug_loc     00000000 
00009e71 l       .debug_loc     00000000 
00009e97 l       .debug_loc     00000000 
00009ebd l       .debug_loc     00000000 
00009f2a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006325 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000e68 l       .debug_ranges  00000000 
00006343 l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00006362 l       .debug_str     00000000 
0000637a l       .debug_str     00000000 
0000636e l       .debug_str     00000000 
000046f6 l       .debug_str     00000000 
00006647 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00006388 l       .debug_str     00000000 
00006392 l       .debug_str     00000000 
0000669f l       .debug_str     00000000 
000063a0 l       .debug_str     00000000 
00006b5d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00006ae4 l       .debug_str     00000000 
0000656b l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00006721 l       .debug_str     00000000 
00005788 l       .debug_str     00000000 
00006595 l       .debug_str     00000000 
00006731 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000063aa l       .debug_str     00000000 
000063b6 l       .debug_str     00000000 
000063c3 l       .debug_str     00000000 
00006412 l       .debug_str     00000000 
00006401 l       .debug_str     00000000 
000063da l       .debug_str     00000000 
000063e9 l       .debug_str     00000000 
000063f8 l       .debug_str     00000000 
00006425 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00006430 l       .debug_str     00000000 
00006439 l       .debug_str     00000000 
00006444 l       .debug_str     00000000 
0000644c l       .debug_str     00000000 
00006458 l       .debug_str     00000000 
00006464 l       .debug_str     00000000 
00006471 l       .debug_str     00000000 
00006481 l       .debug_str     00000000 
00006492 l       .debug_str     00000000 
0000649f l       .debug_str     00000000 
000064a8 l       .debug_str     00000000 
000064b2 l       .debug_str     00000000 
000064bc l       .debug_str     00000000 
000064c7 l       .debug_str     00000000 
000064d1 l       .debug_str     00000000 
000064dc l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
000017a1 l       .debug_str     00000000 
00001798 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
000064f5 l       .debug_str     00000000 
00004986 l       .debug_str     00000000 
000064ea l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00006606 l       .debug_str     00000000 
00006509 l       .debug_str     00000000 
000035f3 l       .debug_str     00000000 
00001793 l       .debug_str     00000000 
00006614 l       .debug_str     00000000 
000004f5 l       .debug_str     00000000 
00006519 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
000062df l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000025d l       .debug_str     00000000 
000062f6 l       .debug_str     00000000 
000062ec l       .debug_str     00000000 
000055c2 l       .debug_str     00000000 
00000ce0 l       .debug_ranges  00000000 
00006622 l       .debug_str     00000000 
000066e7 l       .debug_str     00000000 
000066ac l       .debug_str     00000000 
00000cf8 l       .debug_ranges  00000000 
000065af l       .debug_str     00000000 
00000d18 l       .debug_ranges  00000000 
00000d40 l       .debug_ranges  00000000 
00000d60 l       .debug_ranges  00000000 
00000d80 l       .debug_ranges  00000000 
00000da0 l       .debug_ranges  00000000 
00000dc0 l       .debug_ranges  00000000 
00000de0 l       .debug_ranges  00000000 
00006533 l       .debug_str     00000000 
00006549 l       .debug_str     00000000 
000076d6 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00006552 l       .debug_str     00000000 
00006590 l       .debug_str     00000000 
0000657d l       .debug_str     00000000 
0000655a l       .debug_str     00000000 
0000122f l       .debug_str     00000000 
00006573 l       .debug_str     00000000 
00006599 l       .debug_str     00000000 
000065ab l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00003f00 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
000065b4 l       .debug_str     00000000 
000065c1 l       .debug_str     00000000 
000065c9 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
000065cd l       .debug_str     00000000 
00005984 l       .debug_str     00000000 
00001310 l       .debug_str     00000000 
0000063c l       .debug_str     00000000 
00006696 l       .debug_str     00000000 
00006bb8 l       .debug_str     00000000 
00006716 l       .debug_str     00000000 
00006704 l       .debug_str     00000000 
00006728 l       .debug_str     00000000 
00000e0a l       .debug_str     00000000 
00006630 l       .debug_str     00000000 
0000663e l       .debug_str     00000000 
000066b6 l       .debug_str     00000000 
00000944 l       .debug_str     00000000 
0000664c l       .debug_str     00000000 
000065d1 l       .debug_str     00000000 
0000640e l       .debug_str     00000000 
00006659 l       .debug_str     00000000 
00006683 l       .debug_str     00000000 
000066d3 l       .debug_str     00000000 
00000df8 l       .debug_ranges  00000000 
000063f3 l       .debug_str     00000000 
00000e10 l       .debug_ranges  00000000 
000066bf l       .debug_str     00000000 
000066e2 l       .debug_str     00000000 
000066f5 l       .debug_str     00000000 
00000e30 l       .debug_ranges  00000000 
00003d2f l       .debug_str     00000000 
00000e48 l       .debug_ranges  00000000 
000066cc l       .debug_str     00000000 
0000670d l       .debug_str     00000000 
0000388b l       .debug_str     00000000 
000065e3 l       .debug_str     00000000 
000065f7 l       .debug_str     00000000 
00006666 l       .debug_str     00000000 
00006675 l       .debug_str     00000000 
000065ff l       .debug_str     00000000 
00000e78 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 status.c
f0003480 l       .text  00000000 
f0003480 l       .text  00000000 
f0003480 l       .text  00000000 
f0003482 l       .text  00000000 
f0003482 l       .text  00000000 
f0003484 l       .text  00000000 
f0003486 l       .text  00000000 
f0003488 l       .text  00000000 
f0003488 l       .text  00000000 
f000348c l       .text  00000000 
f000348e l       .text  00000000 
f0003490 l       .text  00000000 
f0003498 l       .text  00000000 
f000349a l       .text  00000000 
f000349c l       .text  00000000 
f00034a0 l       .text  00000000 
f00034a4 l       .text  00000000 
f00034ac l       .text  00000000 
f00034ac l       .text  00000000 
f00034b0 l       .text  00000000 
f00034c2 l       .text  00000000 
f00034c2 l       .text  00000000 
f00034ca l       .text  00000000 
f00034ca l       .text  00000000 
f00034ce l       .text  00000000 
f00034d6 l       .text  00000000 
f00034de l       .text  00000000 
f00034de l       .text  00000000 
f00034ec l       .text  00000000 
f00034ee l       .text  00000000 
f0003506 l       .text  00000000 
f0003506 l       .text  00000000 
f000350e l       .text  00000000 
f000350e l       .text  00000000 
f000351c l       .text  00000000 
f000351e l       .text  00000000 
f000353a l       .text  00000000 
f000353a l       .text  00000000 
f0003542 l       .text  00000000 
f0003542 l       .text  00000000 
f0003550 l       .text  00000000 
f0003552 l       .text  00000000 
f0003556 l       .text  00000000 
f0003556 l       .text  00000000 
f0003558 l       .text  00000000 
f0003558 l       .text  00000000 
f000355a l       .text  00000000 
f000355e l       .text  00000000 
f000355e l       .text  00000000 
f0003560 l       .text  00000000 
f0003566 l       .text  00000000 
f0003566 l       .text  00000000 
f000356a l       .text  00000000 
f0003572 l       .text  00000000 
f0003572 l       .text  00000000 
f0003572 l       .text  00000000 
f0003572 l       .text  00000000 
f0003572 l       .text  00000000 
f0003572 l       .text  00000000 
f000357e l       .text  00000000 
f000358a l       .text  00000000 
f000358a l       .text  00000000 
f000358e l       .text  00000000 
f0003590 l       .text  00000000 
f0003594 l       .text  00000000 
f0003594 l       .text  00000000 
f00035a2 l       .text  00000000 
f00035a4 l       .text  00000000 
f00035a6 l       .text  00000000 
f00035a6 l       .text  00000000 
f00035aa l       .text  00000000 
f00035ac l       .text  00000000 
f00035ac l       .text  00000000 
f00035ae l       .text  00000000 
f00035b8 l       .text  00000000 
f00035b8 l       .text  00000000 
f00035bc l       .text  00000000 
f00035c6 l       .text  00000000 
f00035c6 l       .text  00000000 
f00035ca l       .text  00000000 
f00035cc l       .text  00000000 
f00035d2 l       .text  00000000 
f00035d2 l       .text  00000000 
f00035d8 l       .text  00000000 
f00035d8 l       .text  00000000 
f00035e0 l       .text  00000000 
f00035e0 l       .text  00000000 
f00035e2 l       .text  00000000 
f00035e2 l       .text  00000000 
f00035e6 l       .text  00000000 
f00035e8 l       .text  00000000 
f00035f0 l       .text  00000000 
f00035f0 l       .text  00000000 
00009f59 l       .debug_loc     00000000 
00009fa0 l       .debug_loc     00000000 
00009fd1 l       .debug_loc     00000000 
00009ff7 l       .debug_loc     00000000 
0000a049 l       .debug_loc     00000000 
0000a064 l       .debug_loc     00000000 
0000a086 l       .debug_loc     00000000 
0000a0ad l       .debug_loc     00000000 
0000a0c8 l       .debug_loc     00000000 
0000a0ef l       .debug_loc     00000000 
0000a113 l       .debug_loc     00000000 
0000a139 l       .debug_loc     00000000 
0000a15f l       .debug_loc     00000000 
0000a185 l       .debug_loc     00000000 
0000a1d4 l       .debug_loc     00000000 
0000a1fa l       .debug_loc     00000000 
0000a21e l       .debug_loc     00000000 
0000a239 l       .debug_loc     00000000 
0000a254 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006737 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000f18 l       .debug_ranges  00000000 
00006753 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000675d l       .debug_str     00000000 
00000909 l       .debug_str     00000000 
000007e8 l       .debug_str     00000000 
000007ec l       .debug_str     00000000 
000007f7 l       .debug_str     00000000 
00000800 l       .debug_str     00000000 
00000811 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
0000083c l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
00000861 l       .debug_str     00000000 
00000875 l       .debug_str     00000000 
0000087e l       .debug_str     00000000 
0000088a l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000008a3 l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000008cb l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
0000091a l       .debug_str     00000000 
0000676a l       .debug_str     00000000 
000001b3 l       .debug_str     00000000 
0000140c l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
00004763 l       .debug_str     00000000 
000007a3 l       .debug_str     00000000 
000065cd l       .debug_str     00000000 
00000f00 l       .debug_ranges  00000000 
00001309 l       .debug_str     00000000 
000001e5 l       .debug_str     00000000 
00003f00 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
00000fbc l       .debug_str     00000000 
0000063c l       .debug_str     00000000 
000006f7 l       .debug_str     00000000 
00001310 l       .debug_str     00000000 
00006773 l       .debug_str     00000000 
00000959 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00001060 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
f00035f0 l       .text  00000000 
f00035f0 l       .text  00000000 
f00035f0 l       .text  00000000 
f00035f0 l       .text  00000000 
f00035f2 l       .text  00000000 
f00035f4 l       .text  00000000 
f00035f8 l       .text  00000000 
f00035f8 l       .text  00000000 
f0003600 l       .text  00000000 
f0003602 l       .text  00000000 
f0003604 l       .text  00000000 
f0003606 l       .text  00000000 
f000360e l       .text  00000000 
f000360e l       .text  00000000 
f000360e l       .text  00000000 
f000360e l       .text  00000000 
f000360e l       .text  00000000 
f000360e l       .text  00000000 
f0003616 l       .text  00000000 
f0003626 l       .text  00000000 
f0003628 l       .text  00000000 
f0003628 l       .text  00000000 
f000362a l       .text  00000000 
f000362a l       .text  00000000 
f000362c l       .text  00000000 
f000362c l       .text  00000000 
f0003630 l       .text  00000000 
f0003630 l       .text  00000000 
f0003634 l       .text  00000000 
f0003634 l       .text  00000000 
f0003638 l       .text  00000000 
f0003640 l       .text  00000000 
f0003640 l       .text  00000000 
f0003640 l       .text  00000000 
f0003640 l       .text  00000000 
f0003640 l       .text  00000000 
f0003640 l       .text  00000000 
f0003648 l       .text  00000000 
f000364e l       .text  00000000 
f000364e l       .text  00000000 
f0003650 l       .text  00000000 
f0003650 l       .text  00000000 
f0003652 l       .text  00000000 
f0003652 l       .text  00000000 
f0003656 l       .text  00000000 
f0003656 l       .text  00000000 
f0003658 l       .text  00000000 
f0003658 l       .text  00000000 
f0003664 l       .text  00000000 
f0003664 l       .text  00000000 
f0003664 l       .text  00000000 
f0003664 l       .text  00000000 
f0003664 l       .text  00000000 
f0003664 l       .text  00000000 
f000366c l       .text  00000000 
f0003672 l       .text  00000000 
f0003674 l       .text  00000000 
f0003674 l       .text  00000000 
f0003676 l       .text  00000000 
f0003676 l       .text  00000000 
f0003678 l       .text  00000000 
f0003678 l       .text  00000000 
f000367a l       .text  00000000 
f000367e l       .text  00000000 
f000367e l       .text  00000000 
f0003682 l       .text  00000000 
f0003682 l       .text  00000000 
f0003686 l       .text  00000000 
f0003686 l       .text  00000000 
f0003688 l       .text  00000000 
f0003688 l       .text  00000000 
f000368a l       .text  00000000 
f000368a l       .text  00000000 
f0003696 l       .text  00000000 
f0003696 l       .text  00000000 
f0003696 l       .text  00000000 
f0003696 l       .text  00000000 
f0003696 l       .text  00000000 
f0003696 l       .text  00000000 
f0003698 l       .text  00000000 
f000369a l       .text  00000000 
f000369c l       .text  00000000 
f000369c l       .text  00000000 
f000369e l       .text  00000000 
f000369e l       .text  00000000 
f00036a0 l       .text  00000000 
f00036a2 l       .text  00000000 
f00036a2 l       .text  00000000 
f00036a4 l       .text  00000000 
f00036a4 l       .text  00000000 
f00036a8 l       .text  00000000 
f00036a8 l       .text  00000000 
f00036b2 l       .text  00000000 
f00036b2 l       .text  00000000 
f00036b4 l       .text  00000000 
f00036b4 l       .text  00000000 
f00036b6 l       .text  00000000 
f00036be l       .text  00000000 
f00036be l       .text  00000000 
f00036be l       .text  00000000 
f00036be l       .text  00000000 
f00036be l       .text  00000000 
f00036be l       .text  00000000 
f00036c6 l       .text  00000000 
f00036cc l       .text  00000000 
f00036ce l       .text  00000000 
f00036ce l       .text  00000000 
f00036d0 l       .text  00000000 
f00036d0 l       .text  00000000 
f00036d2 l       .text  00000000 
f00036d2 l       .text  00000000 
f00036d4 l       .text  00000000 
f00036d4 l       .text  00000000 
f00036e0 l       .text  00000000 
f00036e0 l       .text  00000000 
0000a26f l       .debug_loc     00000000 
0000a295 l       .debug_loc     00000000 
0000a2bb l       .debug_loc     00000000 
0000a2d6 l       .debug_loc     00000000 
0000a2f1 l       .debug_loc     00000000 
0000a30d l       .debug_loc     00000000 
0000a329 l       .debug_loc     00000000 
0000a344 l       .debug_loc     00000000 
0000a35f l       .debug_loc     00000000 
0000a37a l       .debug_loc     00000000 
0000a395 l       .debug_loc     00000000 
0000a3b0 l       .debug_loc     00000000 
0000a3cb l       .debug_loc     00000000 
0000a3f1 l       .debug_loc     00000000 
0000a417 l       .debug_loc     00000000 
0000a432 l       .debug_loc     00000000 
0000a44d l       .debug_loc     00000000 
0000a468 l       .debug_loc     00000000 
0000a483 l       .debug_loc     00000000 
0000a49e l       .debug_loc     00000000 
0000a4b9 l       .debug_loc     00000000 
0000a4df l       .debug_loc     00000000 
0000a4fa l       .debug_loc     00000000 
0000a515 l       .debug_loc     00000000 
0000a530 l       .debug_loc     00000000 
0000a557 l       .debug_loc     00000000 
0000a586 l       .debug_loc     00000000 
0000a5a1 l       .debug_loc     00000000 
0000a5bc l       .debug_loc     00000000 
0000a5d7 l       .debug_loc     00000000 
0000a5f7 l       .debug_loc     00000000 
0000a612 l       .debug_loc     00000000 
0000a639 l       .debug_loc     00000000 
0000a668 l       .debug_loc     00000000 
0000a683 l       .debug_loc     00000000 
0000a69e l       .debug_loc     00000000 
0000a6b9 l       .debug_loc     00000000 
0000a6d4 l       .debug_loc     00000000 
0000a6ef l       .debug_loc     00000000 
0000a70a l       .debug_loc     00000000 
0000a725 l       .debug_loc     00000000 
0000a740 l       .debug_loc     00000000 
0000a75b l       .debug_loc     00000000 
0000a776 l       .debug_loc     00000000 
0000a79c l       .debug_loc     00000000 
0000a7c2 l       .debug_loc     00000000 
0000a7f1 l       .debug_loc     00000000 
0000a80c l       .debug_loc     00000000 
0000a827 l       .debug_loc     00000000 
0000a842 l       .debug_loc     00000000 
0000a862 l       .debug_loc     00000000 
0000a888 l       .debug_loc     00000000 
0000a8ae l       .debug_loc     00000000 
0000a8c9 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000677d l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000f48 l       .debug_ranges  00000000 
00000b2a l       .debug_str     00000000 
00000b64 l       .debug_str     00000000 
00000b57 l       .debug_str     00000000 
00000b34 l       .debug_str     00000000 
00000b45 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
000067c2 l       .debug_str     00000000 
000067aa l       .debug_str     00000000 
00001a71 l       .debug_str     00000000 
000019c2 l       .debug_str     00000000 
000019d9 l       .debug_str     00000000 
000019f0 l       .debug_str     00000000 
00001a03 l       .debug_str     00000000 
00001a19 l       .debug_str     00000000 
00001a2f l       .debug_str     00000000 
00001a45 l       .debug_str     00000000 
00001a5a l       .debug_str     00000000 
00000c08 l       .debug_str     00000000 
00000be3 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00003567 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00001793 l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
000067d1 l       .debug_str     00000000 
00000b94 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000e0e l       .debug_str     00000000 
000067e6 l       .debug_str     00000000 
00000bdf l       .debug_str     00000000 
0000122f l       .debug_str     00000000 
00000c31 l       .debug_str     00000000 
000067fc l       .debug_str     00000000 
00000e2c l       .debug_str     00000000 
00006813 l       .debug_str     00000000 
00000c44 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00005b34 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
0000378f l       .debug_str     00000000 
00000d3b l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
00000e53 l       .debug_str     00000000 
00006832 l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
00000cb8 l       .debug_str     00000000 
000037a7 l       .debug_str     00000000 
0000684f l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00000e62 l       .debug_str     00000000 
00006862 l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
00000e7d l       .debug_str     00000000 
00000e8d l       .debug_str     00000000 
00003692 l       .debug_str     00000000 
00000e98 l       .debug_str     00000000 
0000373e l       .debug_str     00000000 
00003776 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
000017a1 l       .debug_str     00000000 
00001798 l       .debug_str     00000000 
0000687b l       .debug_str     00000000 
000036ab l       .debug_str     00000000 
0000688c l       .debug_str     00000000 
00000e70 l       .debug_str     00000000 
00003757 l       .debug_str     00000000 
000010c4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
f00036e0 l       .text  00000000 
f00036e0 l       .text  00000000 
f00036e0 l       .text  00000000 
f00036e2 l       .text  00000000 
f00036ea l       .text  00000000 
f00036ec l       .text  00000000 
f00036ee l       .text  00000000 
f00036f0 l       .text  00000000 
f00036f0 l       .text  00000000 
f00036f2 l       .text  00000000 
f00036f4 l       .text  00000000 
f00036f6 l       .text  00000000 
f00036f8 l       .text  00000000 
f00036fa l       .text  00000000 
f00036fa l       .text  00000000 
f00036fc l       .text  00000000 
f00036fe l       .text  00000000 
f0003702 l       .text  00000000 
f0003704 l       .text  00000000 
f0003708 l       .text  00000000 
f0003710 l       .text  00000000 
f000371c l       .text  00000000 
f0003720 l       .text  00000000 
f0003726 l       .text  00000000 
f000372e l       .text  00000000 
f000372e l       .text  00000000 
f0003734 l       .text  00000000 
f000373a l       .text  00000000 
f000373a l       .text  00000000 
f0003740 l       .text  00000000 
f0003740 l       .text  00000000 
f0003742 l       .text  00000000 
f0003742 l       .text  00000000 
f0003746 l       .text  00000000 
f0003746 l       .text  00000000 
f000374a l       .text  00000000 
f000374a l       .text  00000000 
f000374e l       .text  00000000 
f0003750 l       .text  00000000 
f0003750 l       .text  00000000 
f0003752 l       .text  00000000 
f0003752 l       .text  00000000 
f0003756 l       .text  00000000 
f0003756 l       .text  00000000 
f000375a l       .text  00000000 
f000375a l       .text  00000000 
f000375e l       .text  00000000 
f000375e l       .text  00000000 
f0003762 l       .text  00000000 
f0003762 l       .text  00000000 
f0003766 l       .text  00000000 
f0003766 l       .text  00000000 
f000376a l       .text  00000000 
f000376a l       .text  00000000 
f000376e l       .text  00000000 
f0003770 l       .text  00000000 
f0003770 l       .text  00000000 
f0003772 l       .text  00000000 
f0003772 l       .text  00000000 
f0003774 l       .text  00000000 
f0003774 l       .text  00000000 
f0003776 l       .text  00000000 
f0003776 l       .text  00000000 
f0003778 l       .text  00000000 
f0003778 l       .text  00000000 
f000377a l       .text  00000000 
f000377a l       .text  00000000 
f000377e l       .text  00000000 
f000377e l       .text  00000000 
f0003780 l       .text  00000000 
f0003780 l       .text  00000000 
f0003782 l       .text  00000000 
f0003782 l       .text  00000000 
f0003784 l       .text  00000000 
f0003788 l       .text  00000000 
f0003788 l       .text  00000000 
f000378a l       .text  00000000 
f000378a l       .text  00000000 
f0003790 l       .text  00000000 
f0003792 l       .text  00000000 
f0003794 l       .text  00000000 
f0003796 l       .text  00000000 
f0003798 l       .text  00000000 
f0003798 l       .text  00000000 
f000379c l       .text  00000000 
f00037a0 l       .text  00000000 
f00037a4 l       .text  00000000 
f00037a4 l       .text  00000000 
f00037a6 l       .text  00000000 
f00037a6 l       .text  00000000 
f00037aa l       .text  00000000 
f00037aa l       .text  00000000 
f00037ac l       .text  00000000 
f00037ac l       .text  00000000 
f00037b0 l       .text  00000000 
f00037b0 l       .text  00000000 
f00037ba l       .text  00000000 
f00037c6 l       .text  00000000 
f00037c6 l       .text  00000000 
f00037c6 l       .text  00000000 
f00037c6 l       .text  00000000 
f00037c6 l       .text  00000000 
f00037c6 l       .text  00000000 
f00037c8 l       .text  00000000 
f00037ca l       .text  00000000 
f00037ce l       .text  00000000 
f00037d2 l       .text  00000000 
f00037d2 l       .text  00000000 
f00037d4 l       .text  00000000 
f00037d4 l       .text  00000000 
f00037d6 l       .text  00000000 
f00037d6 l       .text  00000000 
f00037d8 l       .text  00000000 
f00037d8 l       .text  00000000 
f00037da l       .text  00000000 
f00037da l       .text  00000000 
f00037dc l       .text  00000000 
f00037de l       .text  00000000 
f00037e0 l       .text  00000000 
f00037e0 l       .text  00000000 
f00037e2 l       .text  00000000 
f00037e2 l       .text  00000000 
f00037ec l       .text  00000000 
f00037ec l       .text  00000000 
f00037ee l       .text  00000000 
f00037ee l       .text  00000000 
f00037f0 l       .text  00000000 
f00037f8 l       .text  00000000 
f00037f8 l       .text  00000000 
f00037f8 l       .text  00000000 
f00037f8 l       .text  00000000 
f00037f8 l       .text  00000000 
f00037f8 l       .text  00000000 
f0003800 l       .text  00000000 
f0003806 l       .text  00000000 
f0003806 l       .text  00000000 
f0003808 l       .text  00000000 
f0003808 l       .text  00000000 
f000380a l       .text  00000000 
f000380a l       .text  00000000 
f000380e l       .text  00000000 
f000380e l       .text  00000000 
f0003812 l       .text  00000000 
f0003812 l       .text  00000000 
f0003814 l       .text  00000000 
f0003814 l       .text  00000000 
f0003816 l       .text  00000000 
f000381e l       .text  00000000 
f0003820 l       .text  00000000 
f0003820 l       .text  00000000 
f0003824 l       .text  00000000 
f0003824 l       .text  00000000 
f0003828 l       .text  00000000 
f0003828 l       .text  00000000 
f000382a l       .text  00000000 
f000382c l       .text  00000000 
f000382e l       .text  00000000 
f0003830 l       .text  00000000 
f0003830 l       .text  00000000 
f0003832 l       .text  00000000 
f0003834 l       .text  00000000 
f000383c l       .text  00000000 
f000383c l       .text  00000000 
f000383c l       .text  00000000 
f000383c l       .text  00000000 
f000383c l       .text  00000000 
f000383c l       .text  00000000 
f000383e l       .text  00000000 
f0003840 l       .text  00000000 
f0003840 l       .text  00000000 
f0003842 l       .text  00000000 
f0003842 l       .text  00000000 
f0003844 l       .text  00000000 
f0003844 l       .text  00000000 
f0003846 l       .text  00000000 
f0003846 l       .text  00000000 
f0003848 l       .text  00000000 
f0003848 l       .text  00000000 
f000384a l       .text  00000000 
f000384a l       .text  00000000 
f000384c l       .text  00000000 
f000384c l       .text  00000000 
f000384e l       .text  00000000 
f000384e l       .text  00000000 
f0003850 l       .text  00000000 
f0003850 l       .text  00000000 
f0003852 l       .text  00000000 
f0003852 l       .text  00000000 
f0003854 l       .text  00000000 
f0003854 l       .text  00000000 
f0003856 l       .text  00000000 
f0003858 l       .text  00000000 
f000385a l       .text  00000000 
f0003862 l       .text  00000000 
f0003862 l       .text  00000000 
f0003864 l       .text  00000000 
f0003864 l       .text  00000000 
f0003866 l       .text  00000000 
f000386e l       .text  00000000 
f000386e l       .text  00000000 
f000386e l       .text  00000000 
f000386e l       .text  00000000 
f000386e l       .text  00000000 
f000386e l       .text  00000000 
f0003876 l       .text  00000000 
f000387c l       .text  00000000 
f000387e l       .text  00000000 
f000387e l       .text  00000000 
f0003880 l       .text  00000000 
f0003880 l       .text  00000000 
f0003882 l       .text  00000000 
f0003882 l       .text  00000000 
f0003884 l       .text  00000000 
f0003886 l       .text  00000000 
f0003886 l       .text  00000000 
f0003888 l       .text  00000000 
f0003888 l       .text  00000000 
f000388c l       .text  00000000 
f0003894 l       .text  00000000 
f0003894 l       .text  00000000 
0000a8e4 l       .debug_loc     00000000 
0000a915 l       .debug_loc     00000000 
0000a949 l       .debug_loc     00000000 
0000a996 l       .debug_loc     00000000 
0000a9c3 l       .debug_loc     00000000 
0000a9df l       .debug_loc     00000000 
0000aa11 l       .debug_loc     00000000 
0000aa38 l       .debug_loc     00000000 
0000aa5d l       .debug_loc     00000000 
0000aa78 l       .debug_loc     00000000 
0000aa93 l       .debug_loc     00000000 
0000aac4 l       .debug_loc     00000000 
0000aaea l       .debug_loc     00000000 
0000ab05 l       .debug_loc     00000000 
0000ab2b l       .debug_loc     00000000 
0000ab46 l       .debug_loc     00000000 
0000ab68 l       .debug_loc     00000000 
0000ab8e l       .debug_loc     00000000 
0000abbf l       .debug_loc     00000000 
0000abe5 l       .debug_loc     00000000 
0000ac00 l       .debug_loc     00000000 
0000ac26 l       .debug_loc     00000000 
0000ac41 l       .debug_loc     00000000 
0000ac63 l       .debug_loc     00000000 
0000ac89 l       .debug_loc     00000000 
0000acaf l       .debug_loc     00000000 
0000ace0 l       .debug_loc     00000000 
0000ad11 l       .debug_loc     00000000 
0000ad73 l       .debug_loc     00000000 
0000ad8e l       .debug_loc     00000000 
0000adb4 l       .debug_loc     00000000 
0000add6 l       .debug_loc     00000000 
0000adf1 l       .debug_loc     00000000 
0000ae11 l       .debug_loc     00000000 
0000ae31 l       .debug_loc     00000000 
0000ae4c l       .debug_loc     00000000 
0000ae6e l       .debug_loc     00000000 
0000ae89 l       .debug_loc     00000000 
0000aeb4 l       .debug_loc     00000000 
0000aecf l       .debug_loc     00000000 
0000aeef l       .debug_loc     00000000 
0000af11 l       .debug_loc     00000000 
0000af2c l       .debug_loc     00000000 
0000af52 l       .debug_loc     00000000 
0000af74 l       .debug_loc     00000000 
0000af8f l       .debug_loc     00000000 
0000afaa l       .debug_loc     00000000 
0000afc5 l       .debug_loc     00000000 
0000afe0 l       .debug_loc     00000000 
0000b007 l       .debug_loc     00000000 
0000b022 l       .debug_loc     00000000 
0000b03d l       .debug_loc     00000000 
0000b058 l       .debug_loc     00000000 
0000b073 l       .debug_loc     00000000 
0000b08e l       .debug_loc     00000000 
0000b0a9 l       .debug_loc     00000000 
0000b0d0 l       .debug_loc     00000000 
0000b0eb l       .debug_loc     00000000 
0000b106 l       .debug_loc     00000000 
0000b12c l       .debug_loc     00000000 
0000b152 l       .debug_loc     00000000 
0000b16d l       .debug_loc     00000000 
0000b195 l       .debug_loc     00000000 
0000b1b0 l       .debug_loc     00000000 
0000b1cb l       .debug_loc     00000000 
0000b1e6 l       .debug_loc     00000000 
0000b20c l       .debug_loc     00000000 
0000b227 l       .debug_loc     00000000 
0000b24f l       .debug_loc     00000000 
0000b26a l       .debug_loc     00000000 
0000b285 l       .debug_loc     00000000 
0000b2a0 l       .debug_loc     00000000 
0000b2bb l       .debug_loc     00000000 
0000b2d6 l       .debug_loc     00000000 
0000b2fa l       .debug_loc     00000000 
0000b315 l       .debug_loc     00000000 
0000b330 l       .debug_loc     00000000 
0000b34b l       .debug_loc     00000000 
0000b366 l       .debug_loc     00000000 
0000b381 l       .debug_loc     00000000 
0000b3a5 l       .debug_loc     00000000 
0000b3c0 l       .debug_loc     00000000 
0000b3db l       .debug_loc     00000000 
0000b401 l       .debug_loc     00000000 
0000b41c l       .debug_loc     00000000 
0000b442 l       .debug_loc     00000000 
0000b468 l       .debug_loc     00000000 
0000b48e l       .debug_loc     00000000 
0000b4b4 l       .debug_loc     00000000 
0000b4da l       .debug_loc     00000000 
0000b4f5 l       .debug_loc     00000000 
0000b524 l       .debug_loc     00000000 
0000b54a l       .debug_loc     00000000 
0000b565 l       .debug_loc     00000000 
0000b580 l       .debug_loc     00000000 
0000b59b l       .debug_loc     00000000 
0000b5b6 l       .debug_loc     00000000 
0000b5e7 l       .debug_loc     00000000 
0000b618 l       .debug_loc     00000000 
0000b63e l       .debug_loc     00000000 
0000b664 l       .debug_loc     00000000 
0000b680 l       .debug_loc     00000000 
0000b69b l       .debug_loc     00000000 
0000b6b6 l       .debug_loc     00000000 
0000b6d1 l       .debug_loc     00000000 
0000b6ec l       .debug_loc     00000000 
0000b707 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000068aa l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000fd0 l       .debug_ranges  00000000 
000068c7 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00000c08 l       .debug_str     00000000 
00000be3 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
0000188d l       .debug_str     00000000 
00001868 l       .debug_str     00000000 
0000187a l       .debug_str     00000000 
000019af l       .debug_str     00000000 
0000190b l       .debug_str     00000000 
00001922 l       .debug_str     00000000 
00001939 l       .debug_str     00000000 
00001950 l       .debug_str     00000000 
00001967 l       .debug_str     00000000 
0000197f l       .debug_str     00000000 
00001997 l       .debug_str     00000000 
00006917 l       .debug_str     00000000 
000068dd l       .debug_str     00000000 
000068f0 l       .debug_str     00000000 
00006903 l       .debug_str     00000000 
00006955 l       .debug_str     00000000 
00006929 l       .debug_str     00000000 
00006940 l       .debug_str     00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
00006967 l       .debug_str     00000000 
00001793 l       .debug_str     00000000 
0000479d l       .debug_str     00000000 
000017a1 l       .debug_str     00000000 
00001798 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
00000c1d l       .debug_str     00000000 
00005c4d l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c58 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000c8f l       .debug_str     00000000 
000049ad l       .debug_str     00000000 
00003d71 l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000e70 l       .debug_str     00000000 
00003575 l       .debug_str     00000000 
00001739 l       .debug_str     00000000 
00006ad1 l       .debug_str     00000000 
00006adc l       .debug_str     00000000 
00006ae0 l       .debug_str     00000000 
00000fb8 l       .debug_ranges  00000000 
00000a28 l       .debug_str     00000000 
00000c31 l       .debug_str     00000000 
00003663 l       .debug_str     00000000 
000019b8 l       .debug_str     00000000 
000069da l       .debug_str     00000000 
00000cb8 l       .debug_str     00000000 
00005b34 l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
000069f4 l       .debug_str     00000000 
00006920 l       .debug_str     00000000 
00000e90 l       .debug_str     00000000 
000037e0 l       .debug_str     00000000 
000046f6 l       .debug_str     00000000 
00006972 l       .debug_str     00000000 
000066e7 l       .debug_str     00000000 
00006982 l       .debug_str     00000000 
00000c44 l       .debug_str     00000000 
0000698f l       .debug_str     00000000 
0000388b l       .debug_str     00000000 
000037dc l       .debug_str     00000000 
000066bb l       .debug_str     00000000 
00006a0c l       .debug_str     00000000 
000069a2 l       .debug_str     00000000 
000069ad l       .debug_str     00000000 
000069bb l       .debug_str     00000000 
00006a08 l       .debug_str     00000000 
000069cd l       .debug_str     00000000 
00006519 l       .debug_str     00000000 
00006a1f l       .debug_str     00000000 
00000fbc l       .debug_str     00000000 
000037c0 l       .debug_str     00000000 
00006afe l       .debug_str     00000000 
00006a3c l       .debug_str     00000000 
00006b08 l       .debug_str     00000000 
00006a58 l       .debug_str     00000000 
000042f3 l       .debug_str     00000000 
00006a6c l       .debug_str     00000000 
0000695e l       .debug_str     00000000 
00003826 l       .debug_str     00000000 
00006a82 l       .debug_str     00000000 
00006b27 l       .debug_str     00000000 
00006a9d l       .debug_str     00000000 
00006ab9 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
000035e1 l       .debug_str     00000000 
000035d1 l       .debug_str     00000000 
00003588 l       .debug_str     00000000 
00003591 l       .debug_str     00000000 
0000359d l       .debug_str     00000000 
00001896 l       .debug_str     00000000 
000035bd l       .debug_str     00000000 
000035c7 l       .debug_str     00000000 
000035ab l       .debug_str     00000000 
0000367d l       .debug_str     00000000 
00006aea l       .debug_str     00000000 
00006b13 l       .debug_str     00000000 
000011a8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 math.c
f0003894 l       .text  00000000 
f0003894 l       .text  00000000 
f0003894 l       .text  00000000 
f0003896 l       .text  00000000 
f0003898 l       .text  00000000 
f00038a4 l       .text  00000000 
f00038aa l       .text  00000000 
f00038aa l       .text  00000000 
f00038b2 l       .text  00000000 
f00038b8 l       .text  00000000 
f00038c0 l       .text  00000000 
f00038da l       .text  00000000 
f00038dc l       .text  00000000 
f00038dc l       .text  00000000 
f00038e0 l       .text  00000000 
f00038e4 l       .text  00000000 
f00038e4 l       .text  00000000 
f00038e8 l       .text  00000000 
f00038ee l       .text  00000000 
f00038f6 l       .text  00000000 
f0003908 l       .text  00000000 
f000390a l       .text  00000000 
f000390a l       .text  00000000 
f0003924 l       .text  00000000 
f0003926 l       .text  00000000 
f0003926 l       .text  00000000 
f000392a l       .text  00000000 
f000392a l       .text  00000000 
f000392e l       .text  00000000 
f000392e l       .text  00000000 
f0003930 l       .text  00000000 
f0003938 l       .text  00000000 
f000393a l       .text  00000000 
f000393c l       .text  00000000 
f000393e l       .text  00000000 
f0003942 l       .text  00000000 
f000394a l       .text  00000000 
f000394a l       .text  00000000 
0000b72d l       .debug_loc     00000000 
0000b748 l       .debug_loc     00000000 
0000b763 l       .debug_loc     00000000 
0000b789 l       .debug_loc     00000000 
0000b7ba l       .debug_loc     00000000 
0000b7fa l       .debug_loc     00000000 
0000b849 l       .debug_loc     00000000 
0000b8a8 l       .debug_loc     00000000 
0000b8df l       .debug_loc     00000000 
0000b94a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006b36 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00001050 l       .debug_ranges  00000000 
00006b50 l       .debug_str     00000000 
00002c12 l       .debug_str     00000000 
00004740 l       .debug_str     00000000 
00006b5d l       .debug_str     00000000 
00000a28 l       .debug_str     00000000 
00006b59 l       .debug_str     00000000 
000057b6 l       .debug_str     00000000 
00006b61 l       .debug_str     00000000 
00006b65 l       .debug_str     00000000 
000004f5 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
000012b8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 memory.c
f000394a l       .text  00000000 
f000394a l       .text  00000000 
f000394a l       .text  00000000 
f000394a l       .text  00000000 
f0003952 l       .text  00000000 
f0003956 l       .text  00000000 
f0003956 l       .text  00000000 
f000395a l       .text  00000000 
f000395a l       .text  00000000 
f000395e l       .text  00000000 
f000395e l       .text  00000000 
f0003972 l       .text  00000000 
f0003972 l       .text  00000000 
f0003976 l       .text  00000000 
f0003978 l       .text  00000000 
f000397c l       .text  00000000 
f000397c l       .text  00000000 
f0003980 l       .text  00000000 
f0003980 l       .text  00000000 
f0003986 l       .text  00000000 
f0003986 l       .text  00000000 
f000398a l       .text  00000000 
f000398e l       .text  00000000 
f000398e l       .text  00000000 
f0003990 l       .text  00000000 
f0003996 l       .text  00000000 
f0003996 l       .text  00000000 
f000399a l       .text  00000000 
f000399a l       .text  00000000 
f000399e l       .text  00000000 
f000399e l       .text  00000000 
f00039a0 l       .text  00000000 
f00039a0 l       .text  00000000 
f00039a4 l       .text  00000000 
f00039a4 l       .text  00000000 
f00039a6 l       .text  00000000 
f00039a6 l       .text  00000000 
f00039a8 l       .text  00000000 
f00039a8 l       .text  00000000 
f00039ac l       .text  00000000 
f00039ac l       .text  00000000 
f00039b4 l       .text  00000000 
f00039ba l       .text  00000000 
f00039ba l       .text  00000000 
f00039be l       .text  00000000 
f00039c2 l       .text  00000000 
f00039c8 l       .text  00000000 
f00039ca l       .text  00000000 
f00039ca l       .text  00000000 
f00039cc l       .text  00000000 
f00039d4 l       .text  00000000 
f00039d4 l       .text  00000000 
f00039d4 l       .text  00000000 
f00039d4 l       .text  00000000 
f00039d4 l       .text  00000000 
f00039d8 l       .text  00000000 
f00039d8 l       .text  00000000 
f00039dc l       .text  00000000 
f00039dc l       .text  00000000 
f00039e2 l       .text  00000000 
f00039e2 l       .text  00000000 
f00039e6 l       .text  00000000 
f00039e8 l       .text  00000000 
f00039ec l       .text  00000000 
f00039ec l       .text  00000000 
f00039ee l       .text  00000000 
f00039ee l       .text  00000000 
f00039f2 l       .text  00000000 
f00039f2 l       .text  00000000 
f00039f6 l       .text  00000000 
f00039f6 l       .text  00000000 
f00039f8 l       .text  00000000 
f00039fa l       .text  00000000 
f00039fc l       .text  00000000 
f00039fc l       .text  00000000 
f0003a00 l       .text  00000000 
f0003a10 l       .text  00000000 
f0003a10 l       .text  00000000 
f0003a14 l       .text  00000000 
f0003a16 l       .text  00000000 
f0003a16 l       .text  00000000 
f0003a18 l       .text  00000000 
f0003a18 l       .text  00000000 
f0003a1c l       .text  00000000 
f0003a1c l       .text  00000000 
f0003a22 l       .text  00000000 
f0003a26 l       .text  00000000 
f0003a26 l       .text  00000000 
f0003a2a l       .text  00000000 
f0003a2e l       .text  00000000 
f0003a30 l       .text  00000000 
f0003a32 l       .text  00000000 
f0003a3a l       .text  00000000 
f0003a3a l       .text  00000000 
f0003a3a l       .text  00000000 
f0003a3a l       .text  00000000 
f0003a3a l       .text  00000000 
f0003a3e l       .text  00000000 
f0003a3e l       .text  00000000 
f0003a42 l       .text  00000000 
f0003a42 l       .text  00000000 
f0003a58 l       .text  00000000 
f0003a58 l       .text  00000000 
f0003a60 l       .text  00000000 
f0003a60 l       .text  00000000 
f0003a64 l       .text  00000000 
f0003a66 l       .text  00000000 
f0003a6a l       .text  00000000 
f0003a6a l       .text  00000000 
f0003a6e l       .text  00000000 
f0003a6e l       .text  00000000 
f0003a74 l       .text  00000000 
f0003a74 l       .text  00000000 
f0003a78 l       .text  00000000 
f0003a80 l       .text  00000000 
f0003a84 l       .text  00000000 
f0003a84 l       .text  00000000 
f0003a86 l       .text  00000000 
f0003a8a l       .text  00000000 
f0003a8e l       .text  00000000 
f0003a96 l       .text  00000000 
f0003a96 l       .text  00000000 
f0003a9a l       .text  00000000 
f0003a9a l       .text  00000000 
f0003a9c l       .text  00000000 
f0003a9c l       .text  00000000 
f0003aa0 l       .text  00000000 
f0003aa0 l       .text  00000000 
f0003aa2 l       .text  00000000 
f0003aa2 l       .text  00000000 
f0003aa6 l       .text  00000000 
f0003aa6 l       .text  00000000 
f0003aaa l       .text  00000000 
f0003aaa l       .text  00000000 
f0003aae l       .text  00000000 
f0003aae l       .text  00000000 
f0003ab2 l       .text  00000000 
f0003ab4 l       .text  00000000 
f0003ab8 l       .text  00000000 
f0003abc l       .text  00000000 
f0003ac0 l       .text  00000000 
f0003ac2 l       .text  00000000 
f0003ac4 l       .text  00000000 
f0003ac4 l       .text  00000000 
f0003ac8 l       .text  00000000 
f0003acc l       .text  00000000 
f0003ad0 l       .text  00000000 
f0003ad0 l       .text  00000000 
f0003ad4 l       .text  00000000 
f0003ad6 l       .text  00000000 
f0003ada l       .text  00000000 
f0003adc l       .text  00000000 
f0003ade l       .text  00000000 
f0003ae8 l       .text  00000000 
f0003aec l       .text  00000000 
f0003af6 l       .text  00000000 
f0003afa l       .text  00000000 
f0003b04 l       .text  00000000 
f0003b04 l       .text  00000000 
f0003b04 l       .text  00000000 
f0003b04 l       .text  00000000 
f0003b04 l       .text  00000000 
f0003b08 l       .text  00000000 
f0003b08 l       .text  00000000 
f0003b0c l       .text  00000000 
f0003b0c l       .text  00000000 
f0003b14 l       .text  00000000 
f0003b18 l       .text  00000000 
f0003b1c l       .text  00000000 
f0003b1e l       .text  00000000 
f0003b20 l       .text  00000000 
f0003b20 l       .text  00000000 
f0003b24 l       .text  00000000 
f0003b28 l       .text  00000000 
f0003b28 l       .text  00000000 
f0003b2a l       .text  00000000 
f0003b2c l       .text  00000000 
f0003b2e l       .text  00000000 
f0003b38 l       .text  00000000 
f0003b38 l       .text  00000000 
f0003b3c l       .text  00000000 
f0003b48 l       .text  00000000 
f0003b56 l       .text  00000000 
f0003b56 l       .text  00000000 
f0003b5a l       .text  00000000 
f0003b5a l       .text  00000000 
f0003b5c l       .text  00000000 
f0003b5c l       .text  00000000 
f0003b60 l       .text  00000000 
f0003b64 l       .text  00000000 
f0003b68 l       .text  00000000 
f0003b6c l       .text  00000000 
f0003b6c l       .text  00000000 
f0003b70 l       .text  00000000 
f0003b74 l       .text  00000000 
f0003b78 l       .text  00000000 
f0003b78 l       .text  00000000 
f0003b7c l       .text  00000000 
f0003b7e l       .text  00000000 
f0003b80 l       .text  00000000 
f0003b80 l       .text  00000000 
f0003b82 l       .text  00000000 
f0003b86 l       .text  00000000 
f0003b86 l       .text  00000000 
f0003b8e l       .text  00000000 
f0003b92 l       .text  00000000 
f0003b92 l       .text  00000000 
f0003b96 l       .text  00000000 
f0003b96 l       .text  00000000 
f0003b9a l       .text  00000000 
f0003b9c l       .text  00000000 
f0003b9e l       .text  00000000 
f0003ba0 l       .text  00000000 
f0003ba2 l       .text  00000000 
f0003ba2 l       .text  00000000 
f0003bae l       .text  00000000 
f0003bae l       .text  00000000 
f0003bb2 l       .text  00000000 
f0003bb2 l       .text  00000000 
f0003bba l       .text  00000000 
f0003bba l       .text  00000000 
f0003bbe l       .text  00000000 
f0003bbe l       .text  00000000 
f0003bc6 l       .text  00000000 
f0003bc6 l       .text  00000000 
f0003bca l       .text  00000000 
f0003bca l       .text  00000000 
f0003bd2 l       .text  00000000 
f0003bd2 l       .text  00000000 
f0003bd2 l       .text  00000000 
f0003bd2 l       .text  00000000 
f0003bd2 l       .text  00000000 
f0003bd6 l       .text  00000000 
f0003bd6 l       .text  00000000 
f0003bda l       .text  00000000 
f0003bda l       .text  00000000 
f0003be2 l       .text  00000000 
f0003be2 l       .text  00000000 
f0003be6 l       .text  00000000 
f0003be8 l       .text  00000000 
f0003bec l       .text  00000000 
f0003bec l       .text  00000000 
f0003bf8 l       .text  00000000 
f0003bf8 l       .text  00000000 
f0003bfc l       .text  00000000 
f0003bfc l       .text  00000000 
f0003c04 l       .text  00000000 
f0003c06 l       .text  00000000 
f0003c06 l       .text  00000000 
f0003c0c l       .text  00000000 
f0003c0c l       .text  00000000 
f0003c18 l       .text  00000000 
f0003c18 l       .text  00000000 
f0003c20 l       .text  00000000 
f0003c20 l       .text  00000000 
f0003c24 l       .text  00000000 
f0003c24 l       .text  00000000 
f0003c2a l       .text  00000000 
f0003c32 l       .text  00000000 
f0003c32 l       .text  00000000 
f0003c36 l       .text  00000000 
f0003c36 l       .text  00000000 
f0003c3a l       .text  00000000 
f0003c3e l       .text  00000000 
f0003c3e l       .text  00000000 
f0003c42 l       .text  00000000 
f0003c44 l       .text  00000000 
f0003c46 l       .text  00000000 
f0003c4a l       .text  00000000 
f0003c4a l       .text  00000000 
f0003c4e l       .text  00000000 
f0003c52 l       .text  00000000 
f0003c56 l       .text  00000000 
f0003c5a l       .text  00000000 
f0003c5e l       .text  00000000 
f0003c60 l       .text  00000000 
f0003c60 l       .text  00000000 
f0003c64 l       .text  00000000 
f0003c64 l       .text  00000000 
f0003c68 l       .text  00000000 
f0003c68 l       .text  00000000 
f0003c6a l       .text  00000000 
f0003c72 l       .text  00000000 
f0003c74 l       .text  00000000 
f0003c78 l       .text  00000000 
f0003c78 l       .text  00000000 
f0003c80 l       .text  00000000 
f0003c82 l       .text  00000000 
f0003c82 l       .text  00000000 
f0003c8a l       .text  00000000 
f0003c92 l       .text  00000000 
f0003c92 l       .text  00000000 
f0003c96 l       .text  00000000 
f0003c96 l       .text  00000000 
f0003c98 l       .text  00000000 
f0003ca0 l       .text  00000000 
f0003ca0 l       .text  00000000 
f0003ca4 l       .text  00000000 
f0003ca4 l       .text  00000000 
f0003ca6 l       .text  00000000 
f0003cae l       .text  00000000 
f0003cae l       .text  00000000 
f0003cb2 l       .text  00000000 
f0003cb2 l       .text  00000000 
f0003cb4 l       .text  00000000 
f0003cbc l       .text  00000000 
f0003cc0 l       .text  00000000 
f0003cc8 l       .text  00000000 
f0003cc8 l       .text  00000000 
0000b985 l       .debug_loc     00000000 
0000b9a0 l       .debug_loc     00000000 
0000b9bb l       .debug_loc     00000000 
0000b9d6 l       .debug_loc     00000000 
0000b9f1 l       .debug_loc     00000000 
0000ba0c l       .debug_loc     00000000 
0000ba27 l       .debug_loc     00000000 
0000ba42 l       .debug_loc     00000000 
0000ba92 l       .debug_loc     00000000 
0000baad l       .debug_loc     00000000 
0000bac8 l       .debug_loc     00000000 
0000bae3 l       .debug_loc     00000000 
0000bafe l       .debug_loc     00000000 
0000bb19 l       .debug_loc     00000000 
0000bb34 l       .debug_loc     00000000 
0000bb4f l       .debug_loc     00000000 
0000bb6a l       .debug_loc     00000000 
0000bb85 l       .debug_loc     00000000 
0000bba0 l       .debug_loc     00000000 
0000bbbd l       .debug_loc     00000000 
0000bbd8 l       .debug_loc     00000000 
0000bbf3 l       .debug_loc     00000000 
0000bc43 l       .debug_loc     00000000 
0000bc5e l       .debug_loc     00000000 
0000bc79 l       .debug_loc     00000000 
0000bc9f l       .debug_loc     00000000 
0000bcc5 l       .debug_loc     00000000 
0000bceb l       .debug_loc     00000000 
0000bd11 l       .debug_loc     00000000 
0000bd37 l       .debug_loc     00000000 
0000bd56 l       .debug_loc     00000000 
0000bd75 l       .debug_loc     00000000 
0000bd90 l       .debug_loc     00000000 
0000bdab l       .debug_loc     00000000 
0000be08 l       .debug_loc     00000000 
0000be23 l       .debug_loc     00000000 
0000be3e l       .debug_loc     00000000 
0000be59 l       .debug_loc     00000000 
0000be8a l       .debug_loc     00000000 
0000bebb l       .debug_loc     00000000 
0000bee1 l       .debug_loc     00000000 
0000bf07 l       .debug_loc     00000000 
0000bf2d l       .debug_loc     00000000 
0000bf53 l       .debug_loc     00000000 
0000bf84 l       .debug_loc     00000000 
0000bfb5 l       .debug_loc     00000000 
0000bfd4 l       .debug_loc     00000000 
0000bff3 l       .debug_loc     00000000 
0000c00e l       .debug_loc     00000000 
0000c055 l       .debug_loc     00000000 
0000c091 l       .debug_loc     00000000 
0000c0ac l       .debug_loc     00000000 
0000c0d2 l       .debug_loc     00000000 
0000c0ed l       .debug_loc     00000000 
0000c108 l       .debug_loc     00000000 
0000c123 l       .debug_loc     00000000 
0000c13e l       .debug_loc     00000000 
0000c159 l       .debug_loc     00000000 
0000c195 l       .debug_loc     00000000 
0000c1b0 l       .debug_loc     00000000 
0000c1ec l       .debug_loc     00000000 
0000c228 l       .debug_loc     00000000 
0000c245 l       .debug_loc     00000000 
0000c2c3 l       .debug_loc     00000000 
0000c2de l       .debug_loc     00000000 
0000c31a l       .debug_loc     00000000 
0000c356 l       .debug_loc     00000000 
0000c371 l       .debug_loc     00000000 
0000c397 l       .debug_loc     00000000 
0000c3e9 l       .debug_loc     00000000 
0000c404 l       .debug_loc     00000000 
0000c41f l       .debug_loc     00000000 
0000c471 l       .debug_loc     00000000 
0000c48e l       .debug_loc     00000000 
0000c4a9 l       .debug_loc     00000000 
0000c511 l       .debug_loc     00000000 
0000c537 l       .debug_loc     00000000 
0000c552 l       .debug_loc     00000000 
0000c599 l       .debug_loc     00000000 
0000c5eb l       .debug_loc     00000000 
0000c611 l       .debug_loc     00000000 
0000c642 l       .debug_loc     00000000 
0000c65d l       .debug_loc     00000000 
0000c678 l       .debug_loc     00000000 
0000c693 l       .debug_loc     00000000 
0000c6ae l       .debug_loc     00000000 
0000c6db l       .debug_loc     00000000 
0000c6f6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006b6a l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000010b0 l       .debug_ranges  00000000 
00006b86 l       .debug_str     00000000 
00006b90 l       .debug_str     00000000 
00006b9a l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00006ba4 l       .debug_str     00000000 
00006c92 l       .debug_str     00000000 
00006c9c l       .debug_str     00000000 
00006595 l       .debug_str     00000000 
00006bbe l       .debug_str     00000000 
00006bc9 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
00006bd5 l       .debug_str     00000000 
00006be7 l       .debug_str     00000000 
00006bf7 l       .debug_str     00000000 
00006bac l       .debug_str     00000000 
00006c07 l       .debug_str     00000000 
00000f35 l       .debug_str     00000000 
00000f3d l       .debug_str     00000000 
00003d6d l       .debug_str     00000000 
00006c11 l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000944 l       .debug_str     00000000 
00006c58 l       .debug_str     00000000 
00006c5d l       .debug_str     00000000 
00006c61 l       .debug_str     00000000 
00006c67 l       .debug_str     00000000 
00006beb l       .debug_str     00000000 
000004f5 l       .debug_str     00000000 
00006bfb l       .debug_str     00000000 
00001068 l       .debug_ranges  00000000 
00003d2f l       .debug_str     00000000 
000065ff l       .debug_str     00000000 
00006c6c l       .debug_str     00000000 
00006c73 l       .debug_str     00000000 
00000a8b l       .debug_str     00000000 
00006c7b l       .debug_str     00000000 
00006c7f l       .debug_str     00000000 
00006c83 l       .debug_str     00000000 
00006c88 l       .debug_str     00000000 
00006c8d l       .debug_str     00000000 
00006c97 l       .debug_str     00000000 
00006c2d l       .debug_str     00000000 
00005984 l       .debug_str     00000000 
000062d0 l       .debug_str     00000000 
00006ca2 l       .debug_str     00000000 
00001080 l       .debug_ranges  00000000 
00006ca7 l       .debug_str     00000000 
00006c1a l       .debug_str     00000000 
0000388b l       .debug_str     00000000 
000062d7 l       .debug_str     00000000 
00001098 l       .debug_ranges  00000000 
00006c35 l       .debug_str     00000000 
000061e6 l       .debug_str     00000000 
00006c47 l       .debug_str     00000000 
00006c4f l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
000012f4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 tasks.c
f0003cc8 l       .text  00000000 
f0003cc8 l       .text  00000000 
f0003cc8 l       .text  00000000 
f0003cca l       .text  00000000 
f0003cde l       .text  00000000 
f0003ce0 l       .text  00000000 
f0003ce2 l       .text  00000000 
f0003ce4 l       .text  00000000 
f0003ce6 l       .text  00000000 
f0003ce8 l       .text  00000000 
f0003cea l       .text  00000000 
f0003cea l       .text  00000000 
f0003cee l       .text  00000000 
f0003cf0 l       .text  00000000 
f0003cf0 l       .text  00000000 
f0003cf2 l       .text  00000000 
f0003cf6 l       .text  00000000 
f0003cf8 l       .text  00000000 
f0003cf8 l       .text  00000000 
f0003cfe l       .text  00000000 
f0003cfe l       .text  00000000 
f0003d00 l       .text  00000000 
f0003d02 l       .text  00000000 
f0003d02 l       .text  00000000 
f0003d04 l       .text  00000000 
f0003d04 l       .text  00000000 
f0003d0a l       .text  00000000 
f0003d0a l       .text  00000000 
f0003d0e l       .text  00000000 
f0003d0e l       .text  00000000 
f0003d10 l       .text  00000000 
f0003d10 l       .text  00000000 
f0003d16 l       .text  00000000 
f0003d16 l       .text  00000000 
f0003d1a l       .text  00000000 
f0003d1e l       .text  00000000 
f0003d22 l       .text  00000000 
f0003d26 l       .text  00000000 
f0003d26 l       .text  00000000 
f0003d2a l       .text  00000000 
f0003d2e l       .text  00000000 
f0003d34 l       .text  00000000 
f0003d3a l       .text  00000000 
f0003d3a l       .text  00000000 
f0003d42 l       .text  00000000 
f0003d42 l       .text  00000000 
f0003d44 l       .text  00000000 
f0003d46 l       .text  00000000 
f0003d46 l       .text  00000000 
f0003d48 l       .text  00000000 
f0003d50 l       .text  00000000 
f0003d50 l       .text  00000000 
f0003d54 l       .text  00000000 
f0003d54 l       .text  00000000 
f0003d56 l       .text  00000000 
f0003d5a l       .text  00000000 
f0003d5a l       .text  00000000 
f0003d5e l       .text  00000000 
f0003d62 l       .text  00000000 
f0003d62 l       .text  00000000 
f0003d66 l       .text  00000000 
f0003d66 l       .text  00000000 
f0003d6a l       .text  00000000 
f0003d6c l       .text  00000000 
f0003d6c l       .text  00000000 
f0003d72 l       .text  00000000 
f0003d78 l       .text  00000000 
f0003d7c l       .text  00000000 
f0003d80 l       .text  00000000 
f0003d84 l       .text  00000000 
f0003d8e l       .text  00000000 
f0003d8e l       .text  00000000 
f0003d92 l       .text  00000000 
f0003d96 l       .text  00000000 
f0003d9a l       .text  00000000 
f0003d9a l       .text  00000000 
e00020a4 l     O .bss   00000004 xSchedulerRunning
f0003d9e l       .text  00000000 
f0003da2 l       .text  00000000 
f0003daa l       .text  00000000 
f0003daa l       .text  00000000 
f0003dac l       .text  00000000 
f0003db0 l       .text  00000000 
f0003db6 l       .text  00000000 
f0003dba l       .text  00000000 
e00020a0 l     O .bss   00000004 uxCurrentNumberOfTasks
f0003dba l       .text  00000000 
f0003dc8 l       .text  00000000 
e0002124 l     O .bss   00000064 pxReadyTasksLists
f0003dd4 l       .text  00000000 
f0003dd4 l       .text  00000000 
f0003dd6 l       .text  00000000 
f0003dda l       .text  00000000 
f0003ddc l       .text  00000000 
f0003de0 l       .text  00000000 
f0003de2 l       .text  00000000 
f0003de6 l       .text  00000000 
f0003dea l       .text  00000000 
f0003df0 l       .text  00000000 
f0003df0 l       .text  00000000 
f0003df8 l       .text  00000000 
f0003df8 l       .text  00000000 
f0003dfc l       .text  00000000 
f0003e02 l       .text  00000000 
f0003e06 l       .text  00000000 
f0003e0a l       .text  00000000 
f0003e0a l       .text  00000000 
f0003e0e l       .text  00000000 
f0003e0e l       .text  00000000 
f0003e10 l       .text  00000000 
f0003e12 l       .text  00000000 
e00021c4 l     O .bss   00000014 xDelayedTaskList1
f0003e14 l       .text  00000000 
f0003e1c l       .text  00000000 
f0003e20 l       .text  00000000 
e00021d8 l     O .bss   00000014 xDelayedTaskList2
f0003e20 l       .text  00000000 
f0003e2c l       .text  00000000 
e00021b0 l     O .bss   00000014 xPendingReadyList
f0003e2c l       .text  00000000 
f0003e36 l       .text  00000000 
e0002188 l     O .bss   00000014 xTasksWaitingTermination
f0003e36 l       .text  00000000 
f0003e40 l       .text  00000000 
e000219c l     O .bss   00000014 xSuspendedTaskList
f0003e40 l       .text  00000000 
f0003e4a l       .text  00000000 
e00020a8 l     O .bss   00000004 pxDelayedTaskList
f0003e4a l       .text  00000000 
e00020ac l     O .bss   00000004 pxOverflowDelayedTaskList
f0003e52 l       .text  00000000 
f0003e5a l       .text  00000000 
e0002098 l     O .bss   00000004 uxTaskNumber
f0003e5a l       .text  00000000 
f0003e68 l       .text  00000000 
e0002094 l     O .bss   00000004 uxTopReadyPriority
f0003e7c l       .text  00000000 
f0003e7c l       .text  00000000 
f0003e86 l       .text  00000000 
f0003ea0 l       .text  00000000 
f0003ea4 l       .text  00000000 
f0003ea4 l       .text  00000000 
f0003ea6 l       .text  00000000 
f0003ea6 l       .text  00000000 
f0003eac l       .text  00000000 
f0003eae l       .text  00000000 
f0003eb2 l       .text  00000000 
f0003eb2 l       .text  00000000 
f0003ec4 l       .text  00000000 
f0003ec8 l       .text  00000000 
f0003ed4 l       .text  00000000 
f0003ed4 l       .text  00000000 
e000209c l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
e00020bc l     O .bss   00000004 xNextTaskUnblockTime
f0003ed4 l       .text  00000000 
f0003ed4 l       .text  00000000 
f0003ed4 l       .text  00000000 
f0003ed4 l       .text  00000000 
f0003edc l       .text  00000000 
f0003ede l       .text  00000000 
f0003ee6 l       .text  00000000 
f0003ee8 l       .text  00000000 
f0003eea l       .text  00000000 
f0003eee l       .text  00000000 
f0003ef4 l       .text  00000000 
f0003ef8 l       .text  00000000 
f0003efa l       .text  00000000 
f0003efc l       .text  00000000 
f0003f06 l       .text  00000000 
f0003f0a l       .text  00000000 
f0003f14 l       .text  00000000 
f0003f14 l       .text  00000000 
f0003f14 l       .text  00000000 
f0003f14 l       .text  00000000 
f0003f14 l       .text  00000000 
f0003f16 l       .text  00000000 
f0003f16 l       .text  00000000 
f0003f1a l       .text  00000000 
e00020b0 l     O .bss   00000004 uxSchedulerSuspended
f0003f22 l       .text  00000000 
e00020b4 l     O .bss   00000004 xYieldPending
f0003f24 l       .text  00000000 
f0003f30 l       .text  00000000 
f0003f38 l       .text  00000000 
f0003f40 l       .text  00000000 
f0003f50 l       .text  00000000 
f0003f54 l       .text  00000000 
f0003f64 l       .text  00000000 
f0003f64 l       .text  00000000 
f0003f74 l       .text  00000000 
f0003f74 l       .text  00000000 
f0003f78 l       .text  00000000 
f0003f88 l       .text  00000000 
f0003f8c l       .text  00000000 
f0003f92 l       .text  00000000 
f0003f94 l       .text  00000000 
f0003f96 l       .text  00000000 
f0003f98 l       .text  00000000 
f0003f9e l       .text  00000000 
f0003f9e l       .text  00000000 
f0003fa2 l       .text  00000000 
f0003fae l       .text  00000000 
f0003fae l       .text  00000000 
f0003fae l       .text  00000000 
f0003fae l       .text  00000000 
f0003fae l       .text  00000000 
f0003fb0 l       .text  00000000 
f0003fb0 l       .text  00000000 
f0003fb2 l       .text  00000000 
f0004014 l     F .text  00000084 prvIdleTask
e00020b8 l     O .bss   00000004 xIdleTaskHandle
f0003fd6 l       .text  00000000 
f0003fd6 l       .text  00000000 
f0003fd8 l       .text  00000000 
f0003fd8 l       .text  00000000 
f0003fdc l       .text  00000000 
f0003fe0 l       .text  00000000 
f0003fe4 l       .text  00000000 
f0003fe4 l       .text  00000000 
f0003fe6 l       .text  00000000 
f0003fea l       .text  00000000 
e00020c0 l     O .bss   00000004 xTickCount
f0003ff2 l       .text  00000000 
f0003ffa l       .text  00000000 
f0003ffe l       .text  00000000 
f0003ffe l       .text  00000000 
f0004006 l       .text  00000000 
f0004008 l       .text  00000000 
f0004014 l       .text  00000000 
f0004014 l       .text  00000000 
f0004014 l       .text  00000000 
f0004014 l       .text  00000000 
f0004014 l       .text  00000000 
f0004016 l       .text  00000000 
f0004024 l       .text  00000000 
f0004038 l       .text  00000000 
f0004038 l       .text  00000000 
f000403c l       .text  00000000 
f000403e l       .text  00000000 
f000403e l       .text  00000000 
f0004042 l       .text  00000000 
f0004046 l       .text  00000000 
f0004048 l       .text  00000000 
f000404c l       .text  00000000 
f0004052 l       .text  00000000 
f0004056 l       .text  00000000 
f0004056 l       .text  00000000 
f000405c l       .text  00000000 
f000405c l       .text  00000000 
f0004060 l       .text  00000000 
f0004062 l       .text  00000000 
f0004062 l       .text  00000000 
f000406c l       .text  00000000 
f0004076 l       .text  00000000 
f0004078 l       .text  00000000 
f0004078 l       .text  00000000 
f000407a l       .text  00000000 
f000407c l       .text  00000000 
f000407c l       .text  00000000 
f0004080 l       .text  00000000 
f0004080 l       .text  00000000 
f0004082 l       .text  00000000 
f000408a l       .text  00000000 
f0004090 l       .text  00000000 
f0004098 l       .text  00000000 
f0004098 l       .text  00000000 
f0004098 l       .text  00000000 
f0004098 l       .text  00000000 
f0004098 l       .text  00000000 
f0004098 l       .text  00000000 
f00040a6 l       .text  00000000 
f00040a6 l       .text  00000000 
f00040b0 l       .text  00000000 
f00040b0 l       .text  00000000 
f00040b0 l       .text  00000000 
f00040b0 l       .text  00000000 
f00040b0 l       .text  00000000 
f00040b2 l       .text  00000000 
f00040b2 l       .text  00000000 
f00040bc l       .text  00000000 
f00040bc l       .text  00000000 
f00040bc l       .text  00000000 
f00040c0 l       .text  00000000 
f00040c8 l       .text  00000000 
f00040ca l       .text  00000000 
f00040d2 l       .text  00000000 
f00040d8 l       .text  00000000 
f00040dc l       .text  00000000 
f00040dc l       .text  00000000 
f00040ea l       .text  00000000 
f00040ee l       .text  00000000 
f00040f0 l       .text  00000000 
f00040f8 l       .text  00000000 
f00040fa l       .text  00000000 
f0004108 l       .text  00000000 
f000410a l       .text  00000000 
f000411c l       .text  00000000 
f000411c l       .text  00000000 
f0004120 l       .text  00000000 
f0004120 l       .text  00000000 
f0004126 l       .text  00000000 
f000412c l       .text  00000000 
f000412e l       .text  00000000 
f0004136 l       .text  00000000 
f0004138 l       .text  00000000 
f0004142 l       .text  00000000 
f0004142 l       .text  00000000 
f0004142 l       .text  00000000 
f0004142 l       .text  00000000 
f0004144 l       .text  00000000 
f0004148 l       .text  00000000 
f000414e l       .text  00000000 
f0004150 l       .text  00000000 
f0004158 l       .text  00000000 
f000415a l       .text  00000000 
f0004160 l       .text  00000000 
f0004160 l       .text  00000000 
f0004166 l       .text  00000000 
f000416e l       .text  00000000 
f000416e l       .text  00000000 
f0004178 l       .text  00000000 
f000418c l       .text  00000000 
f000418c l       .text  00000000 
f0004190 l       .text  00000000 
f0004192 l       .text  00000000 
f0004196 l       .text  00000000 
f0004196 l       .text  00000000 
f000419a l       .text  00000000 
f000419a l       .text  00000000 
f000419c l       .text  00000000 
f000419e l       .text  00000000 
f000419e l       .text  00000000 
f00041a8 l       .text  00000000 
f00041aa l       .text  00000000 
f00041b4 l       .text  00000000 
f00041b4 l       .text  00000000 
f00041bc l       .text  00000000 
f00041c6 l       .text  00000000 
e00020c4 l     O .bss   00000004 xPendedTicks
f00041c6 l       .text  00000000 
f00041ce l       .text  00000000 
f00041ce l       .text  00000000 
f00041d0 l       .text  00000000 
f00041d2 l       .text  00000000 
f00041d2 l       .text  00000000 
f00041d4 l       .text  00000000 
f00041d6 l       .text  00000000 
f00041da l       .text  00000000 
f00041da l       .text  00000000 
f00041de l       .text  00000000 
f00041e2 l       .text  00000000 
f00041e2 l       .text  00000000 
f00041ee l       .text  00000000 
f00041f2 l       .text  00000000 
f00041fa l       .text  00000000 
f00041fa l       .text  00000000 
f00041fa l       .text  00000000 
f00041fa l       .text  00000000 
f00041fa l       .text  00000000 
f00041fa l       .text  00000000 
f0004202 l       .text  00000000 
f0004204 l       .text  00000000 
f0004214 l       .text  00000000 
f0004214 l       .text  00000000 
f000421c l       .text  00000000 
f000421c l       .text  00000000 
f0004224 l       .text  00000000 
f0004226 l       .text  00000000 
f0004226 l       .text  00000000 
f0004232 l       .text  00000000 
f0004236 l       .text  00000000 
f0004236 l       .text  00000000 
f000423a l       .text  00000000 
e00020c8 l     O .bss   00000004 xNumOfOverflows
f000424e l       .text  00000000 
f0004258 l       .text  00000000 
f0004258 l       .text  00000000 
f000425e l       .text  00000000 
f0004260 l       .text  00000000 
f000426a l       .text  00000000 
f000426a l       .text  00000000 
f0004272 l       .text  00000000 
f0004278 l       .text  00000000 
f0004278 l       .text  00000000 
f000427c l       .text  00000000 
f0004280 l       .text  00000000 
f0004286 l       .text  00000000 
f0004288 l       .text  00000000 
f0004294 l       .text  00000000 
f000429c l       .text  00000000 
f000429c l       .text  00000000 
f000429e l       .text  00000000 
f000429e l       .text  00000000 
f00042a2 l       .text  00000000 
f00042a2 l       .text  00000000 
f00042a4 l       .text  00000000 
f00042a8 l       .text  00000000 
f00042ae l       .text  00000000 
f00042b0 l       .text  00000000 
f00042b0 l       .text  00000000 
f00042b4 l       .text  00000000 
f00042b4 l       .text  00000000 
f00042b8 l       .text  00000000 
f00042ba l       .text  00000000 
f00042c0 l       .text  00000000 
f00042c0 l       .text  00000000 
f00042c2 l       .text  00000000 
f00042c2 l       .text  00000000 
f00042c4 l       .text  00000000 
f00042c4 l       .text  00000000 
f00042ce l       .text  00000000 
f00042d0 l       .text  00000000 
f00042d0 l       .text  00000000 
f00042d4 l       .text  00000000 
f00042d4 l       .text  00000000 
f00042d8 l       .text  00000000 
f00042da l       .text  00000000 
f00042e4 l       .text  00000000 
f00042e4 l       .text  00000000 
f00042f2 l       .text  00000000 
f00042f2 l       .text  00000000 
f00042fc l       .text  00000000 
f000430c l       .text  00000000 
f0004310 l       .text  00000000 
f0004310 l       .text  00000000 
f0004316 l       .text  00000000 
f0004318 l       .text  00000000 
f0004318 l       .text  00000000 
f000431a l       .text  00000000 
f0004320 l       .text  00000000 
f0004320 l       .text  00000000 
f0004328 l       .text  00000000 
f0004328 l       .text  00000000 
f000432c l       .text  00000000 
f000432c l       .text  00000000 
f0004330 l       .text  00000000 
f0004338 l       .text  00000000 
f0004338 l       .text  00000000 
0000c716 l       .debug_loc     00000000 
0000c752 l       .debug_loc     00000000 
0000c78e l       .debug_loc     00000000 
0000c7ca l       .debug_loc     00000000 
0000c811 l       .debug_loc     00000000 
0000c84d l       .debug_loc     00000000 
0000c889 l       .debug_loc     00000000 
0000c8ba l       .debug_loc     00000000 
0000c901 l       .debug_loc     00000000 
0000c929 l       .debug_loc     00000000 
0000c94f l       .debug_loc     00000000 
0000c975 l       .debug_loc     00000000 
0000c9a6 l       .debug_loc     00000000 
0000c9cc l       .debug_loc     00000000 
0000c9f2 l       .debug_loc     00000000 
0000ca18 l       .debug_loc     00000000 
0000ca3e l       .debug_loc     00000000 
0000ca6f l       .debug_loc     00000000 
0000ca9f l       .debug_loc     00000000 
0000cac5 l       .debug_loc     00000000 
0000cafe l       .debug_loc     00000000 
0000cb19 l       .debug_loc     00000000 
0000cb34 l       .debug_loc     00000000 
0000cb5a l       .debug_loc     00000000 
0000cb8b l       .debug_loc     00000000 
0000cbc7 l       .debug_loc     00000000 
0000cc03 l       .debug_loc     00000000 
0000cc29 l       .debug_loc     00000000 
0000cc4f l       .debug_loc     00000000 
0000cc75 l       .debug_loc     00000000 
0000cc90 l       .debug_loc     00000000 
0000ccab l       .debug_loc     00000000 
0000ccc6 l       .debug_loc     00000000 
0000cce1 l       .debug_loc     00000000 
0000ccfc l       .debug_loc     00000000 
0000cd17 l       .debug_loc     00000000 
0000cd32 l       .debug_loc     00000000 
0000cd58 l       .debug_loc     00000000 
0000cd7e l       .debug_loc     00000000 
0000cd9a l       .debug_loc     00000000 
0000cdb5 l       .debug_loc     00000000 
0000cdd0 l       .debug_loc     00000000 
0000cdeb l       .debug_loc     00000000 
0000ce06 l       .debug_loc     00000000 
0000ce2c l       .debug_loc     00000000 
0000ce68 l       .debug_loc     00000000 
0000ce83 l       .debug_loc     00000000 
0000ceb4 l       .debug_loc     00000000 
0000cee5 l       .debug_loc     00000000 
0000cf01 l       .debug_loc     00000000 
0000cf1c l       .debug_loc     00000000 
0000cf58 l       .debug_loc     00000000 
0000cf94 l       .debug_loc     00000000 
0000cfb0 l       .debug_loc     00000000 
0000cfe4 l       .debug_loc     00000000 
0000d02e l       .debug_loc     00000000 
0000d049 l       .debug_loc     00000000 
0000d064 l       .debug_loc     00000000 
0000d07f l       .debug_loc     00000000 
0000d0a6 l       .debug_loc     00000000 
0000d0ce l       .debug_loc     00000000 
0000d0e9 l       .debug_loc     00000000 
0000d104 l       .debug_loc     00000000 
0000d11f l       .debug_loc     00000000 
0000d13a l       .debug_loc     00000000 
0000d17a l       .debug_loc     00000000 
0000d1ab l       .debug_loc     00000000 
0000d1c6 l       .debug_loc     00000000 
0000d1ec l       .debug_loc     00000000 
0000d212 l       .debug_loc     00000000 
0000d22d l       .debug_loc     00000000 
0000d248 l       .debug_loc     00000000 
0000d263 l       .debug_loc     00000000 
0000d27e l       .debug_loc     00000000 
0000d299 l       .debug_loc     00000000 
0000d2b4 l       .debug_loc     00000000 
0000d2cf l       .debug_loc     00000000 
0000d2f5 l       .debug_loc     00000000 
0000d32b l       .debug_loc     00000000 
0000d346 l       .debug_loc     00000000 
0000d361 l       .debug_loc     00000000 
0000d37c l       .debug_loc     00000000 
0000d3c4 l       .debug_loc     00000000 
0000d3df l       .debug_loc     00000000 
0000d406 l       .debug_loc     00000000 
0000d42e l       .debug_loc     00000000 
0000d449 l       .debug_loc     00000000 
0000d464 l       .debug_loc     00000000 
0000d47f l       .debug_loc     00000000 
0000d49b l       .debug_loc     00000000 
0000d4cc l       .debug_loc     00000000 
0000d4fd l       .debug_loc     00000000 
0000d524 l       .debug_loc     00000000 
0000d53f l       .debug_loc     00000000 
0000d55a l       .debug_loc     00000000 
0000d58b l       .debug_loc     00000000 
0000d5bc l       .debug_loc     00000000 
0000d5ed l       .debug_loc     00000000 
0000d621 l       .debug_loc     00000000 
0000d647 l       .debug_loc     00000000 
0000d662 l       .debug_loc     00000000 
0000d67d l       .debug_loc     00000000 
0000d698 l       .debug_loc     00000000 
0000d6be l       .debug_loc     00000000 
0000d6d9 l       .debug_loc     00000000 
0000d6f4 l       .debug_loc     00000000 
0000d71a l       .debug_loc     00000000 
0000d735 l       .debug_loc     00000000 
0000d750 l       .debug_loc     00000000 
0000d76b l       .debug_loc     00000000 
0000d786 l       .debug_loc     00000000 
0000d7b8 l       .debug_loc     00000000 
0000d7d3 l       .debug_loc     00000000 
0000d7ee l       .debug_loc     00000000 
0000d809 l       .debug_loc     00000000 
0000d824 l       .debug_loc     00000000 
0000d83f l       .debug_loc     00000000 
0000d85a l       .debug_loc     00000000 
0000d875 l       .debug_loc     00000000 
0000d890 l       .debug_loc     00000000 
0000d8cc l       .debug_loc     00000000 
0000d908 l       .debug_loc     00000000 
0000d92e l       .debug_loc     00000000 
0000d949 l       .debug_loc     00000000 
0000d970 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006caf l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000011a0 l       .debug_ranges  00000000 
00004f55 l       .debug_str     00000000 
00006db9 l       .debug_str     00000000 
00006db2 l       .debug_str     00000000 
00001286 l       .debug_str     00000000 
00006cc9 l       .debug_str     00000000 
00006ce2 l       .debug_str     00000000 
00007628 l       .debug_str     00000000 
00006d7e l       .debug_str     00000000 
00006d89 l       .debug_str     00000000 
00001519 l       .debug_str     00000000 
00006d91 l       .debug_str     00000000 
00006da3 l       .debug_str     00000000 
00006cd6 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00006d62 l       .debug_str     00000000 
00006d73 l       .debug_str     00000000 
00006cf1 l       .debug_str     00000000 
00006d07 l       .debug_str     00000000 
00006d0e l       .debug_str     00000000 
00006d19 l       .debug_str     00000000 
00006d21 l       .debug_str     00000000 
00006cfc l       .debug_str     00000000 
00006d6d l       .debug_str     00000000 
00006d2d l       .debug_str     00000000 
00006d3d l       .debug_str     00000000 
00006d45 l       .debug_str     00000000 
00001234 l       .debug_str     00000000 
00006d5e l       .debug_str     00000000 
00006d4e l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
00006dbf l       .debug_str     00000000 
00006dd1 l       .debug_str     00000000 
00006de3 l       .debug_str     00000000 
00006dea l       .debug_str     00000000 
00006dfc l       .debug_str     00000000 
00006e16 l       .debug_str     00000000 
00006e28 l       .debug_str     00000000 
00006e41 l       .debug_str     00000000 
00006e54 l       .debug_str     00000000 
00006e66 l       .debug_str     00000000 
00006e78 l       .debug_str     00000000 
00006e8b l       .debug_str     00000000 
00006e98 l       .debug_str     00000000 
00006eb5 l       .debug_str     00000000 
00006ecc l       .debug_str     00000000 
00001235 l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00006ede l       .debug_str     00000000 
00006ef3 l       .debug_str     00000000 
00006f01 l       .debug_str     00000000 
0000129a l       .debug_str     00000000 
00006f11 l       .debug_str     00000000 
00006f26 l       .debug_str     00000000 
00006f31 l       .debug_str     00000000 
00006f3e l       .debug_str     00000000 
00006f4e l       .debug_str     00000000 
00006f57 l       .debug_str     00000000 
00006f5e l       .debug_str     00000000 
00006f67 l       .debug_str     00000000 
00006f72 l       .debug_str     00000000 
00006f7b l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00006f84 l       .debug_str     00000000 
00006f99 l       .debug_str     00000000 
00006fa4 l       .debug_str     00000000 
00006fab l       .debug_str     00000000 
00006fb8 l       .debug_str     00000000 
00006fc5 l       .debug_str     00000000 
00006fd3 l       .debug_str     00000000 
00006fdc l       .debug_str     00000000 
000068ee l       .debug_str     00000000 
0000125f l       .debug_str     00000000 
0000701f l       .debug_str     00000000 
00007010 l       .debug_str     00000000 
00006fe5 l       .debug_str     00000000 
00006ff3 l       .debug_str     00000000 
00007003 l       .debug_str     00000000 
0000702e l       .debug_str     00000000 
00007041 l       .debug_str     00000000 
0000705a l       .debug_str     00000000 
00001253 l       .debug_str     00000000 
00007417 l       .debug_str     00000000 
00007599 l       .debug_str     00000000 
00001110 l       .debug_ranges  00000000 
00001128 l       .debug_ranges  00000000 
00007071 l       .debug_str     00000000 
0000707e l       .debug_str     00000000 
00007088 l       .debug_str     00000000 
0000709c l       .debug_str     00000000 
000070b2 l       .debug_str     00000000 
000071cc l       .debug_str     00000000 
000070c2 l       .debug_str     00000000 
000070cf l       .debug_str     00000000 
000070d5 l       .debug_str     00000000 
000012a7 l       .debug_str     00000000 
00007424 l       .debug_str     00000000 
00001140 l       .debug_ranges  00000000 
000070f1 l       .debug_str     00000000 
000070fe l       .debug_str     00000000 
000071de l       .debug_str     00000000 
00001513 l       .debug_str     00000000 
00007432 l       .debug_str     00000000 
0000743e l       .debug_str     00000000 
0000744c l       .debug_str     00000000 
00007464 l       .debug_str     00000000 
000071f7 l       .debug_str     00000000 
0000746c l       .debug_str     00000000 
00007209 l       .debug_str     00000000 
00007475 l       .debug_str     00000000 
00007222 l       .debug_str     00000000 
0000748b l       .debug_str     00000000 
00007499 l       .debug_str     00000000 
000074a8 l       .debug_str     00000000 
000074be l       .debug_str     00000000 
00007233 l       .debug_str     00000000 
000074d4 l       .debug_str     00000000 
00001240 l       .debug_str     00000000 
000074e3 l       .debug_str     00000000 
000074f1 l       .debug_str     00000000 
000014f5 l       .debug_str     00000000 
0000710d l       .debug_str     00000000 
00007240 l       .debug_str     00000000 
000074fd l       .debug_str     00000000 
0000724c l       .debug_str     00000000 
0000750b l       .debug_str     00000000 
00001350 l       .debug_str     00000000 
000015a7 l       .debug_str     00000000 
00007124 l       .debug_str     00000000 
0000725f l       .debug_str     00000000 
0000726b l       .debug_str     00000000 
00007144 l       .debug_str     00000000 
0000727d l       .debug_str     00000000 
00007522 l       .debug_str     00000000 
00007532 l       .debug_str     00000000 
00007539 l       .debug_str     00000000 
0000728c l       .debug_str     00000000 
00007547 l       .debug_str     00000000 
00007557 l       .debug_str     00000000 
00007567 l       .debug_str     00000000 
00001158 l       .debug_ranges  00000000 
00001170 l       .debug_ranges  00000000 
0000729f l       .debug_str     00000000 
0000756e l       .debug_str     00000000 
000072b1 l       .debug_str     00000000 
000072ca l       .debug_str     00000000 
000012b3 l       .debug_str     00000000 
00007575 l       .debug_str     00000000 
00007156 l       .debug_str     00000000 
000072e1 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
00007590 l       .debug_str     00000000 
000072f0 l       .debug_str     00000000 
00007598 l       .debug_str     00000000 
000075a1 l       .debug_str     00000000 
000075ac l       .debug_str     00000000 
000075b7 l       .debug_str     00000000 
000075c1 l       .debug_str     00000000 
00007311 l       .debug_str     00000000 
000075cb l       .debug_str     00000000 
000075db l       .debug_str     00000000 
00007323 l       .debug_str     00000000 
00007333 l       .debug_str     00000000 
000075ea l       .debug_str     00000000 
00007638 l       .debug_str     00000000 
00007166 l       .debug_str     00000000 
00007349 l       .debug_str     00000000 
000075f6 l       .debug_str     00000000 
0000760c l       .debug_str     00000000 
00007368 l       .debug_str     00000000 
00007387 l       .debug_str     00000000 
00007618 l       .debug_str     00000000 
000073a0 l       .debug_str     00000000 
00007627 l       .debug_str     00000000 
00001188 l       .debug_ranges  00000000 
000073c2 l       .debug_str     00000000 
0000718f l       .debug_str     00000000 
00007172 l       .debug_str     00000000 
000071c2 l       .debug_str     00000000 
000071b8 l       .debug_str     00000000 
00007199 l       .debug_str     00000000 
000071a8 l       .debug_str     00000000 
000073d7 l       .debug_str     00000000 
00007637 l       .debug_str     00000000 
00007645 l       .debug_str     00000000 
000073ec l       .debug_str     00000000 
000073fd l       .debug_str     00000000 
000071ec l       .debug_str     00000000 
0000127d l       .debug_str     00000000 
0000126e l       .debug_str     00000000 
000013b8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 list.c
f0004338 l       .text  00000000 
f0004338 l       .text  00000000 
f0004338 l       .text  00000000 
f0004338 l       .text  00000000 
f000433c l       .text  00000000 
f0004340 l       .text  00000000 
f0004342 l       .text  00000000 
f0004344 l       .text  00000000 
f0004346 l       .text  00000000 
f000434a l       .text  00000000 
f000434c l       .text  00000000 
f0004354 l       .text  00000000 
f0004354 l       .text  00000000 
f0004354 l       .text  00000000 
f0004354 l       .text  00000000 
f0004354 l       .text  00000000 
f0004354 l       .text  00000000 
f0004358 l       .text  00000000 
f000435a l       .text  00000000 
f0004362 l       .text  00000000 
f0004362 l       .text  00000000 
f0004362 l       .text  00000000 
f0004362 l       .text  00000000 
f0004362 l       .text  00000000 
f0004362 l       .text  00000000 
f0004364 l       .text  00000000 
f0004366 l       .text  00000000 
f0004368 l       .text  00000000 
f0004368 l       .text  00000000 
f000436a l       .text  00000000 
f000436c l       .text  00000000 
f000436e l       .text  00000000 
f0004370 l       .text  00000000 
f0004374 l       .text  00000000 
f0004376 l       .text  00000000 
f000437a l       .text  00000000 
f000437c l       .text  00000000 
f0004380 l       .text  00000000 
f0004382 l       .text  00000000 
f0004384 l       .text  00000000 
f000438c l       .text  00000000 
f000438c l       .text  00000000 
0000d98b l       .debug_loc     00000000 
0000d9a6 l       .debug_loc     00000000 
0000d9c1 l       .debug_loc     00000000 
0000d9dc l       .debug_loc     00000000 
0000d9f7 l       .debug_loc     00000000 
0000da12 l       .debug_loc     00000000 
0000da38 l       .debug_loc     00000000 
0000da5e l       .debug_loc     00000000 
0000da84 l       .debug_loc     00000000 
0000daaa l       .debug_loc     00000000 
0000dac5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00007652 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000012c8 l       .debug_ranges  00000000 
00006d62 l       .debug_str     00000000 
00006d73 l       .debug_str     00000000 
00006cf1 l       .debug_str     00000000 
00006d07 l       .debug_str     00000000 
00006d0e l       .debug_str     00000000 
00006d19 l       .debug_str     00000000 
00006d21 l       .debug_str     00000000 
00006cfc l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00006d6d l       .debug_str     00000000 
00006d2d l       .debug_str     00000000 
00006d3d l       .debug_str     00000000 
00006d45 l       .debug_str     00000000 
00001234 l       .debug_str     00000000 
00006d5e l       .debug_str     00000000 
00006d4e l       .debug_str     00000000 
000070b2 l       .debug_str     00000000 
00007532 l       .debug_str     00000000 
00007088 l       .debug_str     00000000 
0000766b l       .debug_str     00000000 
000070fe l       .debug_str     00000000 
00007672 l       .debug_str     00000000 
00007166 l       .debug_str     00000000 
00007680 l       .debug_str     00000000 
00007692 l       .debug_str     00000000 
000070f1 l       .debug_str     00000000 
0000769d l       .debug_str     00000000 
00006de3 l       .debug_str     00000000 
000016f8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 heap_1.c
f000438c l       .text  00000000 
f000438c l       .text  00000000 
f000438c l       .text  00000000 
f000438e l       .text  00000000 
f0004396 l       .text  00000000 
f0004398 l       .text  00000000 
f0004398 l       .text  00000000 
f000439a l       .text  00000000 
f000439c l       .text  00000000 
f00043aa l       .text  00000000 
f00043ac l       .text  00000000 
f00043ac l       .text  00000000 
f00043b0 l       .text  00000000 
e00020cc l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
f00043b0 l       .text  00000000 
f00043b8 l       .text  00000000 
f00043ba l       .text  00000000 
f00043be l       .text  00000000 
f00043c6 l       .text  00000000 
f00043c6 l       .text  00000000 
f00043d4 l       .text  00000000 
e00020d0 l     O .bss   00000004 xNextFreeByte
f00043d6 l       .text  00000000 
f00043de l       .text  00000000 
f00043e0 l       .text  00000000 
f00043e0 l       .text  00000000 
f00043ec l       .text  00000000 
f00043f0 l       .text  00000000 
f00043f0 l       .text  00000000 
f00043f4 l       .text  00000000 
f00043f8 l       .text  00000000 
f00043f8 l       .text  00000000 
f00043fa l       .text  00000000 
f00043fe l       .text  00000000 
f0004400 l       .text  00000000 
f0004408 l       .text  00000000 
f0004408 l       .text  00000000 
f000440c l       .text  00000000 
f000440c l       .text  00000000 
f0004410 l       .text  00000000 
f0004410 l       .text  00000000 
f0004412 l       .text  00000000 
f000441a l       .text  00000000 
f0004426 l       .text  00000000 
f0004426 l       .text  00000000 
f0004426 l       .text  00000000 
f0004426 l       .text  00000000 
f0004426 l       .text  00000000 
f0004426 l       .text  00000000 
f0004428 l       .text  00000000 
f0004430 l       .text  00000000 
f0004430 l       .text  00000000 
0000dae0 l       .debug_loc     00000000 
0000db1c l       .debug_loc     00000000 
0000db5b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000076ac l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000012f8 l       .debug_ranges  00000000 
00007071 l       .debug_str     00000000 
000076d8 l       .debug_str     00000000 
00007720 l       .debug_str     00000000 
0000772c l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
0000051b l       .debug_str     00000000 
000076e7 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00007156 l       .debug_str     00000000 
0000727d l       .debug_str     00000000 
00001235 l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
000014d8 l       .debug_str     00000000 
0000707e l       .debug_str     00000000 
00007735 l       .debug_str     00000000 
000076f5 l       .debug_str     00000000 
0000770b l       .debug_str     00000000 
0000175c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
f0004430 l       .text  00000000 
f0004430 l       .text  00000000 
f0004430 l       .text  00000000 
f0004430 l       .text  00000000 
f000443c l       .text  00000000 
f000443c l       .text  00000000 
f000443c l       .text  00000000 
f000443c l       .text  00000000 
f000443c l       .text  00000000 
f000443c l       .text  00000000 
f0004448 l       .text  00000000 
f0004448 l       .text  00000000 
00000000 l       .debug_str     00000000 
00007738 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00001320 l       .debug_ranges  00000000 
00001381 l       .debug_str     00000000 
0000139c l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
000017bc l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
0000db76 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000776e l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00001338 l       .debug_ranges  00000000 
00007798 l       .debug_str     00000000 
000077a4 l       .debug_str     00000000 
00001228 l       .debug_str     00000000 
000011c5 l       .debug_str     00000000 
000011d2 l       .debug_str     00000000 
000011e6 l       .debug_str     00000000 
000011f7 l       .debug_str     00000000 
00001208 l       .debug_str     00000000 
00001219 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000077b2 l       .debug_str     00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
000077c2 l       .debug_str     00000000 
000077e0 l       .debug_str     00000000 
000077f7 l       .debug_str     00000000 
00007807 l       .debug_str     00000000 
00007817 l       .debug_str     00000000 
00007825 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
00007833 l       .debug_str     00000000 
00007848 l       .debug_str     00000000 
0000785f l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00007878 l       .debug_str     00000000 
00006208 l       .debug_str     00000000 
0000113a l       .debug_str     00000000 
00007894 l       .debug_str     00000000 
000017f0 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
000078ae l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000078d8 l       .debug_str     00000000 
00005570 l       .debug_str     00000000 
00005508 l       .debug_str     00000000 
000050ac l       .debug_str     00000000 
000050ce l       .debug_str     00000000 
000050ee l       .debug_str     00000000 
0000510e l       .debug_str     00000000 
0000512e l       .debug_str     00000000 
0000514e l       .debug_str     00000000 
0000516d l       .debug_str     00000000 
00005191 l       .debug_str     00000000 
000051b0 l       .debug_str     00000000 
000051cf l       .debug_str     00000000 
000051ee l       .debug_str     00000000 
00005210 l       .debug_str     00000000 
00005232 l       .debug_str     00000000 
00005254 l       .debug_str     00000000 
0000527b l       .debug_str     00000000 
0000529e l       .debug_str     00000000 
000052c1 l       .debug_str     00000000 
000052e2 l       .debug_str     00000000 
00005306 l       .debug_str     00000000 
0000532e l       .debug_str     00000000 
00005353 l       .debug_str     00000000 
00005379 l       .debug_str     00000000 
000053a1 l       .debug_str     00000000 
000053c4 l       .debug_str     00000000 
000053e8 l       .debug_str     00000000 
00005407 l       .debug_str     00000000 
00005426 l       .debug_str     00000000 
00005445 l       .debug_str     00000000 
00005466 l       .debug_str     00000000 
00005486 l       .debug_str     00000000 
000054ab l       .debug_str     00000000 
000054ca l       .debug_str     00000000 
000054e9 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00007903 l       .debug_str     00000000 
00007f00 l       .debug_str     00000000 
00007ee2 l       .debug_str     00000000 
00007925 l       .debug_str     00000000 
00007946 l       .debug_str     00000000 
00007967 l       .debug_str     00000000 
00007988 l       .debug_str     00000000 
000079a9 l       .debug_str     00000000 
000079c9 l       .debug_str     00000000 
000079ee l       .debug_str     00000000 
00007a0e l       .debug_str     00000000 
00007a2e l       .debug_str     00000000 
00007a4e l       .debug_str     00000000 
00007a71 l       .debug_str     00000000 
00007a94 l       .debug_str     00000000 
00007ab7 l       .debug_str     00000000 
00007ad9 l       .debug_str     00000000 
00007afd l       .debug_str     00000000 
00007b21 l       .debug_str     00000000 
00007b43 l       .debug_str     00000000 
00007b68 l       .debug_str     00000000 
00007b8d l       .debug_str     00000000 
00007bb2 l       .debug_str     00000000 
00007bdb l       .debug_str     00000000 
00007c01 l       .debug_str     00000000 
00007c23 l       .debug_str     00000000 
00007c48 l       .debug_str     00000000 
00007c6f l       .debug_str     00000000 
00007c98 l       .debug_str     00000000 
00007cc2 l       .debug_str     00000000 
00007ce7 l       .debug_str     00000000 
00007d07 l       .debug_str     00000000 
00007d29 l       .debug_str     00000000 
00007d48 l       .debug_str     00000000 
00007d68 l       .debug_str     00000000 
00007d88 l       .debug_str     00000000 
00007da8 l       .debug_str     00000000 
00007dca l       .debug_str     00000000 
00007deb l       .debug_str     00000000 
00007e11 l       .debug_str     00000000 
00007e31 l       .debug_str     00000000 
00007e51 l       .debug_str     00000000 
00007e79 l       .debug_str     00000000 
00007e9c l       .debug_str     00000000 
00007ec2 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
00005c8c l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00005cd3 l       .debug_str     00000000 
00005ced l       .debug_str     00000000 
00005ce5 l       .debug_str     00000000 
0000594d l       .debug_str     00000000 
00005938 l       .debug_str     00000000 
000046f6 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00005d01 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00005d41 l       .debug_str     00000000 
00005d63 l       .debug_str     00000000 
00005d4c l       .debug_str     00000000 
00005d53 l       .debug_str     00000000 
00005d5b l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
00005d70 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00005dae l       .debug_str     00000000 
00005df4 l       .debug_str     00000000 
00005dbb l       .debug_str     00000000 
00005dcf l       .debug_str     00000000 
00005dc6 l       .debug_str     00000000 
00005ddb l       .debug_str     00000000 
00005de7 l       .debug_str     00000000 
00005dee l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_version.c
00000000 l       .debug_str     00000000 
00005e03 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00005e40 l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 rv_core_ibex_testutils.c
00000800 l     O .ot.status_create_record       00000080 rv_core_ibex_testutils_get_rnd_data.kOtStatusRecord
00000880 l     O .ot.status_create_record       00000080 rv_core_ibex_testutils_get_rnd_data.kOtStatusRecord.2
00000900 l     O .ot.status_create_record       00000080 rv_core_ibex_testutils_get_rnd_data.kOtStatusRecord.6
0000774c l       .debug_loc     00000000 
00007767 l       .debug_loc     00000000 
0000778e l       .debug_loc     00000000 
000077a9 l       .debug_loc     00000000 
0000781c l       .debug_loc     00000000 
00007837 l       .debug_loc     00000000 
000078aa l       .debug_loc     00000000 
000078c5 l       .debug_loc     00000000 
000078e1 l       .debug_loc     00000000 
00007908 l       .debug_loc     00000000 
0000792f l       .debug_loc     00000000 
00007972 l       .debug_loc     00000000 
00007999 l       .debug_loc     00000000 
000079b4 l       .debug_loc     00000000 
000079db l       .debug_loc     00000000 
00007a02 l       .debug_loc     00000000 
00007a1e l       .debug_loc     00000000 
00007a4f l       .debug_loc     00000000 
00007a80 l       .debug_loc     00000000 
00007aa6 l       .debug_loc     00000000 
00007acd l       .debug_loc     00000000 
00007af4 l       .debug_loc     00000000 
00007b0f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005f7a l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000bf8 l       .debug_ranges  00000000 
00005ed3 l       .debug_str     00000000 
00000793 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
00000269 l       .debug_str     00000000 
00001104 l       .debug_str     00000000 
00001132 l       .debug_str     00000000 
00006089 l       .debug_str     00000000 
00000ad5 l       .debug_str     00000000 
00000b70 l       .debug_ranges  00000000 
0000070e l       .debug_str     00000000 
00003d6c l       .debug_str     00000000 
00004763 l       .debug_str     00000000 
00001310 l       .debug_str     00000000 
00000960 l       .debug_str     00000000 
00000b88 l       .debug_ranges  00000000 
00000ba8 l       .debug_ranges  00000000 
0000098e l       .debug_str     00000000 
00000993 l       .debug_str     00000000 
00000bc0 l       .debug_ranges  00000000 
00000be0 l       .debug_ranges  00000000 
000007ce l       .debug_str     00000000 
000007b6 l       .debug_str     00000000 
000007a3 l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
00000253 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
000000c2 l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000249 l       .debug_str     00000000 
000063f3 l       .debug_str     00000000 
0000025c l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
0000022d l       .debug_str     00000000 
000001e7 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000043f l       .debug_str     00000000 
00000449 l       .debug_str     00000000 
00000454 l       .debug_str     00000000 
0000045f l       .debug_str     00000000 
0000046f l       .debug_str     00000000 
0000047e l       .debug_str     00000000 
0000048d l       .debug_str     00000000 
00005feb l       .debug_str     00000000 
00005fa9 l       .debug_str     00000000 
00005fc6 l       .debug_str     00000000 
00000909 l       .debug_str     00000000 
000007e8 l       .debug_str     00000000 
000007ec l       .debug_str     00000000 
000007f7 l       .debug_str     00000000 
00000800 l       .debug_str     00000000 
00000811 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
0000083c l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
00000861 l       .debug_str     00000000 
00000875 l       .debug_str     00000000 
0000087e l       .debug_str     00000000 
0000088a l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000008a3 l       .debug_str     00000000 
000008b0 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
000008cb l       .debug_str     00000000 
000006a3 l       .debug_str     00000000 
00000690 l       .debug_str     00000000 
0000091a l       .debug_str     00000000 
0000600c l       .debug_str     00000000 
0000056a l       .debug_str     00000000 
00001111 l       .debug_str     00000000 
00001100 l       .debug_str     00000000 
00000159 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00004996 l       .debug_str     00000000 
0000602c l       .debug_str     00000000 
00000998 l       .debug_str     00000000 
000009b7 l       .debug_str     00000000 
000009aa l       .debug_str     00000000 
0000620f l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
000009c6 l       .debug_str     00000000 
000009d7 l       .debug_str     00000000 
000009e4 l       .debug_str     00000000 
000009ef l       .debug_str     00000000 
0000604a l       .debug_str     00000000 
00006021 l       .debug_str     00000000 
000066bb l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00000a15 l       .debug_str     00000000 
000009af l       .debug_str     00000000 
00000a28 l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
00003f00 l       .debug_str     00000000 
00003ee1 l       .debug_str     00000000 
0000499f l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000108 l       .debug_str     00000000 
00006073 l       .debug_str     00000000 
00000944 l       .debug_str     00000000 
00000635 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059a l       .debug_str     00000000 
00000959 l       .debug_str     00000000 
00000c88 l       .debug_frame   00000000 
f00029b8 g     F .text  000000da rand_testutils_init
f007b000 g       *ABS*  00000000 _non_volatile_scratch_start
f0079800 g       *ABS*  00000000 _non_volatile_counter_3_end
f000360e g     F .text  00000032 dif_uart_irq_is_pending
f0003696 g     F .text  00000028 dif_uart_irq_disable_all
f0079000 g       *ABS*  00000000 _non_volatile_counter_3_start
f00026fc  w    F .text  00000022 ottf_instr_misaligned_fault_handler
f0002826  w    F .text  0000001c ottf_external_nmi_handler
e00027c8 g       .data  00000000 __global_pointer$
e0002080 g     O .bss   00000004 ottf_plic
e0000004 g     O .static_critical       00000020 boot_measurements
f00026fc  w    F .text  00000022 ottf_instr_access_fault_handler
f00010be g     F .text  000000fc hmac_testutils_finish_and_check_polled
f0003bd2 g     F .text  000000f6 memrchr
f00037c6 g     F .text  00000032 dif_uart_watermark_rx_set
f000383c g     F .text  00000032 dif_uart_byte_send_polled
f00026fc  w    F .text  00000022 ottf_user_ecall_handler
f0004448 g       .shutdown      00000000 _text_end
f000140c g     F .text  00000066 dif_hmac_fifo_push
f000247a g     F .text  00000026 irq_external_ctrl
f00036be g     F .text  00000022 dif_uart_irq_restore_all
f00024e8 g     F .text  0000016e ottf_generic_fault_print
d0010000 g       .manifest      00000000 _chip_info_end
e0002090 g     O .bss   00000004 pxCurrentTCB
f0002842  w    F .text  00000052 ottf_internal_isr
f0002a92 g     F .text  0000001e dif_rv_core_ibex_init
f0005ef0 g     O .rodata        000002dc top_earlgrey_plic_interrupt_for_peripheral
f0005ed8 g     O .rodata        00000008 kClockFreqPeripheralHz
f0002992 g     F .text  00000026 dif_rv_plic_irq_complete
f000196c g     F .text  0000002a xPortStartScheduler
f000394a g     F .text  0000008a memcpy
f0002752  w    F .text  000000d4 ottf_external_isr
f00026fc  w    F .text  00000022 ottf_illegal_instr_fault_handler
f0005ac4 g     O .rodata        00000004 kDifRvPlicMinPriority
f0004426 g     F .text  0000000a vPortFree
f00012fc g     F .text  0000001e dif_hmac_init
f000443c  w    F .text  0000000c manufacturer_post_test_hook
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
f00023d2 g     F .text  00000018 dif_spi_device_init_handle
e000206c g       .bss   00000000 _bss_start
f00024a0 g     F .text  00000026 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
00000000 g       *ABS*  00000000 __DYNAMIC
f0002bbe g     F .text  0000000e ibex_mepc_read
f007b000 g       *ABS*  00000000 _non_volatile_counter_0_end
f00026fc  w    F .text  00000022 ottf_load_store_fault_handler
f0000400 g       .vectors       00000000 _text_start
f00023ea g     F .text  00000050 dif_spi_device_configure
f0004354 g     F .text  0000000e vListInitialiseItem
e00021ec g     O .freertos.heap 00008000 ucHeap
f0005ac8 g     O .rodata        00000004 kDifRvPlicMaxPriority
00004448 g       *ABS*  00000000 _manifest_code_end
f0000400 g     F .vectors       00000080 _ottf_interrupt_vector
f0000548 g       .init_array    00000000 _init_array_end
f0002c80 g     F .text  0000003a base_log_internal_dv
f0006270 g       *ABS*  00000000 _data_init_end
f00036e0 g     F .text  000000e6 dif_uart_configure
f0002b94 g     F .text  0000000e abort
e0000024 g     O .static_critical       00000054 epmp_state
f000438c g     F .text  0000009a pvPortMalloc
f0004338 g     F .text  0000001c vListInitialise
f00013a6 g     F .text  00000066 dif_hmac_mode_sha256_start
e00021ec g       .bss   00000000 _bss_end
f0004430  w    F .text  0000000c manufacturer_pre_test_hook
f00014e6 g     F .text  00000086 dif_hmac_finish
f000156c g     F .text  0000004a ottf_machine_ecall_handler
f0001996 g     F .text  00000268 ottf_console_init
f00061cc g       *ABS*  00000000 _data_init_start
f0002458 g     F .text  00000022 irq_global_ctrl
f00018e0 g     F .text  0000004c vApplicationMallocFailedHook
f0000480 g     F .crt   00000068 _ottf_start
e0001fe8 g     O .data  00000084 status_codes
00001fc8 g       *ABS*  00000000 _static_critical_size
f0002894 g     F .text  0000001e dif_rv_plic_init
f00024c6 g     F .text  00000022 irq_software_ctrl
f000386e g     F .text  00000026 dif_uart_rx_bytes_available
f0002934 g     F .text  00000030 dif_rv_plic_target_set_threshold
f0002040 g     F .text  000000b2 ottf_console_flow_control
f000050c g     F .crt   0000003a crt_section_copy
f0005ee0 g     O .rodata        00000008 kUartBaudrate
f0003b04 g     F .text  000000ce memchr
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00080000 g       *ABS*  00000000 _ottf_size
f0003480 g     F .text  000000f2 status_create
f0002738  w    F .text  0000001a ottf_timer_isr
f0004098 g     F .text  00000018 vTaskSuspendAll
e0001fc8 g       .data  00000000 _data_start
f007a800 g       *ABS*  00000000 _non_volatile_counter_0_start
f0004362 g     F .text  0000002a uxListRemove
f0080000 g       .freertos.heap 00000000 _non_volatile_scratch_end
f007a000 g       *ABS*  00000000 _non_volatile_counter_2_end
f0002826  w    F .text  0000001c ottf_load_integrity_error_handler
f0079800 g       *ABS*  00000000 _non_volatile_counter_2_start
f0003f14 g     F .text  0000009a vTaskSwitchContext
f0003664 g     F .text  00000032 dif_uart_irq_set_enabled
f0002902 g     F .text  00000032 dif_rv_plic_irq_set_priority
f00026fc  w    F .text  00000022 ottf_breakpoint_handler
f0003a3a g     F .text  000000ca memcmp
00004000 g       *ABS*  00000000 _stack_size
f0000608 g     F .text  00000052 handler_exception
f0002d94 g     F .text  0000056a base_vfprintf
f000131a g     F .text  0000008c dif_hmac_mode_hmac_start
e000206c g       .data  00000000 _data_end
f000192c g     F .text  00000040 vApplicationStackOverflowHook
f0002cc6 g     F .text  0000001e base_uart_stdout
f0000758 g     F .text  00000054 handler_irq_internal
f0002d72 g     F .text  00000022 base_vprintf
f0003640 g     F .text  00000024 dif_uart_irq_acknowledge
f000271e  w    F .text  0000001a ottf_software_isr
e0000078 g     O .static_critical       00001f50 sec_mmio_ctx
f00039d4 g     F .text  00000066 memset
f0002ba2 g     F .text  0000000e ibex_mcause_read
f00006b0 g     F .text  00000054 handler_irq_timer
f0000ecc g     F .text  000001f2 hmac_testutils_finish_polled
f0001de0 g     F .text  00000260 ottf_console_flow_control_enable
f0004ab0  w    O .rodata        00000004 kStatusReportListSize
e0020000 g       .manifest      00000000 _stack_end
f0001472 g     F .text  00000026 dif_hmac_fifo_count_entries
e00020d4 g     O .bss   00000018 rand_testutils_rng_ctx
e00021ec g       .freertos.heap 00000000 _freertos_heap_start
e001c000 g       *ABS*  00000000 _stack_start
f00004e8 g     F .crt   00000024 crt_section_clear
f00040b0 g     F .text  0000014a xTaskResumeAll
f000065c g     F .text  00000054 handler_irq_software
f0005ec0 g     O .rodata        00000004 uxTopUsedPriority
f0003fae g     F .text  00000066 vTaskStartScheduler
e0000000 g     O .static_critical       00000004 static_critical_version
f0005ed0 g     O .rodata        00000008 kClockFreqCpuHz
00010000 g       *ABS*  00000000 _dv_log_offset
f0000548 g     F .text  00000052 xPortStartFirstTask
f0002656  w    F .text  000000a6 ottf_exception_handler
f0000baa g     F .text  00000136 hmac_testutils_check_message_length
d000ff80 g       *ABS*  00000000 _chip_info_start
f0000814 g     F .text  000000a4 test_main
f00028b2 g     F .text  00000050 dif_rv_plic_irq_set_enabled
f0001498 g     F .text  0000002a dif_hmac_get_message_length
f00020f2 g     F .text  000000f0 ottf_console_flow_control_isr
e00020ec  w    O .bss   00000028 status_report_list
f00041fa g     F .text  0000013e xTaskIncrementTick
f0005ee8 g     O .rodata        00000004 kDeviceTestStatusAddress
f00045d8 g     O .rodata        00000018 kOttfTestConfig
f000243a g     F .text  0000001e dif_spi_device_init
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
f0003894 g     F .text  000000b6 udiv64_slow
f0002d38 g     F .text  0000003a base_printf
f0002964 g     F .text  0000002e dif_rv_plic_irq_claim
f00037f8 g     F .text  00000044 dif_uart_bytes_send
f0005eec g     O .rodata        00000004 kDeviceLogBypassUartAddress
f0003cc8 g     F .text  0000020c xTaskCreate
f0005ecc g     O .rodata        00000004 kDeviceType
f0002bb0 g     F .text  0000000e ibex_mtval_read
f007a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
f00015e8 g     F .text  00000170 _ottf_main
00000080 g       *ABS*  00000000 _chip_info_size
f0000ce0 g     F .text  000001ec hmac_testutils_fifo_empty_polled
f0001bfe g     F .text  000001e2 ottf_console_configure_uart
f0003ed4 g     F .text  00000040 vTaskExitCritical
f000059c g     F .text  00000024 pxPortInitialiseStack
f0003572 g     F .text  0000007e status_extract
f00014c2 g     F .text  00000024 dif_hmac_process
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
f0005d28 g     O .rodata        00000004 MODULE_ID
f00018d6 g     F .text  0000000a coverage_send_buffer
f00035f0 g     F .text  0000001e dif_uart_init
f007a000 g       *ABS*  00000000 _non_volatile_counter_1_start
f0000000 g       .manifest      00000000 _ottf_start_address
f0000548 g       .init_array    00000000 _init_array_start
f00015b6 g     F .text  00000032 status_report
f0002ab0 g     F .text  000000e4 test_status_set
f0002bcc g     F .text  000000b4 base_log_internal_core
f00007ac g     F .text  00000068 ottf_isr_exit
f0000704 g     F .text  00000054 handler_irq_external
f00011ba g     F .text  00000142 hmac_testutils_push_message



Disassembly of section .vectors:

f0000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
f0000400:       2080006f                j       f0000608 <handler_exception>
f0000404:       c0001073                unimp
f0000408:       c0001073                unimp
f000040c:       2500006f                j       f000065c <handler_irq_software>
f0000410:       c0001073                unimp
f0000414:       c0001073                unimp
f0000418:       c0001073                unimp
f000041c:       2940006f                j       f00006b0 <handler_irq_timer>
f0000420:       c0001073                unimp
f0000424:       c0001073                unimp
f0000428:       c0001073                unimp
f000042c:       2d80006f                j       f0000704 <handler_irq_external>
f0000430:       c0001073                unimp
f0000434:       c0001073                unimp
f0000438:       c0001073                unimp
f000043c:       c0001073                unimp
f0000440:       c0001073                unimp
f0000444:       c0001073                unimp
f0000448:       c0001073                unimp
f000044c:       c0001073                unimp
f0000450:       c0001073                unimp
f0000454:       c0001073                unimp
f0000458:       c0001073                unimp
f000045c:       c0001073                unimp
f0000460:       c0001073                unimp
f0000464:       c0001073                unimp
f0000468:       c0001073                unimp
f000046c:       c0001073                unimp
f0000470:       c0001073                unimp
f0000474:       c0001073                unimp
f0000478:       c0001073                unimp
f000047c:       2dc0006f                j       f0000758 <handler_irq_internal>

Disassembly of section .crt:

f0000480 <_ottf_start>:
_ottf_start():
f0000480:       f0002197                auipc   gp,0xf0002
f0000484:       34818193                addi    gp,gp,840 # e00027c8 <__global_pointer$>
f0000488:       f0020117                auipc   sp,0xf0020
f000048c:       b6810113                addi    sp,sp,-1176 # e001fff0 <_stack_start+0x3ff0>
f0000490:       00000297                auipc   t0,0x0
f0000494:       f7128293                addi    t0,t0,-143 # f0000401 <_ottf_interrupt_vector+0x1>
f0000498:       30529073                csrw    mtvec,t0
f000049c:       f0002517                auipc   a0,0xf0002
f00004a0:       b2c50513                addi    a0,a0,-1236 # e0001fc8 <kHmacKey>
f00004a4:       8a418593                addi    a1,gp,-1884 # e000206c <status_report_list_cnt>
f00004a8:       00006617                auipc   a2,0x6
f00004ac:       d2460613                addi    a2,a2,-732 # f00061cc <_data_init_start>
f00004b0:       28b1                    jal     f000050c <crt_section_copy>
f00004b2:       f0002517                auipc   a0,0xf0002
f00004b6:       bba50513                addi    a0,a0,-1094 # e000206c <status_report_list_cnt>
f00004ba:       f0002597                auipc   a1,0xf0002
f00004be:       d3258593                addi    a1,a1,-718 # e00021ec <ucHeap>
f00004c2:       201d                    jal     f00004e8 <crt_section_clear>
f00004c4:       00000417                auipc   s0,0x0
f00004c8:       08440413                addi    s0,s0,132 # f0000548 <xPortStartFirstTask>
f00004cc:       00000497                auipc   s1,0x0
f00004d0:       07c48493                addi    s1,s1,124 # f0000548 <xPortStartFirstTask>
f00004d4:       00947863                bgeu    s0,s1,f00004e4 <init_array_loop_end>

f00004d8 <init_array_loop>:
f00004d8:       /-> 00042283            lw      t0,0(s0)
f00004dc:       |   9282                        jalr    t0
f00004de:       |   0411                        addi    s0,s0,4
f00004e0:       \-- fe946ce3            bltu    s0,s1,f00004d8 <init_array_loop>

f00004e4 <init_array_loop_end>:
f00004e4:       1040106f                j       f00015e8 <_ottf_main>

f00004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
f00004e8:       /-------- 00b57e63              bgeu    a0,a1,f0000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
f00004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
f00004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
f00004f4:       |  /----- 00029b63              bnez    t0,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
f00004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
f00004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
f00004fe:       |  |  \-- feb56de3              bltu    a0,a1,f00004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
f0000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
f0000504:       \--+----X 00b51363              bne     a0,a1,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
f0000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
f000050a:          \----> 0000                  unimp

f000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
f000050c:       /-------- 02b57963              bgeu    a0,a1,f000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
f0000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
f0000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
f0000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
f000051c:       |  /----- 02029463              bnez    t0,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
f0000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
f0000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
f0000528:       |  +----- 0062ee63              bltu    t0,t1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
f000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
f0000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
f0000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
f0000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
f0000538:       |  |  \-- feb56ae3              bltu    a0,a1,f000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
f000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
f000053e:       \--+----X 00b51363              bne     a0,a1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
f0000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
f0000544:          \----> 0000                  unimp

Disassembly of section .text:

f0000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
f0000548:       f0002117                auipc   sp,0xf0002
f000054c:       b4812103                lw      sp,-1208(sp) # e0002090 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
f0000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
f0000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
f000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
f0000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
f000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
f000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
f0000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
f0000598:       8082                    ret
f000059a:       0001                    nop

f000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
f000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
f00005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
f00005a4:       6309                    lui     t1,0x2
f00005a6:       88030313                addi    t1,t1,-1920 # 1880 <rv_core_ibex_testutils_get_rnd_data.kOtStatusRecord.6+0xf80>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
f00005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
f00005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
f00005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
f00005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
f00005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
f00005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
f00005be:       8082                    ret

f00005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
f00005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
f00005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
f00005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
f00005ca:       /-- 00731363            bne     t1,t2,f00005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
f00005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
f00005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
f00005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
f00005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
f00005da:       /-- 006e0463            beq     t3,t1,f00005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
f00005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
f00005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
f00005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
f00005e4:           8082                        ret
f00005e6:           0001                        nop

f00005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
f00005e8:           00004297            auipc   t0,0x4
f00005ec:           ff028293            addi    t0,t0,-16 # f00045d8 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
f00005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
f00005f4:       /-- 00030863            beqz    t1,f0000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
f00005f8:       |   f0002397            auipc   t2,0xf0002
f00005fc:       |   a983a383            lw      t2,-1384(t2) # e0002090 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
f0000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
f0000604:       \-> 8082                        ret
f0000606:           0001                        nop

f0000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
f000064a:       3f9d                    jal     f00005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
f000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000064e:       3f69                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  mv a0, sp
f0000650:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:125
  jal ottf_exception_handler
f0000652:       004020ef                jal     ra,f0002656 <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:128

  // Return from ISR.
  j ottf_isr_exit
f0000656:       1560006f                j       f00007ac <ottf_isr_exit>
f000065a:       0001                    nop

f000065c <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f000065c:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000660:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f0000662:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000664:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000666:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000668:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f000066a:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f000066c:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000066e:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000670:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000672:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000674:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000676:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000678:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f000067a:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f000067c:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000067e:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000680:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000682:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000684:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000686:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000688:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f000068a:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f000068c:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000068e:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000690:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000692:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000694:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:169
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000696:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000698:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:173
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f000069c:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000069e:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:178
  sw t0, 0(sp)
f00006a2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:182

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006a4:       3791                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:185

  // Jump to the software ISR.
  mv a0, sp
f00006a6:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:186
  jal ottf_software_isr
f00006a8:       076020ef                jal     ra,f000271e <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:189

  // Return from ISR.
  j ottf_isr_exit
f00006ac:       1000006f                j       f00007ac <ottf_isr_exit>

f00006b0 <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f00006b0:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f00006b4:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f00006b6:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f00006b8:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f00006ba:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f00006bc:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f00006be:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f00006c0:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f00006c2:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f00006c4:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f00006c6:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f00006c8:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f00006ca:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f00006cc:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f00006ce:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f00006d0:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f00006d2:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f00006d4:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f00006d6:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f00006d8:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f00006da:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f00006dc:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f00006de:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f00006e0:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f00006e2:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f00006e4:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f00006e6:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:229
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f00006e8:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:230
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f00006ea:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:233

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f00006ec:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:234
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f00006f0:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:238

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f00006f2:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:239
  sw t0, 0(sp)
f00006f6:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:243

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006f8:       3dc5                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:246

  // Jump to timer ISR.
  mv a0, sp
f00006fa:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247
  jal ottf_timer_isr
f00006fc:       03c020ef                jal     ra,f0002738 <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:250

  // Return from ISR.
  j ottf_isr_exit
f0000700:       0ac0006f                j       f00007ac <ottf_isr_exit>

f0000704 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000704:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000708:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000070a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f000070c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000070e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000710:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000712:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000714:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000716:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000718:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000071a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f000071c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000071e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000720:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000722:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000724:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000726:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000728:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000072a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f000072c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000072e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000730:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000732:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000734:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000736:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000738:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:289
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000073a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:290
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f000073c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000073e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:294

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000740:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:295
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000744:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:299

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000746:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:300
  sw t0, 0(sp)
f000074a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000074c:       3d71                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Jump to external ISR.
  mv a0, sp
f000074e:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:308
  jal ottf_external_isr
f0000750:       002020ef                jal     ra,f0002752 <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:311

  // Return from ISR.
  j ottf_isr_exit
f0000754:       0580006f                j       f00007ac <ottf_isr_exit>

f0000758 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000758:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000075c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000075e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000760:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000762:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000764:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000766:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000768:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000076a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000076c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000076e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000770:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000772:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000774:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000776:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000778:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000077a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000077c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000077e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000780:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000782:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000784:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000786:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000788:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000078a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:349
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000078c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:350
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000078e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000790:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000792:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:355

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000794:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000798:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:360

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000079a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361
  sw t0, 0(sp)
f000079e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:365

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00007a0:       35a1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:368

  // Jump to the internal ISR.
  mv a0, sp
f00007a2:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:369
  jal ottf_internal_isr
f00007a4:       09e020ef                jal     ra,f0002842 <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:372

  // Return from ISR.
  j ottf_isr_exit
f00007a8:       0040006f                j       f00007ac <ottf_isr_exit>

f00007ac <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:389
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
f00007ac:           00004297            auipc   t0,0x4
f00007b0:           e2c28293            addi    t0,t0,-468 # f00045d8 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:390
  lb t1, 0(t0)
f00007b4:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:391
  beqz t1, .L_skip_sp_restore
f00007b8:       /-- 00030863            beqz    t1,f00007c8 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
  lw  t2, pxCurrentTCB
f00007bc:       |   f0002397            auipc   t2,0xf0002
f00007c0:       |   8d43a383            lw      t2,-1836(t2) # e0002090 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  lw  sp, 0(t2)
f00007c4:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
f00007c8:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:398
  csrw mepc, t0
f00007ca:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
f00007ce:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  csrw mstatus, t0
f00007d0:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
f00007d4:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
f00007d6:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f00007d8:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f00007da:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f00007dc:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f00007de:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
f00007e0:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f00007e2:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f00007e4:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f00007e6:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f00007e8:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f00007ea:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f00007ec:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f00007ee:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f00007f0:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f00007f2:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f00007f4:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f00007f6:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f00007f8:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f00007fa:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f00007fc:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f00007fe:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000800:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000802:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:429
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000804:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:430
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000806:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:431
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000808:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f000080a:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:433
  addi sp, sp, OTTF_CONTEXT_SIZE
f000080c:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:437

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
f0000810:           30200073            mret

f0000814 <test_main>:
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:99
  CHECK_STATUS_OK(hmac_testutils_check_message_length(hmac, len * 8));
  run_hmac(hmac);
  CHECK_STATUS_OK(hmac_testutils_finish_and_check_polled(hmac, expected_digest));
}

bool test_main(void) {
f0000814:                 1141                  addi    sp,sp,-16
test_setup():
f0000816:                 c606                  sw      ra,12(sp)
f0000818:                 c422                  sw      s0,8(sp)
f000081a:                 c226                  sw      s1,4(sp)
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:65
  CHECK_DIF_OK(dif_hmac_init(base_addr, hmac));
f000081c:                 c1110537              lui     a0,0xc1110
f0000820:                 858a                  mv      a1,sp
f0000822:                 2db000ef              jal     ra,f00012fc <dif_hmac_init>
f0000826:       /-------- cd1d                  beqz    a0,f0000864 <test_main+0x50>
f0000828:       |         862a                  mv      a2,a0
f000082a:       |         00005517              auipc   a0,0x5
f000082e:       |         6c252503              lw      a0,1730(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0000832:       |  /----- cd09                  beqz    a0,f000084c <test_main+0x38>
f0000834:       |  |      1000f517              auipc   a0,0x1000f
f0000838:       |  |      7cc50513              addi    a0,a0,1996 # 10000 <_non_volatile_scratch_end+0xff90000>
f000083c:       |  |      4585                  li      a1,1
f000083e:       |  |      442020ef              jal     ra,f0002c80 <base_log_internal_dv>
f0000842:       |  |  /-- a821                  j       f000085a <test_main+0x46>
f0000844:       |  |  |   c0001073              unimp
f0000848:       |  |  |   c0001073              unimp
f000084c:       |  \--|-> 00004517              auipc   a0,0x4
f0000850:       |     |   e7450513              addi    a0,a0,-396 # f00046c0 <test_setup.log_fields>
f0000854:       |     |   85b2                  mv      a1,a2
f0000856:       |     |   376020ef              jal     ra,f0002bcc <base_log_internal_core>
f000085a:       |     \-> 6531                  lui     a0,0xc
f000085c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000860:       |         250020ef              jal     ra,f0002ab0 <test_status_set>
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:107
  int volatile * a;
  dif_hmac_t hmac;
  test_setup(mmio_region_from_addr(TOP_EARLGREY_HMAC_BASE_ADDR), &hmac);
  
  //LOG_INFO("Running test SHA256 pass 1...");
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
f0000864:       \-------> 00004517              auipc   a0,0x4
f0000868:                 e1c50413              addi    s0,a0,-484 # f0004680 <kExpectedShaDigest>
f000086c:                 850a                  mv      a0,sp
f000086e:                 4581                  li      a1,0
f0000870:                 8622                  mv      a2,s0
f0000872:                 2099                  jal     f00008b8 <run_test>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:110

  //LOG_INFO("Running test SHA256 pass 2...");
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
f0000874:                 850a                  mv      a0,sp
f0000876:                 4581                  li      a1,0
f0000878:                 8622                  mv      a2,s0
f000087a:                 283d                  jal     f00008b8 <run_test>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:113

  //LOG_INFO("Running test HMAC pass 1...");
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
f000087c:                 f0001517              auipc   a0,0xf0001
f0000880:                 74c50413              addi    s0,a0,1868 # e0001fc8 <kHmacKey>
f0000884:                 00004517              auipc   a0,0x4
f0000888:                 e1c50493              addi    s1,a0,-484 # f00046a0 <kExpectedHmacDigest>
f000088c:                 850a                  mv      a0,sp
f000088e:                 85a2                  mv      a1,s0
f0000890:                 8626                  mv      a2,s1
f0000892:                 201d                  jal     f00008b8 <run_test>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:117
           &kExpectedHmacDigest);

  //LOG_INFO("Running test HMAC pass 2...");
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
f0000894:                 850a                  mv      a0,sp
f0000896:                 85a2                  mv      a1,s0
f0000898:                 8626                  mv      a2,s1
f000089a:                 2839                  jal     f00008b8 <run_test>
f000089c:                 c11c05b7              lui     a1,0xc11c0
f00008a0:                 4605                  li      a2,1
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:122
           &kExpectedHmacDigest);
  a = (int *) 0xc11c0018;
  *a = 0x1;
  
  return true;
f00008a2:                 4505                  li      a0,1
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:120
  *a = 0x1;
f00008a4:                 cd90                  sw      a2,24(a1)
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:122
  return true;
f00008a6:                 40b2                  lw      ra,12(sp)
f00008a8:                 4422                  lw      s0,8(sp)
f00008aa:                 4492                  lw      s1,4(sp)
f00008ac:                 0141                  addi    sp,sp,16
f00008ae:                 8082                  ret
f00008b0:                 c0001073              unimp
f00008b4:                 c0001073              unimp

f00008b8 <run_test>:
run_test():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:90
                     const dif_hmac_digest_t *expected_digest) {
f00008b8:                       7179                    addi    sp,sp,-48
f00008ba:                       d606                    sw      ra,44(sp)
f00008bc:                       d422                    sw      s0,40(sp)
f00008be:                       d226                    sw      s1,36(sp)
f00008c0:                       d04a                    sw      s2,32(sp)
f00008c2:                       8932                    mv      s2,a2
f00008c4:                       84aa                    mv      s1,a0
f00008c6:                       00005417                auipc   s0,0x5
test_start():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:74
  if (key == NULL) {
f00008ca:                /----- c985                    beqz    a1,f00008fa <run_test+0x42>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:77
    CHECK_DIF_OK(dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig));
f00008cc:                |      ce02                    sw      zero,28(sp)
f00008ce:                |      cc02                    sw      zero,24(sp)
f00008d0:                |      4505                    li      a0,1
f00008d2:                |      ca2a                    sw      a0,20(sp)
f00008d4:                |      c82a                    sw      a0,16(sp)
f00008d6:                |      0810                    addi    a2,sp,16
f00008d8:                |      8526                    mv      a0,s1
f00008da:                |      241000ef                jal     ra,f000131a <dif_hmac_mode_hmac_start>
f00008de:       /--------|----- cd2d                    beqz    a0,f0000958 <run_test+0xa0>
f00008e0:       |        |      862a                    mv      a2,a0
f00008e2:       |        |      62642503                lw      a0,1574(s0) # f0005eec <kDeviceLogBypassUartAddress>
f00008e6:       |  /-----|----- c521                    beqz    a0,f000092e <run_test+0x76>
f00008e8:       |  |     |      1000f517                auipc   a0,0x1000f
f00008ec:       |  |     |      7e050513                addi    a0,a0,2016 # 100c8 <_non_volatile_scratch_end+0xff900c8>
f00008f0:       |  |     |  /-- a03d                    j       f000091e <run_test+0x66>
f00008f2:       |  |     |  |   c0001073                unimp
f00008f6:       |  |     |  |   c0001073                unimp
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:75
    CHECK_DIF_OK(dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig));
f00008fa:       |  |     \--|-> ce02                    sw      zero,28(sp)
f00008fc:       |  |        |   cc02                    sw      zero,24(sp)
f00008fe:       |  |        |   4505                    li      a0,1
f0000900:       |  |        |   ca2a                    sw      a0,20(sp)
f0000902:       |  |        |   c82a                    sw      a0,16(sp)
f0000904:       |  |        |   080c                    addi    a1,sp,16
f0000906:       |  |        |   8526                    mv      a0,s1
f0000908:       |  |        |   29f000ef                jal     ra,f00013a6 <dif_hmac_mode_sha256_start>
f000090c:       +--|--------|-- c531                    beqz    a0,f0000958 <run_test+0xa0>
f000090e:       |  |        |   862a                    mv      a2,a0
f0000910:       |  |        |   62642503                lw      a0,1574(s0)
f0000914:       |  |  /-----|-- c515                    beqz    a0,f0000940 <run_test+0x88>
f0000916:       |  |  |     |   1000f517                auipc   a0,0x1000f
f000091a:       |  |  |     |   79e50513                addi    a0,a0,1950 # 100b4 <_non_volatile_scratch_end+0xff900b4>
f000091e:       |  |  |     \-> 4585                    li      a1,1
f0000920:       |  |  |         360020ef                jal     ra,f0002c80 <base_log_internal_dv>
f0000924:       |  |  |  /----- a02d                    j       f000094e <run_test+0x96>
f0000926:       |  |  |  |      c0001073                unimp
f000092a:       |  |  |  |      c0001073                unimp
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:77
    CHECK_DIF_OK(dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig));
f000092e:       |  \--|--|----> 00004517                auipc   a0,0x4
f0000932:       |     |  |      e0a50513                addi    a0,a0,-502 # f0004738 <test_start.log_fields.30>
f0000936:       |     |  |  /-- a809                    j       f0000948 <run_test+0x90>
f0000938:       |     |  |  |   c0001073                unimp
f000093c:       |     |  |  |   c0001073                unimp
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:75
    CHECK_DIF_OK(dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig));
f0000940:       |     \--|--|-> 00004517                auipc   a0,0x4
f0000944:       |        |  |   de450513                addi    a0,a0,-540 # f0004724 <test_start.log_fields>
f0000948:       |        |  \-> 85b2                    mv      a1,a2
f000094a:       |        |      282020ef                jal     ra,f0002bcc <base_log_internal_core>
f000094e:       |        \----> 6531                    lui     a0,0xc
f0000950:       |               aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000954:       |               15c020ef                jal     ra,f0002ab0 <test_status_set>
run_test():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:92
  CHECK_STATUS_OK(hmac_testutils_push_message(hmac, data, len));
f0000958:       \-------------> 00004517                auipc   a0,0x4
f000095c:                       c9850593                addi    a1,a0,-872 # f00045f0 <kData>
f0000960:                       08e00613                li      a2,142
f0000964:                       8526                    mv      a0,s1
f0000966:                       055000ef                jal     ra,f00011ba <hmac_testutils_push_message>
f000096a:          /----------- 06055b63                bgez    a0,f00009e0 <run_test+0x128>
f000096e:          |            85aa                    mv      a1,a0
f0000970:          |            62642503                lw      a0,1574(s0)
f0000974:          |     /----- cd1d                    beqz    a0,f00009b2 <run_test+0xfa>
f0000976:          |     |      00010723                sb      zero,14(sp)
f000097a:          |     |      00011623                sh      zero,12(sp)
f000097e:          |     |      080c                    addi    a1,sp,16
f0000980:          |     |      0030                    addi    a2,sp,8
f0000982:          |     |      0074                    addi    a3,sp,12
f0000984:          |     |      3ef020ef                jal     ra,f0003572 <status_extract>
f0000988:          |  /--|----- c121                    beqz    a0,f00009c8 <run_test+0x110>
f000098a:          |  |  |      00c14603                lbu     a2,12(sp)
f000098e:          |  |  |      00d14683                lbu     a3,13(sp)
f0000992:          |  |  |      00e14703                lbu     a4,14(sp)
f0000996:          |  |  |      47a2                    lw      a5,8(sp)
f0000998:          |  |  |      4842                    lw      a6,16(sp)
f000099a:          |  |  |      1000f517                auipc   a0,0x1000f
f000099e:          |  |  |      67a50513                addi    a0,a0,1658 # 10014 <_non_volatile_scratch_end+0xff90014>
f00009a2:          |  |  |      4595                    li      a1,5
f00009a4:          |  |  |      2dc020ef                jal     ra,f0002c80 <base_log_internal_dv>
f00009a8:          |  |  |  /-- a03d                    j       f00009d6 <run_test+0x11e>
f00009aa:          |  |  |  |   c0001073                unimp
f00009ae:          |  |  |  |   c0001073                unimp
f00009b2:          |  |  \--|-> 00004517                auipc   a0,0x4
f00009b6:          |  |     |   d2250513                addi    a0,a0,-734 # f00046d4 <run_test.log_fields.8>
f00009ba:          |  |     |   212020ef                jal     ra,f0002bcc <base_log_internal_core>
f00009be:          |  |     +-- a821                    j       f00009d6 <run_test+0x11e>
f00009c0:          |  |     |   c0001073                unimp
f00009c4:          |  |     |   c0001073                unimp
f00009c8:          |  \-----|-> 1000f517                auipc   a0,0x1000f
f00009cc:          |        |   66050513                addi    a0,a0,1632 # 10028 <_non_volatile_scratch_end+0xff90028>
f00009d0:          |        |   4585                    li      a1,1
f00009d2:          |        |   2ae020ef                jal     ra,f0002c80 <base_log_internal_dv>
f00009d6:          |        \-> 6531                    lui     a0,0xc
f00009d8:          |            aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00009dc:          |            0d4020ef                jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:93
  CHECK_STATUS_OK(hmac_testutils_fifo_empty_polled(hmac));
f00009e0:          \----------> 8526                    mv      a0,s1
f00009e2:                       2cfd                    jal     f0000ce0 <hmac_testutils_fifo_empty_polled>
f00009e4:          /----------- 06055b63                bgez    a0,f0000a5a <run_test+0x1a2>
f00009e8:          |            85aa                    mv      a1,a0
f00009ea:          |            62642503                lw      a0,1574(s0)
f00009ee:          |     /----- cd1d                    beqz    a0,f0000a2c <run_test+0x174>
f00009f0:          |     |      00010723                sb      zero,14(sp)
f00009f4:          |     |      00011623                sh      zero,12(sp)
f00009f8:          |     |      080c                    addi    a1,sp,16
f00009fa:          |     |      0030                    addi    a2,sp,8
f00009fc:          |     |      0074                    addi    a3,sp,12
f00009fe:          |     |      375020ef                jal     ra,f0003572 <status_extract>
f0000a02:          |  /--|----- c121                    beqz    a0,f0000a42 <run_test+0x18a>
f0000a04:          |  |  |      00c14603                lbu     a2,12(sp)
f0000a08:          |  |  |      00d14683                lbu     a3,13(sp)
f0000a0c:          |  |  |      00e14703                lbu     a4,14(sp)
f0000a10:          |  |  |      47a2                    lw      a5,8(sp)
f0000a12:          |  |  |      4842                    lw      a6,16(sp)
f0000a14:          |  |  |      1000f517                auipc   a0,0x1000f
f0000a18:          |  |  |      62850513                addi    a0,a0,1576 # 1003c <_non_volatile_scratch_end+0xff9003c>
f0000a1c:          |  |  |      4595                    li      a1,5
f0000a1e:          |  |  |      262020ef                jal     ra,f0002c80 <base_log_internal_dv>
f0000a22:          |  |  |  /-- a03d                    j       f0000a50 <run_test+0x198>
f0000a24:          |  |  |  |   c0001073                unimp
f0000a28:          |  |  |  |   c0001073                unimp
f0000a2c:          |  |  \--|-> 00004517                auipc   a0,0x4
f0000a30:          |  |     |   cbc50513                addi    a0,a0,-836 # f00046e8 <run_test.log_fields.14>
f0000a34:          |  |     |   198020ef                jal     ra,f0002bcc <base_log_internal_core>
f0000a38:          |  |     +-- a821                    j       f0000a50 <run_test+0x198>
f0000a3a:          |  |     |   c0001073                unimp
f0000a3e:          |  |     |   c0001073                unimp
f0000a42:          |  \-----|-> 1000f517                auipc   a0,0x1000f
f0000a46:          |        |   60e50513                addi    a0,a0,1550 # 10050 <_non_volatile_scratch_end+0xff90050>
f0000a4a:          |        |   4585                    li      a1,1
f0000a4c:          |        |   234020ef                jal     ra,f0002c80 <base_log_internal_dv>
f0000a50:          |        \-> 6531                    lui     a0,0xc
f0000a52:          |            aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000a56:          |            05a020ef                jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:94
  CHECK_STATUS_OK(hmac_testutils_check_message_length(hmac, len * 8));
f0000a5a:          \----------> 47000593                li      a1,1136
f0000a5e:                       8526                    mv      a0,s1
f0000a60:                       4601                    li      a2,0
f0000a62:                       22a1                    jal     f0000baa <hmac_testutils_check_message_length>
f0000a64:          /----------- 06055b63                bgez    a0,f0000ada <run_test+0x222>
f0000a68:          |            85aa                    mv      a1,a0
f0000a6a:          |            62642503                lw      a0,1574(s0)
f0000a6e:          |     /----- cd1d                    beqz    a0,f0000aac <run_test+0x1f4>
f0000a70:          |     |      00010723                sb      zero,14(sp)
f0000a74:          |     |      00011623                sh      zero,12(sp)
f0000a78:          |     |      080c                    addi    a1,sp,16
f0000a7a:          |     |      0030                    addi    a2,sp,8
f0000a7c:          |     |      0074                    addi    a3,sp,12
f0000a7e:          |     |      2f5020ef                jal     ra,f0003572 <status_extract>
f0000a82:          |  /--|----- c121                    beqz    a0,f0000ac2 <run_test+0x20a>
f0000a84:          |  |  |      00c14603                lbu     a2,12(sp)
f0000a88:          |  |  |      00d14683                lbu     a3,13(sp)
f0000a8c:          |  |  |      00e14703                lbu     a4,14(sp)
f0000a90:          |  |  |      47a2                    lw      a5,8(sp)
f0000a92:          |  |  |      4842                    lw      a6,16(sp)
f0000a94:          |  |  |      1000f517                auipc   a0,0x1000f
f0000a98:          |  |  |      5d050513                addi    a0,a0,1488 # 10064 <_non_volatile_scratch_end+0xff90064>
f0000a9c:          |  |  |      4595                    li      a1,5
f0000a9e:          |  |  |      1e2020ef                jal     ra,f0002c80 <base_log_internal_dv>
f0000aa2:          |  |  |  /-- a03d                    j       f0000ad0 <run_test+0x218>
f0000aa4:          |  |  |  |   c0001073                unimp
f0000aa8:          |  |  |  |   c0001073                unimp
f0000aac:          |  |  \--|-> 00004517                auipc   a0,0x4
f0000ab0:          |  |     |   c5050513                addi    a0,a0,-944 # f00046fc <run_test.log_fields.20>
f0000ab4:          |  |     |   118020ef                jal     ra,f0002bcc <base_log_internal_core>
f0000ab8:          |  |     +-- a821                    j       f0000ad0 <run_test+0x218>
f0000aba:          |  |     |   c0001073                unimp
f0000abe:          |  |     |   c0001073                unimp
f0000ac2:          |  \-----|-> 1000f517                auipc   a0,0x1000f
f0000ac6:          |        |   5b650513                addi    a0,a0,1462 # 10078 <_non_volatile_scratch_end+0xff90078>
f0000aca:          |        |   4585                    li      a1,1
f0000acc:          |        |   1b4020ef                jal     ra,f0002c80 <base_log_internal_dv>
f0000ad0:          |        \-> 6531                    lui     a0,0xc
f0000ad2:          |            aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000ad6:          |            7db010ef                jal     ra,f0002ab0 <test_status_set>
run_hmac():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:85
  CHECK_DIF_OK(dif_hmac_process(hmac));
f0000ada:          \----------> 8526                    mv      a0,s1
f0000adc:                       1e7000ef                jal     ra,f00014c2 <dif_hmac_process>
f0000ae0:             /-------- cd0d                    beqz    a0,f0000b1a <run_test+0x262>
f0000ae2:             |         862a                    mv      a2,a0
f0000ae4:             |         62642503                lw      a0,1574(s0)
f0000ae8:             |  /----- cd09                    beqz    a0,f0000b02 <run_test+0x24a>
f0000aea:             |  |      1000f517                auipc   a0,0x1000f
f0000aee:             |  |      5f250513                addi    a0,a0,1522 # 100dc <_non_volatile_scratch_end+0xff900dc>
f0000af2:             |  |      4585                    li      a1,1
f0000af4:             |  |      18c020ef                jal     ra,f0002c80 <base_log_internal_dv>
f0000af8:             |  |  /-- a821                    j       f0000b10 <run_test+0x258>
f0000afa:             |  |  |   c0001073                unimp
f0000afe:             |  |  |   c0001073                unimp
f0000b02:             |  \--|-> 00004517                auipc   a0,0x4
f0000b06:             |     |   c4a50513                addi    a0,a0,-950 # f000474c <run_hmac.log_fields>
f0000b0a:             |     |   85b2                    mv      a1,a2
f0000b0c:             |     |   0c0020ef                jal     ra,f0002bcc <base_log_internal_core>
f0000b10:             |     \-> 6531                    lui     a0,0xc
f0000b12:             |         aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000b16:             |         79b010ef                jal     ra,f0002ab0 <test_status_set>
run_test():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:96
  CHECK_STATUS_OK(hmac_testutils_finish_and_check_polled(hmac, expected_digest));
f0000b1a:             \-------> 8526                    mv      a0,s1
f0000b1c:                       85ca                    mv      a1,s2
f0000b1e:                       2345                    jal     f00010be <hmac_testutils_finish_and_check_polled>
f0000b20:          /----------- 06055b63                bgez    a0,f0000b96 <run_test+0x2de>
f0000b24:          |            85aa                    mv      a1,a0
f0000b26:          |            62642503                lw      a0,1574(s0)
f0000b2a:          |     /----- cd1d                    beqz    a0,f0000b68 <run_test+0x2b0>
f0000b2c:          |     |      00010723                sb      zero,14(sp)
f0000b30:          |     |      00011623                sh      zero,12(sp)
f0000b34:          |     |      080c                    addi    a1,sp,16
f0000b36:          |     |      0030                    addi    a2,sp,8
f0000b38:          |     |      0074                    addi    a3,sp,12
f0000b3a:          |     |      239020ef                jal     ra,f0003572 <status_extract>
f0000b3e:          |  /--|----- c121                    beqz    a0,f0000b7e <run_test+0x2c6>
f0000b40:          |  |  |      00c14603                lbu     a2,12(sp)
f0000b44:          |  |  |      00d14683                lbu     a3,13(sp)
f0000b48:          |  |  |      00e14703                lbu     a4,14(sp)
f0000b4c:          |  |  |      47a2                    lw      a5,8(sp)
f0000b4e:          |  |  |      4842                    lw      a6,16(sp)
f0000b50:          |  |  |      1000f517                auipc   a0,0x1000f
f0000b54:          |  |  |      53c50513                addi    a0,a0,1340 # 1008c <_non_volatile_scratch_end+0xff9008c>
f0000b58:          |  |  |      4595                    li      a1,5
f0000b5a:          |  |  |      126020ef                jal     ra,f0002c80 <base_log_internal_dv>
f0000b5e:          |  |  |  /-- a03d                    j       f0000b8c <run_test+0x2d4>
f0000b60:          |  |  |  |   c0001073                unimp
f0000b64:          |  |  |  |   c0001073                unimp
f0000b68:          |  |  \--|-> 00004517                auipc   a0,0x4
f0000b6c:          |  |     |   ba850513                addi    a0,a0,-1112 # f0004710 <run_test.log_fields.26>
f0000b70:          |  |     |   05c020ef                jal     ra,f0002bcc <base_log_internal_core>
f0000b74:          |  |     +-- a821                    j       f0000b8c <run_test+0x2d4>
f0000b76:          |  |     |   c0001073                unimp
f0000b7a:          |  |     |   c0001073                unimp
f0000b7e:          |  \-----|-> 1000f517                auipc   a0,0x1000f
f0000b82:          |        |   52250513                addi    a0,a0,1314 # 100a0 <_non_volatile_scratch_end+0xff900a0>
f0000b86:          |        |   4585                    li      a1,1
f0000b88:          |        |   0f8020ef                jal     ra,f0002c80 <base_log_internal_dv>
f0000b8c:          |        \-> 6531                    lui     a0,0xc
f0000b8e:          |            aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000b92:          |            71f010ef                jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:97
}
f0000b96:          \----------> 50b2                    lw      ra,44(sp)
f0000b98:                       5422                    lw      s0,40(sp)
f0000b9a:                       5492                    lw      s1,36(sp)
f0000b9c:                       5902                    lw      s2,32(sp)
f0000b9e:                       6145                    addi    sp,sp,48
f0000ba0:                       8082                    ret
f0000ba2:                       c0001073                unimp
f0000ba6:                       c0001073                unimp

f0000baa <hmac_testutils_check_message_length>:
hmac_testutils_check_message_length():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:64
            0xBDCCB6C7,
        },
};

status_t hmac_testutils_check_message_length(const dif_hmac_t *hmac,
                                             uint64_t expected_sent_bits) {
f0000baa:                    1101                       addi    sp,sp,-32
f0000bac:                    ce06                       sw      ra,28(sp)
f0000bae:                    cc22                       sw      s0,24(sp)
f0000bb0:                    ca26                       sw      s1,20(sp)
f0000bb2:                    c84a                       sw      s2,16(sp)
f0000bb4:                    84b2                       mv      s1,a2
f0000bb6:                    892e                       mv      s2,a1
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:66
  uint64_t sent_bits;
  TRY(dif_hmac_get_message_length(hmac, &sent_bits));
f0000bb8:                    002c                       addi    a1,sp,8
f0000bba:                    0df000ef           jal     ra,f0001498 <dif_hmac_get_message_length>
f0000bbe:                    c22a                       sw      a0,4(sp)
f0000bc0:                    850a                       mv      a0,sp
f0000bc2:                    004c                       addi    a1,sp,4
f0000bc4:                    4611                       li      a2,4
f0000bc6:                    585020ef           jal     ra,f000394a <memcpy>
f0000bca:                    4502                       lw      a0,0(sp)
f0000bcc:                    00153593           seqz    a1,a0
f0000bd0:                    15fd                       addi    a1,a1,-1
f0000bd2:                    0425f693           andi    a3,a1,66
f0000bd6:                    00004597           auipc   a1,0x4
f0000bda:                    b8a58613           addi    a2,a1,-1142 # f0004760 <run_hmac.log_fields+0x14>
f0000bde:                    51a805b7           lui     a1,0x51a80
f0000be2:                    09f020ef           jal     ra,f0003480 <status_create>
f0000be6:          /-------- 04054d63           bltz    a0,f0000c40 <hmac_testutils_check_message_length+0x96>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:70

  // 64bit formatting is not supported, so split into hi and lo hex 32bit
  // values. These should appear as 64bit hex values in the debug output.
  TRY_CHECK(expected_sent_bits == sent_bits,
f0000bea:          |         00004517           auipc   a0,0x4
f0000bee:          |         b7650613           addi    a2,a0,-1162 # f0004760 <run_hmac.log_fields+0x14>
f0000bf2:          |         51a805b7           lui     a1,0x51a80
f0000bf6:          |         4501                       li      a0,0
f0000bf8:          |         4681                       li      a3,0
f0000bfa:          |         087020ef           jal     ra,f0003480 <status_create>
f0000bfe:          |         4732                       lw      a4,12(sp)
f0000c00:          |         47a2                       lw      a5,8(sp)
f0000c02:          |         009745b3           xor     a1,a4,s1
f0000c06:          |         0127c633           xor     a2,a5,s2
f0000c0a:          |         8dd1                       or      a1,a1,a2
f0000c0c:          |         0015b593           seqz    a1,a1
f0000c10:          |         00b10223           sb      a1,4(sp)
f0000c14:          |         00414583           lbu     a1,4(sp)
f0000c18:       /--|-------- e9a5                       bnez    a1,f0000c88 <hmac_testutils_check_message_length+0xde>
f0000c1a:       |  |         00005517           auipc   a0,0x5
f0000c1e:       |  |         2d252503           lw      a0,722(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0000c22:       |  |     /-- cd15                       beqz    a0,f0000c5e <hmac_testutils_check_message_length+0xb4>
f0000c24:       |  |     |   1000f517           auipc   a0,0x1000f
f0000c28:       |  |     |   4cc50513           addi    a0,a0,1228 # 100f0 <_non_volatile_scratch_end+0xff900f0>
f0000c2c:       |  |     |   4591                       li      a1,4
f0000c2e:       |  |     |   8626                       mv      a2,s1
f0000c30:       |  |     |   86ca                       mv      a3,s2
f0000c32:       |  |     |   04e020ef           jal     ra,f0002c80 <base_log_internal_dv>
f0000c36:       |  |  /--|-- a835                       j       f0000c72 <hmac_testutils_check_message_length+0xc8>
f0000c38:       |  |  |  |   c0001073           unimp
f0000c3c:       |  |  |  |   c0001073           unimp
f0000c40:       |  \--|--|-> 842a                       mv      s0,a0
f0000c42:       |     |  |   897d                       andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:66
  TRY(dif_hmac_get_message_length(hmac, &sent_bits));
f0000c44:       |     |  |   00004597           auipc   a1,0x4
f0000c48:       |     |  |   b1c58613           addi    a2,a1,-1252 # f0004760 <run_hmac.log_fields+0x14>
f0000c4c:       |     |  |   51a805b7           lui     a1,0x51a80
f0000c50:       |     |  |   04200693           li      a3,66
f0000c54:       |  /--|--|-- a0bd                       j       f0000cc2 <hmac_testutils_check_message_length+0x118>
f0000c56:       |  |  |  |   c0001073           unimp
f0000c5a:       |  |  |  |   c0001073           unimp
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:70
  TRY_CHECK(expected_sent_bits == sent_bits,
f0000c5e:       |  |  |  \-> 00004517           auipc   a0,0x4
f0000c62:       |  |  |      c4250513           addi    a0,a0,-958 # f00048a0 <hmac_testutils_check_message_length.log_fields>
f0000c66:       |  |  |      85a6                       mv      a1,s1
f0000c68:       |  |  |      864a                       mv      a2,s2
f0000c6a:       |  |  |      86ba                       mv      a3,a4
f0000c6c:       |  |  |      873e                       mv      a4,a5
f0000c6e:       |  |  |      75f010ef           jal     ra,f0002bcc <base_log_internal_core>
f0000c72:       |  |  \----> 00004517           auipc   a0,0x4
f0000c76:       |  |         aee50613           addi    a2,a0,-1298 # f0004760 <run_hmac.log_fields+0x14>
f0000c7a:       |  |         4535                       li      a0,13
f0000c7c:       |  |         51a805b7           lui     a1,0x51a80
f0000c80:       |  |         04a00693           li      a3,74
f0000c84:       |  |         7fc020ef           jal     ra,f0003480 <status_create>
f0000c88:       \--|-------> 842a                       mv      s0,a0
f0000c8a:          |     /-- 02054263           bltz    a0,f0000cae <hmac_testutils_check_message_length+0x104>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:76
            "Message length mismatch. "
            "Expected 0x%08x%08x bits but got 0x%08x%08x bits.",
            (uint32_t)(expected_sent_bits >> 32), (uint32_t)expected_sent_bits,
            (uint32_t)(sent_bits >> 32), (uint32_t)sent_bits);

  return OK_STATUS();
f0000c8e:          |     |   00004517           auipc   a0,0x4
f0000c92:          |     |   ad250613           addi    a2,a0,-1326 # f0004760 <run_hmac.log_fields+0x14>
f0000c96:          |     |   51a805b7           lui     a1,0x51a80
f0000c9a:          |     |   4501                       li      a0,0
f0000c9c:          |     |   4681                       li      a3,0
f0000c9e:          |     |   7e2020ef           jal     ra,f0003480 <status_create>
f0000ca2:          |     |   842a                       mv      s0,a0
f0000ca4:          |  /--|-- a01d                       j       f0000cca <hmac_testutils_check_message_length+0x120>
f0000ca6:          |  |  |   c0001073           unimp
f0000caa:          |  |  |   c0001073           unimp
f0000cae:          |  |  \-> 01f47513           andi    a0,s0,31
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:70
  TRY_CHECK(expected_sent_bits == sent_bits,
f0000cb2:          |  |      00004597           auipc   a1,0x4
f0000cb6:          |  |      aae58613           addi    a2,a1,-1362 # f0004760 <run_hmac.log_fields+0x14>
f0000cba:          |  |      51a805b7           lui     a1,0x51a80
f0000cbe:          |  |      04a00693           li      a3,74
f0000cc2:          \--|----> 7be020ef           jal     ra,f0003480 <status_create>
f0000cc6:             |      0f1000ef           jal     ra,f00015b6 <status_report>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:77
}
f0000cca:             \----> 8522                       mv      a0,s0
f0000ccc:                    40f2                       lw      ra,28(sp)
f0000cce:                    4462                       lw      s0,24(sp)
f0000cd0:                    44d2                       lw      s1,20(sp)
f0000cd2:                    4942                       lw      s2,16(sp)
f0000cd4:                    6105                       addi    sp,sp,32
f0000cd6:                    8082                       ret
f0000cd8:                    c0001073           unimp
f0000cdc:                    c0001073           unimp

f0000ce0 <hmac_testutils_fifo_empty_polled>:
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:88
  uint32_t fifo_depth;
  dif_result_t res = dif_hmac_fifo_count_entries(hmac, &fifo_depth);
  return res == kDifOk || fifo_depth == 0;
}

status_t hmac_testutils_fifo_empty_polled(const dif_hmac_t *hmac) {
f0000ce0:                          1101                 addi    sp,sp,-32
compute_hmac_testutils_fifo_empty_usec():
/proc/self/cwd/./sw/device/lib/testing/hmac_testutils.h:41
 *
 * single HMAC block compression takes 80 cycles.
 */
static inline status_t compute_hmac_testutils_fifo_empty_usec(
    uint32_t *out_usec) {
  uint64_t result = udiv64_slow((80 + 10) * 1000000, kClockFreqCpuHz, NULL) + 1;
f0000ce2:                          ce06                 sw      ra,28(sp)
f0000ce4:                          cc22                 sw      s0,24(sp)
f0000ce6:                          ca26                 sw      s1,20(sp)
f0000ce8:                          c84a                 sw      s2,16(sp)
f0000cea:                          c64e                 sw      s3,12(sp)
f0000cec:                          c452                 sw      s4,8(sp)
f0000cee:                          00005597             auipc   a1,0x5
f0000cf2:                          1e258593             addi    a1,a1,482 # f0005ed0 <kClockFreqCpuHz>
f0000cf6:                          0045a903             lw      s2,4(a1)
f0000cfa:                          0005a983             lw      s3,0(a1)
f0000cfe:                          8a2a                 mv      s4,a0
f0000d00:                          055d5537             lui     a0,0x55d5
f0000d04:                          a8050513             addi    a0,a0,-1408 # 55d4a80 <_ottf_size+0x5554a80>
f0000d08:                          4581                 li      a1,0
f0000d0a:                          864e                 mv      a2,s3
f0000d0c:                          86ca                 mv      a3,s2
f0000d0e:                          4701                 li      a4,0
f0000d10:                          385020ef             jal     ra,f0003894 <udiv64_slow>
f0000d14:                          00150413             addi    s0,a0,1
f0000d18:                          00a43533             sltu    a0,s0,a0
f0000d1c:                          00a584b3             add     s1,a1,a0
/proc/self/cwd/./sw/device/lib/testing/hmac_testutils.h:42
  TRY_CHECK(result <= UINT32_MAX, "timeout must fit in uint32_t");
f0000d20:                          00004517             auipc   a0,0x4
f0000d24:                          b2c50613             addi    a2,a0,-1236 # f000484c <run_hmac.log_fields+0x100>
f0000d28:                          21a805b7             lui     a1,0x21a80
f0000d2c:                          4501                 li      a0,0
f0000d2e:                          4681                 li      a3,0
f0000d30:                          750020ef             jal     ra,f0003480 <status_create>
f0000d34:                          0014b593             seqz    a1,s1
f0000d38:                          00b101a3             sb      a1,3(sp)
f0000d3c:                          00314583             lbu     a1,3(sp)
f0000d40:                /-------- e1b9                 bnez    a1,f0000d86 <hmac_testutils_fifo_empty_polled+0xa6>
f0000d42:                |         00005517             auipc   a0,0x5
f0000d46:                |         1aa52503             lw      a0,426(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0000d4a:                |  /----- cd09                 beqz    a0,f0000d64 <hmac_testutils_fifo_empty_polled+0x84>
f0000d4c:                |  |      1000f517             auipc   a0,0x1000f
f0000d50:                |  |      3e050513             addi    a0,a0,992 # 1012c <_non_volatile_scratch_end+0xff9012c>
f0000d54:                |  |      4581                 li      a1,0
f0000d56:                |  |      72b010ef             jal     ra,f0002c80 <base_log_internal_dv>
f0000d5a:                |  |  /-- a819                 j       f0000d70 <hmac_testutils_fifo_empty_polled+0x90>
f0000d5c:                |  |  |   c0001073             unimp
f0000d60:                |  |  |   c0001073             unimp
f0000d64:                |  \--|-> 00004517             auipc   a0,0x4
f0000d68:                |     |   b7850513             addi    a0,a0,-1160 # f00048dc <compute_hmac_testutils_fifo_empty_usec.log_fields>
f0000d6c:                |     |   661010ef             jal     ra,f0002bcc <base_log_internal_core>
f0000d70:                |     \-> 00004517             auipc   a0,0x4
f0000d74:                |         adc50613             addi    a2,a0,-1316 # f000484c <run_hmac.log_fields+0x100>
f0000d78:                |         4535                 li      a0,13
f0000d7a:                |         21a805b7             lui     a1,0x21a80
f0000d7e:                |         02a00693             li      a3,42
f0000d82:                |         6fe020ef             jal     ra,f0003480 <status_create>
f0000d86:                \-------> 84aa                 mv      s1,a0
f0000d88:          /-------------- 0c054263             bltz    a0,f0000e4c <hmac_testutils_fifo_empty_polled+0x16c>
/proc/self/cwd/./sw/device/lib/testing/hmac_testutils.h:44
  *out_usec = (uint32_t)result;
  return OK_STATUS();
f0000d8c:          |               00004517             auipc   a0,0x4
f0000d90:          |               ac050613             addi    a2,a0,-1344 # f000484c <run_hmac.log_fields+0x100>
f0000d94:          |               21a805b7             lui     a1,0x21a80
f0000d98:          |               4501                 li      a0,0
f0000d9a:          |               4681                 li      a3,0
f0000d9c:          |               6e4020ef             jal     ra,f0003480 <status_create>
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:90
  uint32_t usec;
  TRY(compute_hmac_testutils_fifo_empty_usec(&usec));
f0000da0:       /--|-------------- 0c054a63             bltz    a0,f0000e74 <hmac_testutils_fifo_empty_polled+0x194>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:178
 * @return The initialized timeout value.
 */
OT_WARN_UNUSED_RESULT
inline ibex_timeout_t ibex_timeout_init(uint32_t timeout_usec) {
  return (ibex_timeout_t){
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000da4:       |  |               033435b3             mulhu   a1,s0,s3
f0000da8:       |  |               03240533             mul     a0,s0,s2
f0000dac:       |  |               95aa                 add     a1,a1,a0
f0000dae:       |  |               03340533             mul     a0,s0,s3
f0000db2:       |  |               000f4637             lui     a2,0xf4
f0000db6:       |  |               24060613             addi    a2,a2,576 # f4240 <_ottf_size+0x74240>
f0000dba:       |  |               4681                 li      a3,0
f0000dbc:       |  |               4701                 li      a4,0
f0000dbe:       |  |               2d7020ef             jal     ra,f0003894 <udiv64_slow>
f0000dc2:       |  |               892a                 mv      s2,a0
f0000dc4:       |  |               842e                 mv      s0,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:82
  asm volatile(
f0000dc6:       |  |           /-> b8002573             csrr    a0,mcycleh
f0000dca:       |  |           |   b00025f3             csrr    a1,mcycle
f0000dce:       |  |           |   b8002673             csrr    a2,mcycleh
f0000dd2:       |  |           \-- fec51ae3             bne     a0,a2,f0000dc6 <hmac_testutils_fifo_empty_polled+0xe6>
f0000dd6:       |  |               40b004b3             neg     s1,a1
f0000dda:       |  |               00b035b3             snez    a1,a1
f0000dde:       |  |               40a00533             neg     a0,a0
f0000de2:       |  |               40b509b3             sub     s3,a0,a1
check_fifo_empty():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:84
  dif_result_t res = dif_hmac_fifo_count_entries(hmac, &fifo_depth);
f0000de6:       |  |     /-------> 004c                 addi    a1,sp,4
f0000de8:       |  |     |         8552                 mv      a0,s4
f0000dea:       |  |     |         2561                 jal     f0001472 <dif_hmac_fifo_count_entries>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:85
  return res == kDifOk || fifo_depth == 0;
f0000dec:       |  |     |         4592                 lw      a1,4(sp)
f0000dee:       |  |     |         00153513             seqz    a0,a0
f0000df2:       |  |     |         0015b593             seqz    a1,a1
f0000df6:       |  |     |         8d4d                 or      a0,a0,a1
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:91
  IBEX_TRY_SPIN_FOR(check_fifo_empty(hmac), usec);
f0000df8:       |  |  /--|-------- e155                 bnez    a0,f0000e9c <hmac_testutils_fifo_empty_polled+0x1bc>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:82
f0000dfa:       |  |  |  |     /-> b80025f3             csrr    a1,mcycleh
f0000dfe:       |  |  |  |     |   b0002573             csrr    a0,mcycle
f0000e02:       |  |  |  |     |   b8002673             csrr    a2,mcycleh
f0000e06:       |  |  |  |     \-- fec59ae3             bne     a1,a2,f0000dfa <hmac_testutils_fifo_empty_polled+0x11a>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:91
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000e0a:       |  |  |  |         9526                 add     a0,a0,s1
f0000e0c:       |  |  |  |         00953633             sltu    a2,a0,s1
f0000e10:       |  |  |  |         95ce                 add     a1,a1,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:191
 * @param timeout Holds the counter start value.
 * @return True if the timeout has expired and false otherwise.
 */
OT_WARN_UNUSED_RESULT
inline bool ibex_timeout_check(const ibex_timeout_t *timeout) {
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000e12:       |  |  |  |         95b2                 add     a1,a1,a2
f0000e14:       |  |  |  |  /----- 00858963             beq     a1,s0,f0000e26 <hmac_testutils_fifo_empty_polled+0x146>
f0000e18:       |  |  |  |  |      00b43533             sltu    a0,s0,a1
f0000e1c:       |  |  |  |  |  /-- a039                 j       f0000e2a <hmac_testutils_fifo_empty_polled+0x14a>
f0000e1e:       |  |  |  |  |  |   c0001073             unimp
f0000e22:       |  |  |  |  |  |   c0001073             unimp
f0000e26:       |  |  |  |  \--|-> 00a93533             sltu    a0,s2,a0
f0000e2a:       |  |  |  |     \-> 00154513             xori    a0,a0,1
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:91
f0000e2e:       |  |  |  \-------- fd45                 bnez    a0,f0000de6 <hmac_testutils_fifo_empty_polled+0x106>
f0000e30:       |  |  |            00004517             auipc   a0,0x4
f0000e34:       |  |  |            93050613             addi    a2,a0,-1744 # f0004760 <run_hmac.log_fields+0x14>
f0000e38:       |  |  |            4511                 li      a0,4
f0000e3a:       |  |  |            51a805b7             lui     a1,0x51a80
f0000e3e:       |  |  |            05b00693             li      a3,91
f0000e42:       |  |  |     /----- a0ad                 j       f0000eac <hmac_testutils_fifo_empty_polled+0x1cc>
f0000e44:       |  |  |     |      c0001073             unimp
f0000e48:       |  |  |     |      c0001073             unimp
f0000e4c:       |  \--|-----|----> 01f4f413             andi    s0,s1,31
compute_hmac_testutils_fifo_empty_usec():
/proc/self/cwd/./sw/device/lib/testing/hmac_testutils.h:42
  TRY_CHECK(result <= UINT32_MAX, "timeout must fit in uint32_t");
f0000e50:       |     |     |      00004517             auipc   a0,0x4
f0000e54:       |     |     |      9fc50613             addi    a2,a0,-1540 # f000484c <run_hmac.log_fields+0x100>
f0000e58:       |     |     |      21a805b7             lui     a1,0x21a80
f0000e5c:       |     |     |      02a00693             li      a3,42
f0000e60:       |     |     |      8522                 mv      a0,s0
f0000e62:       |     |     |      61e020ef             jal     ra,f0003480 <status_create>
f0000e66:       |     |     |      750000ef             jal     ra,f00015b6 <status_report>
f0000e6a:       |     |     |  /-- a801                 j       f0000e7a <hmac_testutils_fifo_empty_polled+0x19a>
f0000e6c:       |     |     |  |   c0001073             unimp
f0000e70:       |     |     |  |   c0001073             unimp
f0000e74:       \-----|-----|--|-> 84aa                 mv      s1,a0
f0000e76:             |     |  |   01f57413             andi    s0,a0,31
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:90
  TRY(compute_hmac_testutils_fifo_empty_usec(&usec));
f0000e7a:             |     |  \-> 00004517             auipc   a0,0x4
f0000e7e:             |     |      8e650613             addi    a2,a0,-1818 # f0004760 <run_hmac.log_fields+0x14>
f0000e82:             |     |      51a805b7             lui     a1,0x51a80
f0000e86:             |     |      05a00693             li      a3,90
f0000e8a:             |     |      8522                 mv      a0,s0
f0000e8c:             |     |      5f4020ef             jal     ra,f0003480 <status_create>
f0000e90:             |     |      271d                 jal     f00015b6 <status_report>
f0000e92:             |     |  /-- a005                 j       f0000eb2 <hmac_testutils_fifo_empty_polled+0x1d2>
f0000e94:             |     |  |   c0001073             unimp
f0000e98:             |     |  |   c0001073             unimp
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:92
  return OK_STATUS();
f0000e9c:             \-----|--|-> 00004517             auipc   a0,0x4
f0000ea0:                   |  |   8c450613             addi    a2,a0,-1852 # f0004760 <run_hmac.log_fields+0x14>
f0000ea4:                   |  |   51a805b7             lui     a1,0x51a80
f0000ea8:                   |  |   4501                 li      a0,0
f0000eaa:                   |  |   4681                 li      a3,0
f0000eac:                   \--|-> 5d4020ef             jal     ra,f0003480 <status_create>
f0000eb0:                      |   84aa                 mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:93
}
f0000eb2:                      \-> 8526                 mv      a0,s1
f0000eb4:                          40f2                 lw      ra,28(sp)
f0000eb6:                          4462                 lw      s0,24(sp)
f0000eb8:                          44d2                 lw      s1,20(sp)
f0000eba:                          4942                 lw      s2,16(sp)
f0000ebc:                          49b2                 lw      s3,12(sp)
f0000ebe:                          4a22                 lw      s4,8(sp)
f0000ec0:                          6105                 addi    sp,sp,32
f0000ec2:                          8082                 ret
f0000ec4:                          c0001073             unimp
f0000ec8:                          c0001073             unimp

f0000ecc <hmac_testutils_finish_polled>:
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:96

status_t hmac_testutils_finish_polled(const dif_hmac_t *hmac,
                                      dif_hmac_digest_t *digest_out) {
f0000ecc:                          1101                 addi    sp,sp,-32
compute_hmac_testutils_finish_timeout_usec():
/proc/self/cwd/./sw/device/lib/testing/hmac_testutils.h:56
 * compression and extra HMAC computation.
 */
static inline status_t compute_hmac_testutils_finish_timeout_usec(
    uint32_t *out_usec) {
  uint64_t result =
      udiv64_slow((360 + 10) * 1000000, kClockFreqCpuHz, NULL) + 1;
f0000ece:                          ce06                 sw      ra,28(sp)
f0000ed0:                          cc22                 sw      s0,24(sp)
f0000ed2:                          ca26                 sw      s1,20(sp)
f0000ed4:                          c84a                 sw      s2,16(sp)
f0000ed6:                          c64e                 sw      s3,12(sp)
f0000ed8:                          c452                 sw      s4,8(sp)
f0000eda:                          c256                 sw      s5,4(sp)
f0000edc:                          00005617             auipc   a2,0x5
f0000ee0:                          ff460613             addi    a2,a2,-12 # f0005ed0 <kClockFreqCpuHz>
f0000ee4:                          00462983             lw      s3,4(a2)
f0000ee8:                          00062903             lw      s2,0(a2)
f0000eec:                          8a2e                 mv      s4,a1
f0000eee:                          8aaa                 mv      s5,a0
f0000ef0:                          160dc537             lui     a0,0x160dc
f0000ef4:                          08050513             addi    a0,a0,128 # 160dc080 <_ottf_size+0x1605c080>
f0000ef8:                          4581                 li      a1,0
f0000efa:                          864a                 mv      a2,s2
f0000efc:                          86ce                 mv      a3,s3
f0000efe:                          4701                 li      a4,0
f0000f00:                          195020ef             jal     ra,f0003894 <udiv64_slow>
f0000f04:                          00150493             addi    s1,a0,1
f0000f08:                          00a4b533             sltu    a0,s1,a0
f0000f0c:                          00a58433             add     s0,a1,a0
/proc/self/cwd/./sw/device/lib/testing/hmac_testutils.h:57
  TRY_CHECK(result <= UINT32_MAX, "timeout must fit in uint32_t");
f0000f10:                          00004517             auipc   a0,0x4
f0000f14:                          93c50613             addi    a2,a0,-1732 # f000484c <run_hmac.log_fields+0x100>
f0000f18:                          21a805b7             lui     a1,0x21a80
f0000f1c:                          4501                 li      a0,0
f0000f1e:                          4681                 li      a3,0
f0000f20:                          560020ef             jal     ra,f0003480 <status_create>
f0000f24:                          00143593             seqz    a1,s0
f0000f28:                          00b101a3             sb      a1,3(sp)
f0000f2c:                          00314583             lbu     a1,3(sp)
f0000f30:                /-------- e1b9                 bnez    a1,f0000f76 <hmac_testutils_finish_polled+0xaa>
f0000f32:                |         00005517             auipc   a0,0x5
f0000f36:                |         fba52503             lw      a0,-70(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0000f3a:                |  /----- cd09                 beqz    a0,f0000f54 <hmac_testutils_finish_polled+0x88>
f0000f3c:                |  |      1000f517             auipc   a0,0x1000f
f0000f40:                |  |      20450513             addi    a0,a0,516 # 10140 <_non_volatile_scratch_end+0xff90140>
f0000f44:                |  |      4581                 li      a1,0
f0000f46:                |  |      53b010ef             jal     ra,f0002c80 <base_log_internal_dv>
f0000f4a:                |  |  /-- a819                 j       f0000f60 <hmac_testutils_finish_polled+0x94>
f0000f4c:                |  |  |   c0001073             unimp
f0000f50:                |  |  |   c0001073             unimp
f0000f54:                |  \--|-> 00004517             auipc   a0,0x4
f0000f58:                |     |   99c50513             addi    a0,a0,-1636 # f00048f0 <compute_hmac_testutils_finish_timeout_usec.log_fields>
f0000f5c:                |     |   471010ef             jal     ra,f0002bcc <base_log_internal_core>
f0000f60:                |     \-> 00004517             auipc   a0,0x4
f0000f64:                |         8ec50613             addi    a2,a0,-1812 # f000484c <run_hmac.log_fields+0x100>
f0000f68:                |         4535                 li      a0,13
f0000f6a:                |         21a805b7             lui     a1,0x21a80
f0000f6e:                |         03900693             li      a3,57
f0000f72:                |         50e020ef             jal     ra,f0003480 <status_create>
f0000f76:                \-------> 842a                 mv      s0,a0
f0000f78:          /-------------- 0a054d63             bltz    a0,f0001032 <hmac_testutils_finish_polled+0x166>
/proc/self/cwd/./sw/device/lib/testing/hmac_testutils.h:59
  *out_usec = (uint32_t)result;
  return OK_STATUS();
f0000f7c:          |               00004517             auipc   a0,0x4
f0000f80:          |               8d050613             addi    a2,a0,-1840 # f000484c <run_hmac.log_fields+0x100>
f0000f84:          |               21a805b7             lui     a1,0x21a80
f0000f88:          |               4501                 li      a0,0
f0000f8a:          |               4681                 li      a3,0
f0000f8c:          |               4f4020ef             jal     ra,f0003480 <status_create>
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:98
  uint32_t usec;
  TRY(compute_hmac_testutils_finish_timeout_usec(&usec));
f0000f90:       /--|-------------- 0c054463             bltz    a0,f0001058 <hmac_testutils_finish_polled+0x18c>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:178
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000f94:       |  |               0324b5b3             mulhu   a1,s1,s2
f0000f98:       |  |               03348533             mul     a0,s1,s3
f0000f9c:       |  |               95aa                 add     a1,a1,a0
f0000f9e:       |  |               03248533             mul     a0,s1,s2
f0000fa2:       |  |               000f4637             lui     a2,0xf4
f0000fa6:       |  |               24060613             addi    a2,a2,576 # f4240 <_ottf_size+0x74240>
f0000faa:       |  |               4681                 li      a3,0
f0000fac:       |  |               4701                 li      a4,0
f0000fae:       |  |               0e7020ef             jal     ra,f0003894 <udiv64_slow>
f0000fb2:       |  |               892a                 mv      s2,a0
f0000fb4:       |  |               84ae                 mv      s1,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:82
  asm volatile(
f0000fb6:       |  |           /-> b8002573             csrr    a0,mcycleh
f0000fba:       |  |           |   b00025f3             csrr    a1,mcycle
f0000fbe:       |  |           |   b8002673             csrr    a2,mcycleh
f0000fc2:       |  |           \-- fec51ae3             bne     a0,a2,f0000fb6 <hmac_testutils_finish_polled+0xea>
f0000fc6:       |  |               40b00433             neg     s0,a1
f0000fca:       |  |               00b035b3             snez    a1,a1
f0000fce:       |  |               40a00533             neg     a0,a0
f0000fd2:       |  |               40b509b3             sub     s3,a0,a1
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:99
  IBEX_TRY_SPIN_FOR(
f0000fd6:       |  |     /-------> 4585                 li      a1,1
f0000fd8:       |  |     |         8556                 mv      a0,s5
f0000fda:       |  |     |         8652                 mv      a2,s4
f0000fdc:       |  |     |         2329                 jal     f00014e6 <dif_hmac_finish>
f0000fde:       |  |  /--|-------- c955                 beqz    a0,f0001092 <hmac_testutils_finish_polled+0x1c6>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:82
f0000fe0:       |  |  |  |     /-> b80025f3             csrr    a1,mcycleh
f0000fe4:       |  |  |  |     |   b0002573             csrr    a0,mcycle
f0000fe8:       |  |  |  |     |   b8002673             csrr    a2,mcycleh
f0000fec:       |  |  |  |     \-- fec59ae3             bne     a1,a2,f0000fe0 <hmac_testutils_finish_polled+0x114>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:91
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000ff0:       |  |  |  |         9522                 add     a0,a0,s0
f0000ff2:       |  |  |  |         00853633             sltu    a2,a0,s0
f0000ff6:       |  |  |  |         95ce                 add     a1,a1,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:191
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000ff8:       |  |  |  |         95b2                 add     a1,a1,a2
f0000ffa:       |  |  |  |  /----- 00958963             beq     a1,s1,f000100c <hmac_testutils_finish_polled+0x140>
f0000ffe:       |  |  |  |  |      00b4b533             sltu    a0,s1,a1
f0001002:       |  |  |  |  |  /-- a039                 j       f0001010 <hmac_testutils_finish_polled+0x144>
f0001004:       |  |  |  |  |  |   c0001073             unimp
f0001008:       |  |  |  |  |  |   c0001073             unimp
f000100c:       |  |  |  |  \--|-> 00a93533             sltu    a0,s2,a0
f0001010:       |  |  |  |     \-> 00154513             xori    a0,a0,1
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:99
f0001014:       |  |  |  \-------- f169                 bnez    a0,f0000fd6 <hmac_testutils_finish_polled+0x10a>
f0001016:       |  |  |            00003517             auipc   a0,0x3
f000101a:       |  |  |            74a50613             addi    a2,a0,1866 # f0004760 <run_hmac.log_fields+0x14>
f000101e:       |  |  |            4511                 li      a0,4
f0001020:       |  |  |            51a805b7             lui     a1,0x51a80
f0001024:       |  |  |            06500693             li      a3,101
f0001028:       |  |  |     /----- a8ad                 j       f00010a2 <hmac_testutils_finish_polled+0x1d6>
f000102a:       |  |  |     |      c0001073             unimp
f000102e:       |  |  |     |      c0001073             unimp
f0001032:       |  \--|-----|----> 01f47493             andi    s1,s0,31
compute_hmac_testutils_finish_timeout_usec():
/proc/self/cwd/./sw/device/lib/testing/hmac_testutils.h:57
  TRY_CHECK(result <= UINT32_MAX, "timeout must fit in uint32_t");
f0001036:       |     |     |      00004517             auipc   a0,0x4
f000103a:       |     |     |      81650613             addi    a2,a0,-2026 # f000484c <run_hmac.log_fields+0x100>
f000103e:       |     |     |      21a805b7             lui     a1,0x21a80
f0001042:       |     |     |      03900693             li      a3,57
f0001046:       |     |     |      8526                 mv      a0,s1
f0001048:       |     |     |      438020ef             jal     ra,f0003480 <status_create>
f000104c:       |     |     |      23ad                 jal     f00015b6 <status_report>
f000104e:       |     |     |  /-- a801                 j       f000105e <hmac_testutils_finish_polled+0x192>
f0001050:       |     |     |  |   c0001073             unimp
f0001054:       |     |     |  |   c0001073             unimp
f0001058:       \-----|-----|--|-> 842a                 mv      s0,a0
f000105a:             |     |  |   01f57493             andi    s1,a0,31
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:98
  TRY(compute_hmac_testutils_finish_timeout_usec(&usec));
f000105e:             |     |  \-> 00003517             auipc   a0,0x3
f0001062:             |     |      70250613             addi    a2,a0,1794 # f0004760 <run_hmac.log_fields+0x14>
f0001066:             |     |      51a805b7             lui     a1,0x51a80
f000106a:             |     |      06200693             li      a3,98
f000106e:             |     |      8526                 mv      a0,s1
f0001070:             |     |      410020ef             jal     ra,f0003480 <status_create>
f0001074:             |     |      2389                 jal     f00015b6 <status_report>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:103
      dif_hmac_finish(hmac, /*disable_after_done=*/true, digest_out) == kDifOk,
      usec);
  return OK_STATUS();
}
f0001076:             |     |      8522                 mv      a0,s0
f0001078:             |     |      40f2                 lw      ra,28(sp)
f000107a:             |     |      4462                 lw      s0,24(sp)
f000107c:             |     |      44d2                 lw      s1,20(sp)
f000107e:             |     |      4942                 lw      s2,16(sp)
f0001080:             |     |      49b2                 lw      s3,12(sp)
f0001082:             |     |      4a22                 lw      s4,8(sp)
f0001084:             |     |      4a92                 lw      s5,4(sp)
f0001086:             |     |      6105                 addi    sp,sp,32
f0001088:             |     |      8082                 ret
f000108a:             |     |      c0001073             unimp
f000108e:             |     |      c0001073             unimp
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:102
  return OK_STATUS();
f0001092:             \-----|----> 00003517             auipc   a0,0x3
f0001096:                   |      6ce50613             addi    a2,a0,1742 # f0004760 <run_hmac.log_fields+0x14>
f000109a:                   |      51a805b7             lui     a1,0x51a80
f000109e:                   |      4501                 li      a0,0
f00010a0:                   |      4681                 li      a3,0
f00010a2:                   \----> 40f2                 lw      ra,28(sp)
f00010a4:                          4462                 lw      s0,24(sp)
f00010a6:                          44d2                 lw      s1,20(sp)
f00010a8:                          4942                 lw      s2,16(sp)
f00010aa:                          49b2                 lw      s3,12(sp)
f00010ac:                          4a22                 lw      s4,8(sp)
f00010ae:                          4a92                 lw      s5,4(sp)
f00010b0:                          6105                 addi    sp,sp,32
f00010b2:                          3ce0206f             j       f0003480 <status_create>
f00010b6:                          c0001073             unimp
f00010ba:                          c0001073             unimp

f00010be <hmac_testutils_finish_and_check_polled>:
hmac_testutils_finish_and_check_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:106

status_t hmac_testutils_finish_and_check_polled(
    const dif_hmac_t *hmac, const dif_hmac_digest_t *expected) {
f00010be:                          7139                 addi    sp,sp,-64
f00010c0:                          de06                 sw      ra,60(sp)
f00010c2:                          dc22                 sw      s0,56(sp)
f00010c4:                          da26                 sw      s1,52(sp)
f00010c6:                          84ae                 mv      s1,a1
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:108
  dif_hmac_digest_t digest;
  TRY(hmac_testutils_finish_polled(hmac, &digest));
f00010c8:                          080c                 addi    a1,sp,16
f00010ca:                          3509                 jal     f0000ecc <hmac_testutils_finish_polled>
f00010cc:                   /----- 04054c63             bltz    a0,f0001124 <hmac_testutils_finish_and_check_polled+0x66>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:109
  TRY_CHECK(memcmp(&digest.digest, &expected->digest, sizeof(digest.digest)) ==
f00010d0:                   |      00003517             auipc   a0,0x3
f00010d4:                   |      69050613             addi    a2,a0,1680 # f0004760 <run_hmac.log_fields+0x14>
f00010d8:                   |      51a805b7             lui     a1,0x51a80
f00010dc:                   |      4501                 li      a0,0
f00010de:                   |      4681                 li      a3,0
f00010e0:                   |      3a0020ef             jal     ra,f0003480 <status_create>
f00010e4:                   |      842a                 mv      s0,a0
f00010e6:                   |      0808                 addi    a0,sp,16
f00010e8:                   |      02000613             li      a2,32
f00010ec:                   |      85a6                 mv      a1,s1
f00010ee:                   |      14d020ef             jal     ra,f0003a3a <memcmp>
f00010f2:                   |      00153513             seqz    a0,a0
f00010f6:                   |      00a107a3             sb      a0,15(sp)
f00010fa:                   |      00f14503             lbu     a0,15(sp)
f00010fe:                   |  /-- c131                 beqz    a0,f0001142 <hmac_testutils_finish_and_check_polled+0x84>
f0001100:          /--------|--|-- 08044663             bltz    s0,f000118c <hmac_testutils_finish_and_check_polled+0xce>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:111
            0);
  return OK_STATUS();
f0001104:          |  /-----|--|-> 00003517             auipc   a0,0x3
f0001108:          |  |     |  |   65c50613             addi    a2,a0,1628 # f0004760 <run_hmac.log_fields+0x14>
f000110c:          |  |     |  |   51a805b7             lui     a1,0x51a80
f0001110:          |  |     |  |   4501                 li      a0,0
f0001112:          |  |     |  |   4681                 li      a3,0
f0001114:          |  |     |  |   36c020ef             jal     ra,f0003480 <status_create>
f0001118:          |  |     |  |   842a                 mv      s0,a0
f000111a:       /--|--|-----|--|-- a071                 j       f00011a6 <hmac_testutils_finish_and_check_polled+0xe8>
f000111c:       |  |  |     |  |   c0001073             unimp
f0001120:       |  |  |     |  |   c0001073             unimp
f0001124:       |  |  |     \--|-> 842a                 mv      s0,a0
f0001126:       |  |  |        |   897d                 andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:108
  TRY(hmac_testutils_finish_polled(hmac, &digest));
f0001128:       |  |  |        |   00003597             auipc   a1,0x3
f000112c:       |  |  |        |   63858613             addi    a2,a1,1592 # f0004760 <run_hmac.log_fields+0x14>
f0001130:       |  |  |        |   51a805b7             lui     a1,0x51a80
f0001134:       |  |  |        |   06c00693             li      a3,108
f0001138:       |  |  |  /-----|-- a0a5                 j       f00011a0 <hmac_testutils_finish_and_check_polled+0xe2>
f000113a:       |  |  |  |     |   c0001073             unimp
f000113e:       |  |  |  |     |   c0001073             unimp
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:109
  TRY_CHECK(memcmp(&digest.digest, &expected->digest, sizeof(digest.digest)) ==
f0001142:       |  |  |  |     \-> 00005517             auipc   a0,0x5
f0001146:       |  |  |  |         daa52503             lw      a0,-598(a0) # f0005eec <kDeviceLogBypassUartAddress>
f000114a:       |  |  |  |  /----- cd09                 beqz    a0,f0001164 <hmac_testutils_finish_and_check_polled+0xa6>
f000114c:       |  |  |  |  |      1000f517             auipc   a0,0x1000f
f0001150:       |  |  |  |  |      fb850513             addi    a0,a0,-72 # 10104 <_non_volatile_scratch_end+0xff90104>
f0001154:       |  |  |  |  |      4581                 li      a1,0
f0001156:       |  |  |  |  |      32b010ef             jal     ra,f0002c80 <base_log_internal_dv>
f000115a:       |  |  |  |  |  /-- a819                 j       f0001170 <hmac_testutils_finish_and_check_polled+0xb2>
f000115c:       |  |  |  |  |  |   c0001073             unimp
f0001160:       |  |  |  |  |  |   c0001073             unimp
f0001164:       |  |  |  |  \--|-> 00003517             auipc   a0,0x3
f0001168:       |  |  |  |     |   75050513             addi    a0,a0,1872 # f00048b4 <hmac_testutils_finish_and_check_polled.log_fields>
f000116c:       |  |  |  |     |   261010ef             jal     ra,f0002bcc <base_log_internal_core>
f0001170:       |  |  |  |     \-> 00003517             auipc   a0,0x3
f0001174:       |  |  |  |         5f050613             addi    a2,a0,1520 # f0004760 <run_hmac.log_fields+0x14>
f0001178:       |  |  |  |         4535                 li      a0,13
f000117a:       |  |  |  |         51a805b7             lui     a1,0x51a80
f000117e:       |  |  |  |         06e00693             li      a3,110
f0001182:       |  |  |  |         2fe020ef             jal     ra,f0003480 <status_create>
f0001186:       |  |  |  |         842a                 mv      s0,a0
f0001188:       |  |  \--|-------- f6045ee3             bgez    s0,f0001104 <hmac_testutils_finish_and_check_polled+0x46>
f000118c:       |  \-----|-------> 01f47513             andi    a0,s0,31
f0001190:       |        |         00003597             auipc   a1,0x3
f0001194:       |        |         5d058613             addi    a2,a1,1488 # f0004760 <run_hmac.log_fields+0x14>
f0001198:       |        |         51a805b7             lui     a1,0x51a80
f000119c:       |        |         06e00693             li      a3,110
f00011a0:       |        \-------> 2e0020ef             jal     ra,f0003480 <status_create>
f00011a4:       |                  2909                 jal     f00015b6 <status_report>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:112
}
f00011a6:       \----------------> 8522                 mv      a0,s0
f00011a8:                          50f2                 lw      ra,60(sp)
f00011aa:                          5462                 lw      s0,56(sp)
f00011ac:                          54d2                 lw      s1,52(sp)
f00011ae:                          6121                 addi    sp,sp,64
f00011b0:                          8082                 ret
f00011b2:                          c0001073             unimp
f00011b6:                          c0001073             unimp

f00011ba <hmac_testutils_push_message>:
hmac_testutils_push_message():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:115

status_t hmac_testutils_push_message(const dif_hmac_t *hmac, const char *data,
                                     size_t len) {
f00011ba:                          7139                 addi    sp,sp,-64
f00011bc:                          de06                 sw      ra,60(sp)
f00011be:                          dc22                 sw      s0,56(sp)
f00011c0:                          da26                 sw      s1,52(sp)
f00011c2:                          d84a                 sw      s2,48(sp)
f00011c4:                          d64e                 sw      s3,44(sp)
f00011c6:                          d452                 sw      s4,40(sp)
f00011c8:                          d256                 sw      s5,36(sp)
f00011ca:                          d05a                 sw      s6,32(sp)
f00011cc:                          ce5e                 sw      s7,28(sp)
f00011ce:                          cc62                 sw      s8,24(sp)
f00011d0:                          ca66                 sw      s9,20(sp)
f00011d2:                          c86a                 sw      s10,16(sp)
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:119
  const char *dp = data;
  size_t sent_bytes;

  while (dp - data < len) {
f00011d4:       /----------------- c64d                 beqz    a2,f000127e <hmac_testutils_push_message+0xc4>
f00011d6:       |                  8bb2                 mv      s7,a2
f00011d8:       |                  892e                 mv      s2,a1
f00011da:       |                  89aa                 mv      s3,a0
f00011dc:       |                  4501                 li      a0,0
f00011de:       |                  00005597             auipc   a1,0x5
f00011e2:       |                  d0e5ac83             lw      s9,-754(a1) # f0005eec <kDeviceLogBypassUartAddress>
f00011e6:       |                  00003597             auipc   a1,0x3
f00011ea:       |                  57a58b13             addi    s6,a1,1402 # f0004760 <run_hmac.log_fields+0x14>
f00011ee:       |                  00003597             auipc   a1,0x3
f00011f2:       |                  6da58a13             addi    s4,a1,1754 # f00048c8 <hmac_testutils_push_message.log_fields>
f00011f6:       |                  1000f597             auipc   a1,0x1000f
f00011fa:       |                  f2258a93             addi    s5,a1,-222 # 10118 <_non_volatile_scratch_end+0xff90118>
f00011fe:       |                  4d21                 li      s10,8
f0001200:       |                  84ca                 mv      s1,s2
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:121
    const size_t offset = (size_t)(dp - data);
    dif_result_t res = dif_hmac_fifo_push(hmac, dp, len - offset, &sent_bytes);
f0001202:       |  /-------------> 40ab8633             sub     a2,s7,a0
f0001206:       |  |               0074                 addi    a3,sp,12
f0001208:       |  |               854e                 mv      a0,s3
f000120a:       |  |               85a6                 mv      a1,s1
f000120c:       |  |               2401                 jal     f000140c <dif_hmac_fifo_push>
f000120e:       |  |               8c2a                 mv      s8,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:122
    TRY_CHECK(res == kDifOk || res == kDifIpFifoFull, "HMAC error = %d", res);
f0001210:       |  |               51a805b7             lui     a1,0x51a80
f0001214:       |  |               4501                 li      a0,0
f0001216:       |  |               865a                 mv      a2,s6
f0001218:       |  |               4681                 li      a3,0
f000121a:       |  |               266020ef             jal     ra,f0003480 <status_create>
f000121e:       |  |               ff7c7593             andi    a1,s8,-9
f0001222:       |  |               0015b593             seqz    a1,a1
f0001226:       |  |               00b105a3             sb      a1,11(sp)
f000122a:       |  |               00b14583             lbu     a1,11(sp)
f000122e:       |  |     /-------- e98d                 bnez    a1,f0001260 <hmac_testutils_push_message+0xa6>
f0001230:       |  |     |  /----- 000c8c63             beqz    s9,f0001248 <hmac_testutils_push_message+0x8e>
f0001234:       |  |     |  |      4585                 li      a1,1
f0001236:       |  |     |  |      8556                 mv      a0,s5
f0001238:       |  |     |  |      8662                 mv      a2,s8
f000123a:       |  |     |  |      247010ef             jal     ra,f0002c80 <base_log_internal_dv>
f000123e:       |  |     |  |  /-- a809                 j       f0001250 <hmac_testutils_push_message+0x96>
f0001240:       |  |     |  |  |   c0001073             unimp
f0001244:       |  |     |  |  |   c0001073             unimp
f0001248:       |  |     |  \--|-> 8552                 mv      a0,s4
f000124a:       |  |     |     |   85e2                 mv      a1,s8
f000124c:       |  |     |     |   181010ef             jal     ra,f0002bcc <base_log_internal_core>
f0001250:       |  |     |     \-> 4535                 li      a0,13
f0001252:       |  |     |         51a805b7             lui     a1,0x51a80
f0001256:       |  |     |         07a00693             li      a3,122
f000125a:       |  |     |         865a                 mv      a2,s6
f000125c:       |  |     |         224020ef             jal     ra,f0003480 <status_create>
f0001260:       |  |     \-------> 842a                 mv      s0,a0
f0001262:       |  |        /----- 02054e63             bltz    a0,f000129e <hmac_testutils_push_message+0xe4>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:126

    // Wait until the FIFO is drained before pushing more data. This helps
    // to prevent the undesirable back pressure condition.
    if (res == kDifIpFifoFull) {
f0001266:       |  |        |  /-- 01ac1663             bne     s8,s10,f0001272 <hmac_testutils_push_message+0xb8>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:127
      TRY(hmac_testutils_fifo_empty_polled(hmac));
f000126a:       |  |        |  |   854e                 mv      a0,s3
f000126c:       |  |        |  |   3c95                 jal     f0000ce0 <hmac_testutils_fifo_empty_polled>
f000126e:       |  |  /-----|--|-- 04054763             bltz    a0,f00012bc <hmac_testutils_push_message+0x102>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:130
    }

    dp += sent_bytes;
f0001272:       |  |  |     |  \-> 4532                 lw      a0,12(sp)
f0001274:       |  |  |     |      94aa                 add     s1,s1,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:119
  while (dp - data < len) {
f0001276:       |  |  |     |      41248533             sub     a0,s1,s2
f000127a:       |  \--|-----|----- f97564e3             bltu    a0,s7,f0001202 <hmac_testutils_push_message+0x48>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:132
  }
  return OK_STATUS();
f000127e:       \-----|-----|----> 00003517             auipc   a0,0x3
f0001282:             |     |      4e250613             addi    a2,a0,1250 # f0004760 <run_hmac.log_fields+0x14>
f0001286:             |     |      51a805b7             lui     a1,0x51a80
f000128a:             |     |      4501                 li      a0,0
f000128c:             |     |      4681                 li      a3,0
f000128e:             |     |      1f2020ef             jal     ra,f0003480 <status_create>
f0001292:             |     |      842a                 mv      s0,a0
f0001294:             |  /--|----- a089                 j       f00012d6 <hmac_testutils_push_message+0x11c>
f0001296:             |  |  |      c0001073             unimp
f000129a:             |  |  |      c0001073             unimp
f000129e:             |  |  \----> 01f47513             andi    a0,s0,31
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:122
    TRY_CHECK(res == kDifOk || res == kDifIpFifoFull, "HMAC error = %d", res);
f00012a2:             |  |         00003597             auipc   a1,0x3
f00012a6:             |  |         4be58613             addi    a2,a1,1214 # f0004760 <run_hmac.log_fields+0x14>
f00012aa:             |  |         51a805b7             lui     a1,0x51a80
f00012ae:             |  |         07a00693             li      a3,122
f00012b2:             |  |     /-- a839                 j       f00012d0 <hmac_testutils_push_message+0x116>
f00012b4:             |  |     |   c0001073             unimp
f00012b8:             |  |     |   c0001073             unimp
f00012bc:             \--|-----|-> 842a                 mv      s0,a0
f00012be:                |     |   897d                 andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:127
      TRY(hmac_testutils_fifo_empty_polled(hmac));
f00012c0:                |     |   00003597             auipc   a1,0x3
f00012c4:                |     |   4a058613             addi    a2,a1,1184 # f0004760 <run_hmac.log_fields+0x14>
f00012c8:                |     |   51a805b7             lui     a1,0x51a80
f00012cc:                |     |   07f00693             li      a3,127
f00012d0:                |     \-> 1b0020ef             jal     ra,f0003480 <status_create>
f00012d4:                |         24cd                 jal     f00015b6 <status_report>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:133
}
f00012d6:                \-------> 8522                 mv      a0,s0
f00012d8:                          50f2                 lw      ra,60(sp)
f00012da:                          5462                 lw      s0,56(sp)
f00012dc:                          54d2                 lw      s1,52(sp)
f00012de:                          5942                 lw      s2,48(sp)
f00012e0:                          59b2                 lw      s3,44(sp)
f00012e2:                          5a22                 lw      s4,40(sp)
f00012e4:                          5a92                 lw      s5,36(sp)
f00012e6:                          5b02                 lw      s6,32(sp)
f00012e8:                          4bf2                 lw      s7,28(sp)
f00012ea:                          4c62                 lw      s8,24(sp)
f00012ec:                          4cd2                 lw      s9,20(sp)
f00012ee:                          4d42                 lw      s10,16(sp)
f00012f0:                          6121                 addi    sp,sp,64
f00012f2:                          8082                 ret
f00012f4:                          c0001073             unimp
f00012f8:                          c0001073             unimp

f00012fc <dif_hmac_init>:
dif_hmac_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:18

#include "hmac_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_hmac_init(mmio_region_t base_addr, dif_hmac_t *hmac) {
  if (hmac == NULL) {
f00012fc:       /----- c981                     beqz    a1,f000130c <dif_hmac_init+0x10>
f00012fe:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:22
    return kDifBadArg;
  }

  hmac->base_addr = base_addr;
f0001300:       |      c188                     sw      a0,0(a1)
f0001302:       |  /-- a031                     j       f000130e <dif_hmac_init+0x12>
f0001304:       |  |   c0001073                 unimp
f0001308:       |  |   c0001073                 unimp
f000130c:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:25

  return kDifOk;
}
f000130e:          \-> 8532                     mv      a0,a2
f0001310:              8082                     ret
f0001312:              c0001073                 unimp
f0001316:              c0001073                 unimp

f000131a <dif_hmac_mode_hmac_start>:
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:99
}

dif_result_t dif_hmac_mode_hmac_start(const dif_hmac_t *hmac,
                                      const uint8_t *key,
                                      const dif_hmac_transaction_t config) {
  if (hmac == NULL) {
f000131a:          /-------------- c51d                 beqz    a0,f0001348 <dif_hmac_mode_hmac_start+0x2e>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:104
    return kDifBadArg;
  }

  // Read current CFG register value.
  uint32_t reg = mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f000131c:          |               00052283             lw      t0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return (
f0001320:          |               0102a883             lw      a7,16(t0)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:107

  // Set the byte-order of the input message and the digest.
  DIF_RETURN_IF_ERROR(dif_hmac_calculate_device_config_value(&reg, config));
f0001324:          |               421c                 lw      a5,0(a2)
f0001326:          |               4254                 lw      a3,4(a2)
f0001328:          |               4635                 li      a2,13
dif_hmac_calculate_device_config_value():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:62
  switch (config.message_endianness) {
f000132a:          |  /----------- c78d                 beqz    a5,f0001354 <dif_hmac_mode_hmac_start+0x3a>
f000132c:          |  |            4705                 li      a4,1
f000132e:       /--|--|----------- 06e79663             bne     a5,a4,f000139a <dif_hmac_mode_hmac_start+0x80>
f0001332:       |  |  |            4801                 li      a6,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:75
  switch (config.digest_endianness) {
f0001334:       |  |  |  /-------- c295                 beqz    a3,f0001358 <dif_hmac_mode_hmac_start+0x3e>
f0001336:       |  |  |  |  /----> 4705                 li      a4,1
f0001338:       +--|--|--|--|----- 06e69163             bne     a3,a4,f000139a <dif_hmac_mode_hmac_start+0x80>
f000133c:       |  |  |  |  |      4301                 li      t1,0
f000133e:       |  |  |  |  |  /-- a831                 j       f000135a <dif_hmac_mode_hmac_start+0x40>
f0001340:       |  |  |  |  |  |   c0001073             unimp
f0001344:       |  |  |  |  |  |   c0001073             unimp
f0001348:       |  \--|--|--|--|-> 460d                 li      a2,3
f000134a:       +-----|--|--|--|-- a881                 j       f000139a <dif_hmac_mode_hmac_start+0x80>
f000134c:       |     |  |  |  |   c0001073             unimp
f0001350:       |     |  |  |  |   c0001073             unimp
f0001354:       |     \--|--|--|-> 4811                 li      a6,4
f0001356:       |        |  \--|-- f2e5                 bnez    a3,f0001336 <dif_hmac_mode_hmac_start+0x1c>
f0001358:       |        \-----|-> 4321                 li      t1,8
f000135a:       |              \-> 76f9                 lui     a3,0xffffe
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
f000135c:       |                  00d8f8b3             and     a7,a7,a3
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:109

  if (key != NULL) {
f0001360:       |           /----- cd99                 beqz    a1,f000137e <dif_hmac_mode_hmac_start+0x64>
f0001362:       |           |      04000693             li      a3,64
f0001366:       |           |      02000713             li      a4,32
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:116
    // The least significant word is at HMAC_KEY_7_REG_OFFSET.
    // From the HWIP spec: "Order of the secret key is: key[255:0] = {KEY0,
    // KEY1, KEY2, ... , KEY7};"
    for (size_t i = 0; i < 8; ++i) {
      const ptrdiff_t word_offset = (ptrdiff_t)(i * sizeof(uint32_t));
      mmio_region_write32(hmac->base_addr, HMAC_KEY_7_REG_OFFSET - word_offset,
f000136a:       |           |  /-> 4110                 lw      a2,0(a0)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:90
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f000136c:       |           |  |   419c                 lw      a5,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f000136e:       |           |  |   9636                 add     a2,a2,a3
f0001370:       |           |  |   c21c                 sw      a5,0(a2)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:114
    for (size_t i = 0; i < 8; ++i) {
f0001372:       |           |  |   16f1                 addi    a3,a3,-4
f0001374:       |           |  |   0591                 addi    a1,a1,4
f0001376:       |           |  \-- fee69ae3             bne     a3,a4,f000136a <dif_hmac_mode_hmac_start+0x50>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:131
  reg = bitfield_field32_write(reg, HMAC_CFG_DIGEST_SIZE_FIELD,
                               HMAC_CFG_DIGEST_SIZE_VALUE_SHA2_256);
  reg = bitfield_field32_write(reg, HMAC_CFG_KEY_LENGTH_FIELD,
                               HMAC_CFG_KEY_LENGTH_VALUE_KEY_256);

  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, reg);
f000137a:       |           |      00052283             lw      t0,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f000137e:       |           \----> 0108e5b3             or      a1,a7,a6
f0001382:       |                  0065e5b3             or      a1,a1,t1
f0001386:       |                  2235e593             ori     a1,a1,547
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f000138a:       |                  00b2a823             sw      a1,16(t0)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:134

  // Begin HMAC operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f000138e:       |                  4108                 lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0001390:       |                  494c                 lw      a1,20(a0)
f0001392:       |                  4601                 li      a2,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0001394:       |                  0015e593             ori     a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f0001398:       |                  c94c                 sw      a1,20(a0)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:137
                                  HMAC_CMD_HASH_START_BIT);
  return kDifOk;
}
f000139a:       \----------------> 8532                 mv      a0,a2
f000139c:                          8082                 ret
f000139e:                          c0001073             unimp
f00013a2:                          c0001073             unimp

f00013a6 <dif_hmac_mode_sha256_start>:
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:141

dif_result_t dif_hmac_mode_sha256_start(const dif_hmac_t *hmac,
                                        const dif_hmac_transaction_t config) {
  if (hmac == NULL) {
f00013a6:          /-------------- c515                 beqz    a0,f00013d2 <dif_hmac_mode_sha256_start+0x2c>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:146
    return kDifBadArg;
  }

  // Read current CFG register value.
  uint32_t reg = mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f00013a8:          |               4110                 lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f00013aa:          |               01062803             lw      a6,16(a2)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:149

  // Set the byte-order of the input message and the digest.
  DIF_RETURN_IF_ERROR(dif_hmac_calculate_device_config_value(&reg, config));
f00013ae:          |               4198                 lw      a4,0(a1)
f00013b0:          |               41dc                 lw      a5,4(a1)
f00013b2:          |               45b5                 li      a1,13
dif_hmac_calculate_device_config_value():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:62
  switch (config.message_endianness) {
f00013b4:          |  /----------- c70d                 beqz    a4,f00013de <dif_hmac_mode_sha256_start+0x38>
f00013b6:          |  |            4685                 li      a3,1
f00013b8:       /--|--|----------- 04d71463             bne     a4,a3,f0001400 <dif_hmac_mode_sha256_start+0x5a>
f00013bc:       |  |  |            4701                 li      a4,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:75
  switch (config.digest_endianness) {
f00013be:       |  |  |  /-------- c395                 beqz    a5,f00013e2 <dif_hmac_mode_sha256_start+0x3c>
f00013c0:       |  |  |  |  /----> 4685                 li      a3,1
f00013c2:       +--|--|--|--|----- 02d79f63             bne     a5,a3,f0001400 <dif_hmac_mode_sha256_start+0x5a>
f00013c6:       |  |  |  |  |      4581                 li      a1,0
f00013c8:       |  |  |  |  |  /-- a831                 j       f00013e4 <dif_hmac_mode_sha256_start+0x3e>
f00013ca:       |  |  |  |  |  |   c0001073             unimp
f00013ce:       |  |  |  |  |  |   c0001073             unimp
f00013d2:       |  \--|--|--|--|-> 458d                 li      a1,3
f00013d4:       +-----|--|--|--|-- a035                 j       f0001400 <dif_hmac_mode_sha256_start+0x5a>
f00013d6:       |     |  |  |  |   c0001073             unimp
f00013da:       |     |  |  |  |   c0001073             unimp
f00013de:       |     \--|--|--|-> 4711                 li      a4,4
f00013e0:       |        |  \--|-- f3e5                 bnez    a5,f00013c0 <dif_hmac_mode_sha256_start+0x1a>
f00013e2:       |        \-----|-> 45a1                 li      a1,8
f00013e4:       |              \-> 76f9                 lui     a3,0xffffe
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f00013e6:       |                  00d876b3             and     a3,a6,a3
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00013ea:       |                  8dd9                 or      a1,a1,a4
f00013ec:       |                  8dd5                 or      a1,a1,a3
f00013ee:       |                  2225e593             ori     a1,a1,546
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f00013f2:       |                  ca0c                 sw      a1,16(a2)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:165

  // Write new CFG register value.
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, reg);

  // Begin SHA256-only operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f00013f4:       |                  4108                 lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f00013f6:       |                  4950                 lw      a2,20(a0)
f00013f8:       |                  4581                 li      a1,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f00013fa:       |                  00166613             ori     a2,a2,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f00013fe:       |                  c950                 sw      a2,20(a0)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:169
                                  HMAC_CMD_HASH_START_BIT);

  return kDifOk;
}
f0001400:       \----------------> 852e                 mv      a0,a1
f0001402:                          8082                 ret
f0001404:                          c0001073             unimp
f0001408:                          c0001073             unimp

f000140c <dif_hmac_fifo_push>:
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:173

dif_result_t dif_hmac_fifo_push(const dif_hmac_t *hmac, const void *data,
                                size_t len, size_t *bytes_sent) {
  if (hmac == NULL || data == NULL) {
f000140c:                       00153713                seqz    a4,a0
f0001410:                       0015b793                seqz    a5,a1
f0001414:                       8fd9                    or      a5,a5,a4
f0001416:                       470d                    li      a4,3
f0001418:       /-------------- e7b9                    bnez    a5,f0001466 <dif_hmac_fifo_push+0x5a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:180
  }

  const uint8_t *data_sent = (const uint8_t *)data;
  size_t bytes_remaining = len;

  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
f000141a:       |  /----------- c239                    beqz    a2,f0001460 <dif_hmac_fifo_push+0x54>
f000141c:       |  |            6805                    lui     a6,0x1
f000141e:       |  |            87b2                    mv      a5,a2
get_status():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
f0001420:       |  |  /-------> 00052883                lw      a7,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0001424:       |  |  |         0188a703                lw      a4,24(a7)
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:184
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
    size_t bytes_written = 0;

    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
f0001428:       |  |  |         0047b293                sltiu   t0,a5,4
f000142c:       |  |  |         0035f713                andi    a4,a1,3
f0001430:       |  |  |         00e03733                snez    a4,a4
f0001434:       |  |  |         00576733                or      a4,a4,t0
f0001438:       |  |  |     /-- eb19                    bnez    a4,f000144e <dif_hmac_fifo_push+0x42>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:90
f000143a:       |  |  |     |   4198                    lw      a4,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f000143c:       |  |  |     |   98c2                    add     a7,a7,a6
f000143e:       |  |  |     |   00e8a023                sw      a4,0(a7)
f0001442:       |  |  |     |   4711                    li      a4,4
f0001444:       |  |  |  /--|-- a819                    j       f000145a <dif_hmac_fifo_push+0x4e>
f0001446:       |  |  |  |  |   c0001073                unimp
f000144a:       |  |  |  |  |   c0001073                unimp
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:187
      // Individual byte writes are needed if the buffer isn't aligned or
      // there are no more full words to write.
      mmio_region_write8(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, *data_sent);
f000144e:       |  |  |  |  \-> 00058703                lb      a4,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:113
  ((volatile uint8_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint8_t)] =
f0001452:       |  |  |  |      98c2                    add     a7,a7,a6
f0001454:       |  |  |  |      00e88023                sb      a4,0(a7)
f0001458:       |  |  |  |      4705                    li      a4,1
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:196
      uint32_t word = read_32(data_sent);
      mmio_region_write32(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, word);
      bytes_written = sizeof(uint32_t);
    }

    bytes_remaining -= bytes_written;
f000145a:       |  |  |  \----> 8f99                    sub     a5,a5,a4
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:197
    data_sent += bytes_written;
f000145c:       |  |  |         95ba                    add     a1,a1,a4
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:180
  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
f000145e:       |  |  \-------- f3e9                    bnez    a5,f0001420 <dif_hmac_fifo_push+0x14>
f0001460:       |  \----------> 4701                    li      a4,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:200
  }

  if (bytes_sent != NULL) {
f0001462:       +-------------- c291                    beqz    a3,f0001466 <dif_hmac_fifo_push+0x5a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:201
    *bytes_sent = len - bytes_remaining;
f0001464:       |               c290                    sw      a2,0(a3)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:209
  if (bytes_remaining > 0) {
    return kDifIpFifoFull;
  }

  return kDifOk;
}
f0001466:       \-------------> 853a                    mv      a0,a4
f0001468:                       8082                    ret
f000146a:                       c0001073                unimp
f000146e:                       c0001073                unimp

f0001472 <dif_hmac_fifo_count_entries>:
dif_hmac_fifo_count_entries():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:213

dif_result_t dif_hmac_fifo_count_entries(const dif_hmac_t *hmac,
                                         uint32_t *num_entries) {
  if (hmac == NULL || num_entries == NULL) {
f0001472:           00153613            seqz    a2,a0
f0001476:           0015b693            seqz    a3,a1
f000147a:           8ed1                        or      a3,a3,a2
f000147c:           460d                        li      a2,3
f000147e:       /-- e699                        bnez    a3,f000148c <dif_hmac_fifo_count_entries+0x1a>
get_status():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
f0001480:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0001482:       |   4d08                        lw      a0,24(a0)
f0001484:       |   4601                        li      a2,0
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f0001486:       |   055a                        slli    a0,a0,0x16
f0001488:       |   8169                        srli    a0,a0,0x1a
dif_hmac_fifo_count_entries():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:217
    return kDifBadArg;
  }

  *num_entries = get_fifo_entry_count(hmac);
f000148a:       |   c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:220

  return kDifOk;
}
f000148c:       \-> 8532                        mv      a0,a2
f000148e:           8082                        ret
f0001490:           c0001073            unimp
f0001494:           c0001073            unimp

f0001498 <dif_hmac_get_message_length>:
dif_hmac_get_message_length():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:224

dif_result_t dif_hmac_get_message_length(const dif_hmac_t *hmac,
                                         uint64_t *msg_len) {
  if (hmac == NULL || msg_len == NULL) {
f0001498:           00153613            seqz    a2,a0
f000149c:           0015b693            seqz    a3,a1
f00014a0:           8ed1                        or      a3,a3,a2
f00014a2:           460d                        li      a2,3
f00014a4:       /-- ea89                        bnez    a3,f00014b6 <dif_hmac_get_message_length+0x1e>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:228
    return kDifBadArg;
  }
  uint64_t msg_lower =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_LOWER_REG_OFFSET);
f00014a6:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00014a8:       |   0e452683            lw      a3,228(a0)
dif_hmac_get_message_length():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:230
  uint64_t msg_upper =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_UPPER_REG_OFFSET);
f00014ac:       |   0e852503            lw      a0,232(a0)
f00014b0:       |   4601                        li      a2,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:232

  *msg_len = (msg_upper << 32) | msg_lower;
f00014b2:       |   c1c8                        sw      a0,4(a1)
f00014b4:       |   c194                        sw      a3,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:235

  return kDifOk;
}
f00014b6:       \-> 8532                        mv      a0,a2
f00014b8:           8082                        ret
f00014ba:           c0001073            unimp
f00014be:           c0001073            unimp

f00014c2 <dif_hmac_process>:
dif_hmac_process():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:238

dif_result_t dif_hmac_process(const dif_hmac_t *hmac) {
  if (hmac == NULL) {
f00014c2:       /-- cd01                        beqz    a0,f00014da <dif_hmac_process+0x18>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:242
    return kDifBadArg;
  }

  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f00014c4:       |   410c                        lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00014c6:       |   49d0                        lw      a2,20(a1)
f00014c8:       |   4501                        li      a0,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00014ca:       |   00266613            ori     a2,a2,2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f00014ce:       |   c9d0                        sw      a2,20(a1)
dif_hmac_process():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:245
                                  HMAC_CMD_HASH_PROCESS_BIT);
  return kDifOk;
}
f00014d0:       |   8082                        ret
f00014d2:       |   c0001073            unimp
f00014d6:       |   c0001073            unimp
f00014da:       \-> 450d                        li      a0,3
f00014dc:           8082                        ret
f00014de:           c0001073            unimp
f00014e2:           c0001073            unimp

f00014e6 <dif_hmac_finish>:
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:261
  }
}

dif_result_t dif_hmac_finish(const dif_hmac_t *hmac, bool disable_after_done,
                             dif_hmac_digest_t *digest) {
  if (hmac == NULL || digest == NULL) {
f00014e6:                 00153693              seqz    a3,a0
f00014ea:                 00163713              seqz    a4,a2
f00014ee:                 8f55                  or      a4,a4,a3
f00014f0:                 468d                  li      a3,3
f00014f2:       /-------- e73d                  bnez    a4,f0001560 <dif_hmac_finish+0x7a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:266
    return kDifBadArg;
  }

  // Check if hmac_done is asserted.
  bool done = mmio_region_get_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
f00014f4:       |         4118                  lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f00014f6:       |         00072883              lw      a7,0(a4)
f00014fa:       |         01872803              lw      a6,24(a4)
f00014fe:       |         4314                  lw      a3,0(a4)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0001500:       |         0046f793              andi    a5,a3,4
f0001504:       |         46b5                  li      a3,13
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:277

  bool hmac_error =
      mmio_region_get_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
                            HMAC_INTR_STATE_HMAC_ERR_BIT);

  if (hmac_error) {
f0001506:       +-------- efa9                  bnez    a5,f0001560 <dif_hmac_finish+0x7a>
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0001508:       |         0018f693              andi    a3,a7,1
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:282
    // Detected error.
    return kDifError;
  }

  if (done) {
f000150c:       |     /-- ea91                  bnez    a3,f0001520 <dif_hmac_finish+0x3a>
f000150e:       |     |   00187713              andi    a4,a6,1
f0001512:       |     |   46b9                  li      a3,14
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:286
    // Clear hmac_done.
    mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
                                    HMAC_INTR_STATE_HMAC_DONE_BIT);
  } else if (!fifo_empty) {
f0001514:       |  /--|-- eb11                  bnez    a4,f0001528 <dif_hmac_finish+0x42>
f0001516:       +--|--|-- a0a9                  j       f0001560 <dif_hmac_finish+0x7a>
f0001518:       |  |  |   c0001073              unimp
f000151c:       |  |  |   c0001073              unimp
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001520:       |  |  \-> 4314                  lw      a3,0(a4)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0001522:       |  |      0016e693              ori     a3,a3,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f0001526:       |  |      c314                  sw      a3,0(a4)
f0001528:       |  \----> 0c000693              li      a3,192
f000152c:       |         0a000713              li      a4,160
read_digest():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:253
    digest->digest[i] = mmio_region_read32(
f0001530:       |     /-> 411c                  lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0001532:       |     |   97b6                  add     a5,a5,a3
f0001534:       |     |   439c                  lw      a5,0(a5)
read_digest():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:253
f0001536:       |     |   c21c                  sw      a5,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:252
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
f0001538:       |     |   16f1                  addi    a3,a3,-4
f000153a:       |     |   0611                  addi    a2,a2,4
f000153c:       |     \-- fee69ae3              bne     a3,a4,f0001530 <dif_hmac_finish+0x4a>
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:292
    return kDifUnavailable;
  }

  read_digest(hmac, digest);

  if (disable_after_done) {
f0001540:       |     /-- cd99                  beqz    a1,f000155e <dif_hmac_finish+0x78>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:296
    // Disable HMAC and SHA256 until the next transaction, clearing the
    // current digest.
    uint32_t device_config =
        mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f0001542:       |     |   4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001544:       |     |   490c                  lw      a1,16(a0)
f0001546:       |     |   4681                  li      a3,0
f0001548:       |     |   7679                  lui     a2,0xffffe
f000154a:       |     |   0631                  addi    a2,a2,12
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f000154c:       |     |   8df1                  and     a1,a1,a2
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f000154e:       |     |   21058593              addi    a1,a1,528
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f0001552:       |     |   c90c                  sw      a1,16(a0)
f0001554:       +-----|-- a031                  j       f0001560 <dif_hmac_finish+0x7a>
f0001556:       |     |   c0001073              unimp
f000155a:       |     |   c0001073              unimp
f000155e:       |     \-> 4681                  li      a3,0
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:312

    mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);
  }

  return kDifOk;
}
f0001560:       \-------> 8536                  mv      a0,a3
f0001562:                 8082                  ret
f0001564:                 c0001073              unimp
f0001568:                 c0001073              unimp

f000156c <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:51
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(uint32_t *exc_info) {
  if (pxCurrentTCB != NULL) {
f000156c:           f0001517            auipc   a0,0xf0001
f0001570:           b2452503            lw      a0,-1244(a0) # e0002090 <pxCurrentTCB>
f0001574:       /-- c519                        beqz    a0,f0001582 <ottf_machine_ecall_handler+0x16>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:55
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
f0001576:       |   19f0206f            j       f0003f14 <vTaskSwitchContext>
f000157a:       |   c0001073            unimp
f000157e:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:58
    return;
  }
  LOG_ERROR(
f0001582:       \-> 00005517            auipc   a0,0x5
f0001586:           96a52503            lw      a0,-1686(a0) # f0005eec <kDeviceLogBypassUartAddress>
f000158a:       /-- cd01                        beqz    a0,f00015a2 <ottf_machine_ecall_handler+0x36>
f000158c:       |   1000f517            auipc   a0,0x1000f
f0001590:       |   bc850513            addi    a0,a0,-1080 # 10154 <_non_volatile_scratch_end+0xff90154>
f0001594:       |   4581                        li      a1,0
f0001596:       |   6ea0106f            j       f0002c80 <base_log_internal_dv>
f000159a:       |   c0001073            unimp
f000159e:       |   c0001073            unimp
f00015a2:       \-> 00003517            auipc   a0,0x3
f00015a6:           4fa50513            addi    a0,a0,1274 # f0004a9c <ottf_machine_ecall_handler.log_fields>
f00015aa:           6220106f            j       f0002bcc <base_log_internal_core>
f00015ae:           c0001073            unimp
f00015b2:           c0001073            unimp

f00015b6 <status_report>:
status_report():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:99
static size_t status_report_list_cnt = 0;

// Override the status report function to store it in the array above.
void status_report(status_t status) {
  // In case of overflow, we overwrite previous values.
  status_report_list[status_report_list_cnt % kStatusReportListSize] = status;
f00015b6:       f0001597                auipc   a1,0xf0001
f00015ba:       ab65a603                lw      a2,-1354(a1) # e000206c <status_report_list_cnt>
f00015be:       00003697                auipc   a3,0x3
f00015c2:       4f26a683                lw      a3,1266(a3) # f0004ab0 <kStatusReportListSize>
f00015c6:       02d676b3                remu    a3,a2,a3
f00015ca:       f0001717                auipc   a4,0xf0001
f00015ce:       b2270713                addi    a4,a4,-1246 # e00020ec <status_report_list>
f00015d2:       20e6c6b3                sh2add  a3,a3,a4
f00015d6:       c288                    sw      a0,0(a3)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
  status_report_list_cnt++;
f00015d8:       0605                    addi    a2,a2,1
f00015da:       aac5ab23                sw      a2,-1354(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
}
f00015de:       8082                    ret
f00015e0:       c0001073                unimp
f00015e4:       c0001073                unimp

f00015e8 <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:148
  result = result && test_main();
  result = result && manufacturer_post_test_hook();
  report_test_status(result);
}

void _ottf_main(void) {
f00015e8:                 7179                  addi    sp,sp,-48
f00015ea:                 d606                  sw      ra,44(sp)
f00015ec:                 d422                  sw      s0,40(sp)
f00015ee:                 d226                  sw      s1,36(sp)
f00015f0:                 6511                  lui     a0,0x4
f00015f2:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x354>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:149
  test_status_set(kTestStatusInTest);
f00015f6:                 4ba010ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:152

  // Initialize the console to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
f00015fa:                 00005517              auipc   a0,0x5
f00015fe:                 8d252503              lw      a0,-1838(a0) # f0005ecc <kDeviceType>
f0001602:                 00005417              auipc   s0,0x5
f0001606:                 00003597              auipc   a1,0x3
f000160a:                 fd258493              addi    s1,a1,-46 # f00045d8 <kOttfTestConfig>
f000160e:          /----- c90d                  beqz    a0,f0001640 <_ottf_main+0x58>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:153
    ottf_console_init();
f0001610:          |      2659                  jal     f0001996 <ottf_console_init>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:154
    LOG_INFO("Running %s", kOttfTestConfig.file);
f0001612:          |      8ea42503              lw      a0,-1814(s0) # f0005eec <kDeviceLogBypassUartAddress>
f0001616:          |      48d0                  lw      a2,20(s1)
f0001618:          |  /-- cd09                  beqz    a0,f0001632 <_ottf_main+0x4a>
f000161a:          |  |   1000f517              auipc   a0,0x1000f
f000161e:          |  |   b4e50513              addi    a0,a0,-1202 # 10168 <_non_volatile_scratch_end+0xff90168>
f0001622:          |  |   4585                  li      a1,1
f0001624:          |  |   65c010ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001628:          +--|-- a821                  j       f0001640 <_ottf_main+0x58>
f000162a:          |  |   c0001073              unimp
f000162e:          |  |   c0001073              unimp
f0001632:          |  \-> 00003517              auipc   a0,0x3
f0001636:          |      48250513              addi    a0,a0,1154 # f0004ab4 <_ottf_main.log_fields>
f000163a:          |      85b2                  mv      a1,a2
f000163c:          |      590010ef              jal     ra,f0002bcc <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:160
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
f0001640:          \----> c11f0537              lui     a0,0xc11f0
f0001644:                 100c                  addi    a1,sp,32
f0001646:                 44c010ef              jal     ra,f0002a92 <dif_rv_core_ibex_init>
f000164a:       /-------- cd0d                  beqz    a0,f0001684 <_ottf_main+0x9c>
f000164c:       |         862a                  mv      a2,a0
f000164e:       |         8ea42503              lw      a0,-1814(s0)
f0001652:       |  /----- cd09                  beqz    a0,f000166c <_ottf_main+0x84>
f0001654:       |  |      1000f517              auipc   a0,0x1000f
f0001658:       |  |      b2850513              addi    a0,a0,-1240 # 1017c <_non_volatile_scratch_end+0xff9017c>
f000165c:       |  |      4585                  li      a1,1
f000165e:       |  |      622010ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001662:       |  |  /-- a821                  j       f000167a <_ottf_main+0x92>
f0001664:       |  |  |   c0001073              unimp
f0001668:       |  |  |   c0001073              unimp
f000166c:       |  \--|-> 00003517              auipc   a0,0x3
f0001670:       |     |   45c50513              addi    a0,a0,1116 # f0004ac8 <_ottf_main.log_fields.5>
f0001674:       |     |   85b2                  mv      a1,a2
f0001676:       |     |   556010ef              jal     ra,f0002bcc <base_log_internal_core>
f000167a:       |     \-> 6531                  lui     a0,0xc
f000167c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001680:       |         430010ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:163
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
f0001684:       \-------> 0028                  addi    a0,sp,8
f0001686:                 100c                  addi    a1,sp,32
f0001688:                 330010ef              jal     ra,f00029b8 <rand_testutils_init>
f000168c:                 f0001517              auipc   a0,0xf0001
f0001690:                 a4850513              addi    a0,a0,-1464 # e00020d4 <rand_testutils_rng_ctx>
f0001694:                 002c                  addi    a1,sp,8
f0001696:                 4661                  li      a2,24
f0001698:                 2b2020ef              jal     ra,f000394a <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:166

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
f000169c:                 0004c503              lbu     a0,0(s1)
f00016a0:          /----- c51d                  beqz    a0,f00016ce <_ottf_main+0xe6>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:66
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
f00016a2:          |      00000517              auipc   a0,0x0
f00016a6:          |      0b650513              addi    a0,a0,182 # f0001758 <test_wrapper>
f00016aa:          |      00003597              auipc   a1,0x3
f00016ae:          |      36858593              addi    a1,a1,872 # f0004a12 <compute_hmac_testutils_finish_timeout_usec.log_fields+0x122>
f00016b2:          |      40000613              li      a2,1024
f00016b6:          |      4705                  li      a4,1
f00016b8:          |      4681                  li      a3,0
f00016ba:          |      4781                  li      a5,0
f00016bc:          |      60c020ef              jal     ra,f0003cc8 <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:171
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", /*task_stack_depth=*/1024, 0);
    vTaskStartScheduler();
f00016c0:          |      0ef020ef              jal     ra,f0003fae <vTaskStartScheduler>
f00016c4:          |  /-- a031                  j       f00016d0 <_ottf_main+0xe8>
f00016c6:          |  |   c0001073              unimp
f00016ca:          |  |   c0001073              unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:174
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
f00016ce:          \--|-> 2069                  jal     f0001758 <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:178
  }

  // Unreachable.
  CHECK(false);
f00016d0:             \-> 00003517              auipc   a0,0x3
f00016d4:                 23450613              addi    a2,a0,564 # f0004904 <compute_hmac_testutils_finish_timeout_usec.log_fields+0x14>
f00016d8:                 368f05b7              lui     a1,0x368f0
f00016dc:                 4501                  li      a0,0
f00016de:                 4681                  li      a3,0
f00016e0:                 5a1010ef              jal     ra,f0003480 <status_create>
f00016e4:                 00010423              sb      zero,8(sp)
f00016e8:                 00814583              lbu     a1,8(sp)
f00016ec:       /-------- e1a9                  bnez    a1,f000172e <_ottf_main+0x146>
f00016ee:       |         8ea42503              lw      a0,-1814(s0)
f00016f2:       |  /----- cd09                  beqz    a0,f000170c <_ottf_main+0x124>
f00016f4:       |  |      1000f517              auipc   a0,0x1000f
f00016f8:       |  |      a9c50513              addi    a0,a0,-1380 # 10190 <_non_volatile_scratch_end+0xff90190>
f00016fc:       |  |      4581                  li      a1,0
f00016fe:       |  |      582010ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001702:       |  |  /-- a819                  j       f0001718 <_ottf_main+0x130>
f0001704:       |  |  |   c0001073              unimp
f0001708:       |  |  |   c0001073              unimp
f000170c:       |  \--|-> 00003517              auipc   a0,0x3
f0001710:       |     |   3d050513              addi    a0,a0,976 # f0004adc <_ottf_main.log_fields.9>
f0001714:       |     |   4b8010ef              jal     ra,f0002bcc <base_log_internal_core>
f0001718:       |     \-> 00003517              auipc   a0,0x3
f000171c:       |         1ec50613              addi    a2,a0,492 # f0004904 <compute_hmac_testutils_finish_timeout_usec.log_fields+0x14>
f0001720:       |         4535                  li      a0,13
f0001722:       |         368f05b7              lui     a1,0x368f0
f0001726:       |         0b200693              li      a3,178
f000172a:       |         557010ef              jal     ra,f0003480 <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_WARN_UNUSED_RESULT
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0 ? (absl_status_t)bitfield_field32_read(
f000172e:       \-------> 00052593              slti    a1,a0,0
f0001732:                 897d                  andi    a0,a0,31
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:178
f0001734:                 00a03533              snez    a0,a0
f0001738:                 8d6d                  and     a0,a0,a1
f000173a:             /-- c511                  beqz    a0,f0001746 <_ottf_main+0x15e>
f000173c:             |   6531                  lui     a0,0xc
f000173e:             |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001742:             |   36e010ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:179
}
f0001746:             \-> 50b2                  lw      ra,44(sp)
f0001748:                 5422                  lw      s0,40(sp)
f000174a:                 5492                  lw      s1,36(sp)
f000174c:                 6145                  addi    sp,sp,48
f000174e:                 8082                  ret
f0001750:                 c0001073              unimp
f0001754:                 c0001073              unimp

f0001758 <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:140
static void test_wrapper(void *task_parameters) {
f0001758:                       7179                    addi    sp,sp,-48
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:142
  bool result = manufacturer_pre_test_hook();
f000175a:                       d606                    sw      ra,44(sp)
f000175c:                       d422                    sw      s0,40(sp)
f000175e:                       d226                    sw      s1,36(sp)
f0001760:                       d04a                    sw      s2,32(sp)
f0001762:                       ce4e                    sw      s3,28(sp)
f0001764:                       cc52                    sw      s4,24(sp)
f0001766:                       ca56                    sw      s5,20(sp)
f0001768:                       c85a                    sw      s6,16(sp)
f000176a:                       c65e                    sw      s7,12(sp)
f000176c:                       c462                    sw      s8,8(sp)
f000176e:                       4c3020ef                jal     ra,f0004430 <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
  result = result && test_main();
f0001772:                /----- cd01                    beqz    a0,f000178a <test_wrapper+0x32>
f0001774:                |      8a0ff0ef                jal     ra,f0000814 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:144
  result = result && manufacturer_post_test_hook();
f0001778:                +----- c909                    beqz    a0,f000178a <test_wrapper+0x32>
f000177a:                |      4c3020ef                jal     ra,f000443c <manufacturer_post_test_hook>
f000177e:                |      892a                    mv      s2,a0
f0001780:                |  /-- a031                    j       f000178c <test_wrapper+0x34>
f0001782:                |  |   c0001073                unimp
f0001786:                |  |   c0001073                unimp
f000178a:                \--|-> 4901                    li      s2,0
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:105
  if (kDeviceType != kDeviceSimDV) {
f000178c:                   \-> 00004517                auipc   a0,0x4
f0001790:                       74052503                lw      a0,1856(a0) # f0005ecc <kDeviceType>
f0001794:                       00004497                auipc   s1,0x4
f0001798:          /----------- c505                    beqz    a0,f00017c0 <test_wrapper+0x68>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:106
    if (kOttfTestConfig.console.test_may_clobber) {
f000179a:          |            00003517                auipc   a0,0x3
f000179e:          |            e3e50413                addi    s0,a0,-450 # f00045d8 <kOttfTestConfig>
f00017a2:          |            00c44503                lbu     a0,12(s0) # 900c <_non_volatile_scratch_size+0x400c>
f00017a6:          |        /-- c111                    beqz    a0,f00017aa <test_wrapper+0x52>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:107
      ottf_console_init();
f00017a8:          |        |   22fd                    jal     f0001996 <ottf_console_init>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:109
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f00017aa:          |        \-> 7584a503                lw      a0,1880(s1) # f0005eec <kDeviceLogBypassUartAddress>
f00017ae:          |            4850                    lw      a2,20(s0)
f00017b0:          |     /----- c10d                    beqz    a0,f00017d2 <test_wrapper+0x7a>
f00017b2:          |     |      1000f517                auipc   a0,0x1000f
f00017b6:          |     |      9f250513                addi    a0,a0,-1550 # 101a4 <_non_volatile_scratch_end+0xff901a4>
f00017ba:          |     |      4585                    li      a1,1
f00017bc:          |     |      4c4010ef                jal     ra,f0002c80 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  if (!result) {
f00017c0:          \--/--|----X 02090263                beqz    s2,f00017e4 <test_wrapper+0x8c>
f00017c4:             |  |  /-> 6425                    lui     s0,0x9
f00017c6:             |  |  |   0435                    addi    s0,s0,13
f00017c8:       /-----|--|--|-- a0e5                    j       f00018b0 <test_wrapper+0x158>
f00017ca:       |     |  |  |   c0001073                unimp
f00017ce:       |     |  |  |   c0001073                unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:109
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f00017d2:       |     |  \--|-> 00003517                auipc   a0,0x3
f00017d6:       |     |     |   31e50513                addi    a0,a0,798 # f0004af0 <report_test_status.log_fields>
f00017da:       |     |     |   85b2                    mv      a1,a2
f00017dc:       |     |     |   3f0010ef                jal     ra,f0002bcc <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  if (!result) {
f00017e0:       |     |     \-- fe0912e3                bnez    s2,f00017c4 <test_wrapper+0x6c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:115
    LOG_INFO("Status reported by the test:");
f00017e4:       |     \-------> 7584a983                lw      s3,1880(s1)
f00017e8:       |        /----- 00098e63                beqz    s3,f0001804 <test_wrapper+0xac>
f00017ec:       |        |      1000f517                auipc   a0,0x1000f
f00017f0:       |        |      9cc50513                addi    a0,a0,-1588 # 101b8 <_non_volatile_scratch_end+0xff901b8>
f00017f4:       |        |      4581                    li      a1,0
f00017f6:       |        |      48a010ef                jal     ra,f0002c80 <base_log_internal_dv>
f00017fa:       |        |  /-- a819                    j       f0001810 <test_wrapper+0xb8>
f00017fc:       |        |  |   c0001073                unimp
f0001800:       |        |  |   c0001073                unimp
f0001804:       |        \--|-> 00003517                auipc   a0,0x3
f0001808:       |           |   30050513                addi    a0,a0,768 # f0004b04 <report_test_status.log_fields.14>
f000180c:       |           |   3c0010ef                jal     ra,f0002bcc <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:117
    size_t print_cnt = status_report_list_cnt;
f0001810:       |           \-> f0001a97                auipc   s5,0xf0001
f0001814:       |               85caa503                lw      a0,-1956(s5) # e000206c <status_report_list_cnt>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:118
    if (status_report_list_cnt > kStatusReportListSize) {
f0001818:       |               00003597                auipc   a1,0x3
f000181c:       |               2985ab03                lw      s6,664(a1) # f0004ab0 <kStatusReportListSize>
f0001820:       |               0b655bb3                minu    s7,a0,s6
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:122
    for (size_t i = 1; i <= print_cnt; i++) {
f0001824:       |  /----------- 040b8d63                beqz    s7,f000187e <test_wrapper+0x126>
f0001828:       |  |            4405                    li      s0,1
f000182a:       |  |            54fd                    li      s1,-1
f000182c:       |  |            f0001517                auipc   a0,0xf0001
f0001830:       |  |            8c050c13                addi    s8,a0,-1856 # e00020ec <status_report_list>
f0001834:       |  |            00003517                auipc   a0,0x3
f0001838:       |  |            2e450913                addi    s2,a0,740 # f0004b18 <report_test_status.log_fields.17>
f000183c:       |  |            1000f517                auipc   a0,0x1000f
f0001840:       |  |            99050a13                addi    s4,a0,-1648 # 101cc <_non_volatile_scratch_end+0xff901cc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:123
      size_t idx = (status_report_list_cnt - i) % kStatusReportListSize;
f0001844:       |  |  /-------> 85caa503                lw      a0,-1956(s5)
f0001848:       |  |  |         9526                    add     a0,a0,s1
f000184a:       |  |  |         03657533                remu    a0,a0,s6
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:124
      LOG_INFO("- %r", status_report_list[idx]);
f000184e:       |  |  |         21854533                sh2add  a0,a0,s8
f0001852:       |  |  |         4110                    lw      a2,0(a0)
f0001854:       |  |  |  /----- 00098b63                beqz    s3,f000186a <test_wrapper+0x112>
f0001858:       |  |  |  |      4585                    li      a1,1
f000185a:       |  |  |  |      8552                    mv      a0,s4
f000185c:       |  |  |  |      424010ef                jal     ra,f0002c80 <base_log_internal_dv>
f0001860:       |  |  |  |  /-- a809                    j       f0001872 <test_wrapper+0x11a>
f0001862:       |  |  |  |  |   c0001073                unimp
f0001866:       |  |  |  |  |   c0001073                unimp
f000186a:       |  |  |  \--|-> 854a                    mv      a0,s2
f000186c:       |  |  |     |   85b2                    mv      a1,a2
f000186e:       |  |  |     |   35e010ef                jal     ra,f0002bcc <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:122
    for (size_t i = 1; i <= print_cnt; i++) {
f0001872:       |  |  |     \-> 0405                    addi    s0,s0,1
f0001874:       |  |  |         14fd                    addi    s1,s1,-1
f0001876:       |  |  \-------- fc8bf7e3                bgeu    s7,s0,f0001844 <test_wrapper+0xec>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:127
    if (status_report_list_cnt > kStatusReportListSize) {
f000187a:       |  |            85caa503                lw      a0,-1956(s5)
f000187e:       |  \-----/----X 02ab7663                bgeu    s6,a0,f00018aa <test_wrapper+0x152>
f0001882:       |        |  /-- 00098e63                beqz    s3,f000189e <test_wrapper+0x146>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:128
      LOG_INFO(
f0001886:       |        |  |   1000f517                auipc   a0,0x1000f
f000188a:       |        |  |   95a50513                addi    a0,a0,-1702 # 101e0 <_non_volatile_scratch_end+0xff901e0>
f000188e:       |        |  |   4581                    li      a1,0
f0001890:       |        |  |   3f0010ef                jal     ra,f0002c80 <base_log_internal_dv>
f0001894:       |        +--|-- a819                    j       f00018aa <test_wrapper+0x152>
f0001896:       |        |  |   c0001073                unimp
f000189a:       |        |  |   c0001073                unimp
f000189e:       |        |  \-> 00003517                auipc   a0,0x3
f00018a2:       |        |      28e50513                addi    a0,a0,654 # f0004b2c <report_test_status.log_fields.20>
f00018a6:       |        |      326010ef                jal     ra,f0002bcc <base_log_internal_core>
f00018aa:       |        \----> 6531                    lui     a0,0xc
f00018ac:       |               aad50413                addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:133
  coverage_send_buffer();
f00018b0:       \-------------> 201d                    jal     f00018d6 <coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:134
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
f00018b2:                       8522                    mv      a0,s0
f00018b4:                       50b2                    lw      ra,44(sp)
f00018b6:                       5422                    lw      s0,40(sp)
f00018b8:                       5492                    lw      s1,36(sp)
f00018ba:                       5902                    lw      s2,32(sp)
f00018bc:                       49f2                    lw      s3,28(sp)
f00018be:                       4a62                    lw      s4,24(sp)
f00018c0:                       4ad2                    lw      s5,20(sp)
f00018c2:                       4b42                    lw      s6,16(sp)
f00018c4:                       4bb2                    lw      s7,12(sp)
f00018c6:                       4c22                    lw      s8,8(sp)
f00018c8:                       6145                    addi    sp,sp,48
f00018ca:                       1e60106f                j       f0002ab0 <test_status_set>
f00018ce:                       c0001073                unimp
f00018d2:                       c0001073                unimp

f00018d6 <coverage_send_buffer>:
coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void coverage_send_buffer(void) {}
f00018d6:       8082                    ret
f00018d8:       c0001073                unimp
f00018dc:       c0001073                unimp

f00018e0 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
f00018e0:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("%s",
f00018e2:              c606                     sw      ra,12(sp)
f00018e4:              00004517                 auipc   a0,0x4
f00018e8:              60852503                 lw      a0,1544(a0) # f0005eec <kDeviceLogBypassUartAddress>
f00018ec:          /-- e105                     bnez    a0,f000190c <vApplicationMallocFailedHook+0x2c>
f00018ee:          |   00003517                 auipc   a0,0x3
f00018f2:          |   30250513                 addi    a0,a0,770 # f0004bf0 <vApplicationMallocFailedHook.log_fields>
f00018f6:          |   00003597                 auipc   a1,0x3
f00018fa:          |   28058593                 addi    a1,a1,640 # f0004b76 <report_test_status.log_fields.20+0x4a>
f00018fe:          |   2ce010ef                 jal     ra,f0002bcc <base_log_internal_core>
f0001902:       /--|-- a005                     j       f0001922 <vApplicationMallocFailedHook+0x42>
f0001904:       |  |   c0001073                 unimp
f0001908:       |  |   c0001073                 unimp
f000190c:       |  \-> 1000f517                 auipc   a0,0x1000f
f0001910:       |      8e850513                 addi    a0,a0,-1816 # 101f4 <_non_volatile_scratch_end+0xff901f4>
f0001914:       |      00003597                 auipc   a1,0x3
f0001918:       |      26258613                 addi    a2,a1,610 # f0004b76 <report_test_status.log_fields.20+0x4a>
f000191c:       |      4585                     li      a1,1
f000191e:       |      362010ef                 jal     ra,f0002c80 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
           "FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
  irq_global_ctrl(false);
f0001922:       \----> 4501                     li      a0,0
f0001924:              335000ef                 jal     ra,f0002458 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:22
  abort();
f0001928:              26c010ef                 jal     ra,f0002b94 <abort>

f000192c <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
f000192c:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s",
f000192e:              c606                     sw      ra,12(sp)
f0001930:              00004517                 auipc   a0,0x4
f0001934:              5bc52503                 lw      a0,1468(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0001938:              862e                     mv      a2,a1
f000193a:       /----- ed09                     bnez    a0,f0001954 <vApplicationStackOverflowHook+0x28>
f000193c:       |      00003517                 auipc   a0,0x3
f0001940:       |      2c850513                 addi    a0,a0,712 # f0004c04 <vApplicationStackOverflowHook.log_fields>
f0001944:       |      85b2                     mv      a1,a2
f0001946:       |      286010ef                 jal     ra,f0002bcc <base_log_internal_core>
f000194a:       |  /-- a821                     j       f0001962 <vApplicationStackOverflowHook+0x36>
f000194c:       |  |   c0001073                 unimp
f0001950:       |  |   c0001073                 unimp
f0001954:       \--|-> 1000f517                 auipc   a0,0x1000f
f0001958:          |   8b450513                 addi    a0,a0,-1868 # 10208 <_non_volatile_scratch_end+0xff90208>
f000195c:          |   4585                     li      a1,1
f000195e:          |   322010ef                 jal     ra,f0002c80 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:32
           pcTaskName);
  irq_global_ctrl(false);
f0001962:          \-> 4501                     li      a0,0
f0001964:              2f5000ef                 jal     ra,f0002458 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:33
  abort();
f0001968:              22c010ef                 jal     ra,f0002b94 <abort>

f000196c <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
f000196c:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
f000196e:       c606                    sw      ra,12(sp)
f0001970:       4505                    li      a0,1
f0001972:       32f000ef                jal     ra,f00024a0 <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
f0001976:       4505                    li      a0,1
f0001978:       303000ef                jal     ra,f000247a <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
f000197c:       4505                    li      a0,1
f000197e:       349000ef                jal     ra,f00024c6 <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
f0001982:       bc7fe0ef                jal     ra,f0000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
f0001986:       4501                    li      a0,0
f0001988:       40b2                    lw      ra,12(sp)
f000198a:       0141                    addi    sp,sp,16
f000198c:       8082                    ret
f000198e:       c0001073                unimp
f0001992:       c0001073                unimp

f0001996 <ottf_console_init>:
ottf_console_init():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:65
    default:
      return &ottf_console_uart;
  }
}

void ottf_console_init(void) {
f0001996:                                         1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:67
  // Initialize/Configure the console device.
  uintptr_t base_addr = kOttfTestConfig.console.base_addr;
f0001998:                                         ce06                  sw      ra,28(sp)
f000199a:                                         cc22                  sw      s0,24(sp)
f000199c:                                         00003517              auipc   a0,0x3
f00019a0:                                         c3c50593              addi    a1,a0,-964 # f00045d8 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:68
  switch (kOttfTestConfig.console.type) {
f00019a4:                                         41c8                  lw      a0,4(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:67
  uintptr_t base_addr = kOttfTestConfig.console.base_addr;
f00019a6:                                         4580                  lw      s0,8(a1)
f00019a8:                                         4585                  li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:68
  switch (kOttfTestConfig.console.type) {
f00019aa:                                     /-- 04b50863              beq     a0,a1,f00019fa <ottf_console_init+0x64>
f00019ae:                               /-----|-- e141                  bnez    a0,f0001a2e <ottf_console_init+0x98>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:72
    case kOttfConsoleUart:
      // Set a default for the console base address if the base address is not
      // configured. The default is to use UART0.
      if (base_addr == 0) {
f00019b0:       /-----------------------|-----|-- 22041e63              bnez    s0,f0001bec <ottf_console_init+0x256>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:73
        CHECK(kOttfTestConfig.console.type == kOttfConsoleUart);
f00019b4:       |                       |     |   00003517              auipc   a0,0x3
f00019b8:       |                       |     |   26450613              addi    a2,a0,612 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f00019bc:       |                       |     |   0e8f05b7              lui     a1,0xe8f0
f00019c0:       |                       |     |   4501                  li      a0,0
f00019c2:       |                       |     |   4681                  li      a3,0
f00019c4:       |                       |     |   2bd010ef              jal     ra,f0003480 <status_create>
f00019c8:       |                       |     |   4585                  li      a1,1
f00019ca:       |                       |     |   00b10ba3              sb      a1,23(sp)
f00019ce:       |                       |     |   01714583              lbu     a1,23(sp)
f00019d2:       |  /--------------------|-----|-- 1e059f63              bnez    a1,f0001bd0 <ottf_console_init+0x23a>
f00019d6:       |  |                    |     |   00004517              auipc   a0,0x4
f00019da:       |  |                    |     |   51652503              lw      a0,1302(a0) # f0005eec <kDeviceLogBypassUartAddress>
f00019de:       |  |  /-----------------|-----|-- 1c050863              beqz    a0,f0001bae <ottf_console_init+0x218>
f00019e2:       |  |  |                 |     |   1000f517              auipc   a0,0x1000f
f00019e6:       |  |  |                 |     |   83a50513              addi    a0,a0,-1990 # 1021c <_non_volatile_scratch_end+0xff9021c>
f00019ea:       |  |  |                 |     |   4581                  li      a1,0
f00019ec:       |  |  |                 |     |   294010ef              jal     ra,f0002c80 <base_log_internal_dv>
f00019f0:       |  |  |  /--------------|-----|-- a2e9                  j       f0001bba <ottf_console_init+0x224>
f00019f2:       |  |  |  |              |     |   c0001073              unimp
f00019f6:       |  |  |  |              |     |   c0001073              unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:80
      }

      ottf_console_configure_uart(base_addr);
      break;
    case (kOttfConsoleSpiDevice):
      CHECK_DIF_OK(dif_spi_device_init_handle(
f00019fa:       |  |  |  |              |     \-> f0000517              auipc   a0,0xf0000
f00019fe:       |  |  |  |              |         71a50593              addi    a1,a0,1818 # e0002114 <ottf_console_spi_device>
f0001a02:       |  |  |  |              |         8522                  mv      a0,s0
f0001a04:       |  |  |  |              |         1cf000ef              jal     ra,f00023d2 <dif_spi_device_init_handle>
f0001a08:       |  |  |  |           /--|-------- c141                  beqz    a0,f0001a88 <ottf_console_init+0xf2>
f0001a0a:       |  |  |  |           |  |         862a                  mv      a2,a0
f0001a0c:       |  |  |  |           |  |         00004517              auipc   a0,0x4
f0001a10:       |  |  |  |           |  |         4e052503              lw      a0,1248(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0001a14:       |  |  |  |           |  |  /----- cd31                  beqz    a0,f0001a70 <ottf_console_init+0xda>
f0001a16:       |  |  |  |           |  |  |      1000f517              auipc   a0,0x1000f
f0001a1a:       |  |  |  |           |  |  |      81a50513              addi    a0,a0,-2022 # 10230 <_non_volatile_scratch_end+0xff90230>
f0001a1e:       |  |  |  |           |  |  |      4585                  li      a1,1
f0001a20:       |  |  |  |           |  |  |      260010ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001a24:       |  |  |  |           |  |  |  /-- a8a9                  j       f0001a7e <ottf_console_init+0xe8>
f0001a26:       |  |  |  |           |  |  |  |   c0001073              unimp
f0001a2a:       |  |  |  |           |  |  |  |   c0001073              unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:93
              .device_mode = kDifSpiDeviceModeFlashEmulation,
          }));
      CHECK(false, "spi_device not yet supported as OTTF console.");
      break;
    default:
      CHECK(false, "unsupported OTTF console interface.");
f0001a2e:       |  |  |  |           |  \--|--|-> 00003517              auipc   a0,0x3
f0001a32:       |  |  |  |           |     |  |   1ea50613              addi    a2,a0,490 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001a36:       |  |  |  |           |     |  |   0e8f05b7              lui     a1,0xe8f0
f0001a3a:       |  |  |  |           |     |  |   4501                  li      a0,0
f0001a3c:       |  |  |  |           |     |  |   4681                  li      a3,0
f0001a3e:       |  |  |  |           |     |  |   243010ef              jal     ra,f0003480 <status_create>
f0001a42:       |  |  |  |           |     |  |   00010323              sb      zero,6(sp)
f0001a46:       |  |  |  |           |     |  |   00614583              lbu     a1,6(sp)
f0001a4a:       |  |  |  |  /--------|-----|--|-- 0e059a63              bnez    a1,f0001b3e <ottf_console_init+0x1a8>
f0001a4e:       |  |  |  |  |        |     |  |   00004517              auipc   a0,0x4
f0001a52:       |  |  |  |  |        |     |  |   49e52503              lw      a0,1182(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0001a56:       |  |  |  |  |  /-----|-----|--|-- c179                  beqz    a0,f0001b1c <ottf_console_init+0x186>
f0001a58:       |  |  |  |  |  |     |     |  |   1000f517              auipc   a0,0x1000f
f0001a5c:       |  |  |  |  |  |     |     |  |   81450513              addi    a0,a0,-2028 # 1026c <_non_volatile_scratch_end+0xff9026c>
f0001a60:       |  |  |  |  |  |     |     |  |   4581                  li      a1,0
f0001a62:       |  |  |  |  |  |     |     |  |   21e010ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001a66:       |  |  |  |  |  |  /--|-----|--|-- a0c9                  j       f0001b28 <ottf_console_init+0x192>
f0001a68:       |  |  |  |  |  |  |  |     |  |   c0001073              unimp
f0001a6c:       |  |  |  |  |  |  |  |     |  |   c0001073              unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:80
      CHECK_DIF_OK(dif_spi_device_init_handle(
f0001a70:       |  |  |  |  |  |  |  |     \--|-> 00004517              auipc   a0,0x4
f0001a74:       |  |  |  |  |  |  |  |        |   a2c50513              addi    a0,a0,-1492 # f000549c <ottf_console_init.log_fields.4>
f0001a78:       |  |  |  |  |  |  |  |        |   85b2                  mv      a1,a2
f0001a7a:       |  |  |  |  |  |  |  |        |   152010ef              jal     ra,f0002bcc <base_log_internal_core>
f0001a7e:       |  |  |  |  |  |  |  |        \-> 6531                  lui     a0,0xc
f0001a80:       |  |  |  |  |  |  |  |            aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001a84:       |  |  |  |  |  |  |  |            02c010ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:83
      CHECK_DIF_OK(dif_spi_device_configure(
f0001a88:       |  |  |  |  |  |  |  \----------> c402                  sw      zero,8(sp)
f0001a8a:       |  |  |  |  |  |  |               c602                  sw      zero,12(sp)
f0001a8c:       |  |  |  |  |  |  |               4505                  li      a0,1
f0001a8e:       |  |  |  |  |  |  |               c82a                  sw      a0,16(sp)
f0001a90:       |  |  |  |  |  |  |               f0000517              auipc   a0,0xf0000
f0001a94:       |  |  |  |  |  |  |               68450513              addi    a0,a0,1668 # e0002114 <ottf_console_spi_device>
f0001a98:       |  |  |  |  |  |  |               002c                  addi    a1,sp,8
f0001a9a:       |  |  |  |  |  |  |               151000ef              jal     ra,f00023ea <dif_spi_device_configure>
f0001a9e:       |  |  |  |  |  |  |     /-------- cd1d                  beqz    a0,f0001adc <ottf_console_init+0x146>
f0001aa0:       |  |  |  |  |  |  |     |         862a                  mv      a2,a0
f0001aa2:       |  |  |  |  |  |  |     |         00004517              auipc   a0,0x4
f0001aa6:       |  |  |  |  |  |  |     |         44a52503              lw      a0,1098(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0001aaa:       |  |  |  |  |  |  |     |  /----- cd09                  beqz    a0,f0001ac4 <ottf_console_init+0x12e>
f0001aac:       |  |  |  |  |  |  |     |  |      1000e517              auipc   a0,0x1000e
f0001ab0:       |  |  |  |  |  |  |     |  |      79850513              addi    a0,a0,1944 # 10244 <_non_volatile_scratch_end+0xff90244>
f0001ab4:       |  |  |  |  |  |  |     |  |      4585                  li      a1,1
f0001ab6:       |  |  |  |  |  |  |     |  |      1ca010ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001aba:       |  |  |  |  |  |  |     |  |  /-- a821                  j       f0001ad2 <ottf_console_init+0x13c>
f0001abc:       |  |  |  |  |  |  |     |  |  |   c0001073              unimp
f0001ac0:       |  |  |  |  |  |  |     |  |  |   c0001073              unimp
f0001ac4:       |  |  |  |  |  |  |     |  \--|-> 00004517              auipc   a0,0x4
f0001ac8:       |  |  |  |  |  |  |     |     |   9ec50513              addi    a0,a0,-1556 # f00054b0 <ottf_console_init.log_fields.7>
f0001acc:       |  |  |  |  |  |  |     |     |   85b2                  mv      a1,a2
f0001ace:       |  |  |  |  |  |  |     |     |   0fe010ef              jal     ra,f0002bcc <base_log_internal_core>
f0001ad2:       |  |  |  |  |  |  |     |     \-> 6531                  lui     a0,0xc
f0001ad4:       |  |  |  |  |  |  |     |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001ad8:       |  |  |  |  |  |  |     |         7d9000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:90
      CHECK(false, "spi_device not yet supported as OTTF console.");
f0001adc:       |  |  |  |  |  |  |     \-------> 00003517              auipc   a0,0x3
f0001ae0:       |  |  |  |  |  |  |               13c50613              addi    a2,a0,316 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001ae4:       |  |  |  |  |  |  |               0e8f05b7              lui     a1,0xe8f0
f0001ae8:       |  |  |  |  |  |  |               4501                  li      a0,0
f0001aea:       |  |  |  |  |  |  |               4681                  li      a3,0
f0001aec:       |  |  |  |  |  |  |               195010ef              jal     ra,f0003480 <status_create>
f0001af0:       |  |  |  |  |  |  |               000103a3              sb      zero,7(sp)
f0001af4:       |  |  |  |  |  |  |               00714583              lbu     a1,7(sp)
f0001af8:       |  |  |  |  |  |  |  /----------- e5d9                  bnez    a1,f0001b86 <ottf_console_init+0x1f0>
f0001afa:       |  |  |  |  |  |  |  |            00004517              auipc   a0,0x4
f0001afe:       |  |  |  |  |  |  |  |            3f252503              lw      a0,1010(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0001b02:       |  |  |  |  |  |  |  |  /-------- c12d                  beqz    a0,f0001b64 <ottf_console_init+0x1ce>
f0001b04:       |  |  |  |  |  |  |  |  |         1000e517              auipc   a0,0x1000e
f0001b08:       |  |  |  |  |  |  |  |  |         75450513              addi    a0,a0,1876 # 10258 <_non_volatile_scratch_end+0xff90258>
f0001b0c:       |  |  |  |  |  |  |  |  |         4581                  li      a1,0
f0001b0e:       |  |  |  |  |  |  |  |  |         172010ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001b12:       |  |  |  |  |  |  |  |  |  /----- a8b9                  j       f0001b70 <ottf_console_init+0x1da>
f0001b14:       |  |  |  |  |  |  |  |  |  |      c0001073              unimp
f0001b18:       |  |  |  |  |  |  |  |  |  |      c0001073              unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:93
      CHECK(false, "unsupported OTTF console interface.");
f0001b1c:       |  |  |  |  |  \--|--|--|--|----> 00004517              auipc   a0,0x4
f0001b20:       |  |  |  |  |     |  |  |  |      9bc50513              addi    a0,a0,-1604 # f00054d8 <ottf_console_init.log_fields.14>
f0001b24:       |  |  |  |  |     |  |  |  |      0a8010ef              jal     ra,f0002bcc <base_log_internal_core>
f0001b28:       |  |  |  |  |     \--|--|--|----> 00003517              auipc   a0,0x3
f0001b2c:       |  |  |  |  |        |  |  |      0f050613              addi    a2,a0,240 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001b30:       |  |  |  |  |        |  |  |      4535                  li      a0,13
f0001b32:       |  |  |  |  |        |  |  |      0e8f05b7              lui     a1,0xe8f0
f0001b36:       |  |  |  |  |        |  |  |      05d00693              li      a3,93
f0001b3a:       |  |  |  |  |        |  |  |      147010ef              jal     ra,f0003480 <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
f0001b3e:       |  |  |  |  \--------|--|--|----> 00052593              slti    a1,a0,0
f0001b42:       |  |  |  |           |  |  |      897d                  andi    a0,a0,31
ottf_console_init():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:93
f0001b44:       |  |  |  |           |  |  |      00a03533              snez    a0,a0
f0001b48:       |  |  |  |           |  |  |      8d6d                  and     a0,a0,a1
f0001b4a:       |  |  |  |           |  |  |  /-- c931                  beqz    a0,f0001b9e <ottf_console_init+0x208>
f0001b4c:       |  |  |  |           |  |  |  |   6531                  lui     a0,0xc
f0001b4e:       |  |  |  |           |  |  |  |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001b52:       |  |  |  |           |  |  |  |   40f2                  lw      ra,28(sp)
f0001b54:       |  |  |  |           |  |  |  |   4462                  lw      s0,24(sp)
f0001b56:       |  |  |  |           |  |  |  |   6105                  addi    sp,sp,32
f0001b58:       |  |  |  |           |  |  |  |   7590006f              j       f0002ab0 <test_status_set>
f0001b5c:       |  |  |  |           |  |  |  |   c0001073              unimp
f0001b60:       |  |  |  |           |  |  |  |   c0001073              unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:90
      CHECK(false, "spi_device not yet supported as OTTF console.");
f0001b64:       |  |  |  |           |  \--|--|-> 00004517              auipc   a0,0x4
f0001b68:       |  |  |  |           |     |  |   96050513              addi    a0,a0,-1696 # f00054c4 <ottf_console_init.log_fields.10>
f0001b6c:       |  |  |  |           |     |  |   060010ef              jal     ra,f0002bcc <base_log_internal_core>
f0001b70:       |  |  |  |           |     \--|-> 00003517              auipc   a0,0x3
f0001b74:       |  |  |  |           |        |   0a850613              addi    a2,a0,168 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001b78:       |  |  |  |           |        |   4535                  li      a0,13
f0001b7a:       |  |  |  |           |        |   0e8f05b7              lui     a1,0xe8f0
f0001b7e:       |  |  |  |           |        |   05a00693              li      a3,90
f0001b82:       |  |  |  |           |        |   0ff010ef              jal     ra,f0003480 <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
f0001b86:       |  |  |  |           \--------|-> 00052593              slti    a1,a0,0
f0001b8a:       |  |  |  |                    |   897d                  andi    a0,a0,31
ottf_console_init():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:90
f0001b8c:       |  |  |  |                    |   00a03533              snez    a0,a0
f0001b90:       |  |  |  |                    |   8d6d                  and     a0,a0,a1
f0001b92:       |  |  |  |                    +-- c511                  beqz    a0,f0001b9e <ottf_console_init+0x208>
f0001b94:       |  |  |  |                    |   6531                  lui     a0,0xc
f0001b96:       |  |  |  |                    |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001b9a:       |  |  |  |                    |   717000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:96
      break;
  }
}
f0001b9e:       |  |  |  |                    \-> 40f2                  lw      ra,28(sp)
f0001ba0:       |  |  |  |                        4462                  lw      s0,24(sp)
f0001ba2:       |  |  |  |                        6105                  addi    sp,sp,32
f0001ba4:       |  |  |  |                        8082                  ret
f0001ba6:       |  |  |  |                        c0001073              unimp
f0001baa:       |  |  |  |                        c0001073              unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:73
        CHECK(kOttfTestConfig.console.type == kOttfConsoleUart);
f0001bae:       |  |  \--|----------------------> 00004517              auipc   a0,0x4
f0001bb2:       |  |     |                        8da50513              addi    a0,a0,-1830 # f0005488 <ottf_console_init.log_fields>
f0001bb6:       |  |     |                        016010ef              jal     ra,f0002bcc <base_log_internal_core>
f0001bba:       |  |     \----------------------> 00003517              auipc   a0,0x3
f0001bbe:       |  |                              05e50613              addi    a2,a0,94 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001bc2:       |  |                              4535                  li      a0,13
f0001bc4:       |  |                              0e8f05b7              lui     a1,0xe8f0
f0001bc8:       |  |                              04900693              li      a3,73
f0001bcc:       |  |                              0b5010ef              jal     ra,f0003480 <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
f0001bd0:       |  \----------------------------> 00052593              slti    a1,a0,0
f0001bd4:       |                                 897d                  andi    a0,a0,31
ottf_console_init():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:73
f0001bd6:       |                                 00a03533              snez    a0,a0
f0001bda:       |                                 8d6d                  and     a0,a0,a1
f0001bdc:       |                                 c0000437              lui     s0,0xc0000
f0001be0:       +-------------------------------- c511                  beqz    a0,f0001bec <ottf_console_init+0x256>
f0001be2:       |                                 6531                  lui     a0,0xc
f0001be4:       |                                 aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001be8:       |                                 6c9000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:77
      ottf_console_configure_uart(base_addr);
f0001bec:       \-------------------------------> 8522                  mv      a0,s0
f0001bee:                                         40f2                  lw      ra,28(sp)
f0001bf0:                                         4462                  lw      s0,24(sp)
f0001bf2:                                         6105                  addi    sp,sp,32
f0001bf4:                                         a029                  j       f0001bfe <ottf_console_configure_uart>
f0001bf6:                                         c0001073              unimp
f0001bfa:                                         c0001073              unimp

f0001bfe <ottf_console_configure_uart>:
ottf_console_configure_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:98

void ottf_console_configure_uart(uintptr_t base_addr) {
f0001bfe:                 7179                  addi    sp,sp,-48
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:99
  CHECK_DIF_OK(
f0001c00:                 d606                  sw      ra,44(sp)
f0001c02:                 d422                  sw      s0,40(sp)
f0001c04:                 d226                  sw      s1,36(sp)
f0001c06:                 d04a                  sw      s2,32(sp)
f0001c08:                 f0000597              auipc   a1,0xf0000
f0001c0c:                 46858593              addi    a1,a1,1128 # e0002070 <ottf_console_uart>
f0001c10:                 1e1010ef              jal     ra,f00035f0 <dif_uart_init>
f0001c14:                 00004917              auipc   s2,0x4
f0001c18:       /-------- cd0d                  beqz    a0,f0001c52 <ottf_console_configure_uart+0x54>
f0001c1a:       |         862a                  mv      a2,a0
f0001c1c:       |         2d892503              lw      a0,728(s2) # f0005eec <kDeviceLogBypassUartAddress>
f0001c20:       |  /----- cd09                  beqz    a0,f0001c3a <ottf_console_configure_uart+0x3c>
f0001c22:       |  |      1000e517              auipc   a0,0x1000e
f0001c26:       |  |      65e50513              addi    a0,a0,1630 # 10280 <_non_volatile_scratch_end+0xff90280>
f0001c2a:       |  |      4585                  li      a1,1
f0001c2c:       |  |      054010ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001c30:       |  |  /-- a821                  j       f0001c48 <ottf_console_configure_uart+0x4a>
f0001c32:       |  |  |   c0001073              unimp
f0001c36:       |  |  |   c0001073              unimp
f0001c3a:       |  \--|-> 00004517              auipc   a0,0x4
f0001c3e:       |     |   8b250513              addi    a0,a0,-1870 # f00054ec <ottf_console_configure_uart.log_fields>
f0001c42:       |     |   85b2                  mv      a1,a2
f0001c44:       |     |   789000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001c48:       |     \-> 6531                  lui     a0,0xc
f0001c4a:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001c4e:       |         663000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:101
      dif_uart_init(mmio_region_from_addr(base_addr), &ottf_console_uart));
  CHECK(kUartBaudrate <= UINT32_MAX, "kUartBaudrate must fit in uint32_t");
f0001c52:       \-------> 00003517              auipc   a0,0x3
f0001c56:                 fc650613              addi    a2,a0,-58 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001c5a:                 0e8f05b7              lui     a1,0xe8f0
f0001c5e:                 4501                  li      a0,0
f0001c60:                 4681                  li      a3,0
f0001c62:                 01f010ef              jal     ra,f0003480 <status_create>
f0001c66:                 00004597              auipc   a1,0x4
f0001c6a:                 27a58493              addi    s1,a1,634 # f0005ee0 <kUartBaudrate>
f0001c6e:                 40cc                  lw      a1,4(s1)
f0001c70:                 0015b593              seqz    a1,a1
f0001c74:                 00b10423              sb      a1,8(sp)
f0001c78:                 00814583              lbu     a1,8(sp)
f0001c7c:       /-------- e1a9                  bnez    a1,f0001cbe <ottf_console_configure_uart+0xc0>
f0001c7e:       |         2d892503              lw      a0,728(s2)
f0001c82:       |  /----- cd09                  beqz    a0,f0001c9c <ottf_console_configure_uart+0x9e>
f0001c84:       |  |      1000e517              auipc   a0,0x1000e
f0001c88:       |  |      61050513              addi    a0,a0,1552 # 10294 <_non_volatile_scratch_end+0xff90294>
f0001c8c:       |  |      4581                  li      a1,0
f0001c8e:       |  |      7f3000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001c92:       |  |  /-- a819                  j       f0001ca8 <ottf_console_configure_uart+0xaa>
f0001c94:       |  |  |   c0001073              unimp
f0001c98:       |  |  |   c0001073              unimp
f0001c9c:       |  \--|-> 00004517              auipc   a0,0x4
f0001ca0:       |     |   86450513              addi    a0,a0,-1948 # f0005500 <ottf_console_configure_uart.log_fields.19>
f0001ca4:       |     |   729000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001ca8:       |     \-> 00003517              auipc   a0,0x3
f0001cac:       |         f7050613              addi    a2,a0,-144 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001cb0:       |         4535                  li      a0,13
f0001cb2:       |         0e8f05b7              lui     a1,0xe8f0
f0001cb6:       |         06500693              li      a3,101
f0001cba:       |         7c6010ef              jal     ra,f0003480 <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
f0001cbe:       \-------> 00052593              slti    a1,a0,0
f0001cc2:                 897d                  andi    a0,a0,31
ottf_console_configure_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:101
f0001cc4:                 00a03533              snez    a0,a0
f0001cc8:                 8d6d                  and     a0,a0,a1
f0001cca:             /-- c511                  beqz    a0,f0001cd6 <ottf_console_configure_uart+0xd8>
f0001ccc:             |   6531                  lui     a0,0xc
f0001cce:             |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001cd2:             |   5df000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:102
  CHECK(kClockFreqPeripheralHz <= UINT32_MAX,
f0001cd6:             \-> 00003517              auipc   a0,0x3
f0001cda:                 f4250613              addi    a2,a0,-190 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001cde:                 0e8f05b7              lui     a1,0xe8f0
f0001ce2:                 4501                  li      a0,0
f0001ce4:                 4681                  li      a3,0
f0001ce6:                 79a010ef              jal     ra,f0003480 <status_create>
f0001cea:                 00004597              auipc   a1,0x4
f0001cee:                 1ee58413              addi    s0,a1,494 # f0005ed8 <kClockFreqPeripheralHz>
f0001cf2:                 404c                  lw      a1,4(s0)
f0001cf4:                 0015b593              seqz    a1,a1
f0001cf8:                 00b10423              sb      a1,8(sp)
f0001cfc:                 00814583              lbu     a1,8(sp)
f0001d00:       /-------- e1a9                  bnez    a1,f0001d42 <ottf_console_configure_uart+0x144>
f0001d02:       |         2d892503              lw      a0,728(s2)
f0001d06:       |  /----- cd09                  beqz    a0,f0001d20 <ottf_console_configure_uart+0x122>
f0001d08:       |  |      1000e517              auipc   a0,0x1000e
f0001d0c:       |  |      5a050513              addi    a0,a0,1440 # 102a8 <_non_volatile_scratch_end+0xff902a8>
f0001d10:       |  |      4581                  li      a1,0
f0001d12:       |  |      76f000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001d16:       |  |  /-- a819                  j       f0001d2c <ottf_console_configure_uart+0x12e>
f0001d18:       |  |  |   c0001073              unimp
f0001d1c:       |  |  |   c0001073              unimp
f0001d20:       |  \--|-> 00003517              auipc   a0,0x3
f0001d24:       |     |   7f450513              addi    a0,a0,2036 # f0005514 <ottf_console_configure_uart.log_fields.22>
f0001d28:       |     |   6a5000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001d2c:       |     \-> 00003517              auipc   a0,0x3
f0001d30:       |         eec50613              addi    a2,a0,-276 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0001d34:       |         4535                  li      a0,13
f0001d36:       |         0e8f05b7              lui     a1,0xe8f0
f0001d3a:       |         06700693              li      a3,103
f0001d3e:       |         742010ef              jal     ra,f0003480 <status_create>
f0001d42:       \-------> 4084                  lw      s1,0(s1)
f0001d44:                 4000                  lw      s0,0(s0)
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
f0001d46:                 00052593              slti    a1,a0,0
f0001d4a:                 897d                  andi    a0,a0,31
ottf_console_configure_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:102
f0001d4c:                 00a03533              snez    a0,a0
f0001d50:                 8d6d                  and     a0,a0,a1
f0001d52:             /-- c511                  beqz    a0,f0001d5e <ottf_console_configure_uart+0x160>
f0001d54:             |   6531                  lui     a0,0xc
f0001d56:             |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001d5a:             |   557000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:104
        "kClockFreqPeripheralHz must fit in uint32_t");
  CHECK_DIF_OK(dif_uart_configure(
f0001d5e:             \-> c426                  sw      s1,8(sp)
f0001d60:                 c622                  sw      s0,12(sp)
f0001d62:                 c802                  sw      zero,16(sp)
f0001d64:                 4505                  li      a0,1
f0001d66:                 ca2a                  sw      a0,20(sp)
f0001d68:                 cc2a                  sw      a0,24(sp)
f0001d6a:                 ce2a                  sw      a0,28(sp)
f0001d6c:                 f0000517              auipc   a0,0xf0000
f0001d70:                 30450513              addi    a0,a0,772 # e0002070 <ottf_console_uart>
f0001d74:                 002c                  addi    a1,sp,8
f0001d76:                 16b010ef              jal     ra,f00036e0 <dif_uart_configure>
f0001d7a:       /-------- cd0d                  beqz    a0,f0001db4 <ottf_console_configure_uart+0x1b6>
f0001d7c:       |         862a                  mv      a2,a0
f0001d7e:       |         2d892503              lw      a0,728(s2)
f0001d82:       |  /----- cd09                  beqz    a0,f0001d9c <ottf_console_configure_uart+0x19e>
f0001d84:       |  |      1000e517              auipc   a0,0x1000e
f0001d88:       |  |      53850513              addi    a0,a0,1336 # 102bc <_non_volatile_scratch_end+0xff902bc>
f0001d8c:       |  |      4585                  li      a1,1
f0001d8e:       |  |      6f3000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001d92:       |  |  /-- a821                  j       f0001daa <ottf_console_configure_uart+0x1ac>
f0001d94:       |  |  |   c0001073              unimp
f0001d98:       |  |  |   c0001073              unimp
f0001d9c:       |  \--|-> 00003517              auipc   a0,0x3
f0001da0:       |     |   78c50513              addi    a0,a0,1932 # f0005528 <ottf_console_configure_uart.log_fields.26>
f0001da4:       |     |   85b2                  mv      a1,a2
f0001da6:       |     |   627000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001daa:       |     \-> 6531                  lui     a0,0xc
f0001dac:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001db0:       |         501000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:113
                              .parity_enable = kDifToggleDisabled,
                              .parity = kDifUartParityEven,
                              .tx_enable = kDifToggleEnabled,
                              .rx_enable = kDifToggleEnabled,
                          }));
  base_uart_stdout(&ottf_console_uart);
f0001db4:       \-------> f0000517              auipc   a0,0xf0000
f0001db8:                 2bc50513              addi    a0,a0,700 # e0002070 <ottf_console_uart>
f0001dbc:                 70b000ef              jal     ra,f0002cc6 <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:116

  // Initialize/Configure console flow control (if requested).
  if (kOttfTestConfig.enable_uart_flow_control) {
f0001dc0:                 00003517              auipc   a0,0x3
f0001dc4:                 82854503              lbu     a0,-2008(a0) # f00045e8 <kOttfTestConfig+0x10>
f0001dc8:             /-- c111                  beqz    a0,f0001dcc <ottf_console_configure_uart+0x1ce>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:117
    ottf_console_flow_control_enable();
f0001dca:             |   2819                  jal     f0001de0 <ottf_console_flow_control_enable>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:119
  }
}
f0001dcc:             \-> 50b2                  lw      ra,44(sp)
f0001dce:                 5422                  lw      s0,40(sp)
f0001dd0:                 5492                  lw      s1,36(sp)
f0001dd2:                 5902                  lw      s2,32(sp)
f0001dd4:                 6145                  addi    sp,sp,48
f0001dd6:                 8082                  ret
f0001dd8:                 c0001073              unimp
f0001ddc:                 c0001073              unimp

f0001de0 <ottf_console_flow_control_enable>:
ottf_console_flow_control_enable():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:137
    default:
      return kTopEarlgreyPlicIrqIdUart0RxWatermark;
  }
}

void ottf_console_flow_control_enable(void) {
f0001de0:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:138
  CHECK_DIF_OK(dif_rv_plic_init(
f0001de2:                 ce06                  sw      ra,28(sp)
f0001de4:                 cc22                  sw      s0,24(sp)
f0001de6:                 ca26                  sw      s1,20(sp)
f0001de8:                 c84a                  sw      s2,16(sp)
f0001dea:                 c64e                  sw      s3,12(sp)
f0001dec:                 f0000517              auipc   a0,0xf0000
f0001df0:                 29450593              addi    a1,a0,660 # e0002080 <ottf_plic>
f0001df4:                 c8000537              lui     a0,0xc8000
f0001df8:                 29d000ef              jal     ra,f0002894 <dif_rv_plic_init>
f0001dfc:                 00004497              auipc   s1,0x4
f0001e00:       /-------- cd0d                  beqz    a0,f0001e3a <ottf_console_flow_control_enable+0x5a>
f0001e02:       |         862a                  mv      a2,a0
f0001e04:       |         0f04a503              lw      a0,240(s1) # f0005eec <kDeviceLogBypassUartAddress>
f0001e08:       |  /----- cd09                  beqz    a0,f0001e22 <ottf_console_flow_control_enable+0x42>
f0001e0a:       |  |      1000e517              auipc   a0,0x1000e
f0001e0e:       |  |      4c650513              addi    a0,a0,1222 # 102d0 <_non_volatile_scratch_end+0xff902d0>
f0001e12:       |  |      4585                  li      a1,1
f0001e14:       |  |      66d000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001e18:       |  |  /-- a821                  j       f0001e30 <ottf_console_flow_control_enable+0x50>
f0001e1a:       |  |  |   c0001073              unimp
f0001e1e:       |  |  |   c0001073              unimp
f0001e22:       |  \--|-> 00003517              auipc   a0,0x3
f0001e26:       |     |   71a50513              addi    a0,a0,1818 # f000553c <ottf_console_flow_control_enable.log_fields>
f0001e2a:       |     |   85b2                  mv      a1,a2
f0001e2c:       |     |   5a1000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001e30:       |     \-> 6531                  lui     a0,0xc
f0001e32:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001e36:       |         47b000ef              jal     ra,f0002ab0 <test_status_set>
ottf_console_get():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:57
  switch (kOttfTestConfig.console.type) {
f0001e3a:       \-------> 00002517              auipc   a0,0x2
f0001e3e:                 79e50413              addi    s0,a0,1950 # f00045d8 <kOttfTestConfig>
f0001e42:                 4048                  lw      a0,4(s0)
f0001e44:                 4585                  li      a1,1
f0001e46:          /----- 00b50b63              beq     a0,a1,f0001e5c <ottf_console_flow_control_enable+0x7c>
f0001e4a:          |      f0000517              auipc   a0,0xf0000
f0001e4e:          |      22650913              addi    s2,a0,550 # e0002070 <ottf_console_uart>
f0001e52:          |  /-- a809                  j       f0001e64 <ottf_console_flow_control_enable+0x84>
f0001e54:          |  |   c0001073              unimp
f0001e58:          |  |   c0001073              unimp
f0001e5c:          \--|-> f0000517              auipc   a0,0xf0000
f0001e60:             |   2b850913              addi    s2,a0,696 # e0002114 <ottf_console_spi_device>
ottf_console_flow_control_enable():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:142
      mmio_region_from_addr(TOP_EARLGREY_RV_PLIC_BASE_ADDR), &ottf_plic));

  dif_uart_t *uart = (dif_uart_t *)ottf_console_get();
  CHECK_DIF_OK(dif_uart_watermark_rx_set(uart, kFlowControlRxWatermark));
f0001e64:             \-> 458d                  li      a1,3
f0001e66:                 854a                  mv      a0,s2
f0001e68:                 15f010ef              jal     ra,f00037c6 <dif_uart_watermark_rx_set>
f0001e6c:       /-------- cd0d                  beqz    a0,f0001ea6 <ottf_console_flow_control_enable+0xc6>
f0001e6e:       |         862a                  mv      a2,a0
f0001e70:       |         0f04a503              lw      a0,240(s1)
f0001e74:       |  /----- cd09                  beqz    a0,f0001e8e <ottf_console_flow_control_enable+0xae>
f0001e76:       |  |      1000e517              auipc   a0,0x1000e
f0001e7a:       |  |      46e50513              addi    a0,a0,1134 # 102e4 <_non_volatile_scratch_end+0xff902e4>
f0001e7e:       |  |      4585                  li      a1,1
f0001e80:       |  |      601000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001e84:       |  |  /-- a821                  j       f0001e9c <ottf_console_flow_control_enable+0xbc>
f0001e86:       |  |  |   c0001073              unimp
f0001e8a:       |  |  |   c0001073              unimp
f0001e8e:       |  \--|-> 00003517              auipc   a0,0x3
f0001e92:       |     |   6c250513              addi    a0,a0,1730 # f0005550 <ottf_console_flow_control_enable.log_fields.30>
f0001e96:       |     |   85b2                  mv      a1,a2
f0001e98:       |     |   535000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001e9c:       |     \-> 6531                  lui     a0,0xc
f0001e9e:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001ea2:       |         40f000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:143
  CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
f0001ea6:       \-------> 4585                  li      a1,1
f0001ea8:                 4605                  li      a2,1
f0001eaa:                 854a                  mv      a0,s2
f0001eac:                 7b8010ef              jal     ra,f0003664 <dif_uart_irq_set_enabled>
f0001eb0:       /-------- cd0d                  beqz    a0,f0001eea <ottf_console_flow_control_enable+0x10a>
f0001eb2:       |         862a                  mv      a2,a0
f0001eb4:       |         0f04a503              lw      a0,240(s1)
f0001eb8:       |  /----- cd09                  beqz    a0,f0001ed2 <ottf_console_flow_control_enable+0xf2>
f0001eba:       |  |      1000e517              auipc   a0,0x1000e
f0001ebe:       |  |      43e50513              addi    a0,a0,1086 # 102f8 <_non_volatile_scratch_end+0xff902f8>
f0001ec2:       |  |      4585                  li      a1,1
f0001ec4:       |  |      5bd000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001ec8:       |  |  /-- a821                  j       f0001ee0 <ottf_console_flow_control_enable+0x100>
f0001eca:       |  |  |   c0001073              unimp
f0001ece:       |  |  |   c0001073              unimp
f0001ed2:       |  \--|-> 00003517              auipc   a0,0x3
f0001ed6:       |     |   69250513              addi    a0,a0,1682 # f0005564 <ottf_console_flow_control_enable.log_fields.33>
f0001eda:       |     |   85b2                  mv      a1,a2
f0001edc:       |     |   4f1000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001ee0:       |     \-> 6531                  lui     a0,0xc
f0001ee2:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001ee6:       |         3cb000ef              jal     ra,f0002ab0 <test_status_set>
get_flow_control_watermark_plic_id():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:122
  switch (kOttfTestConfig.console.base_addr) {
f0001eea:       \-------> 4408                  lw      a0,8(s0)
f0001eec:                 400005b7              lui     a1,0x40000
f0001ef0:                 95aa                  add     a1,a1,a0
f0001ef2:                 81c1                  srli    a1,a1,0x10
f0001ef4:                 0542                  slli    a0,a0,0x10
f0001ef6:                 8d4d                  or      a0,a0,a1
f0001ef8:                 fff50413              addi    s0,a0,-1
f0001efc:                 450d                  li      a0,3
f0001efe:                 00341993              slli    s3,s0,0x3
f0001f02:          /----- 00a46863              bltu    s0,a0,f0001f12 <ottf_console_flow_control_enable+0x132>
f0001f06:          |      4589                  li      a1,2
f0001f08:          |  /-- a039                  j       f0001f16 <ottf_console_flow_control_enable+0x136>
f0001f0a:          |  |   c0001073              unimp
f0001f0e:          |  |   c0001073              unimp
f0001f12:          \--|-> 00a98593              addi    a1,s3,10
ottf_console_flow_control_enable():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:147
                                        kDifToggleEnabled));

  // Set IRQ priorities to MAX
  CHECK_DIF_OK(dif_rv_plic_irq_set_priority(
f0001f16:             \-> 00004517              auipc   a0,0x4
f0001f1a:                 bb252603              lw      a2,-1102(a0) # f0005ac8 <kDifRvPlicMaxPriority>
f0001f1e:                 f0000517              auipc   a0,0xf0000
f0001f22:                 16250513              addi    a0,a0,354 # e0002080 <ottf_plic>
f0001f26:                 1dd000ef              jal     ra,f0002902 <dif_rv_plic_irq_set_priority>
f0001f2a:       /-------- cd0d                  beqz    a0,f0001f64 <ottf_console_flow_control_enable+0x184>
f0001f2c:       |         862a                  mv      a2,a0
f0001f2e:       |         0f04a503              lw      a0,240(s1)
f0001f32:       |  /----- cd09                  beqz    a0,f0001f4c <ottf_console_flow_control_enable+0x16c>
f0001f34:       |  |      1000e517              auipc   a0,0x1000e
f0001f38:       |  |      3d850513              addi    a0,a0,984 # 1030c <_non_volatile_scratch_end+0xff9030c>
f0001f3c:       |  |      4585                  li      a1,1
f0001f3e:       |  |      543000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001f42:       |  |  /-- a821                  j       f0001f5a <ottf_console_flow_control_enable+0x17a>
f0001f44:       |  |  |   c0001073              unimp
f0001f48:       |  |  |   c0001073              unimp
f0001f4c:       |  \--|-> 00003517              auipc   a0,0x3
f0001f50:       |     |   62c50513              addi    a0,a0,1580 # f0005578 <ottf_console_flow_control_enable.log_fields.36>
f0001f54:       |     |   85b2                  mv      a1,a2
f0001f56:       |     |   477000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001f5a:       |     \-> 6531                  lui     a0,0xc
f0001f5c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001f60:       |         351000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:150
      &ottf_plic, get_flow_control_watermark_plic_id(), kDifRvPlicMaxPriority));
  // Set Ibex IRQ priority threshold level
  CHECK_DIF_OK(dif_rv_plic_target_set_threshold(&ottf_plic, kPlicTarget,
f0001f64:       \-------> 00004517              auipc   a0,0x4
f0001f68:                 b6052603              lw      a2,-1184(a0) # f0005ac4 <kDifRvPlicMinPriority>
f0001f6c:                 f0000517              auipc   a0,0xf0000
f0001f70:                 11450513              addi    a0,a0,276 # e0002080 <ottf_plic>
f0001f74:                 4581                  li      a1,0
f0001f76:                 1bf000ef              jal     ra,f0002934 <dif_rv_plic_target_set_threshold>
f0001f7a:       /-------- cd0d                  beqz    a0,f0001fb4 <ottf_console_flow_control_enable+0x1d4>
f0001f7c:       |         862a                  mv      a2,a0
f0001f7e:       |         0f04a503              lw      a0,240(s1)
f0001f82:       |  /----- cd09                  beqz    a0,f0001f9c <ottf_console_flow_control_enable+0x1bc>
f0001f84:       |  |      1000e517              auipc   a0,0x1000e
f0001f88:       |  |      39c50513              addi    a0,a0,924 # 10320 <_non_volatile_scratch_end+0xff90320>
f0001f8c:       |  |      4585                  li      a1,1
f0001f8e:       |  |      4f3000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001f92:       |  |  /-- a821                  j       f0001faa <ottf_console_flow_control_enable+0x1ca>
f0001f94:       |  |  |   c0001073              unimp
f0001f98:       |  |  |   c0001073              unimp
f0001f9c:       |  \--|-> 00003517              auipc   a0,0x3
f0001fa0:       |     |   5f050513              addi    a0,a0,1520 # f000558c <ottf_console_flow_control_enable.log_fields.39>
f0001fa4:       |     |   85b2                  mv      a1,a2
f0001fa6:       |     |   427000ef              jal     ra,f0002bcc <base_log_internal_core>
f0001faa:       |     \-> 6531                  lui     a0,0xc
f0001fac:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001fb0:       |         301000ef              jal     ra,f0002ab0 <test_status_set>
f0001fb4:       \-------> 450d                  li      a0,3
get_flow_control_watermark_plic_id():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:122
  switch (kOttfTestConfig.console.base_addr) {
f0001fb6:          /----- 00a46863              bltu    s0,a0,f0001fc6 <ottf_console_flow_control_enable+0x1e6>
f0001fba:          |      4589                  li      a1,2
f0001fbc:          |  /-- a039                  j       f0001fca <ottf_console_flow_control_enable+0x1ea>
f0001fbe:          |  |   c0001073              unimp
f0001fc2:          |  |   c0001073              unimp
f0001fc6:          \--|-> 00a98593              addi    a1,s3,10
ottf_console_flow_control_enable():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:153
                                                kDifRvPlicMinPriority));
  // Enable IRQs in PLIC
  CHECK_DIF_OK(dif_rv_plic_irq_set_enabled(&ottf_plic,
f0001fca:             \-> f0000517              auipc   a0,0xf0000
f0001fce:                 0b650513              addi    a0,a0,182 # e0002080 <ottf_plic>
f0001fd2:                 4685                  li      a3,1
f0001fd4:                 4405                  li      s0,1
f0001fd6:                 4601                  li      a2,0
f0001fd8:                 0db000ef              jal     ra,f00028b2 <dif_rv_plic_irq_set_enabled>
f0001fdc:       /-------- cd0d                  beqz    a0,f0002016 <ottf_console_flow_control_enable+0x236>
f0001fde:       |         862a                  mv      a2,a0
f0001fe0:       |         0f04a503              lw      a0,240(s1)
f0001fe4:       |  /----- cd09                  beqz    a0,f0001ffe <ottf_console_flow_control_enable+0x21e>
f0001fe6:       |  |      1000e517              auipc   a0,0x1000e
f0001fea:       |  |      34e50513              addi    a0,a0,846 # 10334 <_non_volatile_scratch_end+0xff90334>
f0001fee:       |  |      4585                  li      a1,1
f0001ff0:       |  |      491000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0001ff4:       |  |  /-- a821                  j       f000200c <ottf_console_flow_control_enable+0x22c>
f0001ff6:       |  |  |   c0001073              unimp
f0001ffa:       |  |  |   c0001073              unimp
f0001ffe:       |  \--|-> 00003517              auipc   a0,0x3
f0002002:       |     |   5a250513              addi    a0,a0,1442 # f00055a0 <ottf_console_flow_control_enable.log_fields.42>
f0002006:       |     |   85b2                  mv      a1,a2
f0002008:       |     |   3c5000ef              jal     ra,f0002bcc <base_log_internal_core>
f000200c:       |     \-> 6531                  lui     a0,0xc
f000200e:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0002012:       |         29f000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:157
                                           get_flow_control_watermark_plic_id(),
                                           kPlicTarget, kDifToggleEnabled));

  flow_control_state = kOttfConsoleFlowControlAuto;
f0002016:       \-------> f0000517              auipc   a0,0xf0000
f000201a:                 04852f23              sw      s0,94(a0) # e0002074 <flow_control_state>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:158
  irq_global_ctrl(true);
f000201e:                 4505                  li      a0,1
f0002020:                 2925                  jal     f0002458 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:159
  irq_external_ctrl(true);
f0002022:                 4505                  li      a0,1
f0002024:                 2999                  jal     f000247a <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:161
  // Make sure we're in the Resume state and we emit a Resume to the UART.
  ottf_console_flow_control((dif_uart_t *)ottf_console_get(),
f0002026:                 45c5                  li      a1,17
f0002028:                 854a                  mv      a0,s2
f000202a:                 40f2                  lw      ra,28(sp)
f000202c:                 4462                  lw      s0,24(sp)
f000202e:                 44d2                  lw      s1,20(sp)
f0002030:                 4942                  lw      s2,16(sp)
f0002032:                 49b2                  lw      s3,12(sp)
f0002034:                 6105                  addi    sp,sp,32
f0002036:                 a029                  j       f0002040 <ottf_console_flow_control>
f0002038:                 c0001073              unimp
f000203c:                 c0001073              unimp

f0002040 <ottf_console_flow_control>:
ottf_console_flow_control():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:214
}

// The public API has to save and restore interrupts to avoid an
// unexpected write to the global `flow_control_state`.
status_t ottf_console_flow_control(const dif_uart_t *uart,
                                   ottf_console_flow_control_t ctrl) {
f0002040:                 1101                  addi    sp,sp,-32
f0002042:                 ce06                  sw      ra,28(sp)
f0002044:                 cc22                  sw      s0,24(sp)
f0002046:                 ca26                  sw      s1,20(sp)
f0002048:                 c84a                  sw      s2,16(sp)
f000204a:                 84ae                  mv      s1,a1
f000204c:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:216
  dif_uart_irq_enable_snapshot_t snapshot;
  CHECK_DIF_OK(dif_uart_irq_disable_all(uart, &snapshot));
f000204e:                 006c                  addi    a1,sp,12
f0002050:                 646010ef              jal     ra,f0003696 <dif_uart_irq_disable_all>
f0002054:                 00004917              auipc   s2,0x4
f0002058:       /-------- cd0d                  beqz    a0,f0002092 <ottf_console_flow_control+0x52>
f000205a:       |         862a                  mv      a2,a0
f000205c:       |         e9892503              lw      a0,-360(s2) # f0005eec <kDeviceLogBypassUartAddress>
f0002060:       |  /----- cd09                  beqz    a0,f000207a <ottf_console_flow_control+0x3a>
f0002062:       |  |      1000e517              auipc   a0,0x1000e
f0002066:       |  |      30e50513              addi    a0,a0,782 # 10370 <_non_volatile_scratch_end+0xff90370>
f000206a:       |  |      4585                  li      a1,1
f000206c:       |  |      415000ef              jal     ra,f0002c80 <base_log_internal_dv>
f0002070:       |  |  /-- a821                  j       f0002088 <ottf_console_flow_control+0x48>
f0002072:       |  |  |   c0001073              unimp
f0002076:       |  |  |   c0001073              unimp
f000207a:       |  \--|-> 00003517              auipc   a0,0x3
f000207e:       |     |   56250513              addi    a0,a0,1378 # f00055dc <ottf_console_flow_control.log_fields>
f0002082:       |     |   85b2                  mv      a1,a2
f0002084:       |     |   349000ef              jal     ra,f0002bcc <base_log_internal_core>
f0002088:       |     \-> 6531                  lui     a0,0xc
f000208a:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000208e:       |         223000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:217
  status_t s = manage_flow_control(uart, ctrl);
f0002092:       \-------> 8522                  mv      a0,s0
f0002094:                 85a6                  mv      a1,s1
f0002096:                 22b1                  jal     f00021e2 <manage_flow_control>
f0002098:                 84aa                  mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:218
  CHECK_DIF_OK(dif_uart_irq_restore_all(uart, &snapshot));
f000209a:                 006c                  addi    a1,sp,12
f000209c:                 8522                  mv      a0,s0
f000209e:                 620010ef              jal     ra,f00036be <dif_uart_irq_restore_all>
f00020a2:       /-------- cd0d                  beqz    a0,f00020dc <ottf_console_flow_control+0x9c>
f00020a4:       |         862a                  mv      a2,a0
f00020a6:       |         e9892503              lw      a0,-360(s2)
f00020aa:       |  /----- cd09                  beqz    a0,f00020c4 <ottf_console_flow_control+0x84>
f00020ac:       |  |      1000e517              auipc   a0,0x1000e
f00020b0:       |  |      2d850513              addi    a0,a0,728 # 10384 <_non_volatile_scratch_end+0xff90384>
f00020b4:       |  |      4585                  li      a1,1
f00020b6:       |  |      3cb000ef              jal     ra,f0002c80 <base_log_internal_dv>
f00020ba:       |  |  /-- a821                  j       f00020d2 <ottf_console_flow_control+0x92>
f00020bc:       |  |  |   c0001073              unimp
f00020c0:       |  |  |   c0001073              unimp
f00020c4:       |  \--|-> 00003517              auipc   a0,0x3
f00020c8:       |     |   52c50513              addi    a0,a0,1324 # f00055f0 <ottf_console_flow_control.log_fields.50>
f00020cc:       |     |   85b2                  mv      a1,a2
f00020ce:       |     |   2ff000ef              jal     ra,f0002bcc <base_log_internal_core>
f00020d2:       |     \-> 6531                  lui     a0,0xc
f00020d4:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00020d8:       |         1d9000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:220
  return s;
}
f00020dc:       \-------> 8526                  mv      a0,s1
f00020de:                 40f2                  lw      ra,28(sp)
f00020e0:                 4462                  lw      s0,24(sp)
f00020e2:                 44d2                  lw      s1,20(sp)
f00020e4:                 4942                  lw      s2,16(sp)
f00020e6:                 6105                  addi    sp,sp,32
f00020e8:                 8082                  ret
f00020ea:                 c0001073              unimp
f00020ee:                 c0001073              unimp

f00020f2 <ottf_console_flow_control_isr>:
ottf_console_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:198
bool ottf_console_flow_control_isr(uint32_t *exc_info) {
f00020f2:                 1101                  addi    sp,sp,-32
ottf_console_get():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:57
  switch (kOttfTestConfig.console.type) {
f00020f4:                 ce06                  sw      ra,28(sp)
f00020f6:                 cc22                  sw      s0,24(sp)
f00020f8:                 ca26                  sw      s1,20(sp)
f00020fa:                 c84a                  sw      s2,16(sp)
f00020fc:                 00002517              auipc   a0,0x2
f0002100:                 4e052503              lw      a0,1248(a0) # f00045dc <kOttfTestConfig+0x4>
f0002104:                 4585                  li      a1,1
f0002106:          /----- 00b50b63              beq     a0,a1,f000211c <ottf_console_flow_control_isr+0x2a>
f000210a:          |      f0000517              auipc   a0,0xf0000
f000210e:          |      f6650413              addi    s0,a0,-154 # e0002070 <ottf_console_uart>
f0002112:          |  /-- a809                  j       f0002124 <ottf_console_flow_control_isr+0x32>
f0002114:          |  |   c0001073              unimp
f0002118:          |  |   c0001073              unimp
f000211c:          \--|-> f0000517              auipc   a0,0xf0000
f0002120:             |   ff850413              addi    s0,a0,-8 # e0002114 <ottf_console_spi_device>
ottf_console_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:200
  flow_control_irqs += 1;
f0002124:             \-> f0000517              auipc   a0,0xf0000
f0002128:                 f5452583              lw      a1,-172(a0) # e0002078 <flow_control_irqs>
f000212c:                 0585                  addi    a1,a1,1
f000212e:                 f4b52a23              sw      a1,-172(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:202
  CHECK_DIF_OK(dif_uart_irq_is_pending(uart, kDifUartIrqRxWatermark, &rx));
f0002132:                 4585                  li      a1,1
f0002134:                 00f10613              addi    a2,sp,15
f0002138:                 8522                  mv      a0,s0
f000213a:                 4d4010ef              jal     ra,f000360e <dif_uart_irq_is_pending>
f000213e:                 00004917              auipc   s2,0x4
f0002142:       /-------- cd0d                  beqz    a0,f000217c <ottf_console_flow_control_isr+0x8a>
f0002144:       |         862a                  mv      a2,a0
f0002146:       |         dae92503              lw      a0,-594(s2) # f0005eec <kDeviceLogBypassUartAddress>
f000214a:       |  /----- cd09                  beqz    a0,f0002164 <ottf_console_flow_control_isr+0x72>
f000214c:       |  |      1000e517              auipc   a0,0x1000e
f0002150:       |  |      1fc50513              addi    a0,a0,508 # 10348 <_non_volatile_scratch_end+0xff90348>
f0002154:       |  |      4585                  li      a1,1
f0002156:       |  |      32b000ef              jal     ra,f0002c80 <base_log_internal_dv>
f000215a:       |  |  /-- a821                  j       f0002172 <ottf_console_flow_control_isr+0x80>
f000215c:       |  |  |   c0001073              unimp
f0002160:       |  |  |   c0001073              unimp
f0002164:       |  \--|-> 00003517              auipc   a0,0x3
f0002168:       |     |   45050513              addi    a0,a0,1104 # f00055b4 <ottf_console_flow_control_isr.log_fields>
f000216c:       |     |   85b2                  mv      a1,a2
f000216e:       |     |   25f000ef              jal     ra,f0002bcc <base_log_internal_core>
f0002172:       |     \-> 6531                  lui     a0,0xc
f0002174:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0002178:       |         139000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:203
  if (rx) {
f000217c:       \-------> 00f14483              lbu     s1,15(sp)
f0002180:       /-------- c4a9                  beqz    s1,f00021ca <ottf_console_flow_control_isr+0xd8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:204
    manage_flow_control(uart, kOttfConsoleFlowControlAuto);
f0002182:       |         4585                  li      a1,1
f0002184:       |         8522                  mv      a0,s0
f0002186:       |         28b1                  jal     f00021e2 <manage_flow_control>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:205
    CHECK_DIF_OK(dif_uart_irq_acknowledge(uart, kDifUartIrqRxWatermark));
f0002188:       |         4585                  li      a1,1
f000218a:       |         8522                  mv      a0,s0
f000218c:       |         4b4010ef              jal     ra,f0003640 <dif_uart_irq_acknowledge>
f0002190:       +-------- cd0d                  beqz    a0,f00021ca <ottf_console_flow_control_isr+0xd8>
f0002192:       |         862a                  mv      a2,a0
f0002194:       |         dae92503              lw      a0,-594(s2)
f0002198:       |  /----- cd09                  beqz    a0,f00021b2 <ottf_console_flow_control_isr+0xc0>
f000219a:       |  |      1000e517              auipc   a0,0x1000e
f000219e:       |  |      1c250513              addi    a0,a0,450 # 1035c <_non_volatile_scratch_end+0xff9035c>
f00021a2:       |  |      4585                  li      a1,1
f00021a4:       |  |      2dd000ef              jal     ra,f0002c80 <base_log_internal_dv>
f00021a8:       |  |  /-- a821                  j       f00021c0 <ottf_console_flow_control_isr+0xce>
f00021aa:       |  |  |   c0001073              unimp
f00021ae:       |  |  |   c0001073              unimp
f00021b2:       |  \--|-> 00003517              auipc   a0,0x3
f00021b6:       |     |   41650513              addi    a0,a0,1046 # f00055c8 <ottf_console_flow_control_isr.log_fields.46>
f00021ba:       |     |   85b2                  mv      a1,a2
f00021bc:       |     |   211000ef              jal     ra,f0002bcc <base_log_internal_core>
f00021c0:       |     \-> 6531                  lui     a0,0xc
f00021c2:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00021c6:       |         0eb000ef              jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:203
  if (rx) {
f00021ca:       \-------> 00903533              snez    a0,s1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:209
}
f00021ce:                 40f2                  lw      ra,28(sp)
f00021d0:                 4462                  lw      s0,24(sp)
f00021d2:                 44d2                  lw      s1,20(sp)
f00021d4:                 4942                  lw      s2,16(sp)
f00021d6:                 6105                  addi    sp,sp,32
f00021d8:                 8082                  ret
f00021da:                 c0001073              unimp
f00021de:                 c0001073              unimp

f00021e2 <manage_flow_control>:
manage_flow_control():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:167
                                    ottf_console_flow_control_t ctrl) {
f00021e2:                                1101                   addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:168
  if (flow_control_state == kOttfConsoleFlowControlNone) {
f00021e4:                                ce06                   sw      ra,28(sp)
f00021e6:                                cc22                   sw      s0,24(sp)
f00021e8:                                ca26                   sw      s1,20(sp)
f00021ea:                                c84a                   sw      s2,16(sp)
f00021ec:                                f0000417               auipc   s0,0xf0000
f00021f0:                                e8842603               lw      a2,-376(s0) # e0002074 <flow_control_state>
f00021f4:                         /----- c251                   beqz    a2,f0002278 <manage_flow_control+0x96>
f00021f6:                         |      84ae                   mv      s1,a1
f00021f8:                         |      892a                   mv      s2,a0
f00021fa:                         |      4505                   li      a0,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:171
  if (ctrl == kOttfConsoleFlowControlAuto) {
f00021fc:       /-----------------|----- 14a59a63               bne     a1,a0,f0002350 <manage_flow_control+0x16e>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:173
    TRY(dif_uart_rx_bytes_available(uart, &avail));
f0002200:       |                 |      006c                   addi    a1,sp,12
f0002202:       |                 |      854a                   mv      a0,s2
f0002204:       |                 |      66a010ef               jal     ra,f000386e <dif_uart_rx_bytes_available>
f0002208:       |                 |      c42a                   sw      a0,8(sp)
f000220a:       |                 |      0048                   addi    a0,sp,4
f000220c:       |                 |      002c                   addi    a1,sp,8
f000220e:       |                 |      4611                   li      a2,4
f0002210:       |                 |      73a010ef               jal     ra,f000394a <memcpy>
f0002214:       |                 |      4512                   lw      a0,4(sp)
f0002216:       |                 |      00153593               seqz    a1,a0
f000221a:       |                 |      15fd                   addi    a1,a1,-1
f000221c:       |                 |      0ad5f693               andi    a3,a1,173
f0002220:       |                 |      00003597               auipc   a1,0x3
f0002224:       |                 |      9f858613               addi    a2,a1,-1544 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0002228:       |                 |      0e8f05b7               lui     a1,0xe8f0
f000222c:       |                 |      254010ef               jal     ra,f0003480 <status_create>
f0002230:       |                 |  /-- 06054863               bltz    a0,f00022a0 <manage_flow_control+0xbe>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:174
    if (avail < kFlowControlLowWatermark &&
f0002234:       |                 |  |   4532                   lw      a0,12(sp)
f0002236:       |                 |  |   458d                   li      a1,3
f0002238:       |              /--|--|-- 08a5e763               bltu    a1,a0,f00022c6 <manage_flow_control+0xe4>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:175
        flow_control_state != kOttfConsoleFlowControlResume) {
f000223c:       |              |  |  |   e8842503               lw      a0,-376(s0)
f0002240:       |              |  |  |   44c5                   li      s1,17
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:174
    if (avail < kFlowControlLowWatermark &&
f0002242:       |           /--|--|--|-- 08950a63               beq     a0,s1,f00022d6 <manage_flow_control+0xf4>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:178
      CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
f0002246:       |           |  |  |  |   4585                   li      a1,1
f0002248:       |           |  |  |  |   4605                   li      a2,1
f000224a:       |           |  |  |  |   854a                   mv      a0,s2
f000224c:       |           |  |  |  |   418010ef               jal     ra,f0003664 <dif_uart_irq_set_enabled>
f0002250:       +-----------|--|--|--|-- 10050063               beqz    a0,f0002350 <manage_flow_control+0x16e>
f0002254:       |           |  |  |  |   862a                   mv      a2,a0
f0002256:       |           |  |  |  |   00004517               auipc   a0,0x4
f000225a:       |           |  |  |  |   c9652503               lw      a0,-874(a0) # f0005eec <kDeviceLogBypassUartAddress>
f000225e:       |     /-----|--|--|--|-- cd5d                   beqz    a0,f000231c <manage_flow_control+0x13a>
f0002260:       |     |     |  |  |  |   1000e517               auipc   a0,0x1000e
f0002264:       |     |     |  |  |  |   13850513               addi    a0,a0,312 # 10398 <_non_volatile_scratch_end+0xff90398>
f0002268:       |     |     |  |  |  |   4585                   li      a1,1
f000226a:       |     |     |  |  |  |   217000ef               jal     ra,f0002c80 <base_log_internal_dv>
f000226e:       |     |  /--|--|--|--|-- a875                   j       f000232a <manage_flow_control+0x148>
f0002270:       |     |  |  |  |  |  |   c0001073               unimp
f0002274:       |     |  |  |  |  |  |   c0001073               unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:169
    return OK_STATUS((int32_t)flow_control_state);
f0002278:       |     |  |  |  |  \--|-> e8842683               lw      a3,-376(s0)
f000227c:       |     |  |  |  |     |   00003517               auipc   a0,0x3
f0002280:       |     |  |  |  |     |   99c50613               addi    a2,a0,-1636 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f0002284:       |     |  |  |  |     |   0e8f05b7               lui     a1,0xe8f0
f0002288:       |     |  |  |  |     |   4501                   li      a0,0
f000228a:       |     |  |  |  |     |   40f2                   lw      ra,28(sp)
f000228c:       |     |  |  |  |     |   4462                   lw      s0,24(sp)
f000228e:       |     |  |  |  |     |   44d2                   lw      s1,20(sp)
f0002290:       |     |  |  |  |     |   4942                   lw      s2,16(sp)
f0002292:       |     |  |  |  |     |   6105                   addi    sp,sp,32
f0002294:       |     |  |  |  |     |   1ec0106f               j       f0003480 <status_create>
f0002298:       |     |  |  |  |     |   c0001073               unimp
f000229c:       |     |  |  |  |     |   c0001073               unimp
f00022a0:       |     |  |  |  |     \-> 84aa                   mv      s1,a0
f00022a2:       |     |  |  |  |         897d                   andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:173
    TRY(dif_uart_rx_bytes_available(uart, &avail));
f00022a4:       |     |  |  |  |         00003597               auipc   a1,0x3
f00022a8:       |     |  |  |  |         97458613               addi    a2,a1,-1676 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f00022ac:       |     |  |  |  |         0e8f05b7               lui     a1,0xe8f0
f00022b0:       |     |  |  |  |         0ad00693               li      a3,173
f00022b4:       |     |  |  |  |         1cc010ef               jal     ra,f0003480 <status_create>
f00022b8:       |     |  |  |  |         afeff0ef               jal     ra,f00015b6 <status_report>
f00022bc:       |  /--|--|--|--|-------- a201                   j       f00023bc <manage_flow_control+0x1da>
f00022be:       |  |  |  |  |  |         c0001073               unimp
f00022c2:       |  |  |  |  |  |         c0001073               unimp
f00022c6:       |  |  |  |  |  \-------> 45a1                   li      a1,8
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:181
    } else if (avail >= kFlowControlHighWatermark &&
f00022c8:       |  |  |  |  +----------- 00b56763               bltu    a0,a1,f00022d6 <manage_flow_control+0xf4>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:182
               flow_control_state != kOttfConsoleFlowControlPause) {
f00022cc:       |  |  |  |  |            e8842503               lw      a0,-376(s0)
f00022d0:       |  |  |  |  |            44cd                   li      s1,19
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:181
    } else if (avail >= kFlowControlHighWatermark &&
f00022d2:       |  |  |  |  |        /-- 00951d63               bne     a0,s1,f00022ec <manage_flow_control+0x10a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:189
      return OK_STATUS((int32_t)flow_control_state);
f00022d6:       |  |  |  |  \--------|-> e8842683               lw      a3,-376(s0)
f00022da:       |  |  |  |           |   00003517               auipc   a0,0x3
f00022de:       |  |  |  |           |   93e50613               addi    a2,a0,-1730 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f00022e2:       |  |  |  |  /--------|-- a0f9                   j       f00023b0 <manage_flow_control+0x1ce>
f00022e4:       |  |  |  |  |        |   c0001073               unimp
f00022e8:       |  |  |  |  |        |   c0001073               unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:186
      CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
f00022ec:       |  |  |  |  |        \-> 4585                   li      a1,1
f00022ee:       |  |  |  |  |            854a                   mv      a0,s2
f00022f0:       |  |  |  |  |            4601                   li      a2,0
f00022f2:       |  |  |  |  |            372010ef               jal     ra,f0003664 <dif_uart_irq_set_enabled>
f00022f6:       +--|--|--|--|----------- cd29                   beqz    a0,f0002350 <manage_flow_control+0x16e>
f00022f8:       |  |  |  |  |            862a                   mv      a2,a0
f00022fa:       |  |  |  |  |            00004517               auipc   a0,0x4
f00022fe:       |  |  |  |  |            bf252503               lw      a0,-1038(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0002302:       |  |  |  |  |  /-------- c915                   beqz    a0,f0002336 <manage_flow_control+0x154>
f0002304:       |  |  |  |  |  |         1000e517               auipc   a0,0x1000e
f0002308:       |  |  |  |  |  |         0a850513               addi    a0,a0,168 # 103ac <_non_volatile_scratch_end+0xff903ac>
f000230c:       |  |  |  |  |  |         4585                   li      a1,1
f000230e:       |  |  |  |  |  |         173000ef               jal     ra,f0002c80 <base_log_internal_dv>
f0002312:       |  |  |  |  |  |  /----- a80d                   j       f0002344 <manage_flow_control+0x162>
f0002314:       |  |  |  |  |  |  |      c0001073               unimp
f0002318:       |  |  |  |  |  |  |      c0001073               unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:178
      CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
f000231c:       |  |  \--|--|--|--|----> 00003517               auipc   a0,0x3
f0002320:       |  |     |  |  |  |      2e850513               addi    a0,a0,744 # f0005604 <manage_flow_control.log_fields>
f0002324:       |  |     |  |  |  |      85b2                   mv      a1,a2
f0002326:       |  |     |  |  |  |      0a7000ef               jal     ra,f0002bcc <base_log_internal_core>
f000232a:       |  |     \--|--|--|----> 44c5                   li      s1,17
f000232c:       |  |        |  |  |  /-- a829                   j       f0002346 <manage_flow_control+0x164>
f000232e:       |  |        |  |  |  |   c0001073               unimp
f0002332:       |  |        |  |  |  |   c0001073               unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:186
      CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
f0002336:       |  |        |  \--|--|-> 00003517               auipc   a0,0x3
f000233a:       |  |        |     |  |   2e250513               addi    a0,a0,738 # f0005618 <manage_flow_control.log_fields.53>
f000233e:       |  |        |     |  |   85b2                   mv      a1,a2
f0002340:       |  |        |     |  |   08d000ef               jal     ra,f0002bcc <base_log_internal_core>
f0002344:       |  |        |     \--|-> 44cd                   li      s1,19
f0002346:       |  |        |        \-> 6531                   lui     a0,0xc
f0002348:       |  |        |            aad50513               addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000234c:       |  |        |            764000ef               jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:192
  uint8_t byte = (uint8_t)ctrl;
f0002350:       \--|--------|----------> 009101a3               sb      s1,3(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:193
  CHECK_DIF_OK(dif_uart_bytes_send(uart, &byte, 1, NULL));
f0002354:          |        |            00310593               addi    a1,sp,3
f0002358:          |        |            4605                   li      a2,1
f000235a:          |        |            854a                   mv      a0,s2
f000235c:          |        |            4681                   li      a3,0
f000235e:          |        |            49a010ef               jal     ra,f00037f8 <dif_uart_bytes_send>
f0002362:          |        |  /-------- cd1d                   beqz    a0,f00023a0 <manage_flow_control+0x1be>
f0002364:          |        |  |         862a                   mv      a2,a0
f0002366:          |        |  |         00004517               auipc   a0,0x4
f000236a:          |        |  |         b8652503               lw      a0,-1146(a0) # f0005eec <kDeviceLogBypassUartAddress>
f000236e:          |        |  |  /----- cd09                   beqz    a0,f0002388 <manage_flow_control+0x1a6>
f0002370:          |        |  |  |      1000e517               auipc   a0,0x1000e
f0002374:          |        |  |  |      05050513               addi    a0,a0,80 # 103c0 <_non_volatile_scratch_end+0xff903c0>
f0002378:          |        |  |  |      4585                   li      a1,1
f000237a:          |        |  |  |      107000ef               jal     ra,f0002c80 <base_log_internal_dv>
f000237e:          |        |  |  |  /-- a821                   j       f0002396 <manage_flow_control+0x1b4>
f0002380:          |        |  |  |  |   c0001073               unimp
f0002384:          |        |  |  |  |   c0001073               unimp
f0002388:          |        |  |  \--|-> 00003517               auipc   a0,0x3
f000238c:          |        |  |     |   2a450513               addi    a0,a0,676 # f000562c <manage_flow_control.log_fields.56>
f0002390:          |        |  |     |   85b2                   mv      a1,a2
f0002392:          |        |  |     |   03b000ef               jal     ra,f0002bcc <base_log_internal_core>
f0002396:          |        |  |     \-> 6531                   lui     a0,0xc
f0002398:          |        |  |         aad50513               addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000239c:          |        |  |         714000ef               jal     ra,f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:194
  flow_control_state = ctrl;
f00023a0:          |        |  \-------> e8942423               sw      s1,-376(s0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:195
  return OK_STATUS((int32_t)flow_control_state);
f00023a4:          |        |            e8842683               lw      a3,-376(s0)
f00023a8:          |        |            00003517               auipc   a0,0x3
f00023ac:          |        |            87050613               addi    a2,a0,-1936 # f0004c18 <vApplicationStackOverflowHook.log_fields+0x14>
f00023b0:          |        \----------> 0e8f05b7               lui     a1,0xe8f0
f00023b4:          |                     4501                   li      a0,0
f00023b6:          |                     0ca010ef               jal     ra,f0003480 <status_create>
f00023ba:          |                     84aa                   mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:196
}
f00023bc:          \-------------------> 8526                   mv      a0,s1
f00023be:                                40f2                   lw      ra,28(sp)
f00023c0:                                4462                   lw      s0,24(sp)
f00023c2:                                44d2                   lw      s1,20(sp)
f00023c4:                                4942                   lw      s2,16(sp)
f00023c6:                                6105                   addi    sp,sp,32
f00023c8:                                8082                   ret
f00023ca:                                c0001073               unimp
f00023ce:                                c0001073               unimp

f00023d2 <dif_spi_device_init_handle>:
dif_spi_device_init_handle():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:77
  return -1u;
}

dif_result_t dif_spi_device_init_handle(mmio_region_t base_addr,
                                        dif_spi_device_handle_t *spi) {
  if (spi == NULL) {
f00023d2:       /-- c591                        beqz    a1,f00023de <dif_spi_device_init_handle+0xc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:80
    return kDifBadArg;
  }
  return dif_spi_device_init(base_addr, &spi->dev);
f00023d4:       |   a09d                        j       f000243a <dif_spi_device_init>
f00023d6:       |   c0001073            unimp
f00023da:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:81
}
f00023de:       \-> 450d                        li      a0,3
f00023e0:           8082                        ret
f00023e2:           c0001073            unimp
f00023e6:           c0001073            unimp

f00023ea <dif_spi_device_configure>:
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:84

dif_result_t dif_spi_device_configure(dif_spi_device_handle_t *spi,
                                      dif_spi_device_config_t config) {
f00023ea:           460d                        li      a2,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:85
  if (spi == NULL) {
f00023ec:       /-- c129                        beqz    a0,f000242e <dif_spi_device_configure+0x44>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:89
    return kDifBadArg;
  }

  uint32_t device_mode = extract_mode_from_config(config);
f00023ee:       |   4594                        lw      a3,8(a1)
f00023f0:       |   4709                        li      a4,2
extract_mode_from_config():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:62
  switch (config.device_mode) {
f00023f2:       +-- 02d76e63            bltu    a4,a3,f000242e <dif_spi_device_configure+0x44>
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:94
  if (device_mode == -1u) {
    return kDifBadArg;
  }

  uint32_t device_config = build_control_word(config);
f00023f6:       |   4190                        lw      a2,0(a1)
f00023f8:       |   41d8                        lw      a4,4(a1)
build_control_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:49
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
f00023fa:       |   167d                        addi    a2,a2,-1
f00023fc:       |   00163613            seqz    a2,a2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0002400:       |   060a                        slli    a2,a2,0x2
build_control_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:51
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
f0002402:       |   177d                        addi    a4,a4,-1
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:95
  mmio_region_write32(spi->dev.base_addr, SPI_DEVICE_CFG_REG_OFFSET,
f0002404:       |   411c                        lw      a5,0(a0)
build_control_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:51
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
f0002406:       |   00173713            seqz    a4,a4
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f000240a:       |   070e                        slli    a4,a4,0x3
f000240c:       |   8e59                        or      a2,a2,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f000240e:       |   cbd0                        sw      a2,20(a5)
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:99
                      device_config);

  uint32_t control =
      mmio_region_read32(spi->dev.base_addr, SPI_DEVICE_CONTROL_REG_OFFSET);
f0002410:       |   4110                        lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0002412:       |   4a18                        lw      a4,16(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f0002414:       |   fcf77713            andi    a4,a4,-49
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0002418:       |   06fa                        slli    a3,a3,0x1e
f000241a:       |   82e9                        srli    a3,a3,0x1a
f000241c:       |   8ed9                        or      a3,a3,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f000241e:       |   ca14                        sw      a3,16(a2)
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:106
  control = bitfield_field32_write(control, SPI_DEVICE_CONTROL_MODE_FIELD,
                                   device_mode);
  mmio_region_write32(spi->dev.base_addr, SPI_DEVICE_CONTROL_REG_OFFSET,
                      control);

  spi->config = config;
f0002420:       |   4590                        lw      a2,8(a1)
f0002422:       |   c550                        sw      a2,12(a0)
f0002424:       |   41d0                        lw      a2,4(a1)
f0002426:       |   c510                        sw      a2,8(a0)
f0002428:       |   418c                        lw      a1,0(a1)
f000242a:       |   4601                        li      a2,0
f000242c:       |   c14c                        sw      a1,4(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:108
  return kDifOk;
}
f000242e:       \-> 8532                        mv      a0,a2
f0002430:           8082                        ret
f0002432:           c0001073            unimp
f0002436:           c0001073            unimp

f000243a <dif_spi_device_init>:
dif_spi_device_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:19
#include "spi_device_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_device_init(mmio_region_t base_addr,
                                 dif_spi_device_t *spi_device) {
  if (spi_device == NULL) {
f000243a:       /----- c981                     beqz    a1,f000244a <dif_spi_device_init+0x10>
f000243c:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:23
    return kDifBadArg;
  }

  spi_device->base_addr = base_addr;
f000243e:       |      c188                     sw      a0,0(a1)
f0002440:       |  /-- a031                     j       f000244c <dif_spi_device_init+0x12>
f0002442:       |  |   c0001073                 unimp
f0002446:       |  |   c0001073                 unimp
f000244a:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:26

  return kDifOk;
}
f000244c:          \-> 8532                     mv      a0,a2
f000244e:              8082                     ret
f0002450:              c0001073                 unimp
f0002454:              c0001073                 unimp

f0002458 <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
f0002458:       /-- c909                        beqz    a0,f000246a <irq_global_ctrl+0x12>
f000245a:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
f000245c:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
f0002460:       |   8082                        ret
f0002462:       |   c0001073            unimp
f0002466:       |   c0001073            unimp
f000246a:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
f000246c:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
f0002470:           8082                        ret
f0002472:           c0001073            unimp
f0002476:           c0001073            unimp

f000247a <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
f000247a:       /-- c911                        beqz    a0,f000248e <irq_external_ctrl+0x14>
f000247c:       |   28b01513            bseti   a0,zero,0xb
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0002480:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0002484:       |   8082                        ret
f0002486:       |   c0001073            unimp
f000248a:       |   c0001073            unimp
f000248e:       \-> 28b01513            bseti   a0,zero,0xb
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0002492:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
f0002496:           8082                        ret
f0002498:           c0001073            unimp
f000249c:           c0001073            unimp

f00024a0 <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
f00024a0:       /-- c911                        beqz    a0,f00024b4 <irq_timer_ctrl+0x14>
f00024a2:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
f00024a6:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f00024aa:       |   8082                        ret
f00024ac:       |   c0001073            unimp
f00024b0:       |   c0001073            unimp
f00024b4:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f00024b8:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
f00024bc:           8082                        ret
f00024be:           c0001073            unimp
f00024c2:           c0001073            unimp

f00024c6 <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
f00024c6:       /-- c909                        beqz    a0,f00024d8 <irq_software_ctrl+0x12>
f00024c8:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
f00024ca:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f00024ce:       |   8082                        ret
f00024d0:       |   c0001073            unimp
f00024d4:       |   c0001073            unimp
f00024d8:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f00024da:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
f00024de:           8082                        ret
f00024e0:           c0001073            unimp
f00024e4:           c0001073            unimp

f00024e8 <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
    "  s3", "  s4", "  s5", "  s6", "  s7", "  s8", "  s9", " s10",
    " s11", "  t3", "  t4", "  t5", "  t6", "msts",
};

void ottf_generic_fault_print(uint32_t *exc_info, const char *reason,
                              uint32_t mcause) {
f00024e8:                 7179                  addi    sp,sp,-48
f00024ea:                 d606                  sw      ra,44(sp)
f00024ec:                 d422                  sw      s0,40(sp)
f00024ee:                 d226                  sw      s1,36(sp)
f00024f0:                 d04a                  sw      s2,32(sp)
f00024f2:                 ce4e                  sw      s3,28(sp)
f00024f4:                 cc52                  sw      s4,24(sp)
f00024f6:                 ca56                  sw      s5,20(sp)
f00024f8:                 c85a                  sw      s6,16(sp)
f00024fa:                 c65e                  sw      s7,12(sp)
f00024fc:                 c462                  sw      s8,8(sp)
f00024fe:                 c266                  sw      s9,4(sp)
f0002500:                 c06a                  sw      s10,0(sp)
f0002502:                 8932                  mv      s2,a2
f0002504:                 89ae                  mv      s3,a1
f0002506:                 8b2a                  mv      s6,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:67
  enum { kExcWords = 30 };
  uint32_t mepc = ibex_mepc_read();
f0002508:                 6b6000ef              jal     ra,f0002bbe <ibex_mepc_read>
f000250c:                 8a2a                  mv      s4,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:68
  uint32_t mtval = ibex_mtval_read();
f000250e:                 254d                  jal     f0002bb0 <ibex_mtval_read>
f0002510:                 8aaa                  mv      s5,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:69
  if (exc_info) {
f0002512:       /-------- 0c0b0863              beqz    s6,f00025e2 <ottf_generic_fault_print+0xfa>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:70
    base_printf("===== Exception Frame @ %08x =====", exc_info);
f0002516:       |         00003517              auipc   a0,0x3
f000251a:       |         15a50513              addi    a0,a0,346 # f0005670 <manage_flow_control.log_fields.56+0x44>
f000251e:       |         85da                  mv      a1,s6
f0002520:       |         019000ef              jal     ra,f0002d38 <base_printf>
f0002524:       |         4481                  li      s1,0
f0002526:       |         00003517              auipc   a0,0x3
f000252a:       |         46a50d13              addi    s10,a0,1130 # f0005990 <exc_frame>
f000252e:       |         00003517              auipc   a0,0x3
f0002532:       |         6e250b93              addi    s7,a0,1762 # f0005c10 <test_status_set.log_fields.7+0x24>
f0002536:       |         00003517              auipc   a0,0x3
f000253a:       |         15d50c13              addi    s8,a0,349 # f0005693 <manage_flow_control.log_fields.56+0x67>
f000253e:       |         4cf9                  li      s9,30
f0002540:       |         845a                  mv      s0,s6
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:72
    for (size_t i = 0; i < kExcWords; ++i) {
      if (i % 4 == 0) {
f0002542:       |  /----> 0034f513              andi    a0,s1,3
f0002546:       |  |  /-- e501                  bnez    a0,f000254e <ottf_generic_fault_print+0x66>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:73
        base_printf("\n");
f0002548:       |  |  |   855e                  mv      a0,s7
f000254a:       |  |  |   7ee000ef              jal     ra,f0002d38 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:75
      }
      const char *name = exc_frame[i];
f000254e:       |  |  \-> 000d2583              lw      a1,0(s10)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:78
      if (name == NULL)
        continue;
      base_printf(" %4s=%08x", name, exc_info[i]);
f0002552:       |  |      4010                  lw      a2,0(s0)
f0002554:       |  |      8562                  mv      a0,s8
f0002556:       |  |      7e2000ef              jal     ra,f0002d38 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:71
    for (size_t i = 0; i < kExcWords; ++i) {
f000255a:       |  |      0485                  addi    s1,s1,1
f000255c:       |  |      0411                  addi    s0,s0,4
f000255e:       |  |      0d11                  addi    s10,s10,4
f0002560:       |  \----- ff9491e3              bne     s1,s9,f0002542 <ottf_generic_fault_print+0x5a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
    }
    uint32_t *sp = exc_info + kExcWords;
f0002564:       |         078b0413              addi    s0,s6,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:81
    base_printf("\n");
f0002568:       |         00003517              auipc   a0,0x3
f000256c:       |         6a850513              addi    a0,a0,1704 # f0005c10 <test_status_set.log_fields.7+0x24>
f0002570:       |         7c8000ef              jal     ra,f0002d38 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
                     TOP_EARLGREY_SRAM_CTRL_MAIN_RAM_SIZE_BYTES);

    extern const char _text_start[], _text_end[];
    const uint32_t text_start = (uint32_t)_text_start;
    const uint32_t text_end = (uint32_t)_text_end;
    base_printf("===== Call Stack =====\n");
f0002574:       |         00003517              auipc   a0,0x3
f0002578:       |         12950513              addi    a0,a0,297 # f000569d <manage_flow_control.log_fields.56+0x71>
f000257c:       |         7bc000ef              jal     ra,f0002d38 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:91
    for (; sp >= ram_start && sp < ram_end; ++sp) {
f0002580:       |         01d45513              srli    a0,s0,0x1d
f0002584:       |         00753513              sltiu   a0,a0,7
f0002588:       |         e0020bb7              lui     s7,0xe0020
f000258c:       |         fffb8593              addi    a1,s7,-1 # e001ffff <_non_volatile_scratch_end+0xeff9ffff>
f0002590:       |         0085b5b3              sltu    a1,a1,s0
f0002594:       |         8d4d                  or      a0,a0,a1
f0002596:       +-------- e531                  bnez    a0,f00025e2 <ottf_generic_fault_print+0xfa>
f0002598:       |         07cb0493              addi    s1,s6,124
f000259c:       |         ffffe517              auipc   a0,0xffffe
f00025a0:       |         e6450c13              addi    s8,a0,-412 # f0000400 <_ottf_interrupt_vector>
f00025a4:       |         00002517              auipc   a0,0x2
f00025a8:       |         ea450413              addi    s0,a0,-348 # f0004448 <_text_end>
f00025ac:       |         00003517              auipc   a0,0x3
f00025b0:       |         10950b13              addi    s6,a0,265 # f00056b5 <manage_flow_control.log_fields.56+0x89>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:92
      uint32_t val = *sp;
f00025b4:       |  /----> ffc4a583              lw      a1,-4(s1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      if (val >= text_start && val < text_end) {
f00025b8:       |  |      0185b533              sltu    a0,a1,s8
f00025bc:       |  |      0085b633              sltu    a2,a1,s0
f00025c0:       |  |      00164613              xori    a2,a2,1
f00025c4:       |  |      8d51                  or      a0,a0,a2
f00025c6:       |  |  /-- e501                  bnez    a0,f00025ce <ottf_generic_fault_print+0xe6>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:94
        base_printf("    %08x\n", val);
f00025c8:       |  |  |   855a                  mv      a0,s6
f00025ca:       |  |  |   76e000ef              jal     ra,f0002d38 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:91
    for (; sp >= ram_start && sp < ram_end; ++sp) {
f00025ce:       |  |  \-> 01d4d513              srli    a0,s1,0x1d
f00025d2:       |  |      00753513              sltiu   a0,a0,7
f00025d6:       |  |      0174b5b3              sltu    a1,s1,s7
f00025da:       |  |      40a5f533              andn    a0,a1,a0
f00025de:       |  |      0491                  addi    s1,s1,4
f00025e0:       |  \----- f971                  bnez    a0,f00025b4 <ottf_generic_fault_print+0xcc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:98
      }
    }
  }
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f00025e2:       \-------> 00004517              auipc   a0,0x4
f00025e6:                 90a52503              lw      a0,-1782(a0) # f0005eec <kDeviceLogBypassUartAddress>
f00025ea:             /-- cd05                  beqz    a0,f0002622 <ottf_generic_fault_print+0x13a>
f00025ec:             |   1000e517              auipc   a0,0x1000e
f00025f0:             |   de850513              addi    a0,a0,-536 # 103d4 <_non_volatile_scratch_end+0xff903d4>
f00025f4:             |   4591                  li      a1,4
f00025f6:             |   864e                  mv      a2,s3
f00025f8:             |   86ca                  mv      a3,s2
f00025fa:             |   8752                  mv      a4,s4
f00025fc:             |   87d6                  mv      a5,s5
f00025fe:             |   50b2                  lw      ra,44(sp)
f0002600:             |   5422                  lw      s0,40(sp)
f0002602:             |   5492                  lw      s1,36(sp)
f0002604:             |   5902                  lw      s2,32(sp)
f0002606:             |   49f2                  lw      s3,28(sp)
f0002608:             |   4a62                  lw      s4,24(sp)
f000260a:             |   4ad2                  lw      s5,20(sp)
f000260c:             |   4b42                  lw      s6,16(sp)
f000260e:             |   4bb2                  lw      s7,12(sp)
f0002610:             |   4c22                  lw      s8,8(sp)
f0002612:             |   4c92                  lw      s9,4(sp)
f0002614:             |   4d02                  lw      s10,0(sp)
f0002616:             |   6145                  addi    sp,sp,48
f0002618:             |   a5a5                  j       f0002c80 <base_log_internal_dv>
f000261a:             |   c0001073              unimp
f000261e:             |   c0001073              unimp
f0002622:             \-> 00003517              auipc   a0,0x3
f0002626:                 3e650513              addi    a0,a0,998 # f0005a08 <ottf_generic_fault_print.log_fields>
f000262a:                 85ce                  mv      a1,s3
f000262c:                 864a                  mv      a2,s2
f000262e:                 86d2                  mv      a3,s4
f0002630:                 8756                  mv      a4,s5
f0002632:                 50b2                  lw      ra,44(sp)
f0002634:                 5422                  lw      s0,40(sp)
f0002636:                 5492                  lw      s1,36(sp)
f0002638:                 5902                  lw      s2,32(sp)
f000263a:                 49f2                  lw      s3,28(sp)
f000263c:                 4a62                  lw      s4,24(sp)
f000263e:                 4ad2                  lw      s5,20(sp)
f0002640:                 4b42                  lw      s6,16(sp)
f0002642:                 4bb2                  lw      s7,12(sp)
f0002644:                 4c22                  lw      s8,8(sp)
f0002646:                 4c92                  lw      s9,4(sp)
f0002648:                 4d02                  lw      s10,0(sp)
f000264a:                 6145                  addi    sp,sp,48
f000264c:                 a341                  j       f0002bcc <base_log_internal_core>
f000264e:                 c0001073              unimp
f0002652:                 c0001073              unimp

f0002656 <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:119
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(uint32_t *exc_info) {
f0002656:           1141                        addi    sp,sp,-16
f0002658:           c606                        sw      ra,12(sp)
f000265a:           c422                        sw      s0,8(sp)
f000265c:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:120
  uint32_t mcause = ibex_mcause_read();
f000265e:           2391                        jal     f0002ba2 <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:122

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
f0002660:           897d                        andi    a0,a0,31
f0002662:           45ad                        li      a1,11
f0002664:       /-- 08a5ea63            bltu    a1,a0,f00026f8 <ottf_exception_handler+0xa2>
f0002668:       |   00003597            auipc   a1,0x3
f000266c:       |   fd858593            addi    a1,a1,-40 # f0005640 <manage_flow_control.log_fields.56+0x14>
f0002670:       |   20b54533            sh2add  a0,a0,a1
f0002674:       |   4108                        lw      a0,0(a0)
f0002676:       |   8502                        jr      a0
f0002678:       |   8522                        mv      a0,s0
f000267a:       |   40b2                        lw      ra,12(sp)
f000267c:       |   4422                        lw      s0,8(sp)
f000267e:       |   0141                        addi    sp,sp,16
f0002680:       |   a8b5                        j       f00026fc <ottf_breakpoint_handler>
f0002682:       |   c0001073            unimp
f0002686:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:124
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler(exc_info);
f000268a:       |   8522                        mv      a0,s0
f000268c:       |   40b2                        lw      ra,12(sp)
f000268e:       |   4422                        lw      s0,8(sp)
f0002690:       |   0141                        addi    sp,sp,16
f0002692:       |   a0ad                        j       f00026fc <ottf_breakpoint_handler>
f0002694:       |   c0001073            unimp
f0002698:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:127
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler(exc_info);
f000269c:       |   8522                        mv      a0,s0
f000269e:       |   40b2                        lw      ra,12(sp)
f00026a0:       |   4422                        lw      s0,8(sp)
f00026a2:       |   0141                        addi    sp,sp,16
f00026a4:       |   a8a1                        j       f00026fc <ottf_breakpoint_handler>
f00026a6:       |   c0001073            unimp
f00026aa:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:130
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler(exc_info);
f00026ae:       |   8522                        mv      a0,s0
f00026b0:       |   40b2                        lw      ra,12(sp)
f00026b2:       |   4422                        lw      s0,8(sp)
f00026b4:       |   0141                        addi    sp,sp,16
f00026b6:       |   a099                        j       f00026fc <ottf_breakpoint_handler>
f00026b8:       |   c0001073            unimp
f00026bc:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:133
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler(exc_info);
f00026c0:       |   8522                        mv      a0,s0
f00026c2:       |   40b2                        lw      ra,12(sp)
f00026c4:       |   4422                        lw      s0,8(sp)
f00026c6:       |   0141                        addi    sp,sp,16
f00026c8:       |   a815                        j       f00026fc <ottf_breakpoint_handler>
f00026ca:       |   c0001073            unimp
f00026ce:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:145
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler(exc_info);
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler(exc_info);
f00026d2:       |   8522                        mv      a0,s0
f00026d4:       |   40b2                        lw      ra,12(sp)
f00026d6:       |   4422                        lw      s0,8(sp)
f00026d8:       |   0141                        addi    sp,sp,16
f00026da:       |   a00d                        j       f00026fc <ottf_breakpoint_handler>
f00026dc:       |   c0001073            unimp
f00026e0:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
      ottf_machine_ecall_handler(exc_info);
f00026e4:       |   8522                        mv      a0,s0
f00026e6:       |   40b2                        lw      ra,12(sp)
f00026e8:       |   4422                        lw      s0,8(sp)
f00026ea:       |   0141                        addi    sp,sp,16
f00026ec:       |   e81fe06f            j       f000156c <ottf_machine_ecall_handler>
f00026f0:       |   c0001073            unimp
f00026f4:       |   c0001073            unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
      break;
    default:
      generic_fault_handler(exc_info);
f00026f8:       \-> 8522                        mv      a0,s0
f00026fa:           2009                        jal     f00026fc <ottf_breakpoint_handler>

f00026fc <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
static void generic_fault_handler(uint32_t *exc_info) {
f00026fc:       1141                    addi    sp,sp,-16
f00026fe:       c606                    sw      ra,12(sp)
f0002700:       c422                    sw      s0,8(sp)
f0002702:       842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:103
  uint32_t mcause = ibex_mcause_read();
f0002704:       2979                    jal     f0002ba2 <ibex_mcause_read>
f0002706:       862a                    mv      a2,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:104
  ottf_generic_fault_print(exc_info, exception_reason[mcause & kIbexExcMax],
f0002708:       897d                    andi    a0,a0,31
f000270a:       00003597                auipc   a1,0x3
f000270e:       33a58593                addi    a1,a1,826 # f0005a44 <exception_reason>
f0002712:       20b54533                sh2add  a0,a0,a1
f0002716:       410c                    lw      a1,0(a0)
f0002718:       8522                    mv      a0,s0
f000271a:       33f9                    jal     f00024e8 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:106
  abort();
f000271c:       29a5                    jal     f0002b94 <abort>

f000271e <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:181
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(uint32_t *exc_info);

OT_WEAK
void ottf_software_isr(uint32_t *exc_info) {
f000271e:       1141                    addi    sp,sp,-16
f0002720:       c606                    sw      ra,12(sp)
f0002722:       c422                    sw      s0,8(sp)
f0002724:       842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:182
  ottf_generic_fault_print(exc_info, "Software IRQ", ibex_mcause_read());
f0002726:       29b5                    jal     f0002ba2 <ibex_mcause_read>
f0002728:       862a                    mv      a2,a0
f000272a:       00003517                auipc   a0,0x3
f000272e:       ff250593                addi    a1,a0,-14 # f000571c <manage_flow_control.log_fields.56+0xf0>
f0002732:       8522                    mv      a0,s0
f0002734:       3b55                    jal     f00024e8 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:183
  abort();
f0002736:       29b9                    jal     f0002b94 <abort>

f0002738 <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:187
}

OT_WEAK
void ottf_timer_isr(uint32_t *exc_info) {
f0002738:       1141                    addi    sp,sp,-16
f000273a:       c606                    sw      ra,12(sp)
f000273c:       c422                    sw      s0,8(sp)
f000273e:       842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:188
  ottf_generic_fault_print(exc_info, "Timer IRQ", ibex_mcause_read());
f0002740:       218d                    jal     f0002ba2 <ibex_mcause_read>
f0002742:       862a                    mv      a2,a0
f0002744:       00003517                auipc   a0,0x3
f0002748:       fe550593                addi    a1,a0,-27 # f0005729 <manage_flow_control.log_fields.56+0xfd>
f000274c:       8522                    mv      a0,s0
f000274e:       3b69                    jal     f00024e8 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:189
  abort();
f0002750:       2191                    jal     f0002b94 <abort>

f0002752 <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:196

OT_WEAK
bool ottf_console_flow_control_isr(uint32_t *exc_info) { return false; }

OT_WEAK
void ottf_external_isr(uint32_t *exc_info) {
f0002752:                    1141                       addi    sp,sp,-16
f0002754:                    c606                       sw      ra,12(sp)
f0002756:                    c422                       sw      s0,8(sp)
f0002758:                    c226                       sw      s1,4(sp)
f000275a:                    842a                       mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:199
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
f000275c:                    f0000517           auipc   a0,0xf0000
f0002760:                    92450513           addi    a0,a0,-1756 # e0002080 <ottf_plic>
f0002764:                    860a                       mv      a2,sp
f0002766:                    4581                       li      a1,0
f0002768:                    2af5                       jal     f0002964 <dif_rv_plic_irq_claim>
f000276a:                    00003497           auipc   s1,0x3
f000276e:          /-------- c915                       beqz    a0,f00027a2 <ottf_external_isr+0x50>
f0002770:          |         862a                       mv      a2,a0
f0002772:          |         7824a503           lw      a0,1922(s1) # f0005eec <kDeviceLogBypassUartAddress>
f0002776:          |  /----- cd01                       beqz    a0,f000278e <ottf_external_isr+0x3c>
f0002778:          |  |      1000e517           auipc   a0,0x1000e
f000277c:          |  |      c7050513           addi    a0,a0,-912 # 103e8 <_non_volatile_scratch_end+0xff903e8>
f0002780:          |  |      4585                       li      a1,1
f0002782:          |  |      29fd                       jal     f0002c80 <base_log_internal_dv>
f0002784:          |  |  /-- a819                       j       f000279a <ottf_external_isr+0x48>
f0002786:          |  |  |   c0001073           unimp
f000278a:          |  |  |   c0001073           unimp
f000278e:          |  \--|-> 00003517           auipc   a0,0x3
f0002792:          |     |   28e50513           addi    a0,a0,654 # f0005a1c <ottf_external_isr.log_fields>
f0002796:          |     |   85b2                       mv      a1,a2
f0002798:          |     |   2915                       jal     f0002bcc <base_log_internal_core>
f000279a:          |     \-> 6531                       lui     a0,0xc
f000279c:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00027a0:          |         2e01                       jal     f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:202

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
f00027a2:          \-------> 4502                       lw      a0,0(sp)
f00027a4:                    00003597           auipc   a1,0x3
f00027a8:                    74c58593           addi    a1,a1,1868 # f0005ef0 <top_earlgrey_plic_interrupt_for_peripheral>
f00027ac:                    20b54533           sh2add  a0,a0,a1
f00027b0:                    4108                       lw      a0,0(a0)
f00027b2:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:204

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f00027b4:       /----------- 06b51063           bne     a0,a1,f0002814 <ottf_external_isr+0xc2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:205
      ottf_console_flow_control_isr(exc_info)) {
f00027b8:       |            8522                       mv      a0,s0
f00027ba:       |            939ff0ef           jal     ra,f00020f2 <ottf_console_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:204
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f00027be:       +----------- c939                       beqz    a0,f0002814 <ottf_external_isr+0xc2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:207
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
f00027c0:       |            4602                       lw      a2,0(sp)
f00027c2:       |            f0000517           auipc   a0,0xf0000
f00027c6:       |            8be50513           addi    a0,a0,-1858 # e0002080 <ottf_plic>
f00027ca:       |            4581                       li      a1,0
f00027cc:       |            22d9                       jal     f0002992 <dif_rv_plic_irq_complete>
f00027ce:       |  /-------- c915                       beqz    a0,f0002802 <ottf_external_isr+0xb0>
f00027d0:       |  |         862a                       mv      a2,a0
f00027d2:       |  |         7824a503           lw      a0,1922(s1)
f00027d6:       |  |  /----- cd01                       beqz    a0,f00027ee <ottf_external_isr+0x9c>
f00027d8:       |  |  |      1000e517           auipc   a0,0x1000e
f00027dc:       |  |  |      c2450513           addi    a0,a0,-988 # 103fc <_non_volatile_scratch_end+0xff903fc>
f00027e0:       |  |  |      4585                       li      a1,1
f00027e2:       |  |  |      2979                       jal     f0002c80 <base_log_internal_dv>
f00027e4:       |  |  |  /-- a819                       j       f00027fa <ottf_external_isr+0xa8>
f00027e6:       |  |  |  |   c0001073           unimp
f00027ea:       |  |  |  |   c0001073           unimp
f00027ee:       |  |  \--|-> 00003517           auipc   a0,0x3
f00027f2:       |  |     |   24250513           addi    a0,a0,578 # f0005a30 <ottf_external_isr.log_fields.12>
f00027f6:       |  |     |   85b2                       mv      a1,a2
f00027f8:       |  |     |   2ed1                       jal     f0002bcc <base_log_internal_core>
f00027fa:       |  |     \-> 6531                       lui     a0,0xc
f00027fc:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0002800:       |  |         2c45                       jal     f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:214
    return;
  }

  ottf_generic_fault_print(exc_info, "External IRQ", ibex_mcause_read());
  abort();
}
f0002802:       |  \-------> 40b2                       lw      ra,12(sp)
f0002804:       |            4422                       lw      s0,8(sp)
f0002806:       |            4492                       lw      s1,4(sp)
f0002808:       |            0141                       addi    sp,sp,16
f000280a:       |            8082                       ret
f000280c:       |            c0001073           unimp
f0002810:       |            c0001073           unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:212
  ottf_generic_fault_print(exc_info, "External IRQ", ibex_mcause_read());
f0002814:       \----------> 2679                       jal     f0002ba2 <ibex_mcause_read>
f0002816:                    862a                       mv      a2,a0
f0002818:                    00003517           auipc   a0,0x3
f000281c:                    fc150593           addi    a1,a0,-63 # f00057d9 <manage_flow_control.log_fields.56+0x1ad>
f0002820:                    8522                       mv      a0,s0
f0002822:                    31d9                       jal     f00024e8 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:213
  abort();
f0002824:                    2e85                       jal     f0002b94 <abort>

f0002826 <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:216

static void generic_internal_irq_handler(uint32_t *exc_info) {
f0002826:       1141                    addi    sp,sp,-16
f0002828:       c606                    sw      ra,12(sp)
f000282a:       c422                    sw      s0,8(sp)
f000282c:       842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:217
  ottf_generic_fault_print(exc_info, "Internal IRQ", ibex_mcause_read());
f000282e:       2e95                    jal     f0002ba2 <ibex_mcause_read>
f0002830:       862a                    mv      a2,a0
f0002832:       00003517                auipc   a0,0x3
f0002836:       15150593                addi    a1,a0,337 # f0005983 <manage_flow_control.log_fields.56+0x357>
f000283a:       8522                    mv      a0,s0
f000283c:       cadff0ef                jal     ra,f00024e8 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:218
  abort();
f0002840:       2e91                    jal     f0002b94 <abort>

f0002842 <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:230
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(uint32_t *exc_info);

OT_WEAK
void ottf_internal_isr(uint32_t *exc_info) {
f0002842:              1141                     addi    sp,sp,-16
f0002844:              c606                     sw      ra,12(sp)
f0002846:              c422                     sw      s0,8(sp)
f0002848:              842a                     mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:231
  uint32_t mcause = ibex_mcause_read();
f000284a:              2ea1                     jal     f0002ba2 <ibex_mcause_read>
f000284c:              800005b7                 lui     a1,0x80000
f0002850:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:232
  switch ((ibex_internal_irq_t)(mcause)) {
f0002852:          /-- 00b50e63                 beq     a0,a1,f000286e <ottf_internal_isr+0x2c>
f0002856:          |   5581                     li      a1,-32
f0002858:       /--|-- 02b51463                 bne     a0,a1,f0002880 <ottf_internal_isr+0x3e>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:234
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler(exc_info);
f000285c:       |  |   8522                     mv      a0,s0
f000285e:       |  |   40b2                     lw      ra,12(sp)
f0002860:       |  |   4422                     lw      s0,8(sp)
f0002862:       |  |   0141                     addi    sp,sp,16
f0002864:       |  |   b7c9                     j       f0002826 <ottf_external_nmi_handler>
f0002866:       |  |   c0001073                 unimp
f000286a:       |  |   c0001073                 unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:237
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler(exc_info);
f000286e:       |  \-> 8522                     mv      a0,s0
f0002870:       |      40b2                     lw      ra,12(sp)
f0002872:       |      4422                     lw      s0,8(sp)
f0002874:       |      0141                     addi    sp,sp,16
f0002876:       |      bf45                     j       f0002826 <ottf_external_nmi_handler>
f0002878:       |      c0001073                 unimp
f000287c:       |      c0001073                 unimp
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:217
  ottf_generic_fault_print(exc_info, "Internal IRQ", ibex_mcause_read());
f0002880:       \----> 260d                     jal     f0002ba2 <ibex_mcause_read>
f0002882:              862a                     mv      a2,a0
f0002884:              00003517                 auipc   a0,0x3
f0002888:              0ff50593                 addi    a1,a0,255 # f0005983 <manage_flow_control.log_fields.56+0x357>
f000288c:              8522                     mv      a0,s0
f000288e:              c5bff0ef                 jal     ra,f00024e8 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:218
  abort();
f0002892:              2609                     jal     f0002b94 <abort>

f0002894 <dif_rv_plic_init>:
dif_rv_plic_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:18

#include "rv_plic_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_plic_init(mmio_region_t base_addr, dif_rv_plic_t *rv_plic) {
  if (rv_plic == NULL) {
f0002894:       /----- c981                     beqz    a1,f00028a4 <dif_rv_plic_init+0x10>
f0002896:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:22
    return kDifBadArg;
  }

  rv_plic->base_addr = base_addr;
f0002898:       |      c188                     sw      a0,0(a1)
f000289a:       |  /-- a031                     j       f00028a6 <dif_rv_plic_init+0x12>
f000289c:       |  |   c0001073                 unimp
f00028a0:       |  |   c0001073                 unimp
f00028a4:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:25

  return kDifOk;
}
f00028a6:          \-> 8532                     mv      a0,a2
f00028a8:              8082                     ret
f00028aa:              c0001073                 unimp
f00028ae:              c0001073                 unimp

f00028b2 <dif_rv_plic_irq_set_enabled>:
dif_rv_plic_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:174

dif_result_t dif_rv_plic_irq_set_enabled(const dif_rv_plic_t *plic,
                                         dif_rv_plic_irq_id_t irq,
                                         dif_rv_plic_target_t target,
                                         dif_toggle_t state) {
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
f00028b2:           00153713            seqz    a4,a0
f00028b6:           0b65b793            sltiu   a5,a1,182
f00028ba:           0017c793            xori    a5,a5,1
f00028be:           00c03633            snez    a2,a2
f00028c2:           8e59                        or      a2,a2,a4
f00028c4:           8e5d                        or      a2,a2,a5
f00028c6:           0026b713            sltiu   a4,a3,2
f00028ca:           00174713            xori    a4,a4,1
f00028ce:           8f51                        or      a4,a4,a2
f00028d0:           460d                        li      a2,3
f00028d2:       /-- e315                        bnez    a4,f00028f6 <dif_rv_plic_irq_set_enabled+0x44>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:193
      return kDifBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->base_addr, reg_info.offset);
f00028d4:       |   4108                        lw      a0,0(a0)
plic_irq_enable_reg_info():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:92
      .offset = plic_irq_enable_base_for_target(target) + offset,
f00028d6:       |   0035d613            srli    a2,a1,0x3
f00028da:       |   28d61613            bseti   a2,a2,0xd
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f00028de:       |   9a71                        andi    a2,a2,-4
f00028e0:       |   9532                        add     a0,a0,a2
f00028e2:       |   4118                        lw      a4,0(a0)
f00028e4:       |   4601                        li      a2,0
plic_irq_bit_index():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:51
  return irq % RV_PLIC_PARAM_REG_WIDTH;
f00028e6:       |   01f5f793            andi    a5,a1,31
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f00028ea:       |   48f71733            bclr    a4,a4,a5
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00028ee:       |   00b695b3            sll     a1,a3,a1
f00028f2:       |   8dd9                        or      a1,a1,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f00028f4:       |   c10c                        sw      a1,0(a0)
dif_rv_plic_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:198
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->base_addr, reg_info.offset, reg);

  return kDifOk;
}
f00028f6:       \-> 8532                        mv      a0,a2
f00028f8:           8082                        ret
f00028fa:           c0001073            unimp
f00028fe:           c0001073            unimp

f0002902 <dif_rv_plic_irq_set_priority>:
dif_rv_plic_irq_set_priority():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:203

dif_result_t dif_rv_plic_irq_set_priority(const dif_rv_plic_t *plic,
                                          dif_rv_plic_irq_id_t irq,
                                          uint32_t priority) {
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
f0002902:           00153693            seqz    a3,a0
f0002906:           0b65b713            sltiu   a4,a1,182
f000290a:           00174713            xori    a4,a4,1
f000290e:           8ed9                        or      a3,a3,a4
f0002910:           00463713            sltiu   a4,a2,4
f0002914:           00174713            xori    a4,a4,1
f0002918:           8f55                        or      a4,a4,a3
f000291a:           468d                        li      a3,3
f000291c:       /-- e711                        bnez    a4,f0002928 <dif_rv_plic_irq_set_priority+0x26>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:209
      priority > kDifRvPlicMaxPriority) {
    return kDifBadArg;
  }

  ptrdiff_t offset = plic_priority_reg_offset(irq);
  mmio_region_write32(plic->base_addr, offset, priority);
f000291e:       |   4108                        lw      a0,0(a0)
f0002920:       |   4681                        li      a3,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0002922:       |   20a5c533            sh2add  a0,a1,a0
f0002926:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_set_priority():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:212

  return kDifOk;
}
f0002928:       \-> 8536                        mv      a0,a3
f000292a:           8082                        ret
f000292c:           c0001073            unimp
f0002930:           c0001073            unimp

f0002934 <dif_rv_plic_target_set_threshold>:
dif_rv_plic_target_set_threshold():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:217

dif_result_t dif_rv_plic_target_set_threshold(const dif_rv_plic_t *plic,
                                              dif_rv_plic_target_t target,
                                              uint32_t threshold) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f0002934:           00153693            seqz    a3,a0
f0002938:           00b035b3            snez    a1,a1
f000293c:           8dd5                        or      a1,a1,a3
f000293e:           00463693            sltiu   a3,a2,4
f0002942:           0016c693            xori    a3,a3,1
f0002946:           8ecd                        or      a3,a3,a1
f0002948:           458d                        li      a1,3
f000294a:       /-- e699                        bnez    a3,f0002958 <dif_rv_plic_target_set_threshold+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:223
      threshold > kDifRvPlicMaxPriority) {
    return kDifBadArg;
  }

  ptrdiff_t threshold_offset = plic_threshold_base_for_target(target);
  mmio_region_write32(plic->base_addr, threshold_offset, threshold);
f000294c:       |   4108                        lw      a0,0(a0)
f000294e:       |   4581                        li      a1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0002950:       |   002006b7            lui     a3,0x200
f0002954:       |   9536                        add     a0,a0,a3
f0002956:       |   c110                        sw      a2,0(a0)
dif_rv_plic_target_set_threshold():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:226

  return kDifOk;
}
f0002958:       \-> 852e                        mv      a0,a1
f000295a:           8082                        ret
f000295c:           c0001073            unimp
f0002960:           c0001073            unimp

f0002964 <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f0002964:           00153693            seqz    a3,a0
f0002968:           00b035b3            snez    a1,a1
f000296c:           8dd5                        or      a1,a1,a3
f000296e:           00163693            seqz    a3,a2
f0002972:           8ecd                        or      a3,a3,a1
f0002974:           458d                        li      a1,3
f0002976:       /-- ea81                        bnez    a3,f0002986 <dif_rv_plic_irq_claim+0x22>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
f0002978:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f000297a:       |   002005b7            lui     a1,0x200
f000297e:       |   952e                        add     a0,a0,a1
f0002980:       |   4148                        lw      a0,4(a0)
f0002982:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
f0002984:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
f0002986:       \-> 852e                        mv      a0,a1
f0002988:           8082                        ret
f000298a:           c0001073            unimp
f000298e:           c0001073            unimp

f0002992 <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
f0002992:           00153693            seqz    a3,a0
f0002996:           00b035b3            snez    a1,a1
f000299a:           8ecd                        or      a3,a3,a1
f000299c:           458d                        li      a1,3
f000299e:       /-- e699                        bnez    a3,f00029ac <dif_rv_plic_irq_complete+0x1a>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
f00029a0:       |   4108                        lw      a0,0(a0)
f00029a2:       |   4581                        li      a1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f00029a4:       |   002006b7            lui     a3,0x200
f00029a8:       |   9536                        add     a0,a0,a3
f00029aa:       |   c150                        sw      a2,4(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
f00029ac:       \-> 852e                        mv      a0,a1
f00029ae:           8082                        ret
f00029b0:           c0001073            unimp
f00029b4:           c0001073            unimp

f00029b8 <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
f00029b8:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
f00029ba:                 ce06                  sw      ra,28(sp)
f00029bc:                 cc22                  sw      s0,24(sp)
f00029be:                 ca26                  sw      s1,20(sp)
f00029c0:                 c84a                  sw      s2,16(sp)
f00029c2:                 00003617              auipc   a2,0x3
f00029c6:                 36662483              lw      s1,870(a2) # f0005d28 <MODULE_ID>
f00029ca:                 892e                  mv      s2,a1
f00029cc:                 842a                  mv      s0,a0
f00029ce:                 00003517              auipc   a0,0x3
f00029d2:                 0fe50613              addi    a2,a0,254 # f0005acc <kDifRvPlicMaxPriority+0x4>
f00029d6:                 4501                  li      a0,0
f00029d8:                 85a6                  mv      a1,s1
f00029da:                 4681                  li      a3,0
f00029dc:                 2a5000ef              jal     ra,f0003480 <status_create>
f00029e0:                 012035b3              snez    a1,s2
f00029e4:                 00b107a3              sb      a1,15(sp)
f00029e8:                 00f14583              lbu     a1,15(sp)
f00029ec:       /-------- e1a1                  bnez    a1,f0002a2c <rand_testutils_init+0x74>
f00029ee:       |         00003517              auipc   a0,0x3
f00029f2:       |         4fe52503              lw      a0,1278(a0) # f0005eec <kDeviceLogBypassUartAddress>
f00029f6:       |  /----- cd01                  beqz    a0,f0002a0e <rand_testutils_init+0x56>
f00029f8:       |  |      1000e517              auipc   a0,0x1000e
f00029fc:       |  |      a1850513              addi    a0,a0,-1512 # 10410 <_non_volatile_scratch_end+0xff90410>
f0002a00:       |  |      4581                  li      a1,0
f0002a02:       |  |      2cbd                  jal     f0002c80 <base_log_internal_dv>
f0002a04:       |  |  /-- a811                  j       f0002a18 <rand_testutils_init+0x60>
f0002a06:       |  |  |   c0001073              unimp
f0002a0a:       |  |  |   c0001073              unimp
f0002a0e:       |  \--|-> 00003517              auipc   a0,0x3
f0002a12:       |     |   14e50513              addi    a0,a0,334 # f0005b5c <rand_testutils_init.log_fields>
f0002a16:       |     |   2a5d                  jal     f0002bcc <base_log_internal_core>
f0002a18:       |     \-> 00003517              auipc   a0,0x3
f0002a1c:       |         0b450613              addi    a2,a0,180 # f0005acc <kDifRvPlicMaxPriority+0x4>
f0002a20:       |         4535                  li      a0,13
f0002a22:       |         02000693              li      a3,32
f0002a26:       |         85a6                  mv      a1,s1
f0002a28:       |         259000ef              jal     ra,f0003480 <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
f0002a2c:       \-------> 00052593              slti    a1,a0,0
f0002a30:                 897d                  andi    a0,a0,31
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
f0002a32:                 00a03533              snez    a0,a0
f0002a36:                 8d6d                  and     a0,a0,a1
f0002a38:             /-- c509                  beqz    a0,f0002a42 <rand_testutils_init+0x8a>
f0002a3a:             |   6531                  lui     a0,0xc
f0002a3c:             |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0002a40:             |   2885                  jal     f0002ab0 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0002a42:             \-> 01242023              sw      s2,0(s0)
f0002a46:                 6561                  lui     a0,0x18
f0002a48:                 6a050513              addi    a0,a0,1696 # 186a0 <test_status_set.kLogFields.5+0x8204>
f0002a4c:                 c048                  sw      a0,4(s0)
f0002a4e:                 deadc537              lui     a0,0xdeadc
f0002a52:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xeea5beef>
f0002a56:                 c408                  sw      a0,8(s0)
f0002a58:                 80000537              lui     a0,0x80000
f0002a5c:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x8ff80057>
f0002a60:                 c448                  sw      a0,12(s0)
f0002a62:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0002a66:                 00003597              auipc   a1,0x3
f0002a6a:                 4665a583              lw      a1,1126(a1) # f0005ecc <kDeviceType>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0002a6e:                 c808                  sw      a0,16(s0)
f0002a70:                 557d                  li      a0,-1
f0002a72:                 4609                  li      a2,2
f0002a74:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0002a76:             /-- 00c5e463              bltu    a1,a2,f0002a7e <rand_testutils_init+0xc6>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
f0002a7a:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
f0002a7e:             \-> 40f2                  lw      ra,28(sp)
f0002a80:                 4462                  lw      s0,24(sp)
f0002a82:                 44d2                  lw      s1,20(sp)
f0002a84:                 4942                  lw      s2,16(sp)
f0002a86:                 6105                  addi    sp,sp,32
f0002a88:                 8082                  ret
f0002a8a:                 c0001073              unimp
f0002a8e:                 c0001073              unimp

f0002a92 <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
f0002a92:       /----- c981                     beqz    a1,f0002aa2 <dif_rv_core_ibex_init+0x10>
f0002a94:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
f0002a96:       |      c188                     sw      a0,0(a1)
f0002a98:       |  /-- a031                     j       f0002aa4 <dif_rv_core_ibex_init+0x12>
f0002a9a:       |  |   c0001073                 unimp
f0002a9e:       |  |   c0001073                 unimp
f0002aa2:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
f0002aa4:          \-> 8532                     mv      a0,a2
f0002aa6:              8082                     ret
f0002aa8:              c0001073                 unimp
f0002aac:              c0001073                 unimp

f0002ab0 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
f0002ab0:                    1141                       addi    sp,sp,-16
f0002ab2:                    c606                       sw      ra,12(sp)
f0002ab4:                    c422                       sw      s0,8(sp)
f0002ab6:                    65b1                       lui     a1,0xc
f0002ab8:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
f0002abc:          /-------- 04b50c63           beq     a0,a1,f0002b14 <test_status_set+0x64>
f0002ac0:          |         842a                       mv      s0,a0
f0002ac2:          |         6525                       lui     a0,0x9
f0002ac4:          |         0535                       addi    a0,a0,13
f0002ac6:       /--|-------- 06a40663           beq     s0,a0,f0002b32 <test_status_set+0x82>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:40
      test_status_device_write(test_status);
      abort();
      break;
    }
    default: {
      LOG_INFO("test_status_set to 0x%x", test_status);
f0002aca:       |  |         00003517           auipc   a0,0x3
f0002ace:       |  |         42252503           lw      a0,1058(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0002ad2:       |  |  /----- cd09                       beqz    a0,f0002aec <test_status_set+0x3c>
f0002ad4:       |  |  |      1000e517           auipc   a0,0x1000e
f0002ad8:       |  |  |      9c850513           addi    a0,a0,-1592 # 1049c <_non_volatile_scratch_end+0xff9049c>
f0002adc:       |  |  |      4585                       li      a1,1
f0002ade:       |  |  |      8622                       mv      a2,s0
f0002ae0:       |  |  |      2245                       jal     f0002c80 <base_log_internal_dv>
f0002ae2:       |  |  |  /-- a819                       j       f0002af8 <test_status_set+0x48>
f0002ae4:       |  |  |  |   c0001073           unimp
f0002ae8:       |  |  |  |   c0001073           unimp
f0002aec:       |  |  \--|-> 00003517           auipc   a0,0x3
f0002af0:       |  |     |   10050513           addi    a0,a0,256 # f0005bec <test_status_set.log_fields.7>
f0002af4:       |  |     |   85a2                       mv      a1,s0
f0002af6:       |  |     |   28d9                       jal     f0002bcc <base_log_internal_core>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0002af8:       |  |     \-> 00003517           auipc   a0,0x3
f0002afc:       |  |         3f052503           lw      a0,1008(a0) # f0005ee8 <kDeviceTestStatusAddress>
f0002b00:       |  |     /-- c111                       beqz    a0,f0002b04 <test_status_set+0x54>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0002b02:       |  |     |   c100                       sw      s0,0(a0)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:45
      test_status_device_write(test_status);
      break;
    }
  }
}
f0002b04:       |  |     \-> 40b2                       lw      ra,12(sp)
f0002b06:       |  |         4422                       lw      s0,8(sp)
f0002b08:       |  |         0141                       addi    sp,sp,16
f0002b0a:       |  |         8082                       ret
f0002b0c:       |  |         c0001073           unimp
f0002b10:       |  |         c0001073           unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0002b14:       |  \-------> 00003517           auipc   a0,0x3
f0002b18:       |            3d852503           lw      a0,984(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0002b1c:       |        /-- e915                       bnez    a0,f0002b50 <test_status_set+0xa0>
f0002b1e:       |        |   00003517           auipc   a0,0x3
f0002b22:       |        |   0ba50513           addi    a0,a0,186 # f0005bd8 <test_status_set.log_fields.4>
f0002b26:       |        |   205d                       jal     f0002bcc <base_log_internal_core>
f0002b28:       |     /--|-- a815                       j       f0002b5c <test_status_set+0xac>
f0002b2a:       |     |  |   c0001073           unimp
f0002b2e:       |     |  |   c0001073           unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0002b32:       \-----|--|-> 00003517           auipc   a0,0x3
f0002b36:             |  |   3ba52503           lw      a0,954(a0) # f0005eec <kDeviceLogBypassUartAddress>
f0002b3a:          /--|--|-- ed15                       bnez    a0,f0002b76 <test_status_set+0xc6>
f0002b3c:          |  |  |   00003517           auipc   a0,0x3
f0002b40:          |  |  |   08850513           addi    a0,a0,136 # f0005bc4 <test_status_set.log_fields>
f0002b44:          |  |  |   2061                       jal     f0002bcc <base_log_internal_core>
f0002b46:       /--|--|--|-- a835                       j       f0002b82 <test_status_set+0xd2>
f0002b48:       |  |  |  |   c0001073           unimp
f0002b4c:       |  |  |  |   c0001073           unimp
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0002b50:       |  |  |  \-> 1000e517           auipc   a0,0x1000e
f0002b54:       |  |  |      93850513           addi    a0,a0,-1736 # 10488 <_non_volatile_scratch_end+0xff90488>
f0002b58:       |  |  |      4581                       li      a1,0
f0002b5a:       |  |  |      221d                       jal     f0002c80 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0002b5c:       |  |  \----> 00003517           auipc   a0,0x3
f0002b60:       |  |         38c52503           lw      a0,908(a0) # f0005ee8 <kDeviceTestStatusAddress>
f0002b64:       |  |  /----- c51d                       beqz    a0,f0002b92 <test_status_set+0xe2>
f0002b66:       |  |  |      65b1                       lui     a1,0xc
f0002b68:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0002b6c:       |  |  |  /-- a015                       j       f0002b90 <test_status_set+0xe0>
f0002b6e:       |  |  |  |   c0001073           unimp
f0002b72:       |  |  |  |   c0001073           unimp
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0002b76:       |  \--|--|-> 1000e517           auipc   a0,0x1000e
f0002b7a:       |     |  |   8fe50513           addi    a0,a0,-1794 # 10474 <_non_volatile_scratch_end+0xff90474>
f0002b7e:       |     |  |   4581                       li      a1,0
f0002b80:       |     |  |   2201                       jal     f0002c80 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0002b82:       \-----|--|-> 00003517           auipc   a0,0x3
f0002b86:             |  |   36652503           lw      a0,870(a0) # f0005ee8 <kDeviceTestStatusAddress>
f0002b8a:             +--|-- c501                       beqz    a0,f0002b92 <test_status_set+0xe2>
f0002b8c:             |  |   65a5                       lui     a1,0x9
f0002b8e:             |  |   05b5                       addi    a1,a1,13
f0002b90:             |  \-> c10c                       sw      a1,0(a0)
f0002b92:             \----> 2009                       jal     f0002b94 <abort>

f0002b94 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
f0002b94:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
f0002b98:       \-- bff5                        j       f0002b94 <abort>
f0002b9a:           c0001073            unimp
f0002b9e:           c0001073            unimp

f0002ba2 <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
f0002ba2:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
f0002ba6:       8082                    ret
f0002ba8:       c0001073                unimp
f0002bac:       c0001073                unimp

f0002bb0 <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
f0002bb0:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
f0002bb4:       8082                    ret
f0002bb6:       c0001073                unimp
f0002bba:       c0001073                unimp

f0002bbe <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
f0002bbe:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
f0002bc2:       8082                    ret
f0002bc4:       c0001073                unimp
f0002bc8:       c0001073                unimp

f0002bcc <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(const log_fields_t *log, ...) {
f0002bcc:              7179                     addi    sp,sp,-48
f0002bce:              c606                     sw      ra,12(sp)
f0002bd0:              c422                     sw      s0,8(sp)
f0002bd2:              c226                     sw      s1,4(sp)
f0002bd4:              842a                     mv      s0,a0
f0002bd6:              d646                     sw      a7,44(sp)
f0002bd8:              d442                     sw      a6,40(sp)
f0002bda:              d23e                     sw      a5,36(sp)
f0002bdc:              d03a                     sw      a4,32(sp)
f0002bde:              ce36                     sw      a3,28(sp)
f0002be0:              cc32                     sw      a2,24(sp)
f0002be2:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      (size_t)(((const char *)memchr(log->file_name, '\0', PTRDIFF_MAX)) -
f0002be4:              4148                     lw      a0,4(a0)
f0002be6:              80000637                 lui     a2,0x80000
f0002bea:              167d                     addi    a2,a2,-1
f0002bec:              4581                     li      a1,0
f0002bee:              717000ef                 jal     ra,f0003b04 <memchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:50
               log->file_name);
f0002bf2:              4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
      (size_t)(((const char *)memchr(log->file_name, '\0', PTRDIFF_MAX)) -
f0002bf4:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  const char *base_name = memrchr(log->file_name, '/', file_name_len);
f0002bf8:              02f00593                 li      a1,47
f0002bfc:              8536                     mv      a0,a3
f0002bfe:              7d5000ef                 jal     ra,f0003bd2 <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
  if (base_name == NULL) {
f0002c02:       /----- c901                     beqz    a0,f0002c12 <base_log_internal_core+0x46>
/proc/self/cwd/sw/device/lib/runtime/log.c:55
    base_name = log->file_name;
  } else {
    ++base_name;  // Remove the final '/'.
f0002c04:       |      00150693                 addi    a3,a0,1
f0002c08:       |  /-- a031                     j       f0002c14 <base_log_internal_core+0x48>
f0002c0a:       |  |   c0001073                 unimp
f0002c0e:       |  |   c0001073                 unimp
/proc/self/cwd/sw/device/lib/runtime/log.c:53
    base_name = log->file_name;
f0002c12:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:63
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log->severity),
f0002c14:          \-> 4008                     lw      a0,0(s0)
f0002c16:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
f0002c18:       /----- 00a5ee63                 bltu    a1,a0,f0002c34 <base_log_internal_core+0x68>
f0002c1c:       |      00003597                 auipc   a1,0x3
f0002c20:       |      00058593                 mv      a1,a1
f0002c24:       |      20b54533                 sh2add  a0,a0,a1
f0002c28:       |      410c                     lw      a1,0(a0)
f0002c2a:       |  /-- a809                     j       f0002c3c <base_log_internal_core+0x70>
f0002c2c:       |  |   c0001073                 unimp
f0002c30:       |  |   c0001073                 unimp
f0002c34:       \--|-> 00003517                 auipc   a0,0x3
f0002c38:          |   fe450593                 addi    a1,a0,-28 # f0005c18 <test_status_set.log_fields.7+0x2c>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:64
              global_log_counter, base_name, log->line);
f0002c3c:          \-> effff497                 auipc   s1,0xeffff
f0002c40:              4484d603                 lhu     a2,1096(s1) # e0002084 <base_log_internal_core.global_log_counter>
f0002c44:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:63
  base_printf("%s%05d %s:%d] ", stringify_severity(log->severity),
f0002c46:              00003517                 auipc   a0,0x3
f0002c4a:              fba50513                 addi    a0,a0,-70 # f0005c00 <test_status_set.log_fields.7+0x14>
f0002c4e:              20ed                     jal     f0002d38 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:65
  ++global_log_counter;
f0002c50:              44849503                 lh      a0,1096(s1)
f0002c54:              0505                     addi    a0,a0,1
f0002c56:              44a49423                 sh      a0,1096(s1)
f0002c5a:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:68

  va_list args;
  va_start(args, log);
f0002c5c:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:69
  base_vprintf(log->format, args);
f0002c5e:              4808                     lw      a0,16(s0)
f0002c60:              084c                     addi    a1,sp,20
f0002c62:              2a01                     jal     f0002d72 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
  va_end(args);

  base_printf("\r\n");
f0002c64:              00003517                 auipc   a0,0x3
f0002c68:              fab50513                 addi    a0,a0,-85 # f0005c0f <test_status_set.log_fields.7+0x23>
f0002c6c:              20f1                     jal     f0002d38 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:73
}
f0002c6e:              40b2                     lw      ra,12(sp)
f0002c70:              4422                     lw      s0,8(sp)
f0002c72:              4492                     lw      s1,4(sp)
f0002c74:              6145                     addi    sp,sp,48
f0002c76:              8082                     ret
f0002c78:              c0001073                 unimp
f0002c7c:              c0001073                 unimp

f0002c80 <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:85
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
f0002c80:              1101                     addi    sp,sp,-32
f0002c82:              ce46                     sw      a7,28(sp)
f0002c84:              cc42                     sw      a6,24(sp)
f0002c86:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:86
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
f0002c88:              00003797                 auipc   a5,0x3
f0002c8c:              2647a783                 lw      a5,612(a5) # f0005eec <kDeviceLogBypassUartAddress>
f0002c90:              c83a                     sw      a4,16(sp)
f0002c92:              c636                     sw      a3,12(sp)
f0002c94:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0002c96:              c388                     sw      a0,0(a5)
f0002c98:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
f0002c9a:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:91
  for (int i = 0; i < nargs; ++i) {
f0002c9c:       /----- c989                     beqz    a1,f0002cae <base_log_internal_dv+0x2e>
/proc/self/cwd/sw/device/lib/runtime/log.c:92
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
f0002c9e:       |  /-> 4512                     lw      a0,4(sp)
f0002ca0:       |  |   00450613                 addi    a2,a0,4
f0002ca4:       |  |   c232                     sw      a2,4(sp)
f0002ca6:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:91
  for (int i = 0; i < nargs; ++i) {
f0002ca8:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0002caa:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:91
f0002cac:       |  \-- f9ed                     bnez    a1,f0002c9e <base_log_internal_dv+0x1e>
/proc/self/cwd/sw/device/lib/runtime/log.c:95
  }
  va_end(args);
}
f0002cae:       \----> 6105                     addi    sp,sp,32
f0002cb0:              8082                     ret
f0002cb2:              c0001073                 unimp
f0002cb6:              c0001073                 unimp

f0002cba <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:53

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
f0002cba:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:54
  return len;
f0002cbc:       8082                    ret
f0002cbe:       c0001073                unimp
f0002cc2:       c0001073                unimp

f0002cc6 <base_uart_stdout>:
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:67

void base_set_stdout(buffer_sink_t out) {
  if (out.sink == NULL) {
    out.sink = &base_dev_null;
  }
  base_stdout = out;
f0002cc6:       effff597                auipc   a1,0xeffff
f0002cca:       3c258593                addi    a1,a1,962 # e0002088 <base_stdout>
f0002cce:       c188                    sw      a0,0(a1)
f0002cd0:       00000517                auipc   a0,0x0
f0002cd4:       01450513                addi    a0,a0,20 # f0002ce4 <base_dev_uart>
f0002cd8:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:83
}

void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
f0002cda:       8082                    ret
f0002cdc:       c0001073                unimp
f0002ce0:       c0001073                unimp

f0002ce4 <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:70
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
f0002ce4:                 1101                  addi    sp,sp,-32
f0002ce6:                 ce06                  sw      ra,28(sp)
f0002ce8:                 cc22                  sw      s0,24(sp)
f0002cea:                 ca26                  sw      s1,20(sp)
f0002cec:                 c84a                  sw      s2,16(sp)
f0002cee:                 c64e                  sw      s3,12(sp)
f0002cf0:                 8932                  mv      s2,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:72
  for (size_t i = 0; i < len; ++i) {
f0002cf2:       /-------- c60d                  beqz    a2,f0002d1c <base_dev_uart+0x38>
f0002cf4:       |         89ae                  mv      s3,a1
f0002cf6:       |         842a                  mv      s0,a0
f0002cf8:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:73
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
f0002cfa:       |     /-> 00998533              add     a0,s3,s1
f0002cfe:       |     |   00054583              lbu     a1,0(a0)
f0002d02:       |     |   8522                  mv      a0,s0
f0002d04:       |     |   339000ef              jal     ra,f000383c <dif_uart_byte_send_polled>
f0002d08:       |  /--|-- e919                  bnez    a0,f0002d1e <base_dev_uart+0x3a>
/proc/self/cwd/sw/device/lib/runtime/print.c:72
  for (size_t i = 0; i < len; ++i) {
f0002d0a:       |  |  |   0485                  addi    s1,s1,1
f0002d0c:       |  |  \-- fe9917e3              bne     s2,s1,f0002cfa <base_dev_uart+0x16>
f0002d10:       |  |      84ca                  mv      s1,s2
f0002d12:       |  +----- a031                  j       f0002d1e <base_dev_uart+0x3a>
f0002d14:       |  |      c0001073              unimp
f0002d18:       |  |      c0001073              unimp
f0002d1c:       \--|----> 4481                  li      s1,0
f0002d1e:          \----> 0b24d533              minu    a0,s1,s2
/proc/self/cwd/sw/device/lib/runtime/print.c:78
}
f0002d22:                 40f2                  lw      ra,28(sp)
f0002d24:                 4462                  lw      s0,24(sp)
f0002d26:                 44d2                  lw      s1,20(sp)
f0002d28:                 4942                  lw      s2,16(sp)
f0002d2a:                 49b2                  lw      s3,12(sp)
f0002d2c:                 6105                  addi    sp,sp,32
f0002d2e:                 8082                  ret
f0002d30:                 c0001073              unimp
f0002d34:                 c0001073              unimp

f0002d38 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:85

size_t base_printf(const char *format, ...) {
f0002d38:       7179                    addi    sp,sp,-48
f0002d3a:       c606                    sw      ra,12(sp)
f0002d3c:       d646                    sw      a7,44(sp)
f0002d3e:       d442                    sw      a6,40(sp)
f0002d40:       d23e                    sw      a5,36(sp)
f0002d42:       d03a                    sw      a4,32(sp)
f0002d44:       ce36                    sw      a3,28(sp)
f0002d46:       cc32                    sw      a2,24(sp)
f0002d48:       ca2e                    sw      a1,20(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:94
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
f0002d4a:       effff597                auipc   a1,0xeffff
f0002d4e:       33e58593                addi    a1,a1,830 # e0002088 <base_stdout>
f0002d52:       4190                    lw      a2,0(a1)
f0002d54:       41cc                    lw      a1,4(a1)
f0002d56:       872a                    mv      a4,a0
f0002d58:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:87
  va_start(args, format);
f0002d5a:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:94
  return base_vfprintf(base_stdout, format, args);
f0002d5c:       0854                    addi    a3,sp,20
f0002d5e:       8532                    mv      a0,a2
f0002d60:       863a                    mv      a2,a4
f0002d62:       280d                    jal     f0002d94 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:90
  return bytes_left;
f0002d64:       40b2                    lw      ra,12(sp)
f0002d66:       6145                    addi    sp,sp,48
f0002d68:       8082                    ret
f0002d6a:       c0001073                unimp
f0002d6e:       c0001073                unimp

f0002d72 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:94
  return base_vfprintf(base_stdout, format, args);
f0002d72:       effff617                auipc   a2,0xeffff
f0002d76:       31660693                addi    a3,a2,790 # e0002088 <base_stdout>
f0002d7a:       4290                    lw      a2,0(a3)
f0002d7c:       42d4                    lw      a3,4(a3)
f0002d7e:       872e                    mv      a4,a1
f0002d80:       87aa                    mv      a5,a0
f0002d82:       8532                    mv      a0,a2
f0002d84:       85b6                    mv      a1,a3
f0002d86:       863e                    mv      a2,a5
f0002d88:       86ba                    mv      a3,a4
f0002d8a:       a029                    j       f0002d94 <base_vfprintf>
f0002d8c:       c0001073                unimp
f0002d90:       c0001073                unimp

f0002d94 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:533
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
f0002d94:                                                                    711d                       addi    sp,sp,-96
f0002d96:                                                                    ce86                       sw      ra,92(sp)
f0002d98:                                                                    cca2                       sw      s0,88(sp)
f0002d9a:                                                                    caa6                       sw      s1,84(sp)
f0002d9c:                                                                    c8ca                       sw      s2,80(sp)
f0002d9e:                                                                    c6ce                       sw      s3,76(sp)
f0002da0:                                                                    c4d2                       sw      s4,72(sp)
f0002da2:                                                                    c2d6                       sw      s5,68(sp)
f0002da4:                                                                    c0da                       sw      s6,64(sp)
f0002da6:                                                                    de5e                       sw      s7,60(sp)
f0002da8:                                                                    dc62                       sw      s8,56(sp)
f0002daa:                                                                    da66                       sw      s9,52(sp)
f0002dac:                                                                    d86a                       sw      s10,48(sp)
f0002dae:                                                                    d66e                       sw      s11,44(sp)
f0002db0:                                                                    84b2                       mv      s1,a2
f0002db2:                                                                    cc36                       sw      a3,24(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:543
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
f0002db4:                                                                    ca36                       sw      a3,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:546

  size_t bytes_written = 0;
  while (format[0] != '\0') {
f0002db6:                                                                    00064603           lbu     a2,0(a2)
f0002dba:       /----------------------------------------------------------- 50060363           beqz    a2,f00032c0 <base_vfprintf+0x52c>
f0002dbe:       |                                                            89ae                       mv      s3,a1
f0002dc0:       |                                                            892a                       mv      s2,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:534
  if (out.sink == NULL) {
f0002dc2:       |                                                        /-- e589                       bnez    a1,f0002dcc <base_vfprintf+0x38>
f0002dc4:       |                                                        |   00000517           auipc   a0,0x0
f0002dc8:       |                                                        |   ef650993           addi    s3,a0,-266 # f0002cba <base_dev_null>
f0002dcc:       |                                                        \-> 4a81                       li      s5,0
f0002dce:       |                                                            4a01                       li      s4,0
f0002dd0:       |                                                            02500c93           li      s9,37
f0002dd4:       |                                                            02100d13           li      s10,33
f0002dd8:       |                                                            0f600d93           li      s11,246
f0002ddc:       |                                                            650d                       lui     a0,0x3
f0002dde:       |                                                            c2250513           addi    a0,a0,-990 # 2c22 <_static_critical_size+0xc5a>
f0002de2:       |                                                            c82a                       sw      a0,16(sp)
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    char c = (*format)[text_len];
f0002de4:       |           /----------------------------------------------> 01448533           add     a0,s1,s4
f0002de8:       |           |                                                00054403           lbu     s0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:156
    if (c == '\0' || c == kPercent) {
f0002dec:       |           |                                            /-- 01940363           beq     s0,s9,f0002df2 <base_vfprintf+0x5e>
f0002df0:       |           |                                      /-----|-- e015                       bnez    s0,f0002e14 <base_vfprintf+0x80>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
      if (text_len > 0) {
f0002df2:       |           |                                      |  /--\-X 000a0763           beqz    s4,f0002e00 <base_vfprintf+0x6c>
/proc/self/cwd/sw/device/lib/runtime/print.c:158
        *bytes_written += out.sink(out.data, *format, text_len);
f0002df6:       |           |                                      |  |      854a                       mv      a0,s2
f0002df8:       |           |                                      |  |      85a6                       mv      a1,s1
f0002dfa:       |           |                                      |  |      8652                       mv      a2,s4
f0002dfc:       |           |                                      |  |      9982                       jalr    s3
f0002dfe:       |           |                                      |  |      9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:160
      *format += text_len;
f0002e00:       |           |                                      |  \----> 94d2                       add     s1,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:161
      return c != '\0';
f0002e02:       |           |                                      |         00803bb3           snez    s7,s0
f0002e06:       |           |                                      |  /----- 01941a63           bne     s0,s9,f0002e1a <base_vfprintf+0x86>
f0002e0a:       |           |                                      |  |  /-- a809                       j       f0002e1c <base_vfprintf+0x88>
f0002e0c:       |           |                                      |  |  |   c0001073           unimp
f0002e10:       |           |                                      |  |  |   c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:163
    ++text_len;
f0002e14:       |           |                                      \--|--|-> 0a05                       addi    s4,s4,1
f0002e16:       |           |                                         |  +-- 01940363           beq     s0,s9,f0002e1c <base_vfprintf+0x88>
f0002e1a:       |           +-----------------------------------------\--|-X f469                       bnez    s0,f0002de4 <base_vfprintf+0x50>
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:547
    if (!consume_until_percent(out, &format, &bytes_written)) {
f0002e1c:       |           |                                            \-> 001bf513           andi    a0,s7,1
f0002e20:       |  /--------|----------------------------------------------- 4a050163           beqz    a0,f00032c2 <base_vfprintf+0x52e>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:196
  if ((*format)[0] == '!') {
f0002e24:       |  |        |                                                0014ca03           lbu     s4,1(s1)
f0002e28:       |  |        |                                         /----- 01aa1b63           bne     s4,s10,f0002e3e <base_vfprintf+0xaa>
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    char c = (*format)[spec_len];
f0002e2c:       |  |        |                                         |      0024c583           lbu     a1,2(s1)
/proc/self/cwd/sw/device/lib/runtime/print.c:198
    ++(*format);
f0002e30:       |  |        |                                         |      0489                       addi    s1,s1,2
f0002e32:       |  |        |                                         |      4b05                       li      s6,1
f0002e34:       |  |        |                                         |  /-- a801                       j       f0002e44 <base_vfprintf+0xb0>
f0002e36:       |  |        |                                         |  |   c0001073           unimp
f0002e3a:       |  |        |                                         |  |   c0001073           unimp
f0002e3e:       |  |        |                                         \--|-> 4b01                       li      s6,0
f0002e40:       |  |        |                                            |   0485                       addi    s1,s1,1
f0002e42:       |  |        |                                            |   85d2                       mv      a1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:210
    if (c == '\0') {
f0002e44:       |  |  /-----|--------------------------------------------\-X 46058163           beqz    a1,f00032a6 <base_vfprintf+0x512>
f0002e48:       |  |  |     |                                                4401                       li      s0,0
f0002e4a:       |  |  |     |                                                4c01                       li      s8,0
f0002e4c:       |  |  |     |                                                4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:214
    if (c < '0' || c > '9') {
f0002e4e:       |  |  |     |                                                0485                       addi    s1,s1,1
f0002e50:       |  |  |     |                                         /----> fc658613           addi    a2,a1,-58
f0002e54:       |  |  |     |                                         |      0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:210
    if (c == '\0') {
f0002e58:       |  |  |     |                                         |      0ff5f593           andi    a1,a1,255
/proc/self/cwd/sw/device/lib/runtime/print.c:214
    if (c < '0' || c > '9') {
f0002e5c:       |  |  |     |                                /--------|----- 05b66463           bltu    a2,s11,f0002ea4 <base_vfprintf+0x110>
/proc/self/cwd/sw/device/lib/runtime/print.c:217
    if (spec->padding == 0) {
f0002e60:       |  |  |     |                                |        |      0ff57613           andi    a2,a0,255
f0002e64:       |  |  |     |                                |        |  /-- c205                       beqz    a2,f0002e84 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:226
    spec->width += (c - '0');
f0002e66:       |  |  |     |                                |  /-----|--|-> 20844633           sh2add  a2,s0,s0
f0002e6a:       |  |  |     |                                |  |     |  |   20b625b3           sh1add  a1,a2,a1
f0002e6e:       |  |  |     |                                |  |     |  |   fd058413           addi    s0,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    char c = (*format)[spec_len];
f0002e72:       |  |  |     |                                |  |  /--|--|-> 0004c583           lbu     a1,0(s1)
/proc/self/cwd/sw/device/lib/runtime/print.c:210
    if (c == '\0') {
f0002e76:       |  |  |     |                                |  |  |  |  |   0485                       addi    s1,s1,1
f0002e78:       |  |  |     |                                |  |  |  \--|-- fde1                       bnez    a1,f0002e50 <base_vfprintf+0xbc>
f0002e7a:       |  |  +-----|--------------------------------|--|--|-----|-- a135                       j       f00032a6 <base_vfprintf+0x512>
f0002e7c:       |  |  |     |                                |  |  |     |   c0001073           unimp
f0002e80:       |  |  |     |                                |  |  |     |   c0001073           unimp
f0002e84:       |  |  |     |                                |  |  |     \-> 02000c13           li      s8,32
f0002e88:       |  |  |     |                                |  |  |         03000613           li      a2,48
f0002e8c:       |  |  |     |                                |  |  |         02000513           li      a0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:218
      if (c == '0') {
f0002e90:       |  |  |     |                                |  \--|-------- fcc59be3           bne     a1,a2,f0002e66 <base_vfprintf+0xd2>
f0002e94:       |  |  |     |                                |     |         03000513           li      a0,48
f0002e98:       |  |  |     |                                |     |         8c32                       mv      s8,a2
f0002e9a:       |  |  |     |                                |     \-------- bfe1                       j       f0002e72 <base_vfprintf+0xde>
f0002e9c:       |  |  |     |                                |               c0001073           unimp
f0002ea0:       |  |  |     |                                |               c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:230
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
f0002ea4:       |  |  |     |                                \-----------/-X c801                       beqz    s0,f0002eb4 <base_vfprintf+0x120>
f0002ea6:       |  |  |     |                                         /--|-- 01a46b63           bltu    s0,s10,f0002ebc <base_vfprintf+0x128>
f0002eaa:       |  |  |  /--|-----------------------------------------|--|-- a181                       j       f00032ea <base_vfprintf+0x556>
f0002eac:       |  |  |  |  |                                         |  |   c0001073           unimp
f0002eb0:       |  |  |  |  |                                         |  |   c0001073           unimp
f0002eb4:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
f0002eb8:       |  |  |  +--|-----------------------------------------|----- 42051963           bnez    a0,f00032ea <base_vfprintf+0x556>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:375
  switch (spec.type) {
f0002ebc:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
f0002ec0:       |  |  |  |  |                                         /----- 04ad6d63           bltu    s10,a0,f0002f1a <base_vfprintf+0x186>
f0002ec4:       |  |  |  |  |                                         |      00003597           auipc   a1,0x3
f0002ec8:       |  |  |  |  |                                         |      d6858593           addi    a1,a1,-664 # f0005c2c <test_status_set.log_fields.7+0x40>
f0002ecc:       |  |  |  |  |                                         |      20b54533           sh2add  a0,a0,a1
f0002ed0:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
f0002ed2:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:409
      if (spec.is_nonstd) {
f0002ed4:       |  |  |  |  |  /--------------------------------------|----- 33aa0863           beq     s4,s10,f0003204 <base_vfprintf+0x470>
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      uint32_t value = va_arg(*args, uint32_t);
f0002ed8:       |  |  |  |  |  |                                      |      4552                       lw      a0,20(sp)
f0002eda:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
f0002ede:       |  |  |  |  |  |                                      |      ca2e                       sw      a1,20(sp)
f0002ee0:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:413
      if (((int32_t)value) < 0) {
f0002ee4:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,f0002efc <base_vfprintf+0x168>
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        *bytes_written += out.sink(out.data, "-", 1);
f0002ee8:       |  |  |  |  |  |                                      |  |   00003517           auipc   a0,0x3
f0002eec:       |  |  |  |  |  |                                      |  |   ddb50593           addi    a1,a0,-549 # f0005cc3 <test_status_set.log_fields.7+0xd7>
f0002ef0:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
f0002ef2:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
f0002ef4:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
f0002ef6:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:415
        value = -value;
f0002ef8:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:418
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0002efc:       |  |  |  |  |  |                                      |  \-> 0ffc7713           andi    a4,s8,255
f0002f00:       |  |  |  |  |  |                                      |      00003517           auipc   a0,0x3
f0002f04:       |  |  |  |  |  |                                      |      ddc50813           addi    a6,a0,-548 # f0005cdc <kDigitsLow>
f0002f08:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
f0002f0a:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
f0002f0c:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
f0002f0e:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
f0002f10:       |  |  |  |  |  |        /-----------------------------|----- ac45                       j       f00031c0 <base_vfprintf+0x42c>
f0002f12:       |  |  |  |  |  |        |                             |      c0001073           unimp
f0002f16:       |  |  |  |  |  |        |                             |      c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:375
  switch (spec.type) {
f0002f1a:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
f0002f1e:       |  |  |  |  |  |        |                                /-- 04a58563           beq     a1,a0,f0002f68 <base_vfprintf+0x1d4>
f0002f22:       |  |  |  |  |  +--------|--------------------------------|-- 2f959163           bne     a1,s9,f0003204 <base_vfprintf+0x470>
f0002f26:       |  |  |  |  |  +--------|--------------------------------|-- 2daa0f63           beq     s4,s10,f0003204 <base_vfprintf+0x470>
/proc/self/cwd/sw/device/lib/runtime/print.c:380
      *bytes_written += out.sink(out.data, "%", 1);
f0002f2a:       |  |  |  |  |  |        |                                |   00003517           auipc   a0,0x3
f0002f2e:       |  |  |  |  |  |        |                                |   d9750593           addi    a1,a0,-617 # f0005cc1 <test_status_set.log_fields.7+0xd5>
f0002f32:       |  |  |  |  |  |        |                             /--|-- a875                       j       f0002fee <base_vfprintf+0x25a>
f0002f34:       |  |  |  |  |  |        |                             |  |   c0001073           unimp
f0002f38:       |  |  |  |  |  |        |                             |  |   c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:462
      if (spec.is_nonstd) {
f0002f3c:       |  |  |  |  |  |        |                             |  +-- 03aa1663           bne     s4,s10,f0002f68 <base_vfprintf+0x1d4>
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        size_t len = va_arg(*args, size_t);
f0002f40:       |  |  |  |  |  |        |                             |  |   4552                       lw      a0,20(sp)
f0002f42:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
f0002f46:       |  |  |  |  |  |        |                             |  |   ca2e                       sw      a1,20(sp)
f0002f48:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        char *value = va_arg(*args, char *);
f0002f4a:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
f0002f4e:       |  |  |  |  |  |        |                             |  |   ca2e                       sw      a1,20(sp)
f0002f50:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:465
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0002f52:       |  |  |  |  |  |        |                             |  |   0ffc7793           andi    a5,s8,255
f0002f56:       |  |  |  |  |  |        |                             |  |   00003517           auipc   a0,0x3
f0002f5a:       |  |  |  |  |  |        |                             |  |   db350893           addi    a7,a0,-589 # f0005d09 <kDigitsHigh>
f0002f5e:       |  |  |  |  |  |        |           /-----------------|--|-- ac15                       j       f0003192 <base_vfprintf+0x3fe>
f0002f60:       |  |  |  |  |  |        |           |                 |  |   c0001073           unimp
f0002f64:       |  |  |  |  |  |        |           |                 |  |   c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:471
      uint32_t value = va_arg(*args, uint32_t);
f0002f68:       |  |  |  |  |  |        |           |                 |  \-> 4552                       lw      a0,20(sp)
f0002f6a:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
f0002f6e:       |  |  |  |  |  |        |           |                 |      ca2e                       sw      a1,20(sp)
f0002f70:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:473
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
f0002f72:       |  |  |  |  |  |        |           |                 |      0ffc7713           andi    a4,s8,255
f0002f76:       |  |  |  |  |  |        |           |                 |      00003517           auipc   a0,0x3
f0002f7a:       |  |  |  |  |  |        |           |                 |      d9350813           addi    a6,a0,-621 # f0005d09 <kDigitsHigh>
f0002f7e:       |  |  |  |  |  |        |        /--|-----------------|----- ac35                       j       f00031ba <base_vfprintf+0x426>
f0002f80:       |  |  |  |  |  |        |        |  |                 |      c0001073           unimp
f0002f84:       |  |  |  |  |  |        |        |  |                 |      c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:487
      if (!spec.is_nonstd) {
f0002f88:       |  |  |  |  |  +--------|--------|--|-----------------|----- 27aa1e63           bne     s4,s10,f0003204 <base_vfprintf+0x470>
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      size_t len = va_arg(*args, size_t);
f0002f8c:       |  |  |  |  |  |        |        |  |                 |      4552                       lw      a0,20(sp)
f0002f8e:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
f0002f92:       |  |  |  |  |  |        |        |  |                 |      ca2e                       sw      a1,20(sp)
f0002f94:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      char *value = va_arg(*args, char *);
f0002f96:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
f0002f9a:       |  |  |  |  |  |        |        |  |                 |      ca2e                       sw      a1,20(sp)
f0002f9c:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:492
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0002f9e:       |  |  |  |  |  |        |        |  |                 |      0ffc7793           andi    a5,s8,255
f0002fa2:       |  |  |  |  |  |        |        |  |                 |      00003517           auipc   a0,0x3
f0002fa6:       |  |  |  |  |  |        |        |  |                 |      d6750893           addi    a7,a0,-665 # f0005d09 <kDigitsHigh>
f0002faa:       |  |  |  |  |  |        |     /--|--|-----------------|----- a499                       j       f00031f0 <base_vfprintf+0x45c>
f0002fac:       |  |  |  |  |  |        |     |  |  |                 |      c0001073           unimp
f0002fb0:       |  |  |  |  |  |        |     |  |  |                 |      c0001073           unimp
f0002fb4:       |  |  |  |  |  |        |     |  |  |                 |      4552                       lw      a0,20(sp)
f0002fb6:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
f0002fba:       |  |  |  |  |  |        |     |  |  |                 |      ca2e                       sw      a1,20(sp)
f0002fbc:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:506
      if (spec.is_nonstd) {
f0002fbe:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 27aa1563           bne     s4,s10,f0003228 <base_vfprintf+0x494>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
        if (va_arg(*args, int) != 0) {
f0002fc2:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 2c060863           beqz    a2,f0003292 <base_vfprintf+0x4fe>
/proc/self/cwd/sw/device/lib/runtime/print.c:510
          *bytes_written += out.sink(out.data, "true", 4);
f0002fc6:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00003517           auipc   a0,0x3
f0002fca:       |  |  |  |  |  |  |     |  |  |  |  |                 |      d0250593           addi    a1,a0,-766 # f0005cc8 <test_status_set.log_fields.7+0xdc>
f0002fce:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
f0002fd0:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- ac3d                       j       f000320e <base_vfprintf+0x47a>
f0002fd2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c0001073           unimp
f0002fd6:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:384
      if (spec.is_nonstd) {
f0002fda:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 23aa0563           beq     s4,s10,f0003204 <base_vfprintf+0x470>
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      char value = (char)va_arg(*args, uint32_t);
f0002fde:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4552                       lw      a0,20(sp)
f0002fe0:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
f0002fe4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      ca2e                       sw      a1,20(sp)
f0002fe6:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
f0002fe8:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      02a10223           sb      a0,36(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:388
      *bytes_written += out.sink(out.data, &value, 1);
f0002fec:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      104c                       addi    a1,sp,36
f0002fee:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
f0002ff0:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- ac39                       j       f000320e <base_vfprintf+0x47a>
f0002ff2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c0001073           unimp
f0002ff6:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:422
      if (spec.is_nonstd) {
f0002ffa:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 21aa0563           beq     s4,s10,f0003204 <base_vfprintf+0x470>
/proc/self/cwd/sw/device/lib/runtime/print.c:425
      uint32_t value = va_arg(*args, uint32_t);
f0002ffe:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4552                       lw      a0,20(sp)
f0003000:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
f0003004:       |  |  |  |  |  |  |  |  |  |  |  |  |                        ca2e                       sw      a1,20(sp)
f0003006:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:427
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
f0003008:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffc7713           andi    a4,s8,255
f000300c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00003517           auipc   a0,0x3
f0003010:       |  |  |  |  |  |  |  |  |  |  |  |  |                        cd050813           addi    a6,a0,-816 # f0005cdc <kDigitsLow>
f0003014:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
f0003016:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- a25d                       j       f00031bc <base_vfprintf+0x428>
f0003018:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c0001073           unimp
f000301c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:431
      if (spec.is_nonstd) {
f0003020:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1faa0263           beq     s4,s10,f0003204 <base_vfprintf+0x470>
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      *bytes_written += out.sink(out.data, "0x", 2);
f0003024:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00003517           auipc   a0,0x3
f0003028:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     ca150593           addi    a1,a0,-863 # f0005cc5 <test_status_set.log_fields.7+0xd9>
f000302c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
f000302e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0003030:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      uintptr_t value = va_arg(*args, uintptr_t);
f0003032:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     45d2                       lw      a1,20(sp)
f0003034:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
f0003038:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     ca32                       sw      a2,20(sp)
f000303a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      *bytes_written += out.sink(out.data, "0x", 2);
f000303c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:443
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
f000303e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00003517           auipc   a0,0x3
f0003042:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c9e50813           addi    a6,a0,-866 # f0005cdc <kDigitsLow>
f0003046:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
f0003048:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
f000304c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
f000304e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0003050:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
f0003052:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e79                       jal     f00033f0 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:442
      *bytes_written +=
f0003054:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9aaa                       add     s5,s5,a0
f0003056:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- aa7d                       j       f0003214 <base_vfprintf+0x480>
f0003058:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c0001073           unimp
f000305c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      status_t value = va_arg(*args, status_t);
f0003060:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4552                       lw      a0,20(sp)
f0003062:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
f0003066:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
f0003068:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:281
  char mod[] = {'"', 0, 0, 0, '"', ','};
f000306a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45c2                       lw      a1,16(sp)
f000306c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02b11423           sh      a1,40(sp)
f0003070:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
f0003074:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  d22e                       sw      a1,36(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:284
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0003076:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  086c                       addi    a1,sp,28
f0003078:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  1010                       addi    a2,sp,32
f000307a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02510693           addi    a3,sp,37
f000307e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  29d5                       jal     f0003572 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  const char *end = start;
f0003080:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45f2                       lw      a1,28(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:284
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0003082:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c62a                       sw      a0,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
  while (*end)
f0003084:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
f0003088:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:289
    end++;
f000308c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:288
  while (*end)
f000308e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
f0003090:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,f0003088 <base_vfprintf+0x2f4>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:196
  if ((*format)[0] == '!') {
f0003092:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fdfa0513           addi    a0,s4,-33
f0003096:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00153613           seqz    a2,a0
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f000309a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0606                       slli    a2,a2,0x1
f000309c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00003517           auipc   a0,0x3
f00030a0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c3750593           addi    a1,a0,-969 # f0005cd3 <test_status_set.log_fields.7+0xe7>
f00030a4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f00030a6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, start, (size_t)(end - start));
f00030a8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45f2                       lw      a1,28(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f00030aa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8a2a                       mv      s4,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, start, (size_t)(end - start));
f00030ac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
f00030b0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f00030b2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f00030b4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8c2a                       mv      s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:294
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f00030b6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00003517           auipc   a0,0x3
f00030ba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c1e50593           addi    a1,a0,-994 # f0005cd4 <test_status_set.log_fields.7+0xe8>
f00030be:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f00030c0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
f00030c2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, start, (size_t)(end - start));
f00030c4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9a2a                       add     s4,s4,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  len += out.sink(out.data, ":", 1);
f00030c6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002517           auipc   a0,0x2
f00030ca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  98b50593           addi    a1,a0,-1653 # f0004a51 <compute_hmac_testutils_finish_timeout_usec.log_fields+0x161>
f00030ce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
f00030d0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f00030d2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:294
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f00030d4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9552                       add     a0,a0,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  len += out.sink(out.data, ":", 1);
f00030d6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:297
  if (err) {
f00030d8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4532                       lw      a0,12(sp)
f00030da:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 16050363           beqz    a0,f0003240 <base_vfprintf+0x4ac>
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, "[", 1);
f00030de:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00003517           auipc   a0,0x3
f00030e2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               bf850593           addi    a1,a0,-1032 # f0005cd6 <test_status_set.log_fields.7+0xea>
f00030e6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f00030e8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f00030ea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f00030ec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               842a                       mv      s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += out.sink(out.data, mod, sizeof(mod));
f00030ee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               104c                       addi    a1,sp,36
f00030f0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
f00030f2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f00030f4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += write_digits(out, (uint32_t)arg, 0, 0, 10, kDigitsLow);
f00030f6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               5602                       lw      a2,32(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, "[", 1);
f00030f8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += write_digits(out, (uint32_t)arg, 0, 0, 10, kDigitsLow);
f00030fa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00003517           auipc   a0,0x3
f00030fe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               be250813           addi    a6,a0,-1054 # f0005cdc <kDigitsLow>
f0003102:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
f0003104:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0003106:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
f0003108:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
f000310a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
f000310c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24d5                       jal     f00033f0 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += out.sink(out.data, mod, sizeof(mod));
f000310e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:302
    len += out.sink(out.data, "]", 1);
f0003110:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00003517           auipc   a0,0x3
f0003114:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               bc850593           addi    a1,a0,-1080 # f0005cd8 <test_status_set.log_fields.7+0xec>
f0003118:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f000311a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f000311c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += write_digits(out, (uint32_t)arg, 0, 0, 10, kDigitsLow);
f000311e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9522                       add     a0,a0,s0
f0003120:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- aa1d                       j       f0003256 <base_vfprintf+0x4c2>
f0003122:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c0001073           unimp
f0003126:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c0001073           unimp
f000312a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4552                       lw      a0,20(sp)
f000312c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
f0003130:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         ca2e                       sw      a1,20(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:393
      if (spec.is_nonstd) {
f0003132:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 15aa1263           bne     s4,s10,f0003276 <base_vfprintf+0x4e2>
/proc/self/cwd/sw/device/lib/runtime/print.c:395
        len = va_arg(*args, size_t);
f0003136:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      char *value = va_arg(*args, char *);
f0003138:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
f000313c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         ca2e                       sw      a1,20(sp)
f000313e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
f0003140:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a0f9                       j       f000320e <base_vfprintf+0x47a>
f0003142:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c0001073           unimp
f0003146:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:497
      if (spec.is_nonstd) {
f000314a:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 0baa0d63           beq     s4,s10,f0003204 <base_vfprintf+0x470>
/proc/self/cwd/sw/device/lib/runtime/print.c:500
      uint32_t value = va_arg(*args, uint32_t);
f000314e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4552                       lw      a0,20(sp)
f0003150:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
f0003154:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         ca2e                       sw      a1,20(sp)
f0003156:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:502
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0003158:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffc7713           andi    a4,s8,255
f000315c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00003517           auipc   a0,0x3
f0003160:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         b8050813           addi    a6,a0,-1152 # f0005cdc <kDigitsLow>
f0003164:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
f0003166:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a899                       j       f00031bc <base_vfprintf+0x428>
f0003168:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c0001073           unimp
f000316c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:447
      if (spec.is_nonstd) {
f0003170:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 03aa1a63           bne     s4,s10,f00031a4 <base_vfprintf+0x410>
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        size_t len = va_arg(*args, size_t);
f0003174:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4552                       lw      a0,20(sp)
f0003176:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
f000317a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   ca2e                       sw      a1,20(sp)
f000317c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        char *value = va_arg(*args, char *);
f000317e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
f0003182:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   ca2e                       sw      a1,20(sp)
f0003184:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:450
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0003186:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffc7793           andi    a5,s8,255
f000318a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00003517           auipc   a0,0x3
f000318e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   b5250893           addi    a7,a0,-1198 # f0005cdc <kDigitsLow>
f0003192:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
f0003194:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
f0003196:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
f0003198:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8722                       mv      a4,s0
f000319a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a8b9                       j       f00031f8 <base_vfprintf+0x464>
f000319c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |   c0001073           unimp
f00031a0:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |   c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:456
      uint32_t value = va_arg(*args, uint32_t);
f00031a4:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4552                       lw      a0,20(sp)
f00031a6:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
f00031aa:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      ca2e                       sw      a1,20(sp)
f00031ac:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:458
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
f00031ae:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffc7713           andi    a4,s8,255
f00031b2:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00003517           auipc   a0,0x3
f00031b6:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      b2a50813           addi    a6,a0,-1238 # f0005cdc <kDigitsLow>
f00031ba:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
f00031bc:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
f00031be:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
f00031c0:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a2                       mv      a3,s0
f00031c2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      243d                       jal     f00033f0 <write_digits>
f00031c4:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a0b9                       j       f0003212 <base_vfprintf+0x47e>
f00031c6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c0001073           unimp
f00031ca:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:477
      if (!spec.is_nonstd) {
f00031ce:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 03aa1b63           bne     s4,s10,f0003204 <base_vfprintf+0x470>
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      size_t len = va_arg(*args, size_t);
f00031d2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4552                       lw      a0,20(sp)
f00031d4:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
f00031d8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   ca2e                       sw      a1,20(sp)
f00031da:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      char *value = va_arg(*args, char *);
f00031dc:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
f00031e0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   ca2e                       sw      a1,20(sp)
f00031e2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:482
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f00031e4:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffc7793           andi    a5,s8,255
f00031e8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00003517           auipc   a0,0x3
f00031ec:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   af450893           addi    a7,a0,-1292 # f0005cdc <kDigitsLow>
f00031f0:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
f00031f2:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
f00031f4:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8722                       mv      a4,s0
f00031f6:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
f00031f8:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 2219                       jal     f00032fe <hex_dump>
f00031fa:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a821                       j       f0003212 <base_vfprintf+0x47e>
f00031fc:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     |   c0001073           unimp
f0003200:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     |   c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:528
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
f0003204:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00003517           auipc   a0,0x3
f0003208:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   b1550593           addi    a1,a0,-1259 # f0005d19 <kUnknownSpec>
f000320c:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
f000320e:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
f0003210:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
f0003212:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
  while (format[0] != '\0') {
f0003214:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 0004c503           lbu     a0,0(s1)
f0003218:       |  |  |  |  |     |  |     |           |  |  |  |  |         4a01                       li      s4,0
f000321a:       |  |  |  |  \-----|--|-----|-----------|--|--|--|--|-------- bc0515e3           bnez    a0,f0002de4 <base_vfprintf+0x50>
f000321e:       |  +--|--|--------|--|-----|-----------|--|--|--|--|-------- a055                       j       f00032c2 <base_vfprintf+0x52e>
f0003220:       |  |  |  |        |  |     |           |  |  |  |  |         c0001073           unimp
f0003224:       |  |  |  |        |  |     |           |  |  |  |  |         c0001073           unimp
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:518
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
f0003228:       |  |  |  |        |  |     \-----------|--|--|--|--|-------> 0ffc7713           andi    a4,s8,255
f000322c:       |  |  |  |        |  |                 |  |  |  |  |         00003517           auipc   a0,0x3
f0003230:       |  |  |  |        |  |                 |  |  |  |  |         ab050813           addi    a6,a0,-1360 # f0005cdc <kDigitsLow>
f0003234:       |  |  |  |        |  |                 |  |  |  |  |         4789                       li      a5,2
f0003236:       |  |  |  |        |  |                 \--|--|--|--|-------- b759                       j       f00031bc <base_vfprintf+0x428>
f0003238:       |  |  |  |        |  |                    |  |  |  |         c0001073           unimp
f000323c:       |  |  |  |        |  |                    |  |  |  |         c0001073           unimp
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:305
    len += write_digits(out, (uint32_t)arg, 0, 0, 10, kDigitsLow);
f0003240:       |  |  |  |        |  |                    |  \--|--|-------> 5602                       lw      a2,32(sp)
f0003242:       |  |  |  |        |  |                    |     |  |         00003517           auipc   a0,0x3
f0003246:       |  |  |  |        |  |                    |     |  |         a9a50813           addi    a6,a0,-1382 # f0005cdc <kDigitsLow>
f000324a:       |  |  |  |        |  |                    |     |  |         47a9                       li      a5,10
f000324c:       |  |  |  |        |  |                    |     |  |         854a                       mv      a0,s2
f000324e:       |  |  |  |        |  |                    |     |  |         85ce                       mv      a1,s3
f0003250:       |  |  |  |        |  |                    |     |  |         4681                       li      a3,0
f0003252:       |  |  |  |        |  |                    |     |  |         4701                       li      a4,0
f0003254:       |  |  |  |        |  |                    |     |  |         2a71                       jal     f00033f0 <write_digits>
f0003256:       |  |  |  |        |  |                    |     |  \-------> 9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:307
  len += out.sink(out.data, "}", as_json ? 1 : 0);
f0003258:       |  |  |  |        |  |                    |     |            00003517           auipc   a0,0x3
f000325c:       |  |  |  |        |  |                    |     |            a8250593           addi    a1,a0,-1406 # f0005cda <test_status_set.log_fields.7+0xee>
f0003260:       |  |  |  |        |  |                    |     |            854a                       mv      a0,s2
f0003262:       |  |  |  |        |  |                    |     |            865a                       mv      a2,s6
f0003264:       |  |  |  |        |  |                    |     |            9982                       jalr    s3
f0003266:       |  |  |  |        |  |                    |     |            9556                       add     a0,a0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:523
      *bytes_written += write_status(out, value, spec.is_nonstd);
f0003268:       |  |  |  |        |  |                    |     |            00ac0ab3           add     s5,s8,a0
f000326c:       |  |  |  |        |  |                    \-----|----------- b765                       j       f0003214 <base_vfprintf+0x480>
f000326e:       |  |  |  |        |  |                          |            c0001073           unimp
f0003272:       |  |  |  |        |  |                          |            c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      char *value = va_arg(*args, char *);
f0003276:       |  |  |  |        |  |                          \----------> 410c                       lw      a1,0(a0)
f0003278:       |  |  |  |        |  |                                       4601                       li      a2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:399
      while (!spec.is_nonstd && value[len] != '\0') {
f000327a:       |  |  |  |        |  |                                   /-> 00c58533           add     a0,a1,a2
f000327e:       |  |  |  |        |  |                                   |   00054503           lbu     a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:401
        ++len;
f0003282:       |  |  |  |        |  |                                   |   0605                       addi    a2,a2,1
/proc/self/cwd/sw/device/lib/runtime/print.c:399
      while (!spec.is_nonstd && value[len] != '\0') {
f0003284:       |  |  |  |        |  |                                   \-- f97d                       bnez    a0,f000327a <base_vfprintf+0x4e6>
/proc/self/cwd/sw/device/lib/runtime/print.c:404
      *bytes_written += out.sink(out.data, value, len);
f0003286:       |  |  |  |        |  |                                       167d                       addi    a2,a2,-1
f0003288:       |  |  |  |        |  +-------------------------------------- b759                       j       f000320e <base_vfprintf+0x47a>
f000328a:       |  |  |  |        |  |                                       c0001073           unimp
f000328e:       |  |  |  |        |  |                                       c0001073           unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:512
          *bytes_written += out.sink(out.data, "false", 5);
f0003292:       |  |  |  |        \--|-------------------------------------> 00003517           auipc   a0,0x3
f0003296:       |  |  |  |           |                                       a3b50593           addi    a1,a0,-1477 # f0005ccd <test_status_set.log_fields.7+0xe1>
f000329a:       |  |  |  |           |                                       4615                       li      a2,5
f000329c:       |  |  |  |           \-------------------------------------- bf8d                       j       f000320e <base_vfprintf+0x47a>
f000329e:       |  |  |  |                                                   c0001073           unimp
f00032a2:       |  |  |  |                                                   c0001073           unimp
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:211
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
f00032a6:       |  |  \--|-------------------------------------------------> 00003517           auipc   a0,0x3
f00032aa:       |  |     |                                                   a4650593           addi    a1,a0,-1466 # f0005cec <kErrorNul>
f00032ae:       |  |     |                                                   4645                       li      a2,17
f00032b0:       |  |     |                                               /-> 854a                       mv      a0,s2
f00032b2:       |  |     |                                               |   9982                       jalr    s3
f00032b4:       |  |     |                                               |   9aaa                       add     s5,s5,a0
f00032b6:       |  +-----|-----------------------------------------------|-- a031                       j       f00032c2 <base_vfprintf+0x52e>
f00032b8:       |  |     |                                               |   c0001073           unimp
f00032bc:       |  |     |                                               |   c0001073           unimp
f00032c0:       \--|-----|-----------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:559

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
f00032c2:          \-----|-----------------------------------------------|-> 8556                       mv      a0,s5
f00032c4:                |                                               |   40f6                       lw      ra,92(sp)
f00032c6:                |                                               |   4466                       lw      s0,88(sp)
f00032c8:                |                                               |   44d6                       lw      s1,84(sp)
f00032ca:                |                                               |   4946                       lw      s2,80(sp)
f00032cc:                |                                               |   49b6                       lw      s3,76(sp)
f00032ce:                |                                               |   4a26                       lw      s4,72(sp)
f00032d0:                |                                               |   4a96                       lw      s5,68(sp)
f00032d2:                |                                               |   4b06                       lw      s6,64(sp)
f00032d4:                |                                               |   5bf2                       lw      s7,60(sp)
f00032d6:                |                                               |   5c62                       lw      s8,56(sp)
f00032d8:                |                                               |   5cd2                       lw      s9,52(sp)
f00032da:                |                                               |   5d42                       lw      s10,48(sp)
f00032dc:                |                                               |   5db2                       lw      s11,44(sp)
f00032de:                |                                               |   6125                       addi    sp,sp,96
f00032e0:                |                                               |   8082                       ret
f00032e2:                |                                               |   c0001073           unimp
f00032e6:                |                                               |   c0001073           unimp
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:231
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
f00032ea:                \-----------------------------------------------|-> 00003517           auipc   a0,0x3
f00032ee:                                                                |   a1350593           addi    a1,a0,-1517 # f0005cfd <kErrorTooWide>
f00032f2:                                                                |   4631                       li      a2,12
f00032f4:                                                                \-- bf75                       j       f00032b0 <base_vfprintf+0x51c>
f00032f6:                                                                    c0001073           unimp
f00032fa:                                                                    c0001073           unimp

f00032fe <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:327
                       const char *glyphs) {
f00032fe:                 711d                  addi    sp,sp,-96
f0003300:                 ce86                  sw      ra,92(sp)
f0003302:                 cca2                  sw      s0,88(sp)
f0003304:                 caa6                  sw      s1,84(sp)
f0003306:                 c8ca                  sw      s2,80(sp)
f0003308:                 c6ce                  sw      s3,76(sp)
f000330a:                 c4d2                  sw      s4,72(sp)
f000330c:                 c2d6                  sw      s5,68(sp)
f000330e:                 c0da                  sw      s6,64(sp)
f0003310:                 de5e                  sw      s7,60(sp)
f0003312:                 dc62                  sw      s8,56(sp)
f0003314:                 da66                  sw      s9,52(sp)
f0003316:                 d86a                  sw      s10,48(sp)
f0003318:                 d66e                  sw      s11,44(sp)
f000331a:                 8bc6                  mv      s7,a7
f000331c:                 8a42                  mv      s4,a6
f000331e:                 8b36                  mv      s6,a3
f0003320:                 8ab2                  mv      s5,a2
f0003322:                 892e                  mv      s2,a1
f0003324:                 89aa                  mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:331
  if (len < width) {
f0003326:          /----- 02e6fd63              bgeu    a3,a4,f0003360 <hex_dump+0x62>
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    width -= len;
f000332a:          |      41670433              sub     s0,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    memset(buf, padding, sizeof(buf));
f000332e:          |      0068                  addi    a0,sp,12
f0003330:          |      02000613              li      a2,32
f0003334:          |      02000c13              li      s8,32
f0003338:          |      85be                  mv      a1,a5
f000333a:          |      2d69                  jal     f00039d4 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:334
    while (width > 0) {
f000333c:          +----- c015                  beqz    s0,f0003360 <hex_dump+0x62>
f000333e:          |      4d81                  li      s11,0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
f0003340:          |  /-> 0b8454b3              minu    s1,s0,s8
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      bytes_written += out.sink(out.data, buf, to_write);
f0003344:          |  |   006c                  addi    a1,sp,12
f0003346:          |  |   854e                  mv      a0,s3
f0003348:          |  |   8626                  mv      a2,s1
f000334a:          |  |   9902                  jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:337
      width -= to_write;
f000334c:          |  |   8c05                  sub     s0,s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      bytes_written += out.sink(out.data, buf, to_write);
f000334e:          |  |   9daa                  add     s11,s11,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:334
    while (width > 0) {
f0003350:          |  \-- f865                  bnez    s0,f0003340 <hex_dump+0x42>
/proc/self/cwd/sw/device/lib/runtime/print.c:341
  for (size_t i = 0; i < len; ++i) {
f0003352:          |  /-- 000b1a63              bnez    s6,f0003366 <hex_dump+0x68>
f0003356:       /--|--|-- a88d                  j       f00033c8 <hex_dump+0xca>
f0003358:       |  |  |   c0001073              unimp
f000335c:       |  |  |   c0001073              unimp
f0003360:       |  \--|-> 4d81                  li      s11,0
f0003362:       +-----|-- 060b0363              beqz    s6,f00033c8 <hex_dump+0xca>
f0003366:       |     \-> 4481                  li      s1,0
f0003368:       |         4601                  li      a2,0
f000336a:       |         1b7d                  addi    s6,s6,-1
f000336c:       |         00c10c13              addi    s8,sp,12
f0003370:       |         02000c93              li      s9,32
f0003374:       |         5d7d                  li      s10,-1
f0003376:       |  /----> 855a                  mv      a0,s6
f0003378:       |  |  /-- 000a1363              bnez    s4,f000337e <hex_dump+0x80>
f000337c:       |  |  |   8526                  mv      a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
f000337e:       |  |  \-> 9556                  add     a0,a0,s5
f0003380:       |  |      00054503              lbu     a0,0(a0)
f0003384:       |  |      00455593              srli    a1,a0,0x4
f0003388:       |  |      95de                  add     a1,a1,s7
f000338a:       |  |      00058583              lb      a1,0(a1)
f000338e:       |  |      00cc06b3              add     a3,s8,a2
f0003392:       |  |      00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0003396:       |  |      893d                  andi    a0,a0,15
f0003398:       |  |      955e                  add     a0,a0,s7
f000339a:       |  |      00050503              lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:345
    buffered += 2;
f000339e:       |  |      0609                  addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f00033a0:       |  |      00a680a3              sb      a0,1(a3)
f00033a4:       |  |  /-- 01961963              bne     a2,s9,f00033b6 <hex_dump+0xb8>
/proc/self/cwd/sw/device/lib/runtime/print.c:348
      bytes_written += out.sink(out.data, buf, buffered);
f00033a8:       |  |  |   006c                  addi    a1,sp,12
f00033aa:       |  |  |   02000613              li      a2,32
f00033ae:       |  |  |   854e                  mv      a0,s3
f00033b0:       |  |  |   9902                  jalr    s2
f00033b2:       |  |  |   4601                  li      a2,0
f00033b4:       |  |  |   9daa                  add     s11,s11,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:341
  for (size_t i = 0; i < len; ++i) {
f00033b6:       |  |  \-> 1b7d                  addi    s6,s6,-1
f00033b8:       |  |      0485                  addi    s1,s1,1
f00033ba:       |  \----- fbab1ee3              bne     s6,s10,f0003376 <hex_dump+0x78>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
  if (buffered != 0) {
f00033be:       +-------- c609                  beqz    a2,f00033c8 <hex_dump+0xca>
/proc/self/cwd/sw/device/lib/runtime/print.c:354
    bytes_written += out.sink(out.data, buf, buffered);
f00033c0:       |         006c                  addi    a1,sp,12
f00033c2:       |         854e                  mv      a0,s3
f00033c4:       |         9902                  jalr    s2
f00033c6:       |         9daa                  add     s11,s11,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:356
  return bytes_written;
f00033c8:       \-------> 856e                  mv      a0,s11
f00033ca:                 40f6                  lw      ra,92(sp)
f00033cc:                 4466                  lw      s0,88(sp)
f00033ce:                 44d6                  lw      s1,84(sp)
f00033d0:                 4946                  lw      s2,80(sp)
f00033d2:                 49b6                  lw      s3,76(sp)
f00033d4:                 4a26                  lw      s4,72(sp)
f00033d6:                 4a96                  lw      s5,68(sp)
f00033d8:                 4b06                  lw      s6,64(sp)
f00033da:                 5bf2                  lw      s7,60(sp)
f00033dc:                 5c62                  lw      s8,56(sp)
f00033de:                 5cd2                  lw      s9,52(sp)
f00033e0:                 5d42                  lw      s10,48(sp)
f00033e2:                 5db2                  lw      s11,44(sp)
f00033e4:                 6125                  addi    sp,sp,96
f00033e6:                 8082                  ret
f00033e8:                 c0001073              unimp
f00033ec:                 c0001073              unimp

f00033f0 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:253
                           char padding, uint32_t base, const char *glyphs) {
f00033f0:                       7179                    addi    sp,sp,-48
f00033f2:                       d606                    sw      ra,44(sp)
f00033f4:                       88ae                    mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:260
  if (value == 0) {
f00033f6:       /-------------- c229                    beqz    a2,f0003438 <write_digits+0x48>
f00033f8:       |               4e01                    li      t3,0
/proc/self/cwd/sw/device/lib/runtime/print.c:264
  while (value > 0) {
f00033fa:       |               02b10293                addi    t0,sp,43
f00033fe:       |           /-> 8332                    mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    value /= base;
f0003400:       |           |   02f65633                divu    a2,a2,a5
f0003404:       |           |   02f603b3                mul     t2,a2,a5
f0003408:       |           |   006805b3                add     a1,a6,t1
/proc/self/cwd/sw/device/lib/runtime/print.c:267
    buffer[kWordBits - 1 - len] = glyphs[digit];
f000340c:       |           |   407585b3                sub     a1,a1,t2
f0003410:       |           |   00058383                lb      t2,0(a1)
f0003414:       |           |   01c285b3                add     a1,t0,t3
f0003418:       |           |   00758023                sb      t2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:264
  while (value > 0) {
f000341c:       |           |   1e7d                    addi    t3,t3,-1
f000341e:       |           \-- fef370e3                bgeu    t1,a5,f00033fe <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width == 0 ? 1 : width;
f0003422:       |               41c00633                neg     a2,t3
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  width = width > kWordBits ? kWordBits : width;
f0003426:       |        /----- ee99                    bnez    a3,f0003444 <write_digits+0x54>
f0003428:       |        |  /-> 4585                    li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:272
  while (len < width) {
f000342a:       |     /--|--|-- 02b66363                bltu    a2,a1,f0003450 <write_digits+0x60>
f000342e:       |  /--|--|--|-- a82d                    j       f0003468 <write_digits+0x78>
f0003430:       |  |  |  |  |   c0001073                unimp
f0003434:       |  |  |  |  |   c0001073                unimp
/proc/self/cwd/sw/device/lib/runtime/print.c:261
    buffer[kWordBits - 1] = glyphs[0];
f0003438:       \--|--|--|--|-> 00080583                lb      a1,0(a6)
f000343c:          |  |  |  |   02b105a3                sb      a1,43(sp)
f0003440:          |  |  |  |   4605                    li      a2,1
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  width = width > kWordBits ? kWordBits : width;
f0003442:          |  |  |  \-- d2fd                    beqz    a3,f0003428 <write_digits+0x38>
f0003444:          |  |  \----> 02000593                li      a1,32
f0003448:          |  |         0ab6d5b3                minu    a1,a3,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:272
  while (len < width) {
f000344c:          +--|-------- 00b67e63                bgeu    a2,a1,f0003468 <write_digits+0x78>
f0003450:          |  \-------> 40c586b3                sub     a3,a1,a2
f0003454:          |            007c                    addi    a5,sp,12
f0003456:          |            40c78633                sub     a2,a5,a2
f000345a:          |            067d                    addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:273
    buffer[kWordBits - len - 1] = padding;
f000345c:          |        /-> 00e60023                sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:272
  while (len < width) {
f0003460:          |        |   16fd                    addi    a3,a3,-1
f0003462:          |        |   167d                    addi    a2,a2,-1
f0003464:          |        \-- fee5                    bnez    a3,f000345c <write_digits+0x6c>
f0003466:          |            862e                    mv      a2,a1
f0003468:          \----------> 006c                    addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:276
  return out.sink(out.data, buffer + (kWordBits - len), len);
f000346a:                       8d91                    sub     a1,a1,a2
f000346c:                       02058593                addi    a1,a1,32
f0003470:                       9882                    jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:277
}
f0003472:                       50b2                    lw      ra,44(sp)
f0003474:                       6145                    addi    sp,sp,48
f0003476:                       8082                    ret
f0003478:                       c0001073                unimp
f000347c:                       c0001073                unimp

f0003480 <status_create>:
status_create():
/proc/self/cwd/sw/device/lib/base/status.c:26
    --f;
  return f;
}

status_t status_create(absl_status_t code, uint32_t module_id, const char *file,
                       int32_t arg) {
f0003480:                          8836                 mv      a6,a3
/proc/self/cwd/sw/device/lib/base/status.c:27
  if (code == kOk) {
f0003482:                /-------- c521                 beqz    a0,f00034ca <status_create+0x4a>
/proc/self/cwd/sw/device/lib/base/status.c:48
   *  +---+-------+-------+-------+-------------+-------+
   *
   * The sign bit is set on all not-Ok statuses, thus proviging a covenient
   * overloaded return value from functions that may return an error.
   */
  if (module_id == 0) {
f0003484:       /--------|-------- e9e9                 bnez    a1,f0003556 <status_create+0xd6>
f0003486:       |     /--|-------> 8732                 mv      a4,a2
basename():
/proc/self/cwd/sw/device/lib/base/status.c:17
  while (*f)
f0003488:       |     |  |     /-> 00074583             lbu     a1,0(a4)
/proc/self/cwd/sw/device/lib/base/status.c:18
    ++f;
f000348c:       |     |  |     |   0705                 addi    a4,a4,1
/proc/self/cwd/sw/device/lib/base/status.c:17
  while (*f)
f000348e:       |     |  |     \-- fded                 bnez    a1,f0003488 <status_create+0x8>
f0003490:       |     |  |         05c00793             li      a5,92
f0003494:       |     |  |         02f00893             li      a7,47
f0003498:       |     |  |     /-> 85ba                 mv      a1,a4
/proc/self/cwd/sw/device/lib/base/status.c:20
  while (f > file && f[-1] != '/' && f[-1] != '\\')
f000349a:       |     |  |     |   177d                 addi    a4,a4,-1
f000349c:       |     |  |  /--|-- 00e67863             bgeu    a2,a4,f00034ac <status_create+0x2c>
f00034a0:       |     |  |  |  |   ffe5c683             lbu     a3,-2(a1)
f00034a4:       |     |  |  +--|-- 00f68463             beq     a3,a5,f00034ac <status_create+0x2c>
f00034a8:       |     |  |  |  \-- ff1698e3             bne     a3,a7,f0003498 <status_create+0x18>
status_create():
/proc/self/cwd/sw/device/lib/base/status.c:51
    // First three characters of the filename.
    const char *f = basename(file);
    module_id = MAKE_MODULE_ID(f[0], f[1], f[2]);
f00034ac:       |     |  |  \----> fff5c603             lbu     a2,-1(a1)
f00034b0:       |     |  |         0e067693             andi    a3,a2,224
f00034b4:       |     |  |         04000713             li      a4,64
f00034b8:       |     |  |     /-- 02e69363             bne     a3,a4,f00034de <status_create+0x5e>
f00034bc:       |     |  |     |   fc060613             addi    a2,a2,-64
f00034c0:       |     |  |  /--|-- a03d                 j       f00034ee <status_create+0x6e>
f00034c2:       |     |  |  |  |   c0001073             unimp
f00034c6:       |     |  |  |  |   c0001073             unimp
/proc/self/cwd/sw/device/lib/base/status.c:28
    if (arg >= 0) {
f00034ca:       |  /--|--\--|--|-X 08085e63             bgez    a6,f0003566 <status_create+0xe6>
f00034ce:       |  |  |     |  |   02100813             li      a6,33
f00034d2:       +--|--|-----|--|-- e1d1                 bnez    a1,f0003556 <status_create+0xd6>
f00034d4:       |  |  \-----|--|-- bf4d                 j       f0003486 <status_create+0x6>
f00034d6:       |  |        |  |   c0001073             unimp
f00034da:       |  |        |  |   c0001073             unimp
/proc/self/cwd/sw/device/lib/base/status.c:51
    module_id = MAKE_MODULE_ID(f[0], f[1], f[2]);
f00034de:       |  |        |  \-> fa060613             addi    a2,a2,-96
f00034e2:       |  |        |      0ff67693             andi    a3,a2,255
f00034e6:       |  |        |      476d                 li      a4,27
f00034e8:       |  |        +----- 00e6e363             bltu    a3,a4,f00034ee <status_create+0x6e>
f00034ec:       |  |        |      467d                 li      a2,31
f00034ee:       |  |        \----> 0005c683             lbu     a3,0(a1)
f00034f2:       |  |               0e06f713             andi    a4,a3,224
f00034f6:       |  |               04000793             li      a5,64
f00034fa:       |  |               0642                 slli    a2,a2,0x10
f00034fc:       |  |           /-- 00f71963             bne     a4,a5,f000350e <status_create+0x8e>
f0003500:       |  |           |   fc068713             addi    a4,a3,-64
f0003504:       |  |        /--|-- a829                 j       f000351e <status_create+0x9e>
f0003506:       |  |        |  |   c0001073             unimp
f000350a:       |  |        |  |   c0001073             unimp
f000350e:       |  |        |  \-> fa068713             addi    a4,a3,-96
f0003512:       |  |        |      0ff77693             andi    a3,a4,255
f0003516:       |  |        |      47ed                 li      a5,27
f0003518:       |  |        +----- 00f6e363             bltu    a3,a5,f000351e <status_create+0x9e>
f000351c:       |  |        |      477d                 li      a4,31
f000351e:       |  |        \----> 0015c683             lbu     a3,1(a1)
f0003522:       |  |               01571593             slli    a1,a4,0x15
f0003526:       |  |               0e06f713             andi    a4,a3,224
f000352a:       |  |               04000793             li      a5,64
f000352e:       |  |               8dd1                 or      a1,a1,a2
f0003530:       |  |           /-- 00f71963             bne     a4,a5,f0003542 <status_create+0xc2>
f0003534:       |  |           |   fc068613             addi    a2,a3,-64
f0003538:       |  |        /--|-- a829                 j       f0003552 <status_create+0xd2>
f000353a:       |  |        |  |   c0001073             unimp
f000353e:       |  |        |  |   c0001073             unimp
f0003542:       |  |        |  \-> fa068613             addi    a2,a3,-96
f0003546:       |  |        |      0ff67693             andi    a3,a2,255
f000354a:       |  |        |      476d                 li      a4,27
f000354c:       |  |        +----- 00e6e363             bltu    a3,a4,f0003552 <status_create+0xd2>
f0003550:       |  |        |      467d                 li      a2,31
f0003552:       |  |        \----> 066a                 slli    a2,a2,0x1a
f0003554:       |  |               8dd1                 or      a1,a1,a2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0003556:       \--|-------------> 897d                 andi    a0,a0,31
f0003558:          |               0856                 slli    a6,a6,0x15
f000355a:          |               01085613             srli    a2,a6,0x10
status_create():
/proc/self/cwd/sw/device/lib/base/status.c:57
  }
  // At this point, the module_id is already packed into the correct bitfield.
  return (status_t){
      .value = (int32_t)(module_id |
                         bitfield_bit32_write(0, STATUS_BIT_ERROR, true) |
                         bitfield_field32_write(0, STATUS_FIELD_CODE, code) |
f000355e:          |               8d4d                 or      a0,a0,a1
f0003560:          |               8d51                 or      a0,a0,a2
f0003562:          |               29f51813             bseti   a6,a0,0x1f
/proc/self/cwd/sw/device/lib/base/status.c:60
                         bitfield_field32_write(0, STATUS_FIELD_ARG,
                                                (uint32_t)arg))};
}
f0003566:          \-------------> 8542                 mv      a0,a6
f0003568:                          8082                 ret
f000356a:                          c0001073             unimp
f000356e:                          c0001073             unimp

f0003572 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
f0003572:              00052713                 slti    a4,a0,0
f0003576:              00174713                 xori    a4,a4,1
f000357a:              01f57813                 andi    a6,a0,31
f000357e:              00183793                 seqz    a5,a6
f0003582:              00f768b3                 or      a7,a4,a5
f0003586:              02000793                 li      a5,32
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
f000358a:          /-- 00089363                 bnez    a7,f0003590 <status_extract+0x1e>
f000358e:          |   87c2                     mv      a5,a6
f0003590:          \-> 177d                     addi    a4,a4,-1
f0003592:              8f7d                     and     a4,a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
f0003594:              effff797                 auipc   a5,0xeffff
f0003598:              a5478793                 addi    a5,a5,-1452 # e0001fe8 <status_codes>
f000359c:              20f747b3                 sh2add  a5,a4,a5
f00035a0:              439c                     lw      a5,0(a5)
f00035a2:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f00035a4:       /----- cf15                     beqz    a4,f00035e0 <status_extract+0x6e>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f00035a6:       |      01051593                 slli    a1,a0,0x10
f00035aa:       |      81d5                     srli    a1,a1,0x15
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
f00035ac:       |      c20c                     sw      a1,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
f00035ae:       |      00b51593                 slli    a1,a0,0xb
f00035b2:       |      81ed                     srli    a1,a1,0x1b
f00035b4:       |      04058593                 addi    a1,a1,64
f00035b8:       |      00b68023                 sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
f00035bc:       |      00651593                 slli    a1,a0,0x6
f00035c0:       |      81ed                     srli    a1,a1,0x1b
f00035c2:       |      04058593                 addi    a1,a1,64
f00035c6:       |      00b680a3                 sb      a1,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
f00035ca:       |      0506                     slli    a0,a0,0x1
f00035cc:       |      816d                     srli    a0,a0,0x1b
f00035ce:       |      04050513                 addi    a0,a0,64
f00035d2:       |      00a68123                 sb      a0,2(a3)
f00035d6:       |  /-- a031                     j       f00035e2 <status_extract+0x70>
f00035d8:       |  |   c0001073                 unimp
f00035dc:       |  |   c0001073                 unimp
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
f00035e0:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f00035e2:          \-> 00e03533                 snez    a0,a4
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
f00035e6:              8082                     ret
f00035e8:              c0001073                 unimp
f00035ec:              c0001073                 unimp

f00035f0 <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
f00035f0:       /----- c981                     beqz    a1,f0003600 <dif_uart_init+0x10>
f00035f2:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
f00035f4:       |      c188                     sw      a0,0(a1)
f00035f6:       |  /-- a031                     j       f0003602 <dif_uart_init+0x12>
f00035f8:       |  |   c0001073                 unimp
f00035fc:       |  |   c0001073                 unimp
f0003600:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
f0003602:          \-> 8532                     mv      a0,a2
f0003604:              8082                     ret
f0003606:              c0001073                 unimp
f000360a:              c0001073                 unimp

f000360e <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:132
}

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_is_pending(const dif_uart_t *uart, dif_uart_irq_t irq,
                                     bool *is_pending) {
  if (uart == NULL || is_pending == NULL) {
f000360e:           00153693            seqz    a3,a0
f0003612:           00163713            seqz    a4,a2
f0003616:           8ed9                        or      a3,a3,a4
f0003618:           0085b713            sltiu   a4,a1,8
f000361c:           00174713            xori    a4,a4,1
f0003620:           8f55                        or      a4,a4,a3
f0003622:           468d                        li      a3,3
f0003624:       /-- eb01                        bnez    a4,f0003634 <dif_uart_irq_is_pending+0x26>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:141
  bitfield_bit32_index_t index;
  if (!uart_get_irq_bit_index(irq, &index)) {
    return kDifBadArg;
  }

  uint32_t intr_state_reg = mmio_region_read32(
f0003626:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0003628:       |   4108                        lw      a0,0(a0)
f000362a:       |   4681                        li      a3,0
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f000362c:       |   48b55533            bext    a0,a0,a1
dif_uart_irq_is_pending():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:144
      uart->base_addr, (ptrdiff_t)UART_INTR_STATE_REG_OFFSET);

  *is_pending = bitfield_bit32_read(intr_state_reg, index);
f0003630:       |   00a60023            sb      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:147

  return kDifOk;
}
f0003634:       \-> 8536                        mv      a0,a3
f0003636:           8082                        ret
f0003638:           c0001073            unimp
f000363c:           c0001073            unimp

f0003640 <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:165
}

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                      dif_uart_irq_t irq) {
  if (uart == NULL) {
f0003640:           00a03633            snez    a2,a0
f0003644:           0085b693            sltiu   a3,a1,8
f0003648:           8ef1                        and     a3,a3,a2
f000364a:           460d                        li      a2,3
f000364c:       /-- c691                        beqz    a3,f0003658 <dif_uart_irq_acknowledge+0x18>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:176
    return kDifBadArg;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t intr_state_reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_STATE_REG_OFFSET,
f000364e:       |   4108                        lw      a0,0(a0)
f0003650:       |   4601                        li      a2,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f0003652:       |   28b015b3            bset    a1,zero,a1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f0003656:       |   c10c                        sw      a1,0(a0)
dif_uart_irq_acknowledge():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:180
                      intr_state_reg);

  return kDifOk;
}
f0003658:       \-> 8532                        mv      a0,a2
f000365a:           8082                        ret
f000365c:           c0001073            unimp
f0003660:           c0001073            unimp

f0003664 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:225
}

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                      dif_uart_irq_t irq, dif_toggle_t state) {
  if (uart == NULL) {
f0003664:           00a036b3            snez    a3,a0
f0003668:           0085b713            sltiu   a4,a1,8
f000366c:           8f75                        and     a4,a4,a3
f000366e:           468d                        li      a3,3
f0003670:       /-- cf09                        beqz    a4,f000368a <dif_uart_irq_set_enabled+0x26>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:234
  bitfield_bit32_index_t index;
  if (!uart_get_irq_bit_index(irq, &index)) {
    return kDifBadArg;
  }

  uint32_t intr_enable_reg = mmio_region_read32(
f0003672:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0003674:       |   4158                        lw      a4,4(a0)
f0003676:       |   4681                        li      a3,0
dif_uart_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:237
      uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET);

  bool enable_bit = (state == kDifToggleEnabled) ? true : false;
f0003678:       |   167d                        addi    a2,a2,-1
f000367a:       |   00163613            seqz    a2,a2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
f000367e:       |   48b71733            bclr    a4,a4,a1
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0003682:       |   00b615b3            sll     a1,a2,a1
f0003686:       |   8dd9                        or      a1,a1,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f0003688:       |   c14c                        sw      a1,4(a0)
dif_uart_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:243
  intr_enable_reg = bitfield_bit32_write(intr_enable_reg, index, enable_bit);
  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET,
                      intr_enable_reg);

  return kDifOk;
}
f000368a:       \-> 8536                        mv      a0,a3
f000368c:           8082                        ret
f000368e:           c0001073            unimp
f0003692:           c0001073            unimp

f0003696 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:248

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_disable_all(
    const dif_uart_t *uart, dif_uart_irq_enable_snapshot_t *snapshot) {
  if (uart == NULL) {
f0003696:       /----- cd11                     beqz    a0,f00036b2 <dif_uart_irq_disable_all+0x1c>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:253
    return kDifBadArg;
  }

  // Pass the current interrupt state to the caller, if requested.
  if (snapshot != NULL) {
f0003698:       |  /-- c581                     beqz    a1,f00036a0 <dif_uart_irq_disable_all+0xa>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:254
    *snapshot = mmio_region_read32(uart->base_addr,
f000369a:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f000369c:       |  |   4250                     lw      a2,4(a2)
dif_uart_irq_disable_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:254
f000369e:       |  |   c190                     sw      a2,0(a1)
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:259
                                   (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET);
  }

  // Disable all interrupts.
  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET,
f00036a0:       |  \-> 410c                     lw      a1,0(a0)
f00036a2:       |      4501                     li      a0,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f00036a4:       |      0005a223                 sw      zero,4(a1)
dif_uart_irq_disable_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:263
                      0u);

  return kDifOk;
}
f00036a8:       |      8082                     ret
f00036aa:       |      c0001073                 unimp
f00036ae:       |      c0001073                 unimp
f00036b2:       \----> 450d                     li      a0,3
f00036b4:              8082                     ret
f00036b6:              c0001073                 unimp
f00036ba:              c0001073                 unimp

f00036be <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:268

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_enable_snapshot_t *snapshot) {
  if (uart == NULL || snapshot == NULL) {
f00036be:           00153613            seqz    a2,a0
f00036c2:           0015b693            seqz    a3,a1
f00036c6:           8ed1                        or      a3,a3,a2
f00036c8:           460d                        li      a2,3
f00036ca:       /-- e689                        bnez    a3,f00036d4 <dif_uart_irq_restore_all+0x16>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:273
    return kDifBadArg;
  }

  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
f00036cc:       |   418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:272
  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET,
f00036ce:       |   4108                        lw      a0,0(a0)
f00036d0:       |   4601                        li      a2,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f00036d2:       |   c14c                        sw      a1,4(a0)
dif_uart_irq_restore_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:276

  return kDifOk;
}
f00036d4:       \-> 8532                        mv      a0,a2
f00036d6:           8082                        ret
f00036d8:           c0001073            unimp
f00036dc:           c0001073            unimp

f00036e0 <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:91

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
f00036e0:                 1141                  addi    sp,sp,-16
f00036e2:                 c606                  sw      ra,12(sp)
f00036e4:                 c422                  sw      s0,8(sp)
f00036e6:                 c226                  sw      s1,4(sp)
f00036e8:                 c04a                  sw      s2,0(sp)
f00036ea:                 440d                  li      s0,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL || config.baudrate == 0 || config.clk_freq_hz == 0 ||
f00036ec:       /-------- c171                  beqz    a0,f00037b0 <dif_uart_configure+0xd0>
f00036ee:       |         84ae                  mv      s1,a1
f00036f0:       |         418c                  lw      a1,0(a1)
f00036f2:       +-------- cddd                  beqz    a1,f00037b0 <dif_uart_configure+0xd0>
f00036f4:       |         40d0                  lw      a2,4(s1)
f00036f6:       +-------- ce4d                  beqz    a2,f00037b0 <dif_uart_configure+0xd0>
f00036f8:       |         892a                  mv      s2,a0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:93
      !dif_is_valid_toggle(config.tx_enable) ||
f00036fa:       |         4894                  lw      a3,16(s1)
f00036fc:       |         4505                  li      a0,1
f00036fe:       +-------- 0ad56963              bltu    a0,a3,f00037b0 <dif_uart_configure+0xd0>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:94
      !dif_is_valid_toggle(config.rx_enable)) {
f0003702:       |         48d4                  lw      a3,20(s1)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL || config.baudrate == 0 || config.clk_freq_hz == 0 ||
f0003704:       +-------- 0ad56663              bltu    a0,a3,f00037b0 <dif_uart_configure+0xd0>
f0003708:       |         0016e537              lui     a0,0x16e
f000370c:       |         36050513              addi    a0,a0,864 # 16e360 <_ottf_size+0xee360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:116
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
f0003710:       |         8d2d                  xor     a0,a0,a1
f0003712:       |         016e36b7              lui     a3,0x16e3
f0003716:       |         60068693              addi    a3,a3,1536 # 16e3600 <_ottf_size+0x1663600>
f000371a:       |         8eb1                  xor     a3,a3,a2
f000371c:       |         8d55                  or      a0,a0,a3
f000371e:       |     /-- e901                  bnez    a0,f000372e <dif_uart_configure+0x4e>
f0003720:       |     |   6541                  lui     a0,0x10
f0003722:       |     |   157d                  addi    a0,a0,-1
f0003724:       |  /--|-- a839                  j       f0003742 <dif_uart_configure+0x62>
f0003726:       |  |  |   c0001073              unimp
f000372a:       |  |  |   c0001073              unimp
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:118
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
f000372e:       |  |  \-> 01459513              slli    a0,a1,0x14
f0003732:       |  |      81b1                  srli    a1,a1,0xc
f0003734:       |  |      4681                  li      a3,0
f0003736:       |  |      4701                  li      a4,0
f0003738:       |  |      2ab1                  jal     f0003894 <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:123
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
f000373a:       |  |      01055613              srli    a2,a0,0x10
f000373e:       |  |      8dd1                  or      a1,a1,a2
f0003740:       +--|----- e9a5                  bnez    a1,f00037b0 <dif_uart_configure+0xd0>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:47
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
f0003742:       |  \----> 00092583              lw      a1,0(s2)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0003746:       |         0005a823              sw      zero,16(a1)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:53
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
f000374a:       |         00092583              lw      a1,0(s2)
f000374e:       |         460d                  li      a2,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0003750:       |         d190                  sw      a2,32(a1)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:55
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
f0003752:       |         00092583              lw      a1,0(s2)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0003756:       |         0205a423              sw      zero,40(a1)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
f000375a:       |         00092583              lw      a1,0(s2)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f000375e:       |         0205a823              sw      zero,48(a1)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f0003762:       |         00092583              lw      a1,0(s2)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0003766:       |         0005a223              sw      zero,4(a1)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
f000376a:       |         00092583              lw      a1,0(s2)
f000376e:       |         567d                  li      a2,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f0003770:       |         c190                  sw      a2,0(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:133
  uart_reset(uart);

  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  if (dif_toggle_to_bool(config.tx_enable)) {
f0003772:       |         488c                  lw      a1,16(s1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0003774:       |         0542                  slli    a0,a0,0x10
dif_toggle_to_bool():
/proc/self/cwd/./sw/device/lib/dif/dif_base.h:153
 * @param val A dif_toggle_t value.
 * @return Corresponding bool value.
 */
OT_WARN_UNUSED_RESULT
inline bool dif_toggle_to_bool(dif_toggle_t val) {
  switch (val) {
f0003776:       |         15fd                  addi    a1,a1,-1
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:136
    reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  }
  if (dif_toggle_to_bool(config.rx_enable)) {
f0003778:       |         48d0                  lw      a2,20(s1)
dif_toggle_to_bool():
/proc/self/cwd/./sw/device/lib/dif/dif_base.h:153
f000377a:       |         0015b593              seqz    a1,a1
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:133
  if (dif_toggle_to_bool(config.tx_enable)) {
f000377e:       |         8d4d                  or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:139
    reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  }
  if (config.parity_enable == kDifToggleEnabled) {
f0003780:       |         448c                  lw      a1,8(s1)
dif_toggle_to_bool():
/proc/self/cwd/./sw/device/lib/dif/dif_base.h:153
f0003782:       |         167d                  addi    a2,a2,-1
f0003784:       |         00163613              seqz    a2,a2
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:136
  if (dif_toggle_to_bool(config.rx_enable)) {
f0003788:       |         0606                  slli    a2,a2,0x1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:139
  if (config.parity_enable == kDifToggleEnabled) {
f000378a:       |         15fd                  addi    a1,a1,-1
f000378c:       |         0015b593              seqz    a1,a1
f0003790:       |         059a                  slli    a1,a1,0x6
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:142
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
f0003792:       |         44d4                  lw      a3,12(s1)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:136
  if (dif_toggle_to_bool(config.rx_enable)) {
f0003794:       |         8dd1                  or      a1,a1,a2
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:139
  if (config.parity_enable == kDifToggleEnabled) {
f0003796:       |         8d4d                  or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:145
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
f0003798:       |         00092583              lw      a1,0(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:142
  if (config.parity == kDifUartParityOdd) {
f000379c:       |         0016b613              seqz    a2,a3
f00037a0:       |         061e                  slli    a2,a2,0x7
f00037a2:       |         8d51                  or      a0,a0,a2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f00037a4:       |         c988                  sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:148

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f00037a6:       |         00092503              lw      a0,0(s2)
f00037aa:       |         4401                  li      s0,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
f00037ac:       |         00052223              sw      zero,4(a0) # 10004 <test_setup.kLogFields+0x4>
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:151

  return kDifOk;
}
f00037b0:       \-------> 8522                  mv      a0,s0
f00037b2:                 40b2                  lw      ra,12(sp)
f00037b4:                 4422                  lw      s0,8(sp)
f00037b6:                 4492                  lw      s1,4(sp)
f00037b8:                 4902                  lw      s2,0(sp)
f00037ba:                 0141                  addi    sp,sp,16
f00037bc:                 8082                  ret
f00037be:                 c0001073              unimp
f00037c2:                 c0001073              unimp

f00037c6 <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:155

dif_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                       dif_uart_watermark_t watermark) {
  if (uart == NULL) {
f00037c6:       /----- c11d                     beqz    a0,f00037ec <dif_uart_watermark_rx_set+0x26>
f00037c8:       |      862a                     mv      a2,a0
f00037ca:       |      4699                     li      a3,6
f00037cc:       |      4535                     li      a0,13
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:162
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
f00037ce:       |  /-- 00b6ea63                 bltu    a3,a1,f00037e2 <dif_uart_watermark_rx_set+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:189
    default:
      return kDifError;
  }

  // Set watermark level.
  uint32_t reg = mmio_region_read32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET);
f00037d2:       |  |   4210                     lw      a2,0(a2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f00037d4:       |  |   5214                     lw      a3,32(a2)
f00037d6:       |  |   4501                     li      a0,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f00037d8:       |  |   9a8d                     andi    a3,a3,-29
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00037da:       |  |   058a                     slli    a1,a1,0x2
f00037dc:       |  |   89f1                     andi    a1,a1,28
f00037de:       |  |   8dd5                     or      a1,a1,a3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f00037e0:       |  |   d20c                     sw      a1,32(a2)
dif_uart_watermark_rx_set():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:194
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifOk;
}
f00037e2:       |  \-> 8082                     ret
f00037e4:       |      c0001073                 unimp
f00037e8:       |      c0001073                 unimp
f00037ec:       \----> 450d                     li      a0,3
f00037ee:              8082                     ret
f00037f0:              c0001073                 unimp
f00037f4:              c0001073                 unimp

f00037f8 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:270
}

dif_result_t dif_uart_bytes_send(const dif_uart_t *uart, const uint8_t *data,
                                 size_t bytes_requested,
                                 size_t *bytes_written) {
  if (uart == NULL || data == NULL) {
f00037f8:                 00153713              seqz    a4,a0
f00037fc:                 0015b793              seqz    a5,a1
f0003800:                 8fd9                  or      a5,a5,a4
f0003802:                 470d                  li      a4,3
f0003804:       /-------- e795                  bnez    a5,f0003830 <dif_uart_bytes_send+0x38>
f0003806:       |         4781                  li      a5,0
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f0003808:       |  /----- c20d                  beqz    a2,f000382a <dif_uart_bytes_send+0x32>
uart_tx_full():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:21
  uint32_t reg = mmio_region_read32(uart->base_addr, UART_STATUS_REG_OFFSET);
f000380a:       |  |  /-> 00052803              lw      a6,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f000380e:       |  |  |   01482703              lw      a4,20(a6)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0003812:       |  |  |   8b05                  andi    a4,a4,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f0003814:       |  +--|-- eb19                  bnez    a4,f000382a <dif_uart_bytes_send+0x32>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:69
    uart_tx_fifo_write(uart, data[bytes_written]);
f0003816:       |  |  |   00f58733              add     a4,a1,a5
f000381a:       |  |  |   00074703              lbu     a4,0(a4)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:70
    ++bytes_written;
f000381e:       |  |  |   0785                  addi    a5,a5,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f0003820:       |  |  |   00e82e23              sw      a4,28(a6)
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f0003824:       |  |  \-- fef613e3              bne     a2,a5,f000380a <dif_uart_bytes_send+0x12>
f0003828:       |  |      87b2                  mv      a5,a2
f000382a:       |  \----> 4701                  li      a4,0
dif_uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:276
    return kDifBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
f000382c:       +-------- c291                  beqz    a3,f0003830 <dif_uart_bytes_send+0x38>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:277
    *bytes_written = res;
f000382e:       |         c29c                  sw      a5,0(a3)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:281
  }

  return kDifOk;
}
f0003830:       \-------> 853a                  mv      a0,a4
f0003832:                 8082                  ret
f0003834:                 c0001073              unimp
f0003838:                 c0001073              unimp

f000383c <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:300

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
f000383c:       /----- c11d                     beqz    a0,f0003862 <dif_uart_byte_send_polled+0x26>
f000383e:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0003840:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0003842:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:305
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
f0003844:       |  \-- fef5                     bnez    a3,f0003840 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0003846:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0003848:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f000384a:       |  /-- e299                     bnez    a3,f0003850 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
f000384c:       |  |   ce4c                     sw      a1,28(a2)
f000384e:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
f0003850:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0003852:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:312

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
f0003854:       |  \-- dd75                     beqz    a0,f0003850 <dif_uart_byte_send_polled+0x14>
f0003856:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:316
  }

  return kDifOk;
}
f0003858:       |      8082                     ret
f000385a:       |      c0001073                 unimp
f000385e:       |      c0001073                 unimp
f0003862:       \----> 450d                     li      a0,3
f0003864:              8082                     ret
f0003866:              c0001073                 unimp
f000386a:              c0001073                 unimp

f000386e <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:335
  return kDifOk;
}

dif_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                         size_t *num_bytes) {
  if (uart == NULL || num_bytes == NULL) {
f000386e:           00153613            seqz    a2,a0
f0003872:           0015b693            seqz    a3,a1
f0003876:           8ed1                        or      a3,a3,a2
f0003878:           460d                        li      a2,3
f000387a:       /-- e699                        bnez    a3,f0003888 <dif_uart_rx_bytes_available+0x1a>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:341
    return kDifBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->base_addr, UART_FIFO_STATUS_REG_OFFSET);
f000387c:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000387e:       |   5148                        lw      a0,36(a0)
f0003880:       |   4601                        li      a2,0
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f0003882:       |   0522                        slli    a0,a0,0x8
f0003884:       |   8161                        srli    a0,a0,0x18
dif_uart_rx_bytes_available():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:342
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
f0003886:       |   c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:345

  return kDifOk;
}
f0003888:       \-> 8532                        mv      a0,a2
f000388a:           8082                        ret
f000388c:           c0001073            unimp
f0003890:           c0001073            unimp

f0003894 <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:14
/**
 * Extern declaration of inline function.
 */
extern size_t ceil_div(size_t a, size_t b);

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
f0003894:                 1141                  addi    sp,sp,-16
f0003896:                 c622                  sw      s0,12(sp)
f0003898:                 4881                  li      a7,0
f000389a:                 4801                  li      a6,0
f000389c:                 4381                  li      t2,0
f000389e:                 4e01                  li      t3,0
f00038a0:                 03f00f93              li      t6,63
f00038a4:                 00159293              slli    t0,a1,0x1
f00038a8:                 537d                  li      t1,-1
/proc/self/cwd/sw/device/lib/base/math.c:28
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
f00038aa:       /-------> fe0f8793              addi    a5,t6,-32
f00038ae:       |     /-- 0007c963              bltz    a5,f00038c0 <udiv64_slow+0x2c>
f00038b2:       |     |   01f5deb3              srl     t4,a1,t6
f00038b6:       |  /--|-- a829                  j       f00038d0 <udiv64_slow+0x3c>
f00038b8:       |  |  |   c0001073              unimp
f00038bc:       |  |  |   c0001073              unimp
f00038c0:       |  |  \-> 01f55eb3              srl     t4,a0,t6
f00038c4:       |  |      ffffc793              not     a5,t6
f00038c8:       |  |      00f297b3              sll     a5,t0,a5
f00038cc:       |  |      00feeeb3              or      t4,t4,a5
f00038d0:       |  \----> 01f3d793              srli    a5,t2,0x1f
f00038d4:       |         0e06                  slli    t3,t3,0x1
f00038d6:       |         00fe6e33              or      t3,t3,a5
f00038da:       |         0386                  slli    t2,t2,0x1
f00038dc:       |         001ef793              andi    a5,t4,1
f00038e0:       |         0077eeb3              or      t4,a5,t2
/proc/self/cwd/sw/device/lib/base/math.c:34

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
f00038e4:       |  /----- 00de0963              beq     t3,a3,f00038f6 <udiv64_slow+0x62>
f00038e8:       |  |      00de37b3              sltu    a5,t3,a3
f00038ec:       |  |  /-- a039                  j       f00038fa <udiv64_slow+0x66>
f00038ee:       |  |  |   c0001073              unimp
f00038f2:       |  |  |   c0001073              unimp
f00038f6:       |  \--|-> 00ceb7b3              sltu    a5,t4,a2
f00038fa:       |     \-> 0017cf13              xori    t5,a5,1
f00038fe:       |         01f8d793              srli    a5,a7,0x1f
f0003902:       |         0806                  slli    a6,a6,0x1
f0003904:       |         00f86833              or      a6,a6,a5
f0003908:       |         0886                  slli    a7,a7,0x1
f000390a:       |         41e007b3              neg     a5,t5
f000390e:       |         00d7f433              and     s0,a5,a3
f0003912:       |         8ff1                  and     a5,a5,a2
f0003914:       |         40fe83b3              sub     t2,t4,a5
f0003918:       |         00feb7b3              sltu    a5,t4,a5
f000391c:       |         408e0433              sub     s0,t3,s0
f0003920:       |         40f40e33              sub     t3,s0,a5
/proc/self/cwd/sw/device/lib/base/math.c:25
  for (size_t i = 0; i < bits; ++i) {
f0003924:       |         1ffd                  addi    t6,t6,-1
/proc/self/cwd/sw/device/lib/base/math.c:34
    if (rem >= b) {
f0003926:       |         01e8e8b3              or      a7,a7,t5
/proc/self/cwd/sw/device/lib/base/math.c:25
  for (size_t i = 0; i < bits; ++i) {
f000392a:       \-------- f86f90e3              bne     t6,t1,f00038aa <udiv64_slow+0x16>
/proc/self/cwd/sw/device/lib/base/math.c:40
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
f000392e:             /-- c709                  beqz    a4,f0003938 <udiv64_slow+0xa4>
/proc/self/cwd/sw/device/lib/base/math.c:41
    *rem_out = rem;
f0003930:             |   00772023              sw      t2,0(a4)
f0003934:             |   01c72223              sw      t3,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:43
  }
  return quot;
f0003938:             \-> 8546                  mv      a0,a7
f000393a:                 85c2                  mv      a1,a6
f000393c:                 4432                  lw      s0,12(sp)
f000393e:                 0141                  addi    sp,sp,16
f0003940:                 8082                  ret
f0003942:                 c0001073              unimp
f0003946:                 c0001073              unimp

f000394a <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:63
  return word << 24 | word << 16 | word << 8 | word;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
f000394a:                    00153693           seqz    a3,a0
f000394e:                    0015b713           seqz    a4,a1
f0003952:                    8ed9                       or      a3,a3,a4
f0003954:       /----------- eabd                       bnez    a3,f00039ca <memcpy+0x80>
f0003956:       |            4691                       li      a3,4
f0003958:       |            88b2                       mv      a7,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
f000395a:       |        /-- 00d66c63           bltu    a2,a3,f0003972 <memcpy+0x28>
f000395e:       |        |   00a5c6b3           xor     a3,a1,a0
f0003962:       |        |   8a8d                       andi    a3,a3,3
f0003964:       |        |   8832                       mv      a6,a2
f0003966:       |        |   88b2                       mv      a7,a2
f0003968:       |     /--|-- ee81                       bnez    a3,f0003980 <memcpy+0x36>
f000396a:       |     |  |   40a006b3           neg     a3,a0
f000396e:       |     |  |   0036f893           andi    a7,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:52
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0003972:       |     |  \-> 411606b3           sub     a3,a2,a7
/proc/self/cwd/sw/device/lib/base/memory.c:53
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0003976:       |     |      9af1                       andi    a3,a3,-4
f0003978:       |     |      0116e833           or      a6,a3,a7
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:71
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f000397c:       |  /--|----- 00088d63           beqz    a7,f0003996 <memcpy+0x4c>
f0003980:       |  |  \----> 82ae                       mv      t0,a1
f0003982:       |  |         872a                       mv      a4,a0
f0003984:       |  |         86c6                       mv      a3,a7
/proc/self/cwd/sw/device/lib/base/memory.c:72
    dest8[i] = src8[i];
f0003986:       |  |     /-> 00028783           lb      a5,0(t0)
f000398a:       |  |     |   00f70023           sb      a5,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:71
  for (; i < body_offset; ++i) {
f000398e:       |  |     |   16fd                       addi    a3,a3,-1
f0003990:       |  |     |   0705                       addi    a4,a4,1
f0003992:       |  |     |   0285                       addi    t0,t0,1
f0003994:       |  |     \-- faed                       bnez    a3,f0003986 <memcpy+0x3c>
/proc/self/cwd/sw/device/lib/base/memory.c:74
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0003996:       |  \--/----X 0108fb63           bgeu    a7,a6,f00039ac <memcpy+0x62>
/proc/self/cwd/sw/device/lib/base/memory.c:75
    uint32_t word = read_32(&src8[i]);
f000399a:       |     |  /-> 011586b3           add     a3,a1,a7
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:90
f000399e:       |     |  |   4294                       lw      a3,0(a3)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:76
    write_32(word, &dest8[i]);
f00039a0:       |     |  |   01150733           add     a4,a0,a7
/proc/self/cwd/sw/device/lib/base/memory.c:74
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00039a4:       |     |  |   0891                       addi    a7,a7,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:149
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f00039a6:       |     |  |   c314                       sw      a3,0(a4)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:74
f00039a8:       |     |  \-- ff08e9e3           bltu    a7,a6,f000399a <memcpy+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:78
  }
  for (; i < len; ++i) {
f00039ac:       +-----\----X 00c8ff63           bgeu    a7,a2,f00039ca <memcpy+0x80>
f00039b0:       |            41160633           sub     a2,a2,a7
f00039b4:       |            01150733           add     a4,a0,a7
f00039b8:       |            95c6                       add     a1,a1,a7
/proc/self/cwd/sw/device/lib/base/memory.c:79
    dest8[i] = src8[i];
f00039ba:       |        /-> 00058683           lb      a3,0(a1)
f00039be:       |        |   00d70023           sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:78
  for (; i < len; ++i) {
f00039c2:       |        |   167d                       addi    a2,a2,-1
f00039c4:       |        |   0705                       addi    a4,a4,1
f00039c6:       |        |   0585                       addi    a1,a1,1
f00039c8:       |        \-- fa6d                       bnez    a2,f00039ba <memcpy+0x70>
/proc/self/cwd/sw/device/lib/base/memory.c:82
  }
  return dest;
}
f00039ca:       \----------> 8082                       ret
f00039cc:                    c0001073           unimp
f00039d0:                    c0001073           unimp

f00039d4 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:84

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
f00039d4:                 4691                  li      a3,4
f00039d6:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
f00039d8:             /-- 00d66563              bltu    a2,a3,f00039e2 <memset+0xe>
f00039dc:             |   40a00733              neg     a4,a0
f00039e0:             |   8b0d                  andi    a4,a4,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:52
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f00039e2:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:53
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f00039e6:                 9af1                  andi    a3,a3,-4
f00039e8:                 00e6e833              or      a6,a3,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:91
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f00039ec:          /----- cb01                  beqz    a4,f00039fc <memset+0x28>
f00039ee:          |      87aa                  mv      a5,a0
f00039f0:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:92
    dest8[i] = value8;
f00039f2:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:91
  for (; i < body_offset; ++i) {
f00039f6:          |  |   16fd                  addi    a3,a3,-1
f00039f8:          |  |   0785                  addi    a5,a5,1
f00039fa:          |  \-- fee5                  bnez    a3,f00039f2 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:95
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00039fc:       /--\----X 03077063              bgeu    a4,a6,f0003a1c <memset+0x48>
f0003a00:       |         0ff5f693              andi    a3,a1,255
f0003a04:       |         010107b7              lui     a5,0x1010
f0003a08:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xf90101>
f0003a0c:       |         02f687b3              mul     a5,a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
f0003a10:       |     /-> 00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:95
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0003a14:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:149
f0003a16:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:95
f0003a18:       |     \-- ff076ce3              bltu    a4,a6,f0003a10 <memset+0x3c>
/proc/self/cwd/sw/device/lib/base/memory.c:98
  }
  for (; i < len; ++i) {
f0003a1c:       \--/----X 00c77a63              bgeu    a4,a2,f0003a30 <memset+0x5c>
f0003a20:          |      8e19                  sub     a2,a2,a4
f0003a22:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:99
    dest8[i] = value8;
f0003a26:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:98
  for (; i < len; ++i) {
f0003a2a:          |  |   167d                  addi    a2,a2,-1
f0003a2c:          |  |   0685                  addi    a3,a3,1
f0003a2e:          |  \-- fe65                  bnez    a2,f0003a26 <memset+0x52>
/proc/self/cwd/sw/device/lib/base/memory.c:101
  }
  return dest;
f0003a30:          \----> 8082                  ret
f0003a32:                 c0001073              unimp
f0003a36:                 c0001073              unimp

f0003a3a <memcmp>:
memcmp():
/proc/self/cwd/sw/device/lib/base/memory.c:111
  kMemCmpLt = -42,
  kMemCmpGt = 42,
};

int OT_PREFIX_IF_NOT_RV32(memcmp)(const void *lhs, const void *rhs,
                                  size_t len) {
f0003a3a:                    4691                       li      a3,4
f0003a3c:                    88b2                       mv      a7,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
f0003a3e:             /----- 02d66163           bltu    a2,a3,f0003a60 <memcmp+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:25
  if (right == NULL || left_ahead == right_ahead) {
f0003a42:             |      00b036b3           snez    a3,a1
f0003a46:             |      00a5c733           xor     a4,a1,a0
f0003a4a:             |      8b0d                       andi    a4,a4,3
f0003a4c:             |      00e03733           snez    a4,a4
f0003a50:             |      8ef9                       and     a3,a3,a4
f0003a52:             |      8832                       mv      a6,a2
f0003a54:             |      88b2                       mv      a7,a2
f0003a56:             |  /-- ee81                       bnez    a3,f0003a6e <memcmp+0x34>
f0003a58:             |  |   40a006b3           neg     a3,a0
f0003a5c:             |  |   0036f893           andi    a7,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:52
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0003a60:             \--|-> 411606b3           sub     a3,a2,a7
/proc/self/cwd/sw/device/lib/base/memory.c:53
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0003a64:                |   9af1                       andi    a3,a3,-4
f0003a66:                |   0116e833           or      a6,a3,a7
memcmp():
/proc/self/cwd/sw/device/lib/base/memory.c:117
  const unsigned char *lhs8 = (const unsigned char *)lhs;
  const unsigned char *rhs8 = (const unsigned char *)rhs;
  size_t body_offset, tail_offset;
  compute_alignment(lhs, rhs, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0003a6a:             /--|-- 04088563           beqz    a7,f0003ab4 <memcmp+0x7a>
f0003a6e:             |  \-> 82aa                       mv      t0,a0
f0003a70:             |      832e                       mv      t1,a1
f0003a72:             |      86c6                       mv      a3,a7
/proc/self/cwd/sw/device/lib/base/memory.c:118
    if (lhs8[i] < rhs8[i]) {
f0003a74:             |  /-> 0002c783           lbu     a5,0(t0)
f0003a78:             |  |   00034703           lbu     a4,0(t1)
f0003a7c:          /--|--|-- 06e7e663           bltu    a5,a4,f0003ae8 <memcmp+0xae>
/proc/self/cwd/sw/device/lib/base/memory.c:120
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
f0003a80:       /--|--|--|-- 06f76b63           bltu    a4,a5,f0003af6 <memcmp+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:117
  for (; i < body_offset; ++i) {
f0003a84:       |  |  |  |   16fd                       addi    a3,a3,-1
f0003a86:       |  |  |  |   0305                       addi    t1,t1,1
f0003a88:       |  |  |  |   0285                       addi    t0,t0,1
f0003a8a:       |  |  |  \-- f6ed                       bnez    a3,f0003a74 <memcmp+0x3a>
f0003a8c:       |  |  +----- a025                       j       f0003ab4 <memcmp+0x7a>
f0003a8e:       |  |  |      c0001073           unimp
f0003a92:       |  |  |      c0001073           unimp
/proc/self/cwd/sw/device/lib/base/memory.c:129
  for (; i < tail_offset; i += sizeof(uint32_t)) {
#if OT_BUILD_FOR_STATIC_ANALYZER
    assert(&lhs8[i] != NULL);
    assert(&rhs8[i] != NULL);
#endif
    uint32_t word_left = __builtin_bswap32(read_32(&lhs8[i]));
f0003a96:       |  |  |  /-> 011506b3           add     a3,a0,a7
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:90
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0003a9a:       |  |  |  |   4294                       lw      a3,0(a3)
memcmp():
/proc/self/cwd/sw/device/lib/base/memory.c:130
    uint32_t word_right = __builtin_bswap32(read_32(&rhs8[i]));
f0003a9c:       |  |  |  |   01158733           add     a4,a1,a7
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:90
f0003aa0:       |  |  |  |   4318                       lw      a4,0(a4)
memcmp():
/proc/self/cwd/sw/device/lib/base/memory.c:129
    uint32_t word_left = __builtin_bswap32(read_32(&lhs8[i]));
f0003aa2:       |  |  |  |   6986d693           grevi   a3,a3,0x18
/proc/self/cwd/sw/device/lib/base/memory.c:130
    uint32_t word_right = __builtin_bswap32(read_32(&rhs8[i]));
f0003aa6:       |  |  |  |   69875713           grevi   a4,a4,0x18
/proc/self/cwd/sw/device/lib/base/memory.c:133
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memcmp assumes that the system is little endian.");
    if (word_left < word_right) {
f0003aaa:       |  +--|--|-- 02e6ef63           bltu    a3,a4,f0003ae8 <memcmp+0xae>
f0003aae:       +--|--|--|-- 04d76463           bltu    a4,a3,f0003af6 <memcmp+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:124
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0003ab2:       |  |  |  |   0891                       addi    a7,a7,4
f0003ab4:       |  |  \--\-X ff08e1e3           bltu    a7,a6,f0003a96 <memcmp+0x5c>
f0003ab8:       |  |  /----- 02c8f263           bgeu    a7,a2,f0003adc <memcmp+0xa2>
/proc/self/cwd/sw/device/lib/base/memory.c:139
      return kMemCmpLt;
    } else if (word_left > word_right) {
      return kMemCmpGt;
    }
  }
  for (; i < len; ++i) {
f0003abc:       |  |  |      41160633           sub     a2,a2,a7
f0003ac0:       |  |  |      95c6                       add     a1,a1,a7
f0003ac2:       |  |  |      9546                       add     a0,a0,a7
/proc/self/cwd/sw/device/lib/base/memory.c:140
    if (lhs8[i] < rhs8[i]) {
f0003ac4:       |  |  |  /-> 00054683           lbu     a3,0(a0)
f0003ac8:       |  |  |  |   0005c703           lbu     a4,0(a1)
f0003acc:       |  +--|--|-- 00e6ee63           bltu    a3,a4,f0003ae8 <memcmp+0xae>
/proc/self/cwd/sw/device/lib/base/memory.c:142
      return kMemCmpLt;
    } else if (lhs8[i] > rhs8[i]) {
f0003ad0:       +--|--|--|-- 02d76363           bltu    a4,a3,f0003af6 <memcmp+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:139
  for (; i < len; ++i) {
f0003ad4:       |  |  |  |   167d                       addi    a2,a2,-1
f0003ad6:       |  |  |  |   0585                       addi    a1,a1,1
f0003ad8:       |  |  |  |   0505                       addi    a0,a0,1
f0003ada:       |  |  |  \-- f66d                       bnez    a2,f0003ac4 <memcmp+0x8a>
f0003adc:       |  |  \----> 4501                       li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:147
      return kMemCmpGt;
    }
  }
  return kMemCmpEq;
}
f0003ade:       |  |         8082                       ret
f0003ae0:       |  |         c0001073           unimp
f0003ae4:       |  |         c0001073           unimp
f0003ae8:       |  \-------> fd600513           li      a0,-42
f0003aec:       |            8082                       ret
f0003aee:       |            c0001073           unimp
f0003af2:       |            c0001073           unimp
f0003af6:       \----------> 02a00513           li      a0,42
f0003afa:                    8082                       ret
f0003afc:                    c0001073           unimp
f0003b00:                    c0001073           unimp

f0003b04 <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:190
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
f0003b04:                             4691                      li      a3,4
f0003b06:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
f0003b08:                         /-- 00d66663                  bltu    a2,a3,f0003b14 <memchr+0x10>
f0003b0c:                         |   40a00733                  neg     a4,a0
f0003b10:                         |   00377e93                  andi    t4,a4,3
f0003b14:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:197
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0003b18:                      /----- 000e8b63                  beqz    t4,f0003b2e <memchr+0x2a>
f0003b1c:                      |      85aa                      mv      a1,a0
f0003b1e:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:198
    if (ptr8[i] == value8) {
f0003b20:                      |  /-> 0005c683                  lbu     a3,0(a1)
f0003b24:       /--------------|--|-- 07c68f63                  beq     a3,t3,f0003ba2 <memchr+0x9e>
/proc/self/cwd/sw/device/lib/base/memory.c:197
  for (; i < body_offset; ++i) {
f0003b28:       |              |  |   17fd                      addi    a5,a5,-1
f0003b2a:       |              |  |   0585                      addi    a1,a1,1
f0003b2c:       |              |  \-- fbf5                      bnez    a5,f0003b20 <memchr+0x1c>
f0003b2e:       |              \----> 41d605b3                  sub     a1,a2,t4
f0003b32:       |                     99f1                      andi    a1,a1,-4
f0003b34:       |                     01d5e833                  or      a6,a1,t4
/proc/self/cwd/sw/device/lib/base/memory.c:203
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0003b38:       |  /----------------- 050ef763                  bgeu    t4,a6,f0003b86 <memchr+0x82>
f0003b3c:       |  |                  010105b7                  lui     a1,0x1010
f0003b40:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f0003b44:       |  |                  02be02b3                  mul     t0,t3,a1
f0003b48:       |  |                  0ff00893                  li      a7,255
f0003b4c:       |  |                  65c1                      lui     a1,0x10
f0003b4e:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f0003b52:       |  |                  00ff0337                  lui     t1,0xff0
/proc/self/cwd/sw/device/lib/base/memory.c:204
    uint32_t word = read_32(&ptr8[i]);
f0003b56:       |  |              /-> 01d505b3                  add     a1,a0,t4
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:90
f0003b5a:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:205
    uint32_t bits_eq = ~(word ^ value32);
f0003b5c:       |  |              |   0056c7b3                  xor     a5,a3,t0
/proc/self/cwd/sw/device/lib/base/memory.c:208
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f0003b60:       |  |              |   40f8f733                  andn    a4,a7,a5
f0003b64:       +--|--------------|-- 03170f63                  beq     a4,a7,f0003ba2 <memchr+0x9e>
f0003b68:       |  |              |   4056c6b3                  xnor    a3,a3,t0
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f0003b6c:       |  |              |   0076f733                  and     a4,a3,t2
f0003b70:       |  |        /-----|-- 02770f63                  beq     a4,t2,f0003bae <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:214
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f0003b74:       |  |        |     |   0066f6b3                  and     a3,a3,t1
f0003b78:       |  |     /--|-----|-- 04668163                  beq     a3,t1,f0003bba <memchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f0003b7c:       |  |     |  |     |   83e1                      srli    a5,a5,0x18
f0003b7e:       |  |  /--|--|-----|-- c7a1                      beqz    a5,f0003bc6 <memchr+0xc2>
/proc/self/cwd/sw/device/lib/base/memory.c:203
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0003b80:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
f0003b82:       |  |  |  |  |     \-- fd0eeae3                  bltu    t4,a6,f0003b56 <memchr+0x52>
/proc/self/cwd/sw/device/lib/base/memory.c:221
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
f0003b86:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,f0003ba0 <memchr+0x9c>
f0003b8a:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
f0003b8e:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:222
    if (ptr8[i] == value8) {
f0003b92:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
f0003b96:       +-----|--|--|--|--|-- 01c50663                  beq     a0,t3,f0003ba2 <memchr+0x9e>
/proc/self/cwd/sw/device/lib/base/memory.c:221
  for (; i < len; ++i) {
f0003b9a:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
f0003b9c:       |     |  |  |  |  |   0585                      addi    a1,a1,1
f0003b9e:       |     |  |  |  |  \-- fa75                      bnez    a2,f0003b92 <memchr+0x8e>
f0003ba0:       |     |  |  |  \----> 4581                      li      a1,0
/proc/self/cwd/sw/device/lib/base/memory.c:227
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f0003ba2:       >-----|--|--|-------> 852e                      mv      a0,a1
f0003ba4:       |     |  |  |         8082                      ret
f0003ba6:       |     |  |  |         c0001073                  unimp
f0003baa:       |     |  |  |         c0001073                  unimp
/proc/self/cwd/sw/device/lib/base/memory.c:212
      return (void *)&ptr8[i + 1];
f0003bae:       |     |  |  \-------> 0585                      addi    a1,a1,1
f0003bb0:       +-----|--|----------- bfcd                      j       f0003ba2 <memchr+0x9e>
f0003bb2:       |     |  |            c0001073                  unimp
f0003bb6:       |     |  |            c0001073                  unimp
/proc/self/cwd/sw/device/lib/base/memory.c:215
      return (void *)&ptr8[i + 2];
f0003bba:       |     |  \----------> 0589                      addi    a1,a1,2
f0003bbc:       +-----|-------------- b7dd                      j       f0003ba2 <memchr+0x9e>
f0003bbe:       |     |               c0001073                  unimp
f0003bc2:       |     |               c0001073                  unimp
/proc/self/cwd/sw/device/lib/base/memory.c:218
      return (void *)&ptr8[i + 3];
f0003bc6:       |     \-------------> 058d                      addi    a1,a1,3
f0003bc8:       \-------------------- bfe9                      j       f0003ba2 <memchr+0x9e>
f0003bca:                             c0001073                  unimp
f0003bce:                             c0001073                  unimp

f0003bd2 <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:229

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
f0003bd2:                          4691                 li      a3,4
f0003bd4:                          82b2                 mv      t0,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
f0003bd6:                      /-- 00d66663             bltu    a2,a3,f0003be2 <memrchr+0x10>
f0003bda:                      |   40a006b3             neg     a3,a0
f0003bde:                      |   0036f293             andi    t0,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:52
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0003be2:                      \-> 405606b3             sub     a3,a2,t0
/proc/self/cwd/sw/device/lib/base/memory.c:53
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0003be6:                          9af1                 andi    a3,a3,-4
f0003be8:                          0056e7b3             or      a5,a3,t0
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
f0003bec:                          0ac7d3b3             minu    t2,a5,a2
f0003bf0:                          00c50733             add     a4,a0,a2
f0003bf4:                          0ff5f313             andi    t1,a1,255
f0003bf8:                   /--/-X 02c7f063             bgeu    a5,a2,f0003c18 <memrchr+0x46>
/proc/self/cwd/sw/device/lib/base/memory.c:239
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
f0003bfc:                   |  |   fff74683             lbu     a3,-1(a4)
f0003c00:                   |  |   fff70593             addi    a1,a4,-1
/proc/self/cwd/sw/device/lib/base/memory.c:238
    const size_t i = end - 1;
f0003c04:                   |  |   167d                 addi    a2,a2,-1
f0003c06:                   |  |   872e                 mv      a4,a1
f0003c08:                   |  \-- fe6698e3             bne     a3,t1,f0003bf8 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:270
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f0003c0c:       /-----------|----> 852e                 mv      a0,a1
f0003c0e:       |           |      8082                 ret
f0003c10:       |           |      c0001073             unimp
f0003c14:       |           |      c0001073             unimp
f0003c18:       |           \----> 010105b7             lui     a1,0x1010
f0003c1c:       |                  10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:58
  return word << 24 | word << 16 | word << 8 | word;
f0003c20:       |                  02b305b3             mul     a1,t1,a1
f0003c24:       |                  00ff0837             lui     a6,0xff0
f0003c28:       |                  6641                 lui     a2,0x10
f0003c2a:       |                  f0060613             addi    a2,a2,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f0003c2e:       |                  0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:244
  for (; end > body_offset; end -= sizeof(uint32_t)) {
f0003c32:       |           /--/-X 0472f063             bgeu    t0,t2,f0003c72 <memrchr+0xa0>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0003c36:       |           |  |   007507b3             add     a5,a0,t2
/proc/self/cwd/./sw/device/lib/base/memory.h:90
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0003c3a:       |           |  |   ffc7a703             lw      a4,-4(a5)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:247
    uint32_t bits_eq = ~(word ^ value32);
f0003c3e:       |           |  |   00b746b3             xor     a3,a4,a1
/proc/self/cwd/sw/device/lib/base/memory.c:250
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f0003c42:       |           |  |   82e1                 srli    a3,a3,0x18
f0003c44:       |        /--|--|-- c6b9                 beqz    a3,f0003c92 <memrchr+0xc0>
f0003c46:       |        |  |  |   40b74733             xnor    a4,a4,a1
/proc/self/cwd/sw/device/lib/base/memory.c:253
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f0003c4a:       |        |  |  |   010776b3             and     a3,a4,a6
f0003c4e:       |     /--|--|--|-- 05068963             beq     a3,a6,f0003ca0 <memrchr+0xce>
/proc/self/cwd/sw/device/lib/base/memory.c:256
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f0003c52:       |     |  |  |  |   00c776b3             and     a3,a4,a2
f0003c56:       |  /--|--|--|--|-- 04c68c63             beq     a3,a2,f0003cae <memrchr+0xdc>
/proc/self/cwd/sw/device/lib/base/memory.c:259
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f0003c5a:       |  |  |  |  |  |   0ff77693             andi    a3,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:245
    const size_t i = end - sizeof(uint32_t);
f0003c5e:       |  |  |  |  |  |   13f1                 addi    t2,t2,-4
f0003c60:       |  |  |  |  |  \-- fd1699e3             bne     a3,a7,f0003c32 <memrchr+0x60>
/proc/self/cwd/sw/device/lib/base/memory.c:270
}
f0003c64:       |  |  |  |  |      007505b3             add     a1,a0,t2
f0003c68:       +--|--|--|--|----- b755                 j       f0003c0c <memrchr+0x3a>
f0003c6a:       |  |  |  |  |      c0001073             unimp
f0003c6e:       |  |  |  |  |      c0001073             unimp
f0003c72:       |  |  |  |  \----> 951e                 add     a0,a0,t2
f0003c74:       |  |  |  |  /--/-X 04038463             beqz    t2,f0003cbc <memrchr+0xea>
/proc/self/cwd/sw/device/lib/base/memory.c:265
    if (ptr8[i] == value8) {
f0003c78:       |  |  |  |  |  |   fff54603             lbu     a2,-1(a0)
f0003c7c:       |  |  |  |  |  |   fff50593             addi    a1,a0,-1
/proc/self/cwd/sw/device/lib/base/memory.c:264
    const size_t i = end - 1;
f0003c80:       |  |  |  |  |  |   13fd                 addi    t2,t2,-1
f0003c82:       |  |  |  |  |  |   852e                 mv      a0,a1
f0003c84:       |  |  |  |  |  \-- fe6618e3             bne     a2,t1,f0003c74 <memrchr+0xa2>
f0003c88:       +--|--|--|--|----- b751                 j       f0003c0c <memrchr+0x3a>
f0003c8a:       |  |  |  |  |      c0001073             unimp
f0003c8e:       |  |  |  |  |      c0001073             unimp
/proc/self/cwd/sw/device/lib/base/memory.c:251
      return (void *)&ptr8[i + 3];
f0003c92:       |  |  |  \--|----> fff78593             addi    a1,a5,-1
f0003c96:       +--|--|-----|----- bf9d                 j       f0003c0c <memrchr+0x3a>
f0003c98:       |  |  |     |      c0001073             unimp
f0003c9c:       |  |  |     |      c0001073             unimp
/proc/self/cwd/sw/device/lib/base/memory.c:254
      return (void *)&ptr8[i + 2];
f0003ca0:       |  |  \-----|----> ffe78593             addi    a1,a5,-2
f0003ca4:       +--|--------|----- b7a5                 j       f0003c0c <memrchr+0x3a>
f0003ca6:       |  |        |      c0001073             unimp
f0003caa:       |  |        |      c0001073             unimp
/proc/self/cwd/sw/device/lib/base/memory.c:257
      return (void *)&ptr8[i + 1];
f0003cae:       |  \--------|----> ffd78593             addi    a1,a5,-3
f0003cb2:       +-----------|----- bfa9                 j       f0003c0c <memrchr+0x3a>
f0003cb4:       |           |      c0001073             unimp
f0003cb8:       |           |      c0001073             unimp
f0003cbc:       |           \----> 4581                 li      a1,0
f0003cbe:       \----------------- b7b9                 j       f0003c0c <memrchr+0x3a>
f0003cc0:                          c0001073             unimp
f0003cc4:                          c0001073             unimp

f0003cc8 <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
f0003cc8:                    7179                       addi    sp,sp,-48
f0003cca:                    d606                       sw      ra,44(sp)
f0003ccc:                    d422                       sw      s0,40(sp)
f0003cce:                    d226                       sw      s1,36(sp)
f0003cd0:                    d04a                       sw      s2,32(sp)
f0003cd2:                    ce4e                       sw      s3,28(sp)
f0003cd4:                    cc52                       sw      s4,24(sp)
f0003cd6:                    ca56                       sw      s5,20(sp)
f0003cd8:                    c85a                       sw      s6,16(sp)
f0003cda:                    c65e                       sw      s7,12(sp)
f0003cdc:                    c462                       sw      s8,8(sp)
f0003cde:                    8abe                       mv      s5,a5
f0003ce0:                    893a                       mv      s2,a4
f0003ce2:                    89b6                       mv      s3,a3
f0003ce4:                    8c32                       mv      s8,a2
f0003ce6:                    84ae                       mv      s1,a1
f0003ce8:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
f0003cea:                    00261513           slli    a0,a2,0x2
f0003cee:                    2d79                       jal     f000438c <pvPortMalloc>
f0003cf0:                    5b7d                       li      s6,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
f0003cf2:       /----------- 1c050063           beqz    a0,f0003eb2 <xTaskCreate+0x1ea>
f0003cf6:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
f0003cf8:       |            04c00513           li      a0,76
f0003cfc:       |            2d41                       jal     f000438c <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
f0003cfe:       |  /-------- c131                       beqz    a0,f0003d42 <xTaskCreate+0x7a>
f0003d00:       |  |         8baa                       mv      s7,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
f0003d02:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
f0003d04:       |  |         208c4533           sh2add  a0,s8,s0
f0003d08:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:861
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
f0003d0a:       |  |         ff057b13           andi    s6,a0,-16
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
f0003d0e:       |  |  /----- c0a9                       beqz    s1,f0003d50 <xTaskCreate+0x88>
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
f0003d10:       |  |  |      034b8513           addi    a0,s7,52
f0003d14:       |  |  |      45bd                       li      a1,15
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
f0003d16:       |  |  |  /-> 00048603           lb      a2,0(s1)
f0003d1a:       |  |  |  |   00c50023           sb      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
f0003d1e:       |  |  |  |   0004c603           lbu     a2,0(s1)
f0003d22:       |  |  |  |   00163613           seqz    a2,a2
f0003d26:       |  |  |  |   0015b693           seqz    a3,a1
f0003d2a:       |  |  |  |   8e55                       or      a2,a2,a3
f0003d2c:       |  |  |  |   15fd                       addi    a1,a1,-1
f0003d2e:       |  |  |  |   0505                       addi    a0,a0,1
f0003d30:       |  |  |  |   0485                       addi    s1,s1,1
f0003d32:       |  |  |  \-- d275                       beqz    a2,f0003d16 <xTaskCreate+0x4e>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
f0003d34:       |  |  |      040b81a3           sb      zero,67(s7)
f0003d38:       |  |  |  /-- a831                       j       f0003d54 <xTaskCreate+0x8c>
f0003d3a:       |  |  |  |   c0001073           unimp
f0003d3e:       |  |  |  |   c0001073           unimp
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
f0003d42:       |  \--|--|-> 8522                       mv      a0,s0
f0003d44:       |     |  |   25cd                       jal     f0004426 <vPortFree>
f0003d46:       +-----|--|-- a2b5                       j       f0003eb2 <xTaskCreate+0x1ea>
f0003d48:       |     |  |   c0001073           unimp
f0003d4c:       |     |  |   c0001073           unimp
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
f0003d50:       |     \--|-> 020b8a23           sb      zero,52(s7)
f0003d54:       |        \-> 4511                       li      a0,4
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
f0003d56:       |            0aa95433           minu    s0,s2,a0
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
f0003d5a:       |            028ba623           sw      s0,44(s7)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
f0003d5e:       |            004b8913           addi    s2,s7,4
f0003d62:       |            854a                       mv      a0,s2
f0003d64:       |            2bc5                       jal     f0004354 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
f0003d66:       |            018b8513           addi    a0,s7,24
f0003d6a:       |            23ed                       jal     f0004354 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
f0003d6c:       |            017ba823           sw      s7,16(s7)
f0003d70:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f0003d72:       |            8d01                       sub     a0,a0,s0
f0003d74:       |            00abac23           sw      a0,24(s7)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
f0003d78:       |            037ba223           sw      s7,36(s7)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
f0003d7c:       |            040ba223           sw      zero,68(s7)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
f0003d80:       |            040b8423           sb      zero,72(s7)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
f0003d84:       |            855a                       mv      a0,s6
f0003d86:       |            85d2                       mv      a1,s4
f0003d88:       |            864e                       mv      a2,s3
f0003d8a:       |            813fc0ef           jal     ra,f000059c <pxPortInitialiseStack>
f0003d8e:       |            00aba023           sw      a0,0(s7)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
f0003d92:       |        /-- 000a8463           beqz    s5,f0003d9a <xTaskCreate+0xd2>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
f0003d96:       |        |   017aa023           sw      s7,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
f0003d9a:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
f0003d9e:       |            efffea17           auipc   s4,0xefffe
f0003da2:       |            306a2503           lw      a0,774(s4) # e00020a4 <xSchedulerRunning>
f0003da6:       |            efffec17           auipc   s8,0xefffe
f0003daa:       |        /-- c901                       beqz    a0,f0003dba <xTaskCreate+0xf2>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
f0003dac:       |        |   2eac2503           lw      a0,746(s8) # e0002090 <pxCurrentTCB>
f0003db0:       |        |   416c                       lw      a1,68(a0)
f0003db2:       |        |   0585                       addi    a1,a1,1
f0003db4:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0003db6:       |        |   2eac2503           lw      a0,746(s8)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
f0003dba:       |        \-> efffe517           auipc   a0,0xefffe
f0003dbe:       |            2e652583           lw      a1,742(a0) # e00020a0 <uxCurrentNumberOfTasks>
f0003dc2:       |            0585                       addi    a1,a1,1
f0003dc4:       |            2eb52323           sw      a1,742(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
f0003dc8:       |            2eac2583           lw      a1,746(s8)
f0003dcc:       |            efffe617           auipc   a2,0xefffe
f0003dd0:       |            35860a93           addi    s5,a2,856 # e0002124 <pxReadyTasksLists>
f0003dd4:       |        /-- c195                       beqz    a1,f0003df8 <xTaskCreate+0x130>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
f0003dd6:       |        |   306a2503           lw      a0,774(s4)
f0003dda:       |     /--|-- e141                       bnez    a0,f0003e5a <xTaskCreate+0x192>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
f0003ddc:       |     |  |   2eac2503           lw      a0,746(s8)
f0003de0:       |     |  |   5548                       lw      a0,44(a0)
f0003de2:       |     |  |   02cba583           lw      a1,44(s7)
f0003de6:       |     +--|-- 06a5ea63           bltu    a1,a0,f0003e5a <xTaskCreate+0x192>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
f0003dea:       |     |  |   2f7c2523           sw      s7,746(s8)
f0003dee:       |     +--|-- a0b5                       j       f0003e5a <xTaskCreate+0x192>
f0003df0:       |     |  |   c0001073           unimp
f0003df4:       |     |  |   c0001073           unimp
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
f0003df8:       |     |  \-> 2f7c2523           sw      s7,746(s8)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
f0003dfc:       |     |      2e652503           lw      a0,742(a0)
f0003e00:       |     |      4585                       li      a1,1
f0003e02:       |     +----- 04b51c63           bne     a0,a1,f0003e5a <xTaskCreate+0x192>
f0003e06:       |     |      4495                       li      s1,5
f0003e08:       |     |      8456                       mv      s0,s5
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
f0003e0a:       |     |  /-> 8522                       mv      a0,s0
f0003e0c:       |     |  |   2335                       jal     f0004338 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
f0003e0e:       |     |  |   14fd                       addi    s1,s1,-1
f0003e10:       |     |  |   0451                       addi    s0,s0,20
f0003e12:       |     |  \-- fce5                       bnez    s1,f0003e0a <xTaskCreate+0x142>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
f0003e14:       |     |      efffe517           auipc   a0,0xefffe
f0003e18:       |     |      3b050993           addi    s3,a0,944 # e00021c4 <xDelayedTaskList1>
f0003e1c:       |     |      854e                       mv      a0,s3
f0003e1e:       |     |      2b29                       jal     f0004338 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
f0003e20:       |     |      efffe517           auipc   a0,0xefffe
f0003e24:       |     |      3b850413           addi    s0,a0,952 # e00021d8 <xDelayedTaskList2>
f0003e28:       |     |      8522                       mv      a0,s0
f0003e2a:       |     |      2339                       jal     f0004338 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
f0003e2c:       |     |      efffe517           auipc   a0,0xefffe
f0003e30:       |     |      38450513           addi    a0,a0,900 # e00021b0 <xPendingReadyList>
f0003e34:       |     |      2311                       jal     f0004338 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
f0003e36:       |     |      efffe517           auipc   a0,0xefffe
f0003e3a:       |     |      35250513           addi    a0,a0,850 # e0002188 <xTasksWaitingTermination>
f0003e3e:       |     |      29ed                       jal     f0004338 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
f0003e40:       |     |      efffe517           auipc   a0,0xefffe
f0003e44:       |     |      35c50513           addi    a0,a0,860 # e000219c <xSuspendedTaskList>
f0003e48:       |     |      29c5                       jal     f0004338 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
f0003e4a:       |     |      efffe517           auipc   a0,0xefffe
f0003e4e:       |     |      25352f23           sw      s3,606(a0) # e00020a8 <pxDelayedTaskList>
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
f0003e52:       |     |      efffe517           auipc   a0,0xefffe
f0003e56:       |     |      24852d23           sw      s0,602(a0) # e00020ac <pxOverflowDelayedTaskList>
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
f0003e5a:       |     \----> efffe517           auipc   a0,0xefffe
f0003e5e:       |            23e52583           lw      a1,574(a0) # e0002098 <uxTaskNumber>
f0003e62:       |            0585                       addi    a1,a1,1
f0003e64:       |            22b52f23           sw      a1,574(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
f0003e68:       |            02cba503           lw      a0,44(s7)
f0003e6c:       |            efffe597           auipc   a1,0xefffe
f0003e70:       |            2285a603           lw      a2,552(a1) # e0002094 <uxTopReadyPriority>
f0003e74:       |            28a61633           bset    a2,a2,a0
f0003e78:       |            22c5a423           sw      a2,552(a1)
f0003e7c:       |            20a54533           sh2add  a0,a0,a0
f0003e80:       |            21554533           sh2add  a0,a0,s5
f0003e84:       |            414c                       lw      a1,4(a0)
f0003e86:       |            00bba423           sw      a1,8(s7)
f0003e8a:       |            4590                       lw      a2,8(a1)
f0003e8c:       |            00cba623           sw      a2,12(s7)
f0003e90:       |            4590                       lw      a2,8(a1)
f0003e92:       |            01262223           sw      s2,4(a2)
f0003e96:       |            0125a423           sw      s2,8(a1)
f0003e9a:       |            00abaa23           sw      a0,20(s7)
f0003e9e:       |            410c                       lw      a1,0(a0)
f0003ea0:       |            0585                       addi    a1,a1,1
f0003ea2:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
f0003ea4:       |            2805                       jal     f0003ed4 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
f0003ea6:       |            306a2503           lw      a0,774(s4)
f0003eaa:       |            4b05                       li      s6,1
f0003eac:       +----------- c119                       beqz    a0,f0003eb2 <xTaskCreate+0x1ea>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
f0003eae:       |            2eac2503           lw      a0,746(s8)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
f0003eb2:       \----------> 855a                       mv      a0,s6
f0003eb4:                    50b2                       lw      ra,44(sp)
f0003eb6:                    5422                       lw      s0,40(sp)
f0003eb8:                    5492                       lw      s1,36(sp)
f0003eba:                    5902                       lw      s2,32(sp)
f0003ebc:                    49f2                       lw      s3,28(sp)
f0003ebe:                    4a62                       lw      s4,24(sp)
f0003ec0:                    4ad2                       lw      s5,20(sp)
f0003ec2:                    4b42                       lw      s6,16(sp)
f0003ec4:                    4bb2                       lw      s7,12(sp)
f0003ec6:                    4c22                       lw      s8,8(sp)
f0003ec8:                    6145                       addi    sp,sp,48
f0003eca:                    8082                       ret
f0003ecc:                    c0001073           unimp
f0003ed0:                    c0001073           unimp

f0003ed4 <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
f0003ed4:              efffe517                 auipc   a0,0xefffe
f0003ed8:              1d052503                 lw      a0,464(a0) # e00020a4 <xSchedulerRunning>
f0003edc:       /----- c105                     beqz    a0,f0003efc <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
f0003ede:       |      efffe517                 auipc   a0,0xefffe
f0003ee2:       |      1b252583                 lw      a1,434(a0) # e0002090 <pxCurrentTCB>
f0003ee6:       |      41ec                     lw      a1,68(a1)
f0003ee8:       +----- c991                     beqz    a1,f0003efc <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
f0003eea:       |      1b252583                 lw      a1,434(a0)
f0003eee:       |      41f0                     lw      a2,68(a1)
f0003ef0:       |      167d                     addi    a2,a2,-1
f0003ef2:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
f0003ef4:       |      1b252503                 lw      a0,434(a0)
f0003ef8:       |      4168                     lw      a0,68(a0)
f0003efa:       |  /-- c511                     beqz    a0,f0003f06 <vTaskExitCritical+0x32>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
f0003efc:       \--|-> 8082                     ret
f0003efe:          |   c0001073                 unimp
f0003f02:          |   c0001073                 unimp
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
f0003f06:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
f0003f0a:              8082                     ret
f0003f0c:              c0001073                 unimp
f0003f10:              c0001073                 unimp

f0003f14 <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
f0003f14:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
f0003f16:              c606                     sw      ra,12(sp)
f0003f18:              c422                     sw      s0,8(sp)
f0003f1a:              efffe517                 auipc   a0,0xefffe
f0003f1e:              19652503                 lw      a0,406(a0) # e00020b0 <uxSchedulerSuspended>
f0003f22:          /-- c919                     beqz    a0,f0003f38 <vTaskSwitchContext+0x24>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
f0003f24:          |   efffe517                 auipc   a0,0xefffe
f0003f28:          |   4585                     li      a1,1
f0003f2a:          |   18b52823                 sw      a1,400(a0) # e00020b4 <xYieldPending>
f0003f2e:       /--|-- a885                     j       f0003f9e <vTaskSwitchContext+0x8a>
f0003f30:       |  |   c0001073                 unimp
f0003f34:       |  |   c0001073                 unimp
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
f0003f38:       |  \-> efffe517                 auipc   a0,0xefffe
f0003f3c:       |      16052e23                 sw      zero,380(a0) # e00020b4 <xYieldPending>
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
f0003f40:       |      efffe417                 auipc   s0,0xefffe
f0003f44:       |      15042503                 lw      a0,336(s0) # e0002090 <pxCurrentTCB>
f0003f48:       |      4108                     lw      a0,0(a0)
f0003f4a:       |      15042583                 lw      a1,336(s0)
f0003f4e:       |      598c                     lw      a1,48(a1)
f0003f50:       |  /-- 00a5ea63                 bltu    a1,a0,f0003f64 <vTaskSwitchContext+0x50>
f0003f54:       |  |   15042503                 lw      a0,336(s0)
f0003f58:       |  |   15042583                 lw      a1,336(s0)
f0003f5c:       |  |   03458593                 addi    a1,a1,52
f0003f60:       |  |   9cdfd0ef                 jal     ra,f000192c <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0003f64:       |  \-> efffe517                 auipc   a0,0xefffe
f0003f68:       |      13052503                 lw      a0,304(a0) # e0002094 <uxTopReadyPriority>
f0003f6c:       |      60051513                 clz     a0,a0
f0003f70:       |      01f54513                 xori    a0,a0,31
f0003f74:       |      20a54533                 sh2add  a0,a0,a0
f0003f78:       |      efffe597                 auipc   a1,0xefffe
f0003f7c:       |      1ac58593                 addi    a1,a1,428 # e0002124 <pxReadyTasksLists>
f0003f80:       |      20b545b3                 sh2add  a1,a0,a1
f0003f84:       |      41c8                     lw      a0,4(a1)
f0003f86:       |      4148                     lw      a0,4(a0)
f0003f88:       |      00858613                 addi    a2,a1,8
f0003f8c:       |      c1c8                     sw      a0,4(a1)
f0003f8e:       |  /-- 00c51563                 bne     a0,a2,f0003f98 <vTaskSwitchContext+0x84>
f0003f92:       |  |   4148                     lw      a0,4(a0)
f0003f94:       |  |   0591                     addi    a1,a1,4
f0003f96:       |  |   c188                     sw      a0,0(a1)
f0003f98:       |  \-> 4548                     lw      a0,12(a0)
f0003f9a:       |      14a42823                 sw      a0,336(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
f0003f9e:       \----> 40b2                     lw      ra,12(sp)
f0003fa0:              4422                     lw      s0,8(sp)
f0003fa2:              0141                     addi    sp,sp,16
f0003fa4:              8082                     ret
f0003fa6:              c0001073                 unimp
f0003faa:              c0001073                 unimp

f0003fae <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
f0003fae:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
f0003fb0:           c606                        sw      ra,12(sp)
f0003fb2:           00000517            auipc   a0,0x0
f0003fb6:           06250513            addi    a0,a0,98 # f0004014 <prvIdleTask>
f0003fba:           00002597            auipc   a1,0x2
f0003fbe:           f0a58593            addi    a1,a1,-246 # f0005ec4 <uxTopUsedPriority+0x4>
f0003fc2:           efffe617            auipc   a2,0xefffe
f0003fc6:           0f660793            addi    a5,a2,246 # e00020b8 <xIdleTaskHandle>
f0003fca:           10000613            li      a2,256
f0003fce:           4681                        li      a3,0
f0003fd0:           4701                        li      a4,0
f0003fd2:           cf7ff0ef            jal     ra,f0003cc8 <xTaskCreate>
f0003fd6:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
f0003fd8:       /-- 02b51363            bne     a0,a1,f0003ffe <vTaskStartScheduler+0x50>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
f0003fdc:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
f0003fe0:       |   efffe517            auipc   a0,0xefffe
f0003fe4:       |   567d                        li      a2,-1
f0003fe6:       |   0cc52e23            sw      a2,220(a0) # e00020bc <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
f0003fea:       |   efffe517            auipc   a0,0xefffe
f0003fee:       |   0ab52d23            sw      a1,186(a0) # e00020a4 <xSchedulerRunning>
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
f0003ff2:       |   efffe517            auipc   a0,0xefffe
f0003ff6:       |   0c052723            sw      zero,206(a0) # e00020c0 <xTickCount>
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
f0003ffa:       |   973fd0ef            jal     ra,f000196c <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
f0003ffe:       \-> 00002517            auipc   a0,0x2
f0004002:           ec252503            lw      a0,-318(a0) # f0005ec0 <uxTopUsedPriority>
/proc/self/cwd/external/freertos/tasks.c:2115
}
f0004006:           40b2                        lw      ra,12(sp)
f0004008:           0141                        addi    sp,sp,16
f000400a:           8082                        ret
f000400c:           c0001073            unimp
f0004010:           c0001073            unimp

f0004014 <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
f0004014:                 1101                  addi    sp,sp,-32
f0004016:                 ce06                  sw      ra,28(sp)
f0004018:                 cc22                  sw      s0,24(sp)
f000401a:                 ca26                  sw      s1,20(sp)
f000401c:                 c84a                  sw      s2,16(sp)
f000401e:                 c64e                  sw      s3,12(sp)
f0004020:                 c452                  sw      s4,8(sp)
f0004022:                 c256                  sw      s5,4(sp)
f0004024:                 efffe497              auipc   s1,0xefffe
f0004028:                 efffe917              auipc   s2,0xefffe
f000402c:                 efffe997              auipc   s3,0xefffe
f0004030:                 efffea17              auipc   s4,0xefffe
f0004034:                 efffea97              auipc   s5,0xefffe
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
f0004038:       /-------> 0784a503              lw      a0,120(s1) # e000209c <uxDeletedTasksWaitingCleanUp>
f000403c:       |  /----- c539                  beqz    a0,f000408a <prvIdleTask+0x76>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f000403e:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f0004042:       |  |      07c92503              lw      a0,124(s2) # e00020a4 <xSchedulerRunning>
f0004046:       |  |  /-- c901                  beqz    a0,f0004056 <prvIdleTask+0x42>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0004048:       |  |  |   05caa503              lw      a0,92(s5) # e0002090 <pxCurrentTCB>
f000404c:       |  |  |   416c                  lw      a1,68(a0)
f000404e:       |  |  |   0585                  addi    a1,a1,1
f0004050:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0004052:       |  |  |   05caa503              lw      a0,92(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0004056:       |  |  \-> 1689a503              lw      a0,360(s3) # e0002194 <xTasksWaitingTermination+0xc>
f000405a:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
f000405c:       |  |      00440513              addi    a0,s0,4
f0004060:       |  |      2609                  jal     f0004362 <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
f0004062:       |  |      070a2503              lw      a0,112(s4) # e00020a0 <uxCurrentNumberOfTasks>
f0004066:       |  |      157d                  addi    a0,a0,-1
f0004068:       |  |      06aa2823              sw      a0,112(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
f000406c:       |  |      0784a503              lw      a0,120(s1)
f0004070:       |  |      157d                  addi    a0,a0,-1
f0004072:       |  |      06a4ac23              sw      a0,120(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
f0004076:       |  |      3db9                  jal     f0003ed4 <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
f0004078:       |  |      5808                  lw      a0,48(s0)
f000407a:       |  |      2675                  jal     f0004426 <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
f000407c:       |  |      8522                  mv      a0,s0
f000407e:       |  |      2665                  jal     f0004426 <vPortFree>
f0004080:       +--|----- bf65                  j       f0004038 <prvIdleTask+0x24>
f0004082:       |  |      c0001073              unimp
f0004086:       |  |      c0001073              unimp
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
f000408a:       |  \----> 00000073              ecall
f000408e:       \-------- b76d                  j       f0004038 <prvIdleTask+0x24>
f0004090:                 c0001073              unimp
f0004094:                 c0001073              unimp

f0004098 <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
f0004098:       efffe517                auipc   a0,0xefffe
f000409c:       01852583                lw      a1,24(a0) # e00020b0 <uxSchedulerSuspended>
f00040a0:       0585                    addi    a1,a1,1
f00040a2:       00b52c23                sw      a1,24(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
f00040a6:       8082                    ret
f00040a8:       c0001073                unimp
f00040ac:       c0001073                unimp

f00040b0 <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
f00040b0:                    1101                       addi    sp,sp,-32
f00040b2:                    ce06                       sw      ra,28(sp)
f00040b4:                    cc22                       sw      s0,24(sp)
f00040b6:                    ca26                       sw      s1,20(sp)
f00040b8:                    c84a                       sw      s2,16(sp)
f00040ba:                    c64e                       sw      s3,12(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f00040bc:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f00040c0:                    efffe517           auipc   a0,0xefffe
f00040c4:                    fe452503           lw      a0,-28(a0) # e00020a4 <xSchedulerRunning>
f00040c8:                /-- c911                       beqz    a0,f00040dc <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f00040ca:                |   efffe517           auipc   a0,0xefffe
f00040ce:                |   fc652583           lw      a1,-58(a0) # e0002090 <pxCurrentTCB>
f00040d2:                |   41f0                       lw      a2,68(a1)
f00040d4:                |   0605                       addi    a2,a2,1
f00040d6:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f00040d8:                |   fc652503           lw      a0,-58(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
f00040dc:                \-> efffe517           auipc   a0,0xefffe
f00040e0:                    fd452583           lw      a1,-44(a0) # e00020b0 <uxSchedulerSuspended>
f00040e4:                    15fd                       addi    a1,a1,-1
f00040e6:                    fcb52a23           sw      a1,-44(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f00040ea:                    fd452503           lw      a0,-44(a0)
f00040ee:       /----------- e965                       bnez    a0,f00041de <xTaskResumeAll+0x12e>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
f00040f0:       |            efffe517           auipc   a0,0xefffe
f00040f4:       |            fb052503           lw      a0,-80(a0) # e00020a0 <uxCurrentNumberOfTasks>
f00040f8:       +----------- c17d                       beqz    a0,f00041de <xTaskResumeAll+0x12e>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f00040fa:       |            efffe517           auipc   a0,0xefffe
f00040fe:       |            0b650513           addi    a0,a0,182 # e00021b0 <xPendingReadyList>
f0004102:       |            410c                       lw      a1,0(a0)
f0004104:       |            efffe997           auipc   s3,0xefffe
f0004108:       |  /-------- cddd                       beqz    a1,f00041c6 <xTaskResumeAll+0x116>
f000410a:       |  |         efffe597           auipc   a1,0xefffe
f000410e:       |  |         efffe617           auipc   a2,0xefffe
f0004112:       |  |         01660893           addi    a7,a2,22 # e0002124 <pxReadyTasksLists>
f0004116:       |  |         efffe297           auipc   t0,0xefffe
f000411a:       |  |         4805                       li      a6,1
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f000411c:       |  |  /----> 4558                       lw      a4,12(a0)
f000411e:       |  |  |      4758                       lw      a4,12(a4)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0004120:       |  |  |      5304                       lw      s1,32(a4)
f0004122:       |  |  |      4f40                       lw      s0,28(a4)
f0004124:       |  |  |      5710                       lw      a2,40(a4)
f0004126:       |  |  |      c404                       sw      s1,8(s0)
f0004128:       |  |  |      5304                       lw      s1,32(a4)
f000412a:       |  |  |      c0c0                       sw      s0,4(s1)
f000412c:       |  |  |      4240                       lw      s0,4(a2)
f000412e:       |  |  |      01870793           addi    a5,a4,24
f0004132:       |  |  |  /-- 00f41363           bne     s0,a5,f0004138 <xTaskResumeAll+0x88>
f0004136:       |  |  |  |   c244                       sw      s1,4(a2)
f0004138:       |  |  |  \-> 02072423           sw      zero,40(a4)
f000413c:       |  |  |      421c                       lw      a5,0(a2)
f000413e:       |  |  |      17fd                       addi    a5,a5,-1
f0004140:       |  |  |      c21c                       sw      a5,0(a2)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0004142:       |  |  |      4750                       lw      a2,12(a4)
f0004144:       |  |  |      471c                       lw      a5,8(a4)
f0004146:       |  |  |      4b44                       lw      s1,20(a4)
f0004148:       |  |  |      c790                       sw      a2,8(a5)
f000414a:       |  |  |      4740                       lw      s0,12(a4)
f000414c:       |  |  |      c05c                       sw      a5,4(s0)
f000414e:       |  |  |      40d0                       lw      a2,4(s1)
f0004150:       |  |  |      00470793           addi    a5,a4,4
f0004154:       |  |  |  /-- 00f61363           bne     a2,a5,f000415a <xTaskResumeAll+0xaa>
f0004158:       |  |  |  |   c0c0                       sw      s0,4(s1)
f000415a:       |  |  |  \-> 4090                       lw      a2,0(s1)
f000415c:       |  |  |      167d                       addi    a2,a2,-1
f000415e:       |  |  |      c090                       sw      a2,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
f0004160:       |  |  |      5750                       lw      a2,44(a4)
f0004162:       |  |  |      f8a5a483           lw      s1,-118(a1) # e0002094 <uxTopReadyPriority>
f0004166:       |  |  |      28c494b3           bset    s1,s1,a2
f000416a:       |  |  |      f895a523           sw      s1,-118(a1)
f000416e:       |  |  |      20c644b3           sh2add  s1,a2,a2
f0004172:       |  |  |      2114c4b3           sh2add  s1,s1,a7
f0004176:       |  |  |      40c0                       lw      s0,4(s1)
f0004178:       |  |  |      c700                       sw      s0,8(a4)
f000417a:       |  |  |      4414                       lw      a3,8(s0)
f000417c:       |  |  |      c754                       sw      a3,12(a4)
f000417e:       |  |  |      4414                       lw      a3,8(s0)
f0004180:       |  |  |      c2dc                       sw      a5,4(a3)
f0004182:       |  |  |      c41c                       sw      a5,8(s0)
f0004184:       |  |  |      cb44                       sw      s1,20(a4)
f0004186:       |  |  |      4094                       lw      a3,0(s1)
f0004188:       |  |  |      0685                       addi    a3,a3,1
f000418a:       |  |  |      c094                       sw      a3,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
f000418c:       |  |  |      f7a2a683           lw      a3,-134(t0) # e0002090 <pxCurrentTCB>
f0004190:       |  |  |      56d4                       lw      a3,44(a3)
f0004192:       |  |  |  /-- 00d66463           bltu    a2,a3,f000419a <xTaskResumeAll+0xea>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
f0004196:       |  |  |  |   fb09a823           sw      a6,-80(s3) # e00020b4 <xYieldPending>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f000419a:       |  |  |  \-> 4110                       lw      a2,0(a0)
f000419c:       |  |  \----- f241                       bnez    a2,f000411c <xTaskResumeAll+0x6c>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f000419e:       |  |         efffe517           auipc   a0,0xefffe
f00041a2:       |  |         f0a52583           lw      a1,-246(a0) # e00020a8 <pxDelayedTaskList>
f00041a6:       |  |         418c                       lw      a1,0(a1)
f00041a8:       |  |  /----- c991                       beqz    a1,f00041bc <xTaskResumeAll+0x10c>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f00041aa:       |  |  |      f0a52503           lw      a0,-246(a0)
f00041ae:       |  |  |      4548                       lw      a0,12(a0)
f00041b0:       |  |  |      4108                       lw      a0,0(a0)
f00041b2:       |  |  |  /-- a031                       j       f00041be <xTaskResumeAll+0x10e>
f00041b4:       |  |  |  |   c0001073           unimp
f00041b8:       |  |  |  |   c0001073           unimp
f00041bc:       |  |  \--|-> 557d                       li      a0,-1
f00041be:       |  |     \-> efffe597           auipc   a1,0xefffe
f00041c2:       |  |         eea5af23           sw      a0,-258(a1) # e00020bc <xNextTaskUnblockTime>
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
f00041c6:       |  \-------> efffe917           auipc   s2,0xefffe
f00041ca:       |            efe92483           lw      s1,-258(s2) # e00020c4 <xPendedTicks>
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
f00041ce:       |     /----- c491                       beqz    s1,f00041da <xTaskResumeAll+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
f00041d0:       |     |  /-> 202d                       jal     f00041fa <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
f00041d2:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
f00041d4:       |     |  \-- fcf5                       bnez    s1,f00041d0 <xTaskResumeAll+0x120>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
f00041d6:       |     |      ee092f23           sw      zero,-258(s2)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
f00041da:       |     \----> fb09a503           lw      a0,-80(s3)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
f00041de:       \----------> cf7ff0ef           jal     ra,f0003ed4 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
f00041e2:                    4501                       li      a0,0
f00041e4:                    40f2                       lw      ra,28(sp)
f00041e6:                    4462                       lw      s0,24(sp)
f00041e8:                    44d2                       lw      s1,20(sp)
f00041ea:                    4942                       lw      s2,16(sp)
f00041ec:                    49b2                       lw      s3,12(sp)
f00041ee:                    6105                       addi    sp,sp,32
f00041f0:                    8082                       ret
f00041f2:                    c0001073           unimp
f00041f6:                    c0001073           unimp

f00041fa <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f00041fa:                          efffe517             auipc   a0,0xefffe
f00041fe:                          eb652503             lw      a0,-330(a0) # e00020b0 <uxSchedulerSuspended>
f0004202:                      /-- cd09                 beqz    a0,f000421c <xTaskIncrementTick+0x22>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
f0004204:                      |   efffe517             auipc   a0,0xefffe
f0004208:                      |   ec052583             lw      a1,-320(a0) # e00020c4 <xPendedTicks>
f000420c:                      |   0585                 addi    a1,a1,1
f000420e:                      |   ecb52023             sw      a1,-320(a0)
f0004212:       /--------------|-- aa29                 j       f000432c <xTaskIncrementTick+0x132>
f0004214:       |              |   c0001073             unimp
f0004218:       |              |   c0001073             unimp
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
f000421c:       |              \-> efffe517             auipc   a0,0xefffe
f0004220:       |                  ea452283             lw      t0,-348(a0) # e00020c0 <xTickCount>
f0004224:       |                  0285                 addi    t0,t0,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
f0004226:       |                  ea552223             sw      t0,-348(a0)
f000422a:       |                  efffe317             auipc   t1,0xefffe
f000422e:       |                  efffe817             auipc   a6,0xefffe
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
f0004232:       |        /-------- 04029363             bnez    t0,f0004278 <xTaskIncrementTick+0x7e>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
f0004236:       |        |         e7e32503             lw      a0,-386(t1) # e00020a8 <pxDelayedTaskList>
f000423a:       |        |         efffe597             auipc   a1,0xefffe
f000423e:       |        |         e725a683             lw      a3,-398(a1) # e00020ac <pxOverflowDelayedTaskList>
f0004242:       |        |         e6d32f23             sw      a3,-386(t1)
f0004246:       |        |         e6a5a923             sw      a0,-398(a1)
f000424a:       |        |         efffe517             auipc   a0,0xefffe
f000424e:       |        |         e7e52583             lw      a1,-386(a0) # e00020c8 <xNumOfOverflows>
f0004252:       |        |         0585                 addi    a1,a1,1
f0004254:       |        |         e6b52f23             sw      a1,-386(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0004258:       |        |         e7e32503             lw      a0,-386(t1)
f000425c:       |        |         4108                 lw      a0,0(a0)
f000425e:       |        |  /----- c911                 beqz    a0,f0004272 <xTaskIncrementTick+0x78>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0004260:       |        |  |      e7e32503             lw      a0,-386(t1)
f0004264:       |        |  |      4548                 lw      a0,12(a0)
f0004266:       |        |  |      4108                 lw      a0,0(a0)
f0004268:       |        |  |  /-- a031                 j       f0004274 <xTaskIncrementTick+0x7a>
f000426a:       |        |  |  |   c0001073             unimp
f000426e:       |        |  |  |   c0001073             unimp
f0004272:       |        |  \--|-> 557d                 li      a0,-1
f0004274:       |        |     \-> e8a82723             sw      a0,-370(a6) # e00020bc <xNextTaskUnblockTime>
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
f0004278:       |        \-------> e8e82503             lw      a0,-370(a6)
f000427c:       +----------------- 0aa2e863             bltu    t0,a0,f000432c <xTaskIncrementTick+0x132>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0004280:       |                  e7e32503             lw      a0,-386(t1)
f0004284:       |                  4108                 lw      a0,0(a0)
f0004286:       |  /-------------- c949                 beqz    a0,f0004318 <xTaskIncrementTick+0x11e>
f0004288:       |  |               efffe397             auipc   t2,0xefffe
f000428c:       |  |               efffe517             auipc   a0,0xefffe
f0004290:       |  |               e9850893             addi    a7,a0,-360 # e0002124 <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0004294:       |  |     /-------> e7e32503             lw      a0,-386(t1)
f0004298:       |  |     |         4548                 lw      a0,12(a0)
f000429a:       |  |     |         4548                 lw      a0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
f000429c:       |  |     |         414c                 lw      a1,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
f000429e:       |  |  /--|-------- 08b2e563             bltu    t0,a1,f0004328 <xTaskIncrementTick+0x12e>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f00042a2:       |  |  |  |         454c                 lw      a1,12(a0)
f00042a4:       |  |  |  |         4510                 lw      a2,8(a0)
f00042a6:       |  |  |  |         4958                 lw      a4,20(a0)
f00042a8:       |  |  |  |         c60c                 sw      a1,8(a2)
f00042aa:       |  |  |  |         454c                 lw      a1,12(a0)
f00042ac:       |  |  |  |         c1d0                 sw      a2,4(a1)
f00042ae:       |  |  |  |         4350                 lw      a2,4(a4)
f00042b0:       |  |  |  |         00450693             addi    a3,a0,4
f00042b4:       |  |  |  |     /-- 00d61363             bne     a2,a3,f00042ba <xTaskIncrementTick+0xc0>
f00042b8:       |  |  |  |     |   c34c                 sw      a1,4(a4)
f00042ba:       |  |  |  |     \-> 430c                 lw      a1,0(a4)
f00042bc:       |  |  |  |         15fd                 addi    a1,a1,-1
f00042be:       |  |  |  |         c30c                 sw      a1,0(a4)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f00042c0:       |  |  |  |         5518                 lw      a4,40(a0)
f00042c2:       |  |  |  |  /----- c30d                 beqz    a4,f00042e4 <xTaskIncrementTick+0xea>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00042c4:       |  |  |  |  |      510c                 lw      a1,32(a0)
f00042c6:       |  |  |  |  |      4d50                 lw      a2,28(a0)
f00042c8:       |  |  |  |  |      c60c                 sw      a1,8(a2)
f00042ca:       |  |  |  |  |      510c                 lw      a1,32(a0)
f00042cc:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
f00042ce:       |  |  |  |  |      4350                 lw      a2,4(a4)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f00042d0:       |  |  |  |  |      01850793             addi    a5,a0,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00042d4:       |  |  |  |  |  /-- 00f61363             bne     a2,a5,f00042da <xTaskIncrementTick+0xe0>
f00042d8:       |  |  |  |  |  |   c34c                 sw      a1,4(a4)
f00042da:       |  |  |  |  |  \-> 02052423             sw      zero,40(a0)
f00042de:       |  |  |  |  |      430c                 lw      a1,0(a4)
f00042e0:       |  |  |  |  |      15fd                 addi    a1,a1,-1
f00042e2:       |  |  |  |  |      c30c                 sw      a1,0(a4)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
f00042e4:       |  |  |  |  \----> 554c                 lw      a1,44(a0)
f00042e6:       |  |  |  |         e0c3a603             lw      a2,-500(t2) # e0002094 <uxTopReadyPriority>
f00042ea:       |  |  |  |         28b61633             bset    a2,a2,a1
f00042ee:       |  |  |  |         e0c3a623             sw      a2,-500(t2)
f00042f2:       |  |  |  |         20b5c5b3             sh2add  a1,a1,a1
f00042f6:       |  |  |  |         2115c5b3             sh2add  a1,a1,a7
f00042fa:       |  |  |  |         41d0                 lw      a2,4(a1)
f00042fc:       |  |  |  |         c510                 sw      a2,8(a0)
f00042fe:       |  |  |  |         4618                 lw      a4,8(a2)
f0004300:       |  |  |  |         c558                 sw      a4,12(a0)
f0004302:       |  |  |  |         4618                 lw      a4,8(a2)
f0004304:       |  |  |  |         c354                 sw      a3,4(a4)
f0004306:       |  |  |  |         c614                 sw      a3,8(a2)
f0004308:       |  |  |  |         c94c                 sw      a1,20(a0)
f000430a:       |  |  |  |         4188                 lw      a0,0(a1)
f000430c:       |  |  |  |         0505                 addi    a0,a0,1
f000430e:       |  |  |  |         c188                 sw      a0,0(a1)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0004310:       |  |  |  |         e7e32503             lw      a0,-386(t1)
f0004314:       |  |  |  |         4108                 lw      a0,0(a0)
f0004316:       |  |  |  \-------- fd3d                 bnez    a0,f0004294 <xTaskIncrementTick+0x9a>
f0004318:       |  \--|----------> 557d                 li      a0,-1
/proc/self/cwd/external/freertos/tasks.c:2774
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f000431a:       |     |            e8a82723             sw      a0,-370(a6)
f000431e:       +-----|----------- a039                 j       f000432c <xTaskIncrementTick+0x132>
f0004320:       |     |            c0001073             unimp
f0004324:       |     |            c0001073             unimp
/proc/self/cwd/external/freertos/tasks.c:2793
                        xNextTaskUnblockTime = xItemValue;
f0004328:       |     \----------> e8b82723             sw      a1,-370(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
f000432c:       \----------------> 4501                 li      a0,0
f000432e:                          8082                 ret
f0004330:                          c0001073             unimp
f0004334:                          c0001073             unimp

f0004338 <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0004338:       00850593                addi    a1,a0,8
f000433c:       c14c                    sw      a1,4(a0)
f000433e:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
f0004340:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0004342:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0004344:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
f0004346:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
f000434a:       8082                    ret
f000434c:       c0001073                unimp
f0004350:       c0001073                unimp

f0004354 <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
f0004354:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
f0004358:       8082                    ret
f000435a:       c0001073                unimp
f000435e:       c0001073                unimp

f0004362 <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0004362:           4510                        lw      a2,8(a0)
f0004364:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
f0004366:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0004368:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
f000436a:           4510                        lw      a2,8(a0)
f000436c:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
f000436e:           41d4                        lw      a3,4(a1)
f0004370:       /-- 00a69363            bne     a3,a0,f0004376 <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
f0004374:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
f0004376:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
f000437a:           4188                        lw      a0,0(a1)
f000437c:           157d                        addi    a0,a0,-1
f000437e:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
f0004380:           4188                        lw      a0,0(a1)
f0004382:           8082                        ret
f0004384:           c0001073            unimp
f0004388:           c0001073            unimp

f000438c <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
f000438c:                 1141                  addi    sp,sp,-16
f000438e:                 c606                  sw      ra,12(sp)
f0004390:                 c422                  sw      s0,8(sp)
f0004392:                 c226                  sw      s1,4(sp)
f0004394:                 c04a                  sw      s2,0(sp)
f0004396:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
f0004398:                 893d                  andi    a0,a0,15
f000439a:             /-- c909                  beqz    a0,f00043ac <pvPortMalloc+0x20>
f000439c:             |   ff047513              andi    a0,s0,-16
f00043a0:             |   0541                  addi    a0,a0,16
f00043a2:             |   00a435b3              sltu    a1,s0,a0
f00043a6:             |   40b00433              neg     s0,a1
f00043aa:             |   8c69                  and     s0,s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
f00043ac:             \-> cedff0ef              jal     ra,f0004098 <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
f00043b0:                 efffe517              auipc   a0,0xefffe
f00043b4:                 d1c52483              lw      s1,-740(a0) # e00020cc <pvPortMalloc.pucAlignedHeap>
f00043b8:             /-- c499                  beqz    s1,f00043c6 <pvPortMalloc+0x3a>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
f00043ba:          /--|-- ec11                  bnez    s0,f00043d6 <pvPortMalloc+0x4a>
f00043bc:       /--|--|-- a0b1                  j       f0004408 <pvPortMalloc+0x7c>
f00043be:       |  |  |   c0001073              unimp
f00043c2:       |  |  |   c0001073              unimp
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
f00043c6:       |  |  \-> efffe597              auipc   a1,0xefffe
f00043ca:       |  |      e3658493              addi    s1,a1,-458 # e00021fc <ucHeap+0x10>
f00043ce:       |  |      98c1                  andi    s1,s1,-16
f00043d0:       |  |      d0952e23              sw      s1,-740(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
f00043d4:       +--|----- c815                  beqz    s0,f0004408 <pvPortMalloc+0x7c>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
f00043d6:       |  \----> efffe517              auipc   a0,0xefffe
f00043da:       |         cfa52903              lw      s2,-774(a0) # e00020d0 <xNextFreeByte>
f00043de:       |         944a                  add     s0,s0,s2
f00043e0:       |         00445593              srli    a1,s0,0x4
f00043e4:       |         7ff5b593              sltiu   a1,a1,2047
f00043e8:       |         00893633              sltu    a2,s2,s0
f00043ec:       |         8df1                  and     a1,a1,a2
f00043ee:       +-------- cd89                  beqz    a1,f0004408 <pvPortMalloc+0x7c>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
f00043f0:       |         ce852d23              sw      s0,-774(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
f00043f4:       |         cbdff0ef              jal     ra,f00040b0 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
f00043f8:       |     /-- c891                  beqz    s1,f000440c <pvPortMalloc+0x80>
f00043fa:       |     |   01248533              add     a0,s1,s2
f00043fe:       |  /--|-- a811                  j       f0004412 <pvPortMalloc+0x86>
f0004400:       |  |  |   c0001073              unimp
f0004404:       |  |  |   c0001073              unimp
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
f0004408:       \--|--|-> ca9ff0ef              jal     ra,f00040b0 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
f000440c:          |  \-> cd4fd0ef              jal     ra,f00018e0 <vApplicationMallocFailedHook>
f0004410:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
f0004412:          \----> 40b2                  lw      ra,12(sp)
f0004414:                 4422                  lw      s0,8(sp)
f0004416:                 4492                  lw      s1,4(sp)
f0004418:                 4902                  lw      s2,0(sp)
f000441a:                 0141                  addi    sp,sp,16
f000441c:                 8082                  ret
f000441e:                 c0001073              unimp
f0004422:                 c0001073              unimp

f0004426 <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
f0004426:       8082                    ret
f0004428:       c0001073                unimp
f000442c:       c0001073                unimp

f0004430 <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
f0004430:       4505                    li      a0,1
f0004432:       8082                    ret
f0004434:       c0001073                unimp
f0004438:       c0001073                unimp

f000443c <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
f000443c:       4505                    li      a0,1
f000443e:       8082                    ret
f0004440:       c0001073                unimp
f0004444:       c0001073                unimp
