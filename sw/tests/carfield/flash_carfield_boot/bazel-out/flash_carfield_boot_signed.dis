
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot_prog_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot_prog_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xf0000480

Program Header:
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x00001fc4 flags rw-
    LOAD off    0x00001000 vaddr 0xf0000000 paddr 0xf0000000 align 2**12
         filesz 0x000033ec memsz 0x000033ec flags rwx
    LOAD off    0x00004fc4 vaddr 0xe0001fc4 paddr 0xf00033ec align 2**12
         filesz 0x00000084 memsz 0x000001c0 flags rw-
    LOAD off    0x00000184 vaddr 0xe0002184 paddr 0xf0003470 align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0xf0039000 paddr 0xf0039000 align 2**12
         filesz 0x00000000 memsz 0x00007000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                    Size      VMA       LMA       File off  Algn  Flags
  0 .manifest               00000400  f0000000  f0000000  00001000  2**3  CONTENTS, ALLOC, LOAD, DATA
  1 .vectors                00000080  f0000400  f0000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .crt                    000000c6  f0000480  f0000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array             00000000  f0000548  f0000548  00005048  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .text                   0000207c  f0000548  f0000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .shutdown               00000000  f00025c4  f00025c4  00005048  2**2  CONTENTS
  6 .rodata                 00000e24  f00025c8  f00025c8  000035c8  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .static_critical        00001fc4  e0000000  e0000000  00001000  2**2  ALLOC
  8 .data                   00000084  e0001fc4  f00033ec  00004fc4  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss                    0000013c  e0002048  f0003470  00005048  2**2  ALLOC
 10 .freertos.heap          00008000  e0002184  f0003470  00005184  2**2  ALLOC
 11 .non_volatile_scratch   00005000  f003b000  f003b000  00006000  2**11  ALLOC
 12 .non_volatile_counter_0 00000800  f003a800  f003a800  00006000  2**11  ALLOC
 13 .non_volatile_counter_1 00000800  f003a000  f003a000  00006000  2**11  ALLOC
 14 .non_volatile_counter_2 00000800  f0039800  f0039800  00006000  2**11  ALLOC
 15 .non_volatile_counter_3 00000800  f0039000  f0039000  00006000  2**11  ALLOC
 16 .logs.fields            00000154  00010000  00010000  00005048  2**2  CONTENTS, READONLY
 17 .riscv.attributes       00000026  00000000  00000000  0000519c  2**0  CONTENTS, READONLY
 18 .debug_info             0000b695  00000000  00000000  000051c2  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev           00002bf5  00000000  00000000  00010857  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges          00000088  00000000  00000000  0001344c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line             000086f2  00000000  00000000  000134d4  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc              00006b78  00000000  00000000  0001bbc6  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges           00000ae0  00000000  00000000  0002273e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str              00006ad3  00000000  00000000  0002321e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame            00001160  00000000  00000000  00029cf4  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
f0000000 l    d  .manifest      00000000 .manifest
f0000400 l    d  .vectors       00000000 .vectors
f0000480 l    d  .crt   00000000 .crt
f0000548 l    d  .init_array    00000000 .init_array
f0000548 l    d  .text  00000000 .text
f00025c4 l    d  .shutdown      00000000 .shutdown
f00025c8 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc4 l    d  .data  00000000 .data
e0002048 l    d  .bss   00000000 .bss
e0002184 l    d  .freertos.heap 00000000 .freertos.heap
f003b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
f003a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
f003a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
f0039800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
f0039000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
00010000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    df *ABS*  00000000 manifest_def.c
f0000000 l     O .manifest      00000380 kManifest_
00000000 l       .debug_str     00000000 
00003f3c l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00003f69 l       .debug_str     00000000 
0000411b l       .debug_str     00000000 
00004112 l       .debug_str     00000000 
00003f74 l       .debug_str     00000000 
00004022 l       .debug_str     00000000 
00004051 l       .debug_str     00000000 
00004059 l       .debug_str     00000000 
0000406d l       .debug_str     00000000 
00004078 l       .debug_str     00000000 
0000407f l       .debug_str     00000000 
0000408d l       .debug_str     00000000 
0000409b l       .debug_str     00000000 
000040ac l       .debug_str     00000000 
000040bd l       .debug_str     00000000 
000040e2 l       .debug_str     00000000 
000040f2 l       .debug_str     00000000 
000040fd l       .debug_str     00000000 
00004106 l       .debug_str     00000000 
00003f93 l       .debug_str     00000000 
00003f7e l       .debug_str     00000000 
000051a9 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00004034 l       .debug_str     00000000 
00004019 l       .debug_str     00000000 
00003faa l       .debug_str     00000000 
00003fc2 l       .debug_str     00000000 
00003fe2 l       .debug_str     00000000 
00003ff6 l       .debug_str     00000000 
00004008 l       .debug_str     00000000 
00003fcc l       .debug_str     00000000 
00003fb8 l       .debug_str     00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
000040cb l       .debug_str     00000000 
000040b6 l       .debug_str     00000000 
00004126 l       .debug_str     00000000 
00000414 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
f0000400 l       .vectors       00000000 
f0000400 l       .vectors       00000000 
f0000480 l       .crt   00000000 
f0000480 l       .crt   00000000 
f00004e4 l       .crt   00000000 init_array_loop_end
f00004d8 l       .crt   00000000 init_array_loop
f00004d8 l       .crt   00000000 
f00004e4 l       .crt   00000000 
000030b4 l       .debug_info    00000000 
00000ca9 l       .debug_abbrev  00000000 
f0000480 l       .vectors       00000000 
f00004e8 l       .crt   00000000 
00000168 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
f00004e8 l       .crt   00000000 
f00004e8 l       .crt   00000000 
f000050a l       .crt   00000000 
f000050c l       .crt   00000000 
f000050c l       .crt   00000000 
000035fa l       .debug_info    00000000 
00000d9f l       .debug_abbrev  00000000 
f0000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
f0000548 l       .text  00000000 
f0000548 l       .text  00000000 
f0000598 l       .text  00000000 
f000059c l       .text  00000000 
f000059c l       .text  00000000 
0000263e l       .debug_info    00000000 
00000963 l       .debug_abbrev  00000000 
f00005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
f00005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
f00005c0 l       .text  00000000 
f00005c0 l       .text  00000000 
f00005e4 l       .text  00000000 
f00005e8 l     F .text  0000001e save_current_sp_to_tcb
f00005e8 l       .text  00000000 
f00005e8 l       .text  00000000 
f0000604 l       .text  00000000 
f0000608 l       .text  00000000 
f0000608 l       .text  00000000 
f000064a l       .text  00000000 
f000064c l       .text  00000000 
f000064e l       .text  00000000 
f0000650 l       .text  00000000 
f0000654 l       .text  00000000 
f0000658 l       .text  00000000 
f0000658 l       .text  00000000 
f00006a0 l       .text  00000000 
f00006a2 l       .text  00000000 
f00006a6 l       .text  00000000 
f00006ac l       .text  00000000 
f00006ac l       .text  00000000 
f00006f4 l       .text  00000000 
f00006f6 l       .text  00000000 
f00006fa l       .text  00000000 
f0000700 l       .text  00000000 
f0000700 l       .text  00000000 
f0000748 l       .text  00000000 
f000074a l       .text  00000000 
f000074e l       .text  00000000 
f0000754 l       .text  00000000 
f0000754 l       .text  00000000 
f000079c l       .text  00000000 
f000079e l       .text  00000000 
f00007a2 l       .text  00000000 
f00007a8 l       .text  00000000 
f00007a8 l       .text  00000000 
000031f9 l       .debug_info    00000000 
00000cc8 l       .debug_abbrev  00000000 
f0000810 l       .text  00000000 
00000000 l    df *ABS*  00000000 flash_carfield_boot.c
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f0000814 l       .text  00000000 
f0000818 l       .text  00000000 
f0000818 l       .text  00000000 
f000081a l       .text  00000000 
f000081a l       .text  00000000 
f0000824 l       .text  00000000 
f0000826 l       .text  00000000 
f0000826 l       .text  00000000 
f0000830 l       .text  00000000 
f0000830 l       .text  00000000 
f0000834 l       .text  00000000 
f0000838 l       .text  00000000 
f0000838 l       .text  00000000 
f000083c l       .text  00000000 
f000083c l       .text  00000000 
f000083e l       .text  00000000 
f0000842 l       .text  00000000 
f0000844 l       .text  00000000 
f0000844 l       .text  00000000 
00000000 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000000bf l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
000000cf l       .debug_str     00000000 
000000e8 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00000536 l       .debug_str     00000000 
00000122 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000139 l       .debug_str     00000000 
0000015a l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
0000018c l       .debug_str     00000000 
000001a1 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
000001d9 l       .debug_str     00000000 
000001ed l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000216 l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
00000257 l       .debug_str     00000000 
00000267 l       .debug_str     00000000 
0000027a l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002e1 l       .debug_str     00000000 
000002fd l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
0000035a l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
0000038c l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003dd l       .debug_str     00000000 
000003fb l       .debug_str     00000000 
00000415 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
0000044a l       .debug_str     00000000 
00000468 l       .debug_str     00000000 
00000484 l       .debug_str     00000000 
000004a0 l       .debug_str     00000000 
000004bc l       .debug_str     00000000 
000004d3 l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
00000502 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
00000571 l       .debug_str     00000000 
0000057b l       .debug_str     00000000 
00000540 l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
000033e5 l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
f0000844 l       .text  00000000 
00000000 l    df *ABS*  00000000 rom_print.c
f0000844 l       .text  00000000 
f0000844 l       .text  00000000 
f0000844 l       .text  00000000 
f0000846 l       .text  00000000 
f0000858 l       .text  00000000 
f000085a l       .text  00000000 
f000086a l       .text  00000000 
f000086a l       .text  00000000 
f000087c l       .text  00000000 
f0002624 l     O .rodata        00000010 rom_printf.kHexTable
f000087c l       .text  00000000 
f0000888 l       .text  00000000 
f0000888 l       .text  00000000 
f000088c l       .text  00000000 
f0000892 l       .text  00000000 
f0000894 l       .text  00000000 
f0000896 l       .text  00000000 
f0000896 l       .text  00000000 
f0000898 l       .text  00000000 
f0000898 l       .text  00000000 
f000089c l       .text  00000000 
f00008a0 l       .text  00000000 
f00008a0 l       .text  00000000 
f00008a8 l       .text  00000000 
f00008a8 l       .text  00000000 
f00008aa l       .text  00000000 
f00008ae l       .text  00000000 
f00008b2 l       .text  00000000 
f00008b2 l       .text  00000000 
f00008b8 l       .text  00000000 
f00008ba l       .text  00000000 
f00008ba l       .text  00000000 
f00008be l       .text  00000000 
f00008be l       .text  00000000 
f00008c4 l       .text  00000000 
f00008c4 l       .text  00000000 
f00008c8 l       .text  00000000 
f00008ce l       .text  00000000 
f00008ce l       .text  00000000 
f00008d0 l       .text  00000000 
f00008d4 l       .text  00000000 
f00008d8 l       .text  00000000 
f00008d8 l       .text  00000000 
f00008da l       .text  00000000 
f00008da l       .text  00000000 
f00008de l       .text  00000000 
f00008e4 l       .text  00000000 
f00008e6 l       .text  00000000 
f00008e6 l       .text  00000000 
f00008e8 l       .text  00000000 
f00008e8 l       .text  00000000 
f00008ea l       .text  00000000 
f00008ea l       .text  00000000 
f00008ec l       .text  00000000 
f00008ec l       .text  00000000 
f00008ee l       .text  00000000 
f00008f4 l       .text  00000000 
f00008f4 l       .text  00000000 
f000090c l       .text  00000000 
f000090c l       .text  00000000 
0000001f l       .debug_loc     00000000 
0000006b l       .debug_loc     00000000 
000000ab l       .debug_loc     00000000 
000000be l       .debug_loc     00000000 
000000d1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000583 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
0000055a l       .debug_str     00000000 
000005ad l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
00002fd7 l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
000005ff l       .debug_str     00000000 
000032d1 l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
00000603 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00000536 l       .debug_str     00000000 
00000122 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000139 l       .debug_str     00000000 
0000015a l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
0000018c l       .debug_str     00000000 
000001a1 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
000001d9 l       .debug_str     00000000 
000001ed l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000216 l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
00000257 l       .debug_str     00000000 
00000267 l       .debug_str     00000000 
0000027a l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002e1 l       .debug_str     00000000 
000002fd l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
0000035a l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
0000038c l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003dd l       .debug_str     00000000 
000003fb l       .debug_str     00000000 
00000415 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
0000044a l       .debug_str     00000000 
00000468 l       .debug_str     00000000 
00000484 l       .debug_str     00000000 
000004a0 l       .debug_str     00000000 
000004bc l       .debug_str     00000000 
000004d3 l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
00000502 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005cb l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
000005f7 l       .debug_str     00000000 
000005ed l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
0000002c l       .debug_frame   00000000 
f000090c l       .text  00000000 
00000000 l    df *ABS*  00000000 pinmux.c
f000090c l       .text  00000000 
f000090c l       .text  00000000 
f000090c l       .text  00000000 
f000090e l       .text  00000000 
f000090e l       .text  00000000 
f0000910 l       .text  00000000 
f0000916 l       .text  00000000 
f0000916 l       .text  00000000 
f0000918 l       .text  00000000 
f0000918 l       .text  00000000 
f000091c l       .text  00000000 
f000091c l       .text  00000000 
f0000920 l       .text  00000000 
f0000920 l       .text  00000000 
f0000930 l       .text  00000000 
f0000930 l       .text  00000000 
f0000932 l       .text  00000000 
f0000932 l       .text  00000000 
f0000936 l       .text  00000000 
f0000936 l       .text  00000000 
f000093a l       .text  00000000 
f000093a l       .text  00000000 
f0000940 l       .text  00000000 
f0000940 l       .text  00000000 
f0000946 l       .text  00000000 
f0000946 l       .text  00000000 
f0000950 l       .text  00000000 
f0000950 l       .text  00000000 
f0000952 l       .text  00000000 
f0000952 l       .text  00000000 
f0000958 l       .text  00000000 
f0000958 l       .text  00000000 
f0000960 l       .text  00000000 
f0000960 l       .text  00000000 
f0000964 l       .text  00000000 
f0000964 l       .text  00000000 
f000096a l       .text  00000000 
f000096a l       .text  00000000 
00000102 l       .debug_loc     00000000 
00000120 l       .debug_loc     00000000 
00000133 l       .debug_loc     00000000 
0000014d l       .debug_loc     00000000 
00000167 l       .debug_loc     00000000 
00000181 l       .debug_loc     00000000 
0000019c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000609 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000638 l       .debug_str     00000000 
00001aee l       .debug_str     00000000 
00001ae1 l       .debug_str     00000000 
00000647 l       .debug_str     00000000 
0000159f l       .debug_str     00000000 
000015c1 l       .debug_str     00000000 
00000fd6 l       .debug_str     00000000 
00000fb4 l       .debug_str     00000000 
0000064e l       .debug_str     00000000 
00000676 l       .debug_str     00000000 
0000069e l       .debug_str     00000000 
000006c6 l       .debug_str     00000000 
000006ee l       .debug_str     00000000 
00000716 l       .debug_str     00000000 
0000073e l       .debug_str     00000000 
00000766 l       .debug_str     00000000 
0000078e l       .debug_str     00000000 
000007b6 l       .debug_str     00000000 
000007de l       .debug_str     00000000 
00000807 l       .debug_str     00000000 
00000830 l       .debug_str     00000000 
00000859 l       .debug_str     00000000 
00000882 l       .debug_str     00000000 
000008ab l       .debug_str     00000000 
000008d4 l       .debug_str     00000000 
000008fd l       .debug_str     00000000 
00000926 l       .debug_str     00000000 
0000094f l       .debug_str     00000000 
00000978 l       .debug_str     00000000 
000009a1 l       .debug_str     00000000 
000009ca l       .debug_str     00000000 
000009f3 l       .debug_str     00000000 
00000a1c l       .debug_str     00000000 
00000a45 l       .debug_str     00000000 
00000a6e l       .debug_str     00000000 
00000a97 l       .debug_str     00000000 
00000ac0 l       .debug_str     00000000 
00000ae9 l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
00000b3b l       .debug_str     00000000 
00000b64 l       .debug_str     00000000 
00000b8a l       .debug_str     00000000 
00000bb0 l       .debug_str     00000000 
00000bd6 l       .debug_str     00000000 
00000bfc l       .debug_str     00000000 
00000c22 l       .debug_str     00000000 
00000c48 l       .debug_str     00000000 
00000c72 l       .debug_str     00000000 
00000c9c l       .debug_str     00000000 
00000cc6 l       .debug_str     00000000 
00000cf0 l       .debug_str     00000000 
00000d16 l       .debug_str     00000000 
00000d3c l       .debug_str     00000000 
00000d62 l       .debug_str     00000000 
00000d88 l       .debug_str     00000000 
00000db6 l       .debug_str     00000000 
00000de1 l       .debug_str     00000000 
00000e0c l       .debug_str     00000000 
00000e37 l       .debug_str     00000000 
00000e6c l       .debug_str     00000000 
00000e9e l       .debug_str     00000000 
00000ed0 l       .debug_str     00000000 
00000f02 l       .debug_str     00000000 
00000f34 l       .debug_str     00000000 
00000f67 l       .debug_str     00000000 
00000f91 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000015a5 l       .debug_str     00000000 
0000158b l       .debug_str     00000000 
00000ffa l       .debug_str     00000000 
0000101e l       .debug_str     00000000 
00001041 l       .debug_str     00000000 
0000105d l       .debug_str     00000000 
00001079 l       .debug_str     00000000 
00001095 l       .debug_str     00000000 
000010b1 l       .debug_str     00000000 
000010cd l       .debug_str     00000000 
000010e9 l       .debug_str     00000000 
00001105 l       .debug_str     00000000 
00001121 l       .debug_str     00000000 
0000113d l       .debug_str     00000000 
00001159 l       .debug_str     00000000 
00001175 l       .debug_str     00000000 
00001191 l       .debug_str     00000000 
000011ad l       .debug_str     00000000 
000011c9 l       .debug_str     00000000 
000011e5 l       .debug_str     00000000 
00001201 l       .debug_str     00000000 
0000121d l       .debug_str     00000000 
00001239 l       .debug_str     00000000 
00001255 l       .debug_str     00000000 
00001272 l       .debug_str     00000000 
0000128f l       .debug_str     00000000 
000012ac l       .debug_str     00000000 
000012c8 l       .debug_str     00000000 
000012e4 l       .debug_str     00000000 
00001300 l       .debug_str     00000000 
0000131c l       .debug_str     00000000 
00001338 l       .debug_str     00000000 
00001354 l       .debug_str     00000000 
00001370 l       .debug_str     00000000 
0000138c l       .debug_str     00000000 
000013a8 l       .debug_str     00000000 
000013c4 l       .debug_str     00000000 
000013e1 l       .debug_str     00000000 
000013fe l       .debug_str     00000000 
0000141b l       .debug_str     00000000 
00001437 l       .debug_str     00000000 
00001453 l       .debug_str     00000000 
0000146f l       .debug_str     00000000 
0000148b l       .debug_str     00000000 
000014a7 l       .debug_str     00000000 
000014c3 l       .debug_str     00000000 
000014df l       .debug_str     00000000 
000014fb l       .debug_str     00000000 
00001518 l       .debug_str     00000000 
00001535 l       .debug_str     00000000 
00001552 l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
00001ac7 l       .debug_str     00000000 
00001aaf l       .debug_str     00000000 
000015c5 l       .debug_str     00000000 
000015df l       .debug_str     00000000 
000015f9 l       .debug_str     00000000 
00001613 l       .debug_str     00000000 
0000162d l       .debug_str     00000000 
00001647 l       .debug_str     00000000 
00001661 l       .debug_str     00000000 
0000167b l       .debug_str     00000000 
00001695 l       .debug_str     00000000 
000016af l       .debug_str     00000000 
000016c9 l       .debug_str     00000000 
000016e3 l       .debug_str     00000000 
000016fd l       .debug_str     00000000 
00001717 l       .debug_str     00000000 
00001731 l       .debug_str     00000000 
0000174b l       .debug_str     00000000 
00001765 l       .debug_str     00000000 
0000177f l       .debug_str     00000000 
00001799 l       .debug_str     00000000 
000017b3 l       .debug_str     00000000 
000017ce l       .debug_str     00000000 
000017e9 l       .debug_str     00000000 
00001804 l       .debug_str     00000000 
0000181e l       .debug_str     00000000 
00001838 l       .debug_str     00000000 
00001852 l       .debug_str     00000000 
0000186c l       .debug_str     00000000 
00001886 l       .debug_str     00000000 
000018a0 l       .debug_str     00000000 
000018ba l       .debug_str     00000000 
000018d4 l       .debug_str     00000000 
000018ee l       .debug_str     00000000 
00001908 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
0000193e l       .debug_str     00000000 
00001959 l       .debug_str     00000000 
00001973 l       .debug_str     00000000 
0000198d l       .debug_str     00000000 
000019a7 l       .debug_str     00000000 
000019c1 l       .debug_str     00000000 
000019db l       .debug_str     00000000 
000019f5 l       .debug_str     00000000 
00001a0f l       .debug_str     00000000 
00001a29 l       .debug_str     00000000 
00001a44 l       .debug_str     00000000 
00001a5f l       .debug_str     00000000 
00001a7a l       .debug_str     00000000 
00001a95 l       .debug_str     00000000 
00001afd l       .debug_str     00000000 
00001b0c l       .debug_str     00000000 
00001b1b l       .debug_str     00000000 
00001b27 l       .debug_str     00000000 
00002c99 l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00001b34 l       .debug_str     00000000 
00002c67 l       .debug_str     00000000 
000020ce l       .debug_str     00000000 
000020b2 l       .debug_str     00000000 
00001b38 l       .debug_str     00000000 
00001b55 l       .debug_str     00000000 
00001b72 l       .debug_str     00000000 
00001b8f l       .debug_str     00000000 
00001bac l       .debug_str     00000000 
00001bc9 l       .debug_str     00000000 
00001be6 l       .debug_str     00000000 
00001c03 l       .debug_str     00000000 
00001c20 l       .debug_str     00000000 
00001c3d l       .debug_str     00000000 
00001c5a l       .debug_str     00000000 
00001c77 l       .debug_str     00000000 
00001c94 l       .debug_str     00000000 
00001cb1 l       .debug_str     00000000 
00001cce l       .debug_str     00000000 
00001ceb l       .debug_str     00000000 
00001d08 l       .debug_str     00000000 
00001d25 l       .debug_str     00000000 
00001d42 l       .debug_str     00000000 
00001d5f l       .debug_str     00000000 
00001d7d l       .debug_str     00000000 
00001d9b l       .debug_str     00000000 
00001db9 l       .debug_str     00000000 
00001dd6 l       .debug_str     00000000 
00001df3 l       .debug_str     00000000 
00001e10 l       .debug_str     00000000 
00001e2d l       .debug_str     00000000 
00001e4a l       .debug_str     00000000 
00001e67 l       .debug_str     00000000 
00001e84 l       .debug_str     00000000 
00001ea1 l       .debug_str     00000000 
00001ebe l       .debug_str     00000000 
00001edb l       .debug_str     00000000 
00001ef9 l       .debug_str     00000000 
00001f17 l       .debug_str     00000000 
00001f35 l       .debug_str     00000000 
00001f52 l       .debug_str     00000000 
00001f6f l       .debug_str     00000000 
00001f8c l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fc6 l       .debug_str     00000000 
00001fe3 l       .debug_str     00000000 
00002000 l       .debug_str     00000000 
0000201d l       .debug_str     00000000 
0000203b l       .debug_str     00000000 
00002059 l       .debug_str     00000000 
00002077 l       .debug_str     00000000 
00002095 l       .debug_str     00000000 
00002c6e l       .debug_str     00000000 
00002c53 l       .debug_str     00000000 
000020ec l       .debug_str     00000000 
00002111 l       .debug_str     00000000 
00002135 l       .debug_str     00000000 
0000215b l       .debug_str     00000000 
0000217d l       .debug_str     00000000 
0000219f l       .debug_str     00000000 
000021c1 l       .debug_str     00000000 
000021e3 l       .debug_str     00000000 
00002205 l       .debug_str     00000000 
00002227 l       .debug_str     00000000 
00002249 l       .debug_str     00000000 
0000226b l       .debug_str     00000000 
0000228d l       .debug_str     00000000 
000022af l       .debug_str     00000000 
000022d2 l       .debug_str     00000000 
000022f5 l       .debug_str     00000000 
00002318 l       .debug_str     00000000 
0000233b l       .debug_str     00000000 
0000235e l       .debug_str     00000000 
00002381 l       .debug_str     00000000 
000023a4 l       .debug_str     00000000 
000023c7 l       .debug_str     00000000 
000023ea l       .debug_str     00000000 
0000240d l       .debug_str     00000000 
00002430 l       .debug_str     00000000 
00002453 l       .debug_str     00000000 
00002476 l       .debug_str     00000000 
00002499 l       .debug_str     00000000 
000024bc l       .debug_str     00000000 
000024df l       .debug_str     00000000 
00002502 l       .debug_str     00000000 
00002525 l       .debug_str     00000000 
00002548 l       .debug_str     00000000 
0000256b l       .debug_str     00000000 
0000258e l       .debug_str     00000000 
000025b1 l       .debug_str     00000000 
000025d1 l       .debug_str     00000000 
000025f1 l       .debug_str     00000000 
00002611 l       .debug_str     00000000 
00002631 l       .debug_str     00000000 
00002651 l       .debug_str     00000000 
00002671 l       .debug_str     00000000 
00002695 l       .debug_str     00000000 
000026b9 l       .debug_str     00000000 
000026dd l       .debug_str     00000000 
00002701 l       .debug_str     00000000 
00002721 l       .debug_str     00000000 
00002741 l       .debug_str     00000000 
00002761 l       .debug_str     00000000 
00002781 l       .debug_str     00000000 
000027a7 l       .debug_str     00000000 
000027cd l       .debug_str     00000000 
000027f3 l       .debug_str     00000000 
00002819 l       .debug_str     00000000 
0000283d l       .debug_str     00000000 
00002861 l       .debug_str     00000000 
00002886 l       .debug_str     00000000 
000028b5 l       .debug_str     00000000 
000028e4 l       .debug_str     00000000 
00002913 l       .debug_str     00000000 
00002942 l       .debug_str     00000000 
00002971 l       .debug_str     00000000 
000029a0 l       .debug_str     00000000 
000029cf l       .debug_str     00000000 
000029fe l       .debug_str     00000000 
00002a2d l       .debug_str     00000000 
00002a50 l       .debug_str     00000000 
00002a73 l       .debug_str     00000000 
00002a96 l       .debug_str     00000000 
00002ab9 l       .debug_str     00000000 
00002adc l       .debug_str     00000000 
00002aff l       .debug_str     00000000 
00002b24 l       .debug_str     00000000 
00002b54 l       .debug_str     00000000 
00002b81 l       .debug_str     00000000 
00002bae l       .debug_str     00000000 
00002bdb l       .debug_str     00000000 
00002c08 l       .debug_str     00000000 
00002c36 l       .debug_str     00000000 
00002cce l       .debug_str     00000000 
00002ca9 l       .debug_str     00000000 
00002cbb l       .debug_str     00000000 
00002cdc l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ceb l       .debug_str     00000000 
00003f0b l       .debug_str     00000000 
00002cf5 l       .debug_str     00000000 
00005a29 l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00002d06 l       .debug_str     00000000 
000064a2 l       .debug_str     00000000 
00002d17 l       .debug_str     00000000 
00002d21 l       .debug_str     00000000 
00002d27 l       .debug_str     00000000 
00002d31 l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
00002d43 l       .debug_str     00000000 
00002d38 l       .debug_str     00000000 
00000068 l       .debug_frame   00000000 
f000096a l       .text  00000000 
00000000 l    df *ABS*  00000000 uart.c
f000096a l       .text  00000000 
f000096a l       .text  00000000 
f000096a l       .text  00000000 
f000096e l       .text  00000000 
f000096e l       .text  00000000 
f0000974 l       .text  00000000 
f0000974 l       .text  00000000 
f0000976 l       .text  00000000 
f0000976 l       .text  00000000 
f000097a l       .text  00000000 
f000097a l       .text  00000000 
f000097e l       .text  00000000 
f000097e l       .text  00000000 
f0000984 l       .text  00000000 
f0000984 l       .text  00000000 
f0000986 l       .text  00000000 
f0000986 l       .text  00000000 
f0000988 l       .text  00000000 
f0000988 l       .text  00000000 
f000098c l       .text  00000000 
f000098c l       .text  00000000 
f000098e l       .text  00000000 
f000098e l       .text  00000000 
f0000992 l       .text  00000000 
f0000992 l       .text  00000000 
f0000996 l       .text  00000000 
f0000996 l       .text  00000000 
f0000998 l       .text  00000000 
f0000998 l       .text  00000000 
f0000998 l       .text  00000000 
f0000998 l       .text  00000000 
f0000998 l       .text  00000000 
f000099c l       .text  00000000 
f000099c l       .text  00000000 
f000099e l       .text  00000000 
f000099e l       .text  00000000 
f00009a0 l       .text  00000000 
f00009a0 l       .text  00000000 
f00009a2 l       .text  00000000 
f00009a2 l       .text  00000000 
f00009aa l       .text  00000000 
f00009aa l       .text  00000000 
f00009ac l       .text  00000000 
f00009ac l       .text  00000000 
f00009ae l       .text  00000000 
f00009ae l       .text  00000000 
f00009b0 l       .text  00000000 
f00009b0 l       .text  00000000 
f00009b2 l       .text  00000000 
f00009b4 l       .text  00000000 
f00009b4 l       .text  00000000 
000001b7 l       .debug_loc     00000000 
000001d2 l       .debug_loc     00000000 
000001ee l       .debug_loc     00000000 
00000215 l       .debug_loc     00000000 
0000023a l       .debug_loc     00000000 
00000261 l       .debug_loc     00000000 
00000283 l       .debug_loc     00000000 
0000029e l       .debug_loc     00000000 
000002b9 l       .debug_loc     00000000 
000002d4 l       .debug_loc     00000000 
000002ef l       .debug_loc     00000000 
0000030a l       .debug_loc     00000000 
0000033b l       .debug_loc     00000000 
00000361 l       .debug_loc     00000000 
0000037c l       .debug_loc     00000000 
00000397 l       .debug_loc     00000000 
000003b2 l       .debug_loc     00000000 
000003cd l       .debug_loc     00000000 
000003e8 l       .debug_loc     00000000 
0000040e l       .debug_loc     00000000 
00000434 l       .debug_loc     00000000 
0000044f l       .debug_loc     00000000 
0000046a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002d50 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
00000536 l       .debug_str     00000000 
00000122 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00000139 l       .debug_str     00000000 
0000015a l       .debug_str     00000000 
00000170 l       .debug_str     00000000 
0000018c l       .debug_str     00000000 
000001a1 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
000001d9 l       .debug_str     00000000 
000001ed l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000216 l       .debug_str     00000000 
0000022f l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
00000257 l       .debug_str     00000000 
00000267 l       .debug_str     00000000 
0000027a l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002ab l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002e1 l       .debug_str     00000000 
000002fd l       .debug_str     00000000 
00000314 l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
0000035a l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
0000038c l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003dd l       .debug_str     00000000 
000003fb l       .debug_str     00000000 
00000415 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
0000044a l       .debug_str     00000000 
00000468 l       .debug_str     00000000 
00000484 l       .debug_str     00000000 
000004a0 l       .debug_str     00000000 
000004bc l       .debug_str     00000000 
000004d3 l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
00000502 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002cf5 l       .debug_str     00000000 
00005a29 l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00002d85 l       .debug_str     00000000 
000064a2 l       .debug_str     00000000 
00002d90 l       .debug_str     00000000 
00002da7 l       .debug_str     00000000 
00002daa l       .debug_str     00000000 
00002dc6 l       .debug_str     00000000 
00002db5 l       .debug_str     00000000 
00002db0 l       .debug_str     00000000 
0000420c l       .debug_str     00000000 
00002dd9 l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
00002df8 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000033e5 l       .debug_str     00000000 
00002e6d l       .debug_str     00000000 
00002e0f l       .debug_str     00000000 
00002e1f l       .debug_str     00000000 
00002e2c l       .debug_str     00000000 
00002e40 l       .debug_str     00000000 
000005cb l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00002e52 l       .debug_str     00000000 
000051a9 l       .debug_str     00000000 
00005e5f l       .debug_str     00000000 
00002e5d l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00002e63 l       .debug_str     00000000 
00003027 l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00000094 l       .debug_frame   00000000 
f0000998 l       .text  00000000 
f00009b4 l       .text  00000000 
00000000 l    df *ABS*  00000000 otp.c
f00009b4 l       .text  00000000 
f00009b4 l       .text  00000000 
f00009b4 l       .text  00000000 
f00009b8 l       .text  00000000 
f00009ba l       .text  00000000 
f00009ba l       .text  00000000 
f00009be l       .text  00000000 
f00009be l       .text  00000000 
f00009be l       .text  00000000 
00000485 l       .debug_loc     00000000 
000004a0 l       .debug_loc     00000000 
000004bb l       .debug_loc     00000000 
000004d9 l       .debug_loc     00000000 
00000515 l       .debug_loc     00000000 
00000530 l       .debug_loc     00000000 
00000556 l       .debug_loc     00000000 
0000057c l       .debug_loc     00000000 
0000059a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002e7f l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000058 l       .debug_ranges  00000000 
00002cdc l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00002d38 l       .debug_str     00000000 
00002f1c l       .debug_str     00000000 
00002eab l       .debug_str     00000000 
00002ecc l       .debug_str     00000000 
0000434f l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00002ef7 l       .debug_str     00000000 
000051a9 l       .debug_str     00000000 
00002f24 l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00002f00 l       .debug_str     00000000 
00002ebb l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
000000e8 l       .debug_frame   00000000 
f00009be l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
f00009be l       .text  00000000 
f00009be l       .text  00000000 
f00009be l       .text  00000000 
f00009c0 l       .text  00000000 
f00009c0 l       .text  00000000 
f00009c2 l       .text  00000000 
f00009cc l       .text  00000000 
f00009ce l       .text  00000000 
f00009d6 l       .text  00000000 
f00009d6 l       .text  00000000 
f00009e0 l       .text  00000000 
00010000 l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
f00009e2 l       .text  00000000 
f00009f4 l       .text  00000000 
f00009f4 l       .text  00000000 
f0000a0a l       .text  00000000 
f0000a0a l       .text  00000000 
f0000a10 l       .text  00000000 
f0000a10 l       .text  00000000 
e0002048 l     O .bss   00000004 uart0
f0000a10 l       .text  00000000 
f0000a10 l       .text  00000000 
f0000a10 l       .text  00000000 
f0000a12 l       .text  00000000 
f0000a1a l       .text  00000000 
f0000a20 l       .text  00000000 
f0000a24 l       .text  00000000 
f0000a24 l       .text  00000000 
f0000a2e l       .text  00000000 
f0000a3e l       .text  00000000 
f0000b44 l     F .text  000000da init_uart
f0000a40 l       .text  00000000 
f0000a42 l       .text  00000000 
f0000a42 l       .text  00000000 
f0000a46 l       .text  00000000 
f0000a48 l       .text  00000000 
00010014 l     O .logs.fields   00000014 _ottf_main.kLogFields
f0000a4a l       .text  00000000 
f0000a5a l       .text  00000000 
f0000a5a l       .text  00000000 
f0000a5c l       .text  00000000 
f0000a5c l       .text  00000000 
f0000a74 l       .text  00000000 
f0000a74 l       .text  00000000 
f0000a7e l       .text  00000000 
f0000a80 l       .text  00000000 
f0000a82 l       .text  00000000 
f0000a82 l       .text  00000000 
f0000a86 l       .text  00000000 
f0000a88 l       .text  00000000 
00010028 l     O .logs.fields   00000014 _ottf_main.kLogFields.3
f0000a88 l       .text  00000000 
f0000a98 l       .text  00000000 
f0000a98 l       .text  00000000 
f0000a9a l       .text  00000000 
f0000a9a l       .text  00000000 
f0000ab2 l       .text  00000000 
f0000ab2 l       .text  00000000 
f0000ab8 l       .text  00000000 
f0000abc l       .text  00000000 
f0000abc l       .text  00000000 
f0000ac4 l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000ad8 l       .text  00000000 
f0000ada l       .text  00000000 
f0000c1e l     F .text  00000092 test_wrapper
f0000ada l       .text  00000000 
f0000aea l       .text  00000000 
f0000af8 l       .text  00000000 
f0000af8 l       .text  00000000 
f0000afc l       .text  00000000 
f0000afc l       .text  00000000 
f0000afe l       .text  00000000 
f0000b02 l       .text  00000000 
f0000b02 l       .text  00000000 
f0000b06 l       .text  00000000 
0001003c l     O .logs.fields   00000014 _ottf_main.kLogFields.7
f0000b08 l       .text  00000000 
f0000b16 l       .text  00000000 
f0000b16 l       .text  00000000 
f0000b18 l       .text  00000000 
f0000b18 l       .text  00000000 
f0000b2e l       .text  00000000 
f0000b2e l       .text  00000000 
f0000b34 l       .text  00000000 
f0000b38 l       .text  00000000 
f0000b38 l       .text  00000000 
f0000b44 l       .text  00000000 
f0000b44 l       .text  00000000 
f0000b44 l       .text  00000000 
f0000b44 l       .text  00000000 
f0000b44 l       .text  00000000 
f0000b46 l       .text  00000000 
f0000b46 l       .text  00000000 
f0000b46 l       .text  00000000 
f0000b4c l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b64 l       .text  00000000 
f0000b66 l       .text  00000000 
f0000b66 l       .text  00000000 
f0000b68 l       .text  00000000 
f0000b68 l       .text  00000000 
f0000b6a l       .text  00000000 
f0000b6c l       .text  00000000 
00010050 l     O .logs.fields   00000014 init_uart.kLogFields
f0000b6c l       .text  00000000 
f0000b7c l       .text  00000000 
f0000b7c l       .text  00000000 
f0000b7e l       .text  00000000 
f0000b7e l       .text  00000000 
f0000b96 l       .text  00000000 
f0000b96 l       .text  00000000 
f0000b9c l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000bcc l       .text  00000000 
f0000bce l       .text  00000000 
f0000bd0 l       .text  00000000 
f0000bd0 l       .text  00000000 
f0000bd2 l       .text  00000000 
f0000bd4 l       .text  00000000 
00010064 l     O .logs.fields   00000014 init_uart.kLogFields.11
f0000bd4 l       .text  00000000 
f0000be4 l       .text  00000000 
f0000be4 l       .text  00000000 
f0000be6 l       .text  00000000 
f0000be6 l       .text  00000000 
f0000bfe l       .text  00000000 
f0000bfe l       .text  00000000 
f0000c04 l       .text  00000000 
f0000c08 l       .text  00000000 
f0000c08 l       .text  00000000 
f0000c14 l       .text  00000000 
f0000c14 l       .text  00000000 
f0000c1e l       .text  00000000 
f0000c1e l       .text  00000000 
f0000c1e l       .text  00000000 
f0000c1e l       .text  00000000 
f0000c1e l       .text  00000000 
f0000c20 l       .text  00000000 
f0000c26 l       .text  00000000 
f0000c28 l       .text  00000000 
f0000c2c l       .text  00000000 
f0000c30 l       .text  00000000 
f0000c30 l       .text  00000000 
f0000c32 l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c36 l       .text  00000000 
f0000c3a l       .text  00000000 
f0000c3a l       .text  00000000 
f0000c4a l       .text  00000000 
f0000c4a l       .text  00000000 
f0000c54 l       .text  00000000 
f0000c56 l       .text  00000000 
f0000c5e l       .text  00000000 
f0000c62 l       .text  00000000 
f0000c64 l       .text  00000000 
f0000c66 l       .text  00000000 
f0000c66 l       .text  00000000 
f0000c70 l       .text  00000000 
f0000c72 l       .text  00000000 
00010078 l     O .logs.fields   00000014 report_test_status.kLogFields
f0000c74 l       .text  00000000 
f0000c84 l       .text  00000000 
f0000c84 l       .text  00000000 
f0000c86 l       .text  00000000 
f0000c9e l       .text  00000000 
f0000c9e l       .text  00000000 
f0000ca0 l       .text  00000000 
f0000ca0 l       .text  00000000 
f0000ca6 l       .text  00000000 
f0000ca6 l       .text  00000000 
f0000cb0 l       .text  00000000 
f0000cb0 l       .text  00000000 
000005b6 l       .debug_loc     00000000 
000005d1 l       .debug_loc     00000000 
000005ec l       .debug_loc     00000000 
00000607 l       .debug_loc     00000000 
00000622 l       .debug_loc     00000000 
00000653 l       .debug_loc     00000000 
0000066e l       .debug_loc     00000000 
0000069f l       .debug_loc     00000000 
000006d0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002f2e l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000080 l       .debug_ranges  00000000 
000034c9 l       .debug_str     00000000 
00002f5f l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fe7 l       .debug_str     00000000 
00002fb4 l       .debug_str     00000000 
00002fcc l       .debug_str     00000000 
00005cb0 l       .debug_str     00000000 
00002fd6 l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
00002fbd l       .debug_str     00000000 
00002fb0 l       .debug_str     00000000 
00002f6a l       .debug_str     00000000 
00002f7b l       .debug_str     00000000 
00002f8c l       .debug_str     00000000 
00002f9e l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
0000352f l       .debug_str     00000000 
00003052 l       .debug_str     00000000 
00003215 l       .debug_str     00000000 
00002ff4 l       .debug_str     00000000 
0000302c l       .debug_str     00000000 
00003023 l       .debug_str     00000000 
00002ffa l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
00003037 l       .debug_str     00000000 
000030d4 l       .debug_str     00000000 
000030c1 l       .debug_str     00000000 
00003072 l       .debug_str     00000000 
00005185 l       .debug_str     00000000 
0000308d l       .debug_str     00000000 
000030a5 l       .debug_str     00000000 
000030b6 l       .debug_str     00000000 
0000305f l       .debug_str     00000000 
0000304e l       .debug_str     00000000 
0000353a l       .debug_str     00000000 
0000346c l       .debug_str     00000000 
000030e9 l       .debug_str     00000000 
000030fe l       .debug_str     00000000 
00003117 l       .debug_str     00000000 
00003129 l       .debug_str     00000000 
0000313a l       .debug_str     00000000 
0000314c l       .debug_str     00000000 
000031a6 l       .debug_str     00000000 
0000315e l       .debug_str     00000000 
0000316b l       .debug_str     00000000 
0000317f l       .debug_str     00000000 
00003190 l       .debug_str     00000000 
000031b2 l       .debug_str     00000000 
000031b9 l       .debug_str     00000000 
000031c3 l       .debug_str     00000000 
000031ce l       .debug_str     00000000 
000031d9 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
000031f8 l       .debug_str     00000000 
00003207 l       .debug_str     00000000 
00003220 l       .debug_str     00000000 
0000325f l       .debug_str     00000000 
0000323a l       .debug_str     00000000 
0000324d l       .debug_str     00000000 
0000328f l       .debug_str     00000000 
0000326a l       .debug_str     00000000 
0000327c l       .debug_str     00000000 
0000329f l       .debug_str     00000000 
000032a0 l       .debug_str     00000000 
00002ce3 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
000032ab l       .debug_str     00000000 
000032be l       .debug_str     00000000 
000032d3 l       .debug_str     00000000 
000032ea l       .debug_str     00000000 
000032f6 l       .debug_str     00000000 
00003305 l       .debug_str     00000000 
000034e4 l       .debug_str     00000000 
000034f4 l       .debug_str     00000000 
00003319 l       .debug_str     00000000 
0000350a l       .debug_str     00000000 
00003325 l       .debug_str     00000000 
00003522 l       .debug_str     00000000 
00003333 l       .debug_str     00000000 
00003344 l       .debug_str     00000000 
00003361 l       .debug_str     00000000 
0000336b l       .debug_str     00000000 
00003385 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00003352 l       .debug_str     00000000 
0000337c l       .debug_str     00000000 
00003393 l       .debug_str     00000000 
000033a3 l       .debug_str     00000000 
000033b9 l       .debug_str     00000000 
000033cd l       .debug_str     00000000 
00003544 l       .debug_str     00000000 
0000355e l       .debug_str     00000000 
00003219 l       .debug_str     00000000 
000033e1 l       .debug_str     00000000 
000033ef l       .debug_str     00000000 
00003444 l       .debug_str     00000000 
00003402 l       .debug_str     00000000 
0000340b l       .debug_str     00000000 
00003417 l       .debug_str     00000000 
00003298 l       .debug_str     00000000 
00003425 l       .debug_str     00000000 
00003432 l       .debug_str     00000000 
00003454 l       .debug_str     00000000 
00003465 l       .debug_str     00000000 
00003478 l       .debug_str     00000000 
00000571 l       .debug_str     00000000 
00003493 l       .debug_str     00000000 
000034af l       .debug_str     00000000 
00003551 l       .debug_str     00000000 
00000154 l       .debug_frame   00000000 
f0000a10 l       .text  00000000 
f0000b44 l       .text  00000000 
f0000c1e l       .text  00000000 
f0000cb0 l       .text  00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
f0000cb0 l       .text  00000000 
f0000cb0 l       .text  00000000 
f0000cb0 l       .text  00000000 
f0000cb0 l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cb2 l       .text  00000000 
00000000 l       .debug_str     00000000 
0000356e l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000034af l       .debug_str     00000000 
0000022c l       .debug_frame   00000000 
f0000cb2 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
f0000cb2 l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cb4 l       .text  00000000 
f0000cb4 l       .text  00000000 
f0000cb6 l       .text  00000000 
f0000cc0 l       .text  00000000 
f0000cc2 l       .text  00000000 
f0000cc2 l       .text  00000000 
f0000cd8 l       .text  00000000 
f0000cd8 l       .text  00000000 
f0000cda l       .text  00000000 
0001008c l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
f0000cda l       .text  00000000 
f0000ce8 l       .text  00000000 
f0000ce8 l       .text  00000000 
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
f0000cf0 l       .text  00000000 
f0000cf0 l       .text  00000000 
f0000cf0 l       .text  00000000 
f0000cf0 l       .text  00000000 
f0000cf0 l       .text  00000000 
f0000cf0 l       .text  00000000 
f0000cf2 l       .text  00000000 
f0000cf2 l       .text  00000000 
f0000cf4 l       .text  00000000 
f0000cf4 l       .text  00000000 
f0000cfe l       .text  00000000 
f0000d00 l       .text  00000000 
f0000d00 l       .text  00000000 
f0000d16 l       .text  00000000 
f0000d16 l       .text  00000000 
f0000d18 l       .text  00000000 
000100a0 l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
f0000d18 l       .text  00000000 
f0000d26 l       .text  00000000 
f0000d26 l       .text  00000000 
f0000d2a l       .text  00000000 
f0000d2a l       .text  00000000 
f0000d2e l       .text  00000000 
f0000d2e l       .text  00000000 
f0000d2e l       .text  00000000 
000006eb l       .debug_loc     00000000 
00000706 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000035a3 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000000d0 l       .debug_ranges  00000000 
000035ef l       .debug_str     00000000 
00002f5f l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fe7 l       .debug_str     00000000 
00002fb4 l       .debug_str     00000000 
00002fcc l       .debug_str     00000000 
00005cb0 l       .debug_str     00000000 
00002fd6 l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
00002fbd l       .debug_str     00000000 
00002fb0 l       .debug_str     00000000 
00002f6a l       .debug_str     00000000 
00002f7b l       .debug_str     00000000 
00002f8c l       .debug_str     00000000 
00002f9e l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
0000360c l       .debug_str     00000000 
0000362a l       .debug_str     00000000 
0000363d l       .debug_str     00000000 
000032d3 l       .debug_str     00000000 
000032be l       .debug_str     00000000 
000035d9 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000035e9 l       .debug_str     00000000 
00003630 l       .debug_str     00000000 
00003305 l       .debug_str     00000000 
00000250 l       .debug_frame   00000000 
f0000cf0 l       .text  00000000 
f0000d2e l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
f0000d2e l       .text  00000000 
f0000d2e l       .text  00000000 
f0000d2e l       .text  00000000 
f0000d30 l       .text  00000000 
f0000d30 l       .text  00000000 
f0000d32 l       .text  00000000 
f0000d36 l       .text  00000000 
f0000d36 l       .text  00000000 
f0000d3a l       .text  00000000 
f0000d3a l       .text  00000000 
f0000d3e l       .text  00000000 
f0000d3e l       .text  00000000 
f0000d42 l       .text  00000000 
f0000d42 l       .text  00000000 
f0000d4a l       .text  00000000 
f0000d4a l       .text  00000000 
00000000 l       .debug_str     00000000 
00003648 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
0000367d l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000032a0 l       .debug_str     00000000 
00002ce3 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
000036cb l       .debug_str     00000000 
00003684 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00003693 l       .debug_str     00000000 
000036a5 l       .debug_str     00000000 
000036b7 l       .debug_str     00000000 
00000294 l       .debug_frame   00000000 
f0000d4a l       .text  00000000 
00000000 l    df *ABS*  00000000 irq.c
f0000d4a l       .text  00000000 
f0000d4a l       .text  00000000 
f0000d4a l       .text  00000000 
f0000d4a l       .text  00000000 
f0000d4c l       .text  00000000 
f0000d4e l       .text  00000000 
f0000d4e l       .text  00000000 
f0000d52 l       .text  00000000 
f0000d54 l       .text  00000000 
f0000d54 l       .text  00000000 
f0000d56 l       .text  00000000 
f0000d56 l       .text  00000000 
f0000d5a l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d5e l       .text  00000000 
f0000d60 l       .text  00000000 
f0000d64 l       .text  00000000 
f0000d68 l       .text  00000000 
f0000d6a l       .text  00000000 
f0000d6a l       .text  00000000 
f0000d6c l       .text  00000000 
f0000d70 l       .text  00000000 
f0000d74 l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d78 l       .text  00000000 
f0000d7c l       .text  00000000 
f0000d7c l       .text  00000000 
f0000d80 l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d86 l       .text  00000000 
f0000d86 l       .text  00000000 
f0000d8a l       .text  00000000 
f0000d8c l       .text  00000000 
f0000d8c l       .text  00000000 
f0000d8c l       .text  00000000 
f0000d8c l       .text  00000000 
f0000d8c l       .text  00000000 
f0000d8c l       .text  00000000 
f0000d8e l       .text  00000000 
f0000d90 l       .text  00000000 
f0000d90 l       .text  00000000 
f0000d94 l       .text  00000000 
f0000d96 l       .text  00000000 
f0000d96 l       .text  00000000 
f0000d98 l       .text  00000000 
f0000d98 l       .text  00000000 
f0000d9c l       .text  00000000 
f0000d9e l       .text  00000000 
f0000d9e l       .text  00000000 
00000721 l       .debug_loc     00000000 
00000751 l       .debug_loc     00000000 
00000781 l       .debug_loc     00000000 
000007b1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000036df l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000000e8 l       .debug_ranges  00000000 
000036fb l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00003711 l       .debug_str     00000000 
00003729 l       .debug_str     00000000 
0000373e l       .debug_str     00000000 
00002f1c l       .debug_str     00000000 
000035d9 l       .debug_str     00000000 
000002a8 l       .debug_str     00000000 
00003693 l       .debug_str     00000000 
00002db0 l       .debug_str     00000000 
00003684 l       .debug_str     00000000 
000036a5 l       .debug_str     00000000 
00003754 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000002c0 l       .debug_frame   00000000 
f0000d5c l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d8c l       .text  00000000 
f0000d9e l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
f0000d9e l       .text  00000000 
f0000d9e l       .text  00000000 
f0000d9e l       .text  00000000 
f0000da0 l       .text  00000000 
f0000daa l       .text  00000000 
f0000dac l       .text  00000000 
f0000dae l       .text  00000000 
f0000dae l       .text  00000000 
f0000db2 l       .text  00000000 
f0000db4 l       .text  00000000 
f0000db4 l       .text  00000000 
f0000db8 l       .text  00000000 
f0000db8 l       .text  00000000 
f0000dc2 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc6 l       .text  00000000 
000100b4 l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
f0000dc6 l       .text  00000000 
f0000de8 l       .text  00000000 
f0000de8 l       .text  00000000 
f0000e06 l       .text  00000000 
f0000e06 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e16 l       .text  00000000 
f0000e16 l       .text  00000000 
f0000e18 l       .text  00000000 
f0000e1c l       .text  00000000 
f0000e1c l       .text  00000000 
f0000e1e l       .text  00000000 
f0000e1e l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e24 l       .text  00000000 
f0000e3a l       .text  00000000 
f0000e40 l       .text  00000000 
f0000e46 l       .text  00000000 
f0000e4c l       .text  00000000 
f0000e52 l       .text  00000000 
f0000e58 l       .text  00000000 
f0000e60 l     F .text  00000020 generic_fault_handler
f0000e5e l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e62 l       .text  00000000 
f0000e62 l       .text  00000000 
f0000e64 l       .text  00000000 
f0000e68 l       .text  00000000 
f0000e6a l       .text  00000000 
f0000e6a l       .text  00000000 
f0000e6c l       .text  00000000 
f0000e6e l       .text  00000000 
f0002ca4 l     O .rodata        00000080 exception_reason
f0000e7a l       .text  00000000 
f0000e7c l       .text  00000000 
f0000e7c l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e82 l       .text  00000000 
f0000e82 l       .text  00000000 
f0000e84 l       .text  00000000 
f0000e88 l       .text  00000000 
f0000e8a l       .text  00000000 
f0000e94 l       .text  00000000 
f0000e94 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000e9a l       .text  00000000 
f0000e9a l       .text  00000000 
f0000e9c l       .text  00000000 
f0000ea0 l       .text  00000000 
f0000ea2 l       .text  00000000 
f0000eac l       .text  00000000 
f0000eac l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000eb6 l       .text  00000000 
f0000eb6 l       .text  00000000 
f0000ebc l       .text  00000000 
f0000ebc l       .text  00000000 
f0000ebc l       .text  00000000 
f0000eca l       .text  00000000 
f0000eca l       .text  00000000 
f0000ed2 l       .text  00000000 
f0000ed4 l       .text  00000000 
f0000ed4 l       .text  00000000 
f0000ed6 l       .text  00000000 
f0000ed6 l       .text  00000000 
f0000ed8 l       .text  00000000 
f0000eda l       .text  00000000 
000100c8 l     O .logs.fields   00000014 ottf_external_isr.kLogFields
f0000eda l       .text  00000000 
f0000eea l       .text  00000000 
f0000eea l       .text  00000000 
f0000eec l       .text  00000000 
f0000eec l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f0a l       .text  00000000 
f0000f0e l       .text  00000000 
f0000f0e l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f12 l       .text  00000000 
f0000f1e l       .text  00000000 
f0000f1e l       .text  00000000 
f0000f20 l       .text  00000000 
f0000f24 l       .text  00000000 
f0000f24 l       .text  00000000 
f0000f26 l       .text  00000000 
f0000f26 l       .text  00000000 
f0000f28 l       .text  00000000 
f0000f28 l       .text  00000000 
f0000f2a l       .text  00000000 
f0000f36 l       .text  00000000 
f0000f38 l       .text  00000000 
f0000f38 l       .text  00000000 
f0000f3a l       .text  00000000 
f0000f3a l       .text  00000000 
f0000f3c l       .text  00000000 
f0000f3e l       .text  00000000 
000100dc l     O .logs.fields   00000014 ottf_external_isr.kLogFields.5
f0000f3e l       .text  00000000 
f0000f4e l       .text  00000000 
f0000f4e l       .text  00000000 
f0000f50 l       .text  00000000 
f0000f50 l       .text  00000000 
f0000f68 l       .text  00000000 
f0000f68 l       .text  00000000 
f0000f6e l       .text  00000000 
f0000f72 l       .text  00000000 
f0000f72 l       .text  00000000 
f0000f7c l       .text  00000000 
f0000f80 l       .text  00000000 
f0000f82 l       .text  00000000 
f0000f82 l       .text  00000000 
f0000f8c l       .text  00000000 
f0000f8c l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f90 l     F .text  00000018 generic_internal_irq_handler
f0000f90 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f92 l       .text  00000000 
f0000f92 l       .text  00000000 
f0000f94 l       .text  00000000 
f0000f98 l       .text  00000000 
f0000f9a l       .text  00000000 
f0000fa4 l       .text  00000000 
f0000fa4 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000faa l       .text  00000000 
f0000faa l       .text  00000000 
f0000fac l       .text  00000000 
f0000fb0 l       .text  00000000 
f0000fb0 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fba l       .text  00000000 
f0000fbc l       .text  00000000 
f0000fc0 l       .text  00000000 
f0000fc6 l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fd0 l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe0 l       .text  00000000 
000007e1 l       .debug_loc     00000000 
00000807 l       .debug_loc     00000000 
0000082d l       .debug_loc     00000000 
00000848 l       .debug_loc     00000000 
00000863 l       .debug_loc     00000000 
0000087e l       .debug_loc     00000000 
00000899 l       .debug_loc     00000000 
000008e5 l       .debug_loc     00000000 
00000918 l       .debug_loc     00000000 
00000949 l       .debug_loc     00000000 
00000964 l       .debug_loc     00000000 
00000995 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000375e l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000118 l       .debug_ranges  00000000 
00003e5c l       .debug_str     00000000 
00002f5f l       .debug_str     00000000 
000037ca l       .debug_str     00000000 
00003efd l       .debug_str     00000000 
00003f04 l       .debug_str     00000000 
00003f09 l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fe7 l       .debug_str     00000000 
00002fb4 l       .debug_str     00000000 
00002fcc l       .debug_str     00000000 
00005cb0 l       .debug_str     00000000 
00002fd6 l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
00002fbd l       .debug_str     00000000 
00002fb0 l       .debug_str     00000000 
00002f6a l       .debug_str     00000000 
00002f7b l       .debug_str     00000000 
00002f8c l       .debug_str     00000000 
00002f9e l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
0000378f l       .debug_str     00000000 
00003ed9 l       .debug_str     00000000 
00003f0f l       .debug_str     00000000 
00003f1b l       .debug_str     00000000 
00003d57 l       .debug_str     00000000 
00003215 l       .debug_str     00000000 
0000379c l       .debug_str     00000000 
000037b2 l       .debug_str     00000000 
000037a6 l       .debug_str     00000000 
00002ffa l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
000037c0 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00003893 l       .debug_str     00000000 
000037d1 l       .debug_str     00000000 
000037e9 l       .debug_str     00000000 
00003802 l       .debug_str     00000000 
0000381c l       .debug_str     00000000 
0000382f l       .debug_str     00000000 
00003847 l       .debug_str     00000000 
00003860 l       .debug_str     00000000 
00003872 l       .debug_str     00000000 
00003887 l       .debug_str     00000000 
000038d3 l       .debug_str     00000000 
0000389c l       .debug_str     00000000 
000038b8 l       .debug_str     00000000 
000031b2 l       .debug_str     00000000 
000031b9 l       .debug_str     00000000 
000031c3 l       .debug_str     00000000 
000031ce l       .debug_str     00000000 
000031d9 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
000031f8 l       .debug_str     00000000 
00003207 l       .debug_str     00000000 
0000346c l       .debug_str     00000000 
000030e9 l       .debug_str     00000000 
000030fe l       .debug_str     00000000 
00003117 l       .debug_str     00000000 
00003129 l       .debug_str     00000000 
0000313a l       .debug_str     00000000 
0000314c l       .debug_str     00000000 
00003d45 l       .debug_str     00000000 
000038ec l       .debug_str     00000000 
0000390e l       .debug_str     00000000 
0000392e l       .debug_str     00000000 
0000394e l       .debug_str     00000000 
0000396e l       .debug_str     00000000 
0000398e l       .debug_str     00000000 
000039ad l       .debug_str     00000000 
000039d1 l       .debug_str     00000000 
000039f0 l       .debug_str     00000000 
00003a0f l       .debug_str     00000000 
00003a2e l       .debug_str     00000000 
00003a50 l       .debug_str     00000000 
00003a72 l       .debug_str     00000000 
00003a94 l       .debug_str     00000000 
00003abb l       .debug_str     00000000 
00003ade l       .debug_str     00000000 
00003b01 l       .debug_str     00000000 
00003b22 l       .debug_str     00000000 
00003b46 l       .debug_str     00000000 
00003b6e l       .debug_str     00000000 
00003b93 l       .debug_str     00000000 
00003bb9 l       .debug_str     00000000 
00003bde l       .debug_str     00000000 
00003c01 l       .debug_str     00000000 
00003c25 l       .debug_str     00000000 
00003c44 l       .debug_str     00000000 
00003c63 l       .debug_str     00000000 
00003c82 l       .debug_str     00000000 
00003ca3 l       .debug_str     00000000 
00003cc3 l       .debug_str     00000000 
00003ce8 l       .debug_str     00000000 
00003d07 l       .debug_str     00000000 
00003d26 l       .debug_str     00000000 
00003d90 l       .debug_str     00000000 
00003d62 l       .debug_str     00000000 
00003d7c l       .debug_str     00000000 
00003da2 l       .debug_str     00000000 
00003dad l       .debug_str     00000000 
00003dcc l       .debug_str     00000000 
00003de0 l       .debug_str     00000000 
00003def l       .debug_str     00000000 
000032be l       .debug_str     00000000 
000032d3 l       .debug_str     00000000 
00003e75 l       .debug_str     00000000 
00003dff l       .debug_str     00000000 
00003e8c l       .debug_str     00000000 
000035e9 l       .debug_str     00000000 
00003ea2 l       .debug_str     00000000 
00003eb4 l       .debug_str     00000000 
00003ec3 l       .debug_str     00000000 
00003e10 l       .debug_str     00000000 
00003393 l       .debug_str     00000000 
00003e26 l       .debug_str     00000000 
00003e3f l       .debug_str     00000000 
00003eeb l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00003f27 l       .debug_str     00000000 
00003551 l       .debug_str     00000000 
00000324 l       .debug_frame   00000000 
f0000e14 l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000fe0 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
f0000fe0 l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe8 l       .text  00000000 
f0000fe8 l       .text  00000000 
f0000ff4 l       .text  00000000 
f0000ff4 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ffc l       .text  00000000 
f0000ffc l       .text  00000000 
f0000ffe l       .text  00000000 
f0001002 l       .text  00000000 
f0001002 l       .text  00000000 
f0001004 l       .text  00000000 
f0001004 l       .text  00000000 
f0001008 l       .text  00000000 
f0001008 l       .text  00000000 
f0001008 l       .text  00000000 
f0001008 l       .text  00000000 
f0001008 l       .text  00000000 
f0001008 l       .text  00000000 
f0001010 l       .text  00000000 
f0001010 l       .text  00000000 
f0001016 l       .text  00000000 
f0001016 l       .text  00000000 
f0001018 l       .text  00000000 
f0001018 l       .text  00000000 
f0001020 l       .text  00000000 
f0001020 l       .text  00000000 
f0001022 l       .text  00000000 
f0001022 l       .text  00000000 
f0001024 l       .text  00000000 
f0001024 l       .text  00000000 
f0001028 l       .text  00000000 
f0001028 l       .text  00000000 
000009b0 l       .debug_loc     00000000 
000009d6 l       .debug_loc     00000000 
00000a09 l       .debug_loc     00000000 
00000a2b l       .debug_loc     00000000 
00000a46 l       .debug_loc     00000000 
00000a68 l       .debug_loc     00000000 
00000a9b l       .debug_loc     00000000 
00000ac3 l       .debug_loc     00000000 
00000aeb l       .debug_loc     00000000 
00000b06 l       .debug_loc     00000000 
00000b36 l       .debug_loc     00000000 
00000b51 l       .debug_loc     00000000 
00000b6c l       .debug_loc     00000000 
00000b87 l       .debug_loc     00000000 
00000ba2 l       .debug_loc     00000000 
00000bbd l       .debug_loc     00000000 
00000bd8 l       .debug_loc     00000000 
00000bf3 l       .debug_loc     00000000 
00000c0e l       .debug_loc     00000000 
00000c29 l       .debug_loc     00000000 
00000c44 l       .debug_loc     00000000 
00000c60 l       .debug_loc     00000000 
00000c7b l       .debug_loc     00000000 
00000c99 l       .debug_loc     00000000 
00000cbf l       .debug_loc     00000000 
00000cf0 l       .debug_loc     00000000 
00000d0b l       .debug_loc     00000000 
00000d26 l       .debug_loc     00000000 
00000d45 l       .debug_loc     00000000 
00000d64 l       .debug_loc     00000000 
00000d7f l       .debug_loc     00000000 
00000d9a l       .debug_loc     00000000 
00000db5 l       .debug_loc     00000000 
00000dd5 l       .debug_loc     00000000 
00000df0 l       .debug_loc     00000000 
00000e0b l       .debug_loc     00000000 
00000e26 l       .debug_loc     00000000 
00000e43 l       .debug_loc     00000000 
00000e5e l       .debug_loc     00000000 
00000e79 l       .debug_loc     00000000 
00000e94 l       .debug_loc     00000000 
00000eaf l       .debug_loc     00000000 
00000eca l       .debug_loc     00000000 
00000eea l       .debug_loc     00000000 
00000f05 l       .debug_loc     00000000 
00000f20 l       .debug_loc     00000000 
00000f3b l       .debug_loc     00000000 
00000f5b l       .debug_loc     00000000 
00000f76 l       .debug_loc     00000000 
00000f91 l       .debug_loc     00000000 
00000fac l       .debug_loc     00000000 
00000fcc l       .debug_loc     00000000 
00000fe7 l       .debug_loc     00000000 
00001002 l       .debug_loc     00000000 
0000101d l       .debug_loc     00000000 
0000103d l       .debug_loc     00000000 
00001058 l       .debug_loc     00000000 
00001073 l       .debug_loc     00000000 
0000108e l       .debug_loc     00000000 
000010ae l       .debug_loc     00000000 
000010c9 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004137 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000220 l       .debug_ranges  00000000 
00004157 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
0000416d l       .debug_str     00000000 
00003215 l       .debug_str     00000000 
000031b2 l       .debug_str     00000000 
000031b9 l       .debug_str     00000000 
000031c3 l       .debug_str     00000000 
000031ce l       .debug_str     00000000 
000031d9 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
000031f8 l       .debug_str     00000000 
00003207 l       .debug_str     00000000 
0000325f l       .debug_str     00000000 
0000323a l       .debug_str     00000000 
0000324d l       .debug_str     00000000 
00004183 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
00004374 l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00004197 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
0000423f l       .debug_str     00000000 
000037a1 l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
000001a8 l       .debug_ranges  00000000 
00000190 l       .debug_ranges  00000000 
000038e5 l       .debug_str     00000000 
000001d8 l       .debug_ranges  00000000 
0000434a l       .debug_str     00000000 
000001c0 l       .debug_ranges  00000000 
000041a1 l       .debug_str     00000000 
00003d9e l       .debug_str     00000000 
000041c8 l       .debug_str     00000000 
000041ba l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
00002df8 l       .debug_str     00000000 
00003f27 l       .debug_str     00000000 
000041d8 l       .debug_str     00000000 
000041ed l       .debug_str     00000000 
00004203 l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00004212 l       .debug_str     00000000 
00004251 l       .debug_str     00000000 
00004013 l       .debug_str     00000000 
000064a2 l       .debug_str     00000000 
000041bf l       .debug_str     00000000 
0000435a l       .debug_str     00000000 
000001f0 l       .debug_ranges  00000000 
00002d90 l       .debug_str     00000000 
00002da7 l       .debug_str     00000000 
00002daa l       .debug_str     00000000 
00002dc6 l       .debug_str     00000000 
00002db5 l       .debug_str     00000000 
00002db0 l       .debug_str     00000000 
0000420c l       .debug_str     00000000 
00002dd9 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
0000426d l       .debug_str     00000000 
00004365 l       .debug_str     00000000 
00000208 l       .debug_ranges  00000000 
00004289 l       .debug_str     00000000 
0000338a l       .debug_str     00000000 
000042a6 l       .debug_str     00000000 
000042bd l       .debug_str     00000000 
0000436a l       .debug_str     00000000 
00004225 l       .debug_str     00000000 
00002e2c l       .debug_str     00000000 
000042c7 l       .debug_str     00000000 
000042d7 l       .debug_str     00000000 
00003e10 l       .debug_str     00000000 
0000437b l       .debug_str     00000000 
00004386 l       .debug_str     00000000 
00003e26 l       .debug_str     00000000 
00004399 l       .debug_str     00000000 
000042e2 l       .debug_str     00000000 
000043a7 l       .debug_str     00000000 
00004301 l       .debug_str     00000000 
00004326 l       .debug_str     00000000 
000043b3 l       .debug_str     00000000 
00003551 l       .debug_str     00000000 
000037b2 l       .debug_str     00000000 
000037a6 l       .debug_str     00000000 
00002ffa l       .debug_str     00000000 
00003425 l       .debug_str     00000000 
00000438 l       .debug_frame   00000000 
f0001008 l       .text  00000000 
f0001028 l       .text  00000000 
00000000 l    df *ABS*  00000000 sec_mmio.c
f0001028 l       .text  00000000 
f0001028 l       .text  00000000 
f0001028 l       .text  00000000 
f0001028 l       .text  00000000 
f000102a l       .text  00000000 
f000102a l       .text  00000000 
f000102c l       .text  00000000 
f000102c l       .text  00000000 
f000102e l       .text  00000000 
f000102e l       .text  00000000 
f0001030 l       .text  00000000 
f0001030 l       .text  00000000 
f0001030 l       .text  00000000 
f0001030 l       .text  00000000 
f0001038 l       .text  00000000 
f000103a l       .text  00000000 
f000103a l       .text  00000000 
f000103a l       .text  00000000 
f000103a l       .text  00000000 
f000103c l       .text  00000000 
f000103c l       .text  00000000 
f000103c l       .text  00000000 
f000103c l       .text  00000000 
f000103e l       .text  00000000 
f000103e l       .text  00000000 
f000103e l       .text  00000000 
f000103e l       .text  00000000 
f0001046 l       .text  00000000 
f0001046 l       .text  00000000 
f000104e l       .text  00000000 
f0001050 l       .text  00000000 
f0001050 l       .text  00000000 
f0001052 l       .text  00000000 
f0001054 l       .text  00000000 
f0001056 l       .text  00000000 
f0001056 l       .text  00000000 
f000105e l       .text  00000000 
f0001060 l       .text  00000000 
f0001060 l       .text  00000000 
f0001062 l       .text  00000000 
f0001062 l       .text  00000000 
f0001064 l       .text  00000000 
f0001066 l       .text  00000000 
f0001074 l       .text  00000000 
f0001074 l       .text  00000000 
f0001080 l       .text  00000000 
f0001082 l       .text  00000000 
f0001082 l       .text  00000000 
f0001082 l       .text  00000000 
f0001082 l       .text  00000000 
f0001082 l       .text  00000000 
f0001084 l       .text  00000000 
f000108e l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001094 l       .text  00000000 
f0001094 l       .text  00000000 
f000109c l       .text  00000000 
f000109c l       .text  00000000 
f00010a0 l       .text  00000000 
f00010a0 l       .text  00000000 
f00010a0 l       .text  00000000 
f00010a0 l       .text  00000000 
f00010c8 l     F .text  0000006e upsert_register
f00010a6 l       .text  00000000 
f00010a6 l       .text  00000000 
f00010a8 l       .text  00000000 
f00010a8 l       .text  00000000 
f00010b8 l       .text  00000000 
f00010be l       .text  00000000 
f00010c0 l       .text  00000000 
f00010c2 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010d4 l       .text  00000000 
f00010d4 l       .text  00000000 
f00010d6 l       .text  00000000 
f00010d6 l       .text  00000000 
f00010d8 l       .text  00000000 
f00010d8 l       .text  00000000 
f00010dc l       .text  00000000 
f00010dc l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e8 l       .text  00000000 
f00010ec l       .text  00000000 
f00010ee l       .text  00000000 
f00010ee l       .text  00000000 
f00010f0 l       .text  00000000 
f00010f0 l       .text  00000000 
f00010f8 l       .text  00000000 
f00010f8 l       .text  00000000 
f00010fa l       .text  00000000 
f00010fa l       .text  00000000 
f00010fc l       .text  00000000 
f00010fc l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001102 l       .text  00000000 
f0001102 l       .text  00000000 
f0001106 l       .text  00000000 
f0001106 l       .text  00000000 
f000110a l       .text  00000000 
f000110a l       .text  00000000 
f0001114 l       .text  00000000 
f0001118 l       .text  00000000 
f000111a l       .text  00000000 
f000111e l       .text  00000000 
f0001124 l       .text  00000000 
f0001128 l       .text  00000000 
f0001134 l       .text  00000000 
f0001136 l       .text  00000000 
f0001136 l       .text  00000000 
000010e4 l       .debug_loc     00000000 
0000110b l       .debug_loc     00000000 
00001132 l       .debug_loc     00000000 
00001159 l       .debug_loc     00000000 
00001194 l       .debug_loc     00000000 
000011c3 l       .debug_loc     00000000 
000011de l       .debug_loc     00000000 
00001204 l       .debug_loc     00000000 
0000121f l       .debug_loc     00000000 
0000123a l       .debug_loc     00000000 
00001255 l       .debug_loc     00000000 
00001292 l       .debug_loc     00000000 
000012b9 l       .debug_loc     00000000 
000012d4 l       .debug_loc     00000000 
000012fa l       .debug_loc     00000000 
00001320 l       .debug_loc     00000000 
00001346 l       .debug_loc     00000000 
00001361 l       .debug_loc     00000000 
0000137c l       .debug_loc     00000000 
000013a2 l       .debug_loc     00000000 
000013bd l       .debug_loc     00000000 
000013d8 l       .debug_loc     00000000 
000013f3 l       .debug_loc     00000000 
00001430 l       .debug_loc     00000000 
00001457 l       .debug_loc     00000000 
00001472 l       .debug_loc     00000000 
0000148d l       .debug_loc     00000000 
000014a8 l       .debug_loc     00000000 
000014c3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004526 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000340 l       .debug_ranges  00000000 
000044e4 l       .debug_str     00000000 
00004517 l       .debug_str     00000000 
000044f1 l       .debug_str     00000000 
00004505 l       .debug_str     00000000 
000044fc l       .debug_str     00000000 
00004644 l       .debug_str     00000000 
000045f9 l       .debug_str     00000000 
00004511 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00004554 l       .debug_str     00000000 
00004564 l       .debug_str     00000000 
00004574 l       .debug_str     00000000 
000045ea l       .debug_str     00000000 
00004583 l       .debug_str     00000000 
00004625 l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00004374 l       .debug_str     00000000 
00000310 l       .debug_ranges  00000000 
00000328 l       .debug_ranges  00000000 
00004630 l       .debug_str     00000000 
00004589 l       .debug_str     00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
00002ceb l       .debug_str     00000000 
00003f0b l       .debug_str     00000000 
00000540 l       .debug_str     00000000 
00005b36 l       .debug_str     00000000 
00000280 l       .debug_ranges  00000000 
00000298 l       .debug_ranges  00000000 
000002b0 l       .debug_ranges  00000000 
000002c8 l       .debug_ranges  00000000 
000045a7 l       .debug_str     00000000 
000002e0 l       .debug_ranges  00000000 
00002e0f l       .debug_str     00000000 
00005a29 l       .debug_str     00000000 
0000459d l       .debug_str     00000000 
00002eab l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00004618 l       .debug_str     00000000 
000045c0 l       .debug_str     00000000 
000002f8 l       .debug_ranges  00000000 
00002cf5 l       .debug_str     00000000 
00002ebb l       .debug_str     00000000 
000045d0 l       .debug_str     00000000 
00004600 l       .debug_str     00000000 
0000463b l       .debug_str     00000000 
00003219 l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
000004fc l       .debug_frame   00000000 
f0001082 l       .text  00000000 
f00010c8 l       .text  00000000 
f0001136 l       .text  00000000 
00000000 l    df *ABS*  00000000 tasks.c
f0001136 l       .text  00000000 
f0001136 l       .text  00000000 
f0001136 l       .text  00000000 
f0001138 l       .text  00000000 
f000114e l       .text  00000000 
f0001150 l       .text  00000000 
f0001152 l       .text  00000000 
f0001154 l       .text  00000000 
f0001156 l       .text  00000000 
f0001158 l       .text  00000000 
f0001158 l       .text  00000000 
f000115c l       .text  00000000 
f0001160 l       .text  00000000 
f0001160 l       .text  00000000 
f0001162 l       .text  00000000 
f0001166 l       .text  00000000 
f0001168 l       .text  00000000 
f0001168 l       .text  00000000 
f000116e l       .text  00000000 
f000116e l       .text  00000000 
f0001170 l       .text  00000000 
f0001170 l       .text  00000000 
f0001172 l       .text  00000000 
f0001172 l       .text  00000000 
f0001174 l       .text  00000000 
f0001174 l       .text  00000000 
f000117a l       .text  00000000 
f000117c l       .text  00000000 
f000117c l       .text  00000000 
f000117e l       .text  00000000 
f0001182 l       .text  00000000 
f0001182 l       .text  00000000 
f000118a l       .text  00000000 
f0001192 l       .text  00000000 
f0001196 l       .text  00000000 
f000119a l       .text  00000000 
f000119a l       .text  00000000 
f00011a0 l       .text  00000000 
f00011a4 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011ae l       .text  00000000 
f00011ae l       .text  00000000 
f00011b0 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b4 l       .text  00000000 
f00011b4 l       .text  00000000 
f00011b8 l       .text  00000000 
f00011be l       .text  00000000 
f00011be l       .text  00000000 
f00011c2 l       .text  00000000 
f00011c4 l       .text  00000000 
f00011c4 l       .text  00000000 
f00011c8 l       .text  00000000 
f00011cc l       .text  00000000 
f00011d0 l       .text  00000000 
f00011d0 l       .text  00000000 
f00011d4 l       .text  00000000 
f00011d6 l       .text  00000000 
f00011d6 l       .text  00000000 
f00011dc l       .text  00000000 
f00011e4 l       .text  00000000 
f00011e8 l       .text  00000000 
f00011ec l       .text  00000000 
f00011f0 l       .text  00000000 
f00011fa l       .text  00000000 
f00011fa l       .text  00000000 
f00011fe l       .text  00000000 
f0001202 l       .text  00000000 
f0001206 l       .text  00000000 
f0001206 l       .text  00000000 
f000120a l       .text  00000000 
e0002068 l     O .bss   00000004 xSchedulerRunning
f000120a l       .text  00000000 
f0001216 l       .text  00000000 
f000121e l       .text  00000000 
f0001220 l       .text  00000000 
f0001220 l       .text  00000000 
f0001224 l       .text  00000000 
f000122a l       .text  00000000 
f000122e l       .text  00000000 
e0002064 l     O .bss   00000004 uxCurrentNumberOfTasks
f000122e l       .text  00000000 
f000123c l       .text  00000000 
e00020bc l     O .bss   00000064 pxReadyTasksLists
f0001240 l       .text  00000000 
f0001248 l       .text  00000000 
f000124a l       .text  00000000 
f000124a l       .text  00000000 
f000124e l       .text  00000000 
f0001250 l       .text  00000000 
f0001254 l       .text  00000000 
f0001256 l       .text  00000000 
f000125a l       .text  00000000 
f000125e l       .text  00000000 
f0001264 l       .text  00000000 
f0001268 l       .text  00000000 
f000126c l       .text  00000000 
f0001270 l       .text  00000000 
f0001276 l       .text  00000000 
f0001276 l       .text  00000000 
f000127c l       .text  00000000 
f000127c l       .text  00000000 
f000127e l       .text  00000000 
f000127e l       .text  00000000 
f0001282 l       .text  00000000 
e000215c l     O .bss   00000014 xDelayedTaskList1
f0001282 l       .text  00000000 
f000128e l       .text  00000000 
e0002170 l     O .bss   00000014 xDelayedTaskList2
f000128e l       .text  00000000 
f000129a l       .text  00000000 
e0002148 l     O .bss   00000014 xPendingReadyList
f000129a l       .text  00000000 
f00012a4 l       .text  00000000 
e0002120 l     O .bss   00000014 xTasksWaitingTermination
f00012a4 l       .text  00000000 
f00012ae l       .text  00000000 
e0002134 l     O .bss   00000014 xSuspendedTaskList
f00012ae l       .text  00000000 
f00012b8 l       .text  00000000 
e000206c l     O .bss   00000004 pxDelayedTaskList
f00012b8 l       .text  00000000 
e0002070 l     O .bss   00000004 pxOverflowDelayedTaskList
f00012c4 l       .text  00000000 
f00012d0 l       .text  00000000 
e000205c l     O .bss   00000004 uxTaskNumber
f00012d0 l       .text  00000000 
f00012de l       .text  00000000 
e0002058 l     O .bss   00000004 uxTopReadyPriority
f00012f8 l       .text  00000000 
f00012f8 l       .text  00000000 
f0001300 l       .text  00000000 
f000131a l       .text  00000000 
f000131e l       .text  00000000 
f000131e l       .text  00000000 
f0001320 l       .text  00000000 
f0001320 l       .text  00000000 
f0001324 l       .text  00000000 
f0001326 l       .text  00000000 
f0001326 l       .text  00000000 
f000132a l       .text  00000000 
f000132a l       .text  00000000 
f0001332 l       .text  00000000 
f0001346 l       .text  00000000 
f0001346 l       .text  00000000 
e0002060 l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
e0002080 l     O .bss   00000004 xNextTaskUnblockTime
f0001346 l       .text  00000000 
f0001346 l       .text  00000000 
f0001346 l       .text  00000000 
f0001346 l       .text  00000000 
f0001350 l       .text  00000000 
f0001352 l       .text  00000000 
f000135c l       .text  00000000 
f000135e l       .text  00000000 
f0001360 l       .text  00000000 
f0001362 l       .text  00000000 
f0001368 l       .text  00000000 
f000136a l       .text  00000000 
f000136c l       .text  00000000 
f000136e l       .text  00000000 
f0001370 l       .text  00000000 
f0001374 l       .text  00000000 
f0001376 l       .text  00000000 
f0001376 l       .text  00000000 
f0001376 l       .text  00000000 
f0001376 l       .text  00000000 
f0001376 l       .text  00000000 
f0001378 l       .text  00000000 
f0001378 l       .text  00000000 
f000137c l       .text  00000000 
e0002074 l     O .bss   00000004 uxSchedulerSuspended
f0001386 l       .text  00000000 
e0002078 l     O .bss   00000004 xYieldPending
f0001388 l       .text  00000000 
f0001396 l       .text  00000000 
f00013a2 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b6 l       .text  00000000 
f00013c2 l       .text  00000000 
f00013c2 l       .text  00000000 
f0001432 l       .text  00000000 
f0001432 l       .text  00000000 
f0001434 l       .text  00000000 
f0001434 l       .text  00000000 
f0001438 l       .text  00000000 
f0001438 l       .text  00000000 
f0001442 l       .text  00000000 
f0001446 l       .text  00000000 
f000144a l       .text  00000000 
f0001450 l       .text  00000000 
f0001452 l       .text  00000000 
f0001454 l       .text  00000000 
f0001456 l       .text  00000000 
f000145a l       .text  00000000 
f000145a l       .text  00000000 
f0001462 l       .text  00000000 
f0001462 l       .text  00000000 
f0001462 l       .text  00000000 
f0001462 l       .text  00000000 
f0001462 l       .text  00000000 
f0001464 l       .text  00000000 
f0001464 l       .text  00000000 
f0001466 l       .text  00000000 
f00014c8 l     F .text  00000082 prvIdleTask
e000207c l     O .bss   00000004 xIdleTaskHandle
f0001488 l       .text  00000000 
f0001488 l       .text  00000000 
f000148a l       .text  00000000 
f000148a l       .text  00000000 
f000148e l       .text  00000000 
f0001492 l       .text  00000000 
f0001492 l       .text  00000000 
f000149e l       .text  00000000 
e0002084 l     O .bss   00000004 xTickCount
f00014a8 l       .text  00000000 
f00014b4 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014ca l       .text  00000000 
f00014d8 l       .text  00000000 
f00014d8 l       .text  00000000 
f0001500 l       .text  00000000 
f0001500 l       .text  00000000 
f0001502 l       .text  00000000 
f0001504 l       .text  00000000 
f0001504 l       .text  00000000 
f0001508 l       .text  00000000 
f000150c l       .text  00000000 
f000150e l       .text  00000000 
f0001512 l       .text  00000000 
f0001518 l       .text  00000000 
f000151c l       .text  00000000 
f000151c l       .text  00000000 
f0001522 l       .text  00000000 
f0001522 l       .text  00000000 
f0001526 l       .text  00000000 
f0001528 l       .text  00000000 
f0001528 l       .text  00000000 
f0001532 l       .text  00000000 
f0001538 l       .text  00000000 
f000153a l       .text  00000000 
f000153a l       .text  00000000 
f000153c l       .text  00000000 
f000153e l       .text  00000000 
f000153e l       .text  00000000 
f0001542 l       .text  00000000 
f0001542 l       .text  00000000 
f0001544 l       .text  00000000 
f0001544 l       .text  00000000 
f000154a l       .text  00000000 
f000154a l       .text  00000000 
f000154a l       .text  00000000 
f000154a l       .text  00000000 
f000154a l       .text  00000000 
f000154a l       .text  00000000 
f0001558 l       .text  00000000 
f0001558 l       .text  00000000 
f000155a l       .text  00000000 
f000155a l       .text  00000000 
f000155a l       .text  00000000 
f000155a l       .text  00000000 
f000155a l       .text  00000000 
f000155c l       .text  00000000 
f000155c l       .text  00000000 
f0001564 l       .text  00000000 
f0001564 l       .text  00000000 
f0001564 l       .text  00000000 
f0001568 l       .text  00000000 
f0001568 l       .text  00000000 
f0001572 l       .text  00000000 
f0001574 l       .text  00000000 
f000157e l       .text  00000000 
f0001584 l       .text  00000000 
f0001586 l       .text  00000000 
f0001586 l       .text  00000000 
f0001594 l       .text  00000000 
f0001596 l       .text  00000000 
f0001598 l       .text  00000000 
f00015a2 l       .text  00000000 
f00015a4 l       .text  00000000 
f00015ae l       .text  00000000 
f00015b6 l       .text  00000000 
f00015b8 l       .text  00000000 
f00015b8 l       .text  00000000 
f00015ba l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015de l       .text  00000000 
f00015e4 l       .text  00000000 
f00015e6 l       .text  00000000 
f00015ee l       .text  00000000 
f00015f0 l       .text  00000000 
f00015fa l       .text  00000000 
f00015fa l       .text  00000000 
f00015fa l       .text  00000000 
f00015fa l       .text  00000000 
f0001600 l       .text  00000000 
f0001606 l       .text  00000000 
f0001608 l       .text  00000000 
f000160c l       .text  00000000 
f0001610 l       .text  00000000 
f0001612 l       .text  00000000 
f0001618 l       .text  00000000 
f0001618 l       .text  00000000 
f000161c l       .text  00000000 
f0001624 l       .text  00000000 
f0001624 l       .text  00000000 
f000162c l       .text  00000000 
f000163c l       .text  00000000 
f0001640 l       .text  00000000 
f0001640 l       .text  00000000 
f0001644 l       .text  00000000 
f0001646 l       .text  00000000 
f000164a l       .text  00000000 
f000164e l       .text  00000000 
f000164e l       .text  00000000 
f0001650 l       .text  00000000 
f0001652 l       .text  00000000 
f0001652 l       .text  00000000 
f000165e l       .text  00000000 
f0001660 l       .text  00000000 
f0001660 l       .text  00000000 
f0001668 l       .text  00000000 
f000166a l       .text  00000000 
f0001674 l       .text  00000000 
e0002088 l     O .bss   00000004 xPendedTicks
f0001674 l       .text  00000000 
f000167e l       .text  00000000 
f000167e l       .text  00000000 
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
f0001682 l       .text  00000000 
f0001682 l       .text  00000000 
f0001684 l       .text  00000000 
f0001686 l       .text  00000000 
f000168a l       .text  00000000 
f000168a l       .text  00000000 
f000168e l       .text  00000000 
f0001690 l       .text  00000000 
f0001690 l       .text  00000000 
f000169e l       .text  00000000 
f000169e l       .text  00000000 
f000169e l       .text  00000000 
f000169e l       .text  00000000 
f000169e l       .text  00000000 
f000169e l       .text  00000000 
f00016a8 l       .text  00000000 
f00016aa l       .text  00000000 
f00016ba l       .text  00000000 
f00016ba l       .text  00000000 
f00016c4 l       .text  00000000 
f00016c8 l       .text  00000000 
f00016c8 l       .text  00000000 
f00016cc l       .text  00000000 
f00016cc l       .text  00000000 
f00016dc l       .text  00000000 
f00016e0 l       .text  00000000 
f00016e0 l       .text  00000000 
f00016e4 l       .text  00000000 
e000208c l     O .bss   00000004 xNumOfOverflows
f0001702 l       .text  00000000 
f0001702 l       .text  00000000 
f0001708 l       .text  00000000 
f000170a l       .text  00000000 
f000170a l       .text  00000000 
f0001714 l       .text  00000000 
f000171a l       .text  00000000 
f000171a l       .text  00000000 
f000171e l       .text  00000000 
f0001722 l       .text  00000000 
f0001728 l       .text  00000000 
f000172a l       .text  00000000 
f000172c l       .text  00000000 
f000173e l       .text  00000000 
f000173e l       .text  00000000 
f0001746 l       .text  00000000 
f0001746 l       .text  00000000 
f0001748 l       .text  00000000 
f0001748 l       .text  00000000 
f000174c l       .text  00000000 
f000174c l       .text  00000000 
f0001752 l       .text  00000000 
f0001758 l       .text  00000000 
f000175a l       .text  00000000 
f000175a l       .text  00000000 
f000175e l       .text  00000000 
f000175e l       .text  00000000 
f0001762 l       .text  00000000 
f0001764 l       .text  00000000 
f000176a l       .text  00000000 
f000176a l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176e l       .text  00000000 
f000176e l       .text  00000000 
f0001778 l       .text  00000000 
f000177a l       .text  00000000 
f000177a l       .text  00000000 
f000177e l       .text  00000000 
f000177e l       .text  00000000 
f0001782 l       .text  00000000 
f0001784 l       .text  00000000 
f000178e l       .text  00000000 
f000178e l       .text  00000000 
f000179e l       .text  00000000 
f000179e l       .text  00000000 
f00017a6 l       .text  00000000 
f00017b6 l       .text  00000000 
f00017ba l       .text  00000000 
f00017ba l       .text  00000000 
f00017c0 l       .text  00000000 
f00017c2 l       .text  00000000 
f00017c2 l       .text  00000000 
f00017c8 l       .text  00000000 
f00017c8 l       .text  00000000 
f00017cc l       .text  00000000 
f00017cc l       .text  00000000 
000014e9 l       .debug_loc     00000000 
00001525 l       .debug_loc     00000000 
0000154b l       .debug_loc     00000000 
00001566 l       .debug_loc     00000000 
000015a2 l       .debug_loc     00000000 
000015c8 l       .debug_loc     00000000 
000015ee l       .debug_loc     00000000 
0000161f l       .debug_loc     00000000 
0000167c l       .debug_loc     00000000 
000016a2 l       .debug_loc     00000000 
000016c8 l       .debug_loc     00000000 
000016ee l       .debug_loc     00000000 
00001714 l       .debug_loc     00000000 
0000173a l       .debug_loc     00000000 
00001760 l       .debug_loc     00000000 
0000177b l       .debug_loc     00000000 
000017a3 l       .debug_loc     00000000 
000017df l       .debug_loc     00000000 
00001812 l       .debug_loc     00000000 
0000182d l       .debug_loc     00000000 
00001848 l       .debug_loc     00000000 
0000186e l       .debug_loc     00000000 
000018b5 l       .debug_loc     00000000 
00001912 l       .debug_loc     00000000 
00001964 l       .debug_loc     00000000 
0000198a l       .debug_loc     00000000 
000019b0 l       .debug_loc     00000000 
000019e1 l       .debug_loc     00000000 
000019fc l       .debug_loc     00000000 
00001a22 l       .debug_loc     00000000 
00001a3d l       .debug_loc     00000000 
00001a58 l       .debug_loc     00000000 
00001a73 l       .debug_loc     00000000 
00001a9b l       .debug_loc     00000000 
00001ab6 l       .debug_loc     00000000 
00001ad1 l       .debug_loc     00000000 
00001b02 l       .debug_loc     00000000 
00001b28 l       .debug_loc     00000000 
00001b68 l       .debug_loc     00000000 
00001b99 l       .debug_loc     00000000 
00001bca l       .debug_loc     00000000 
00001bfb l       .debug_loc     00000000 
00001c16 l       .debug_loc     00000000 
00001c3c l       .debug_loc     00000000 
00001c99 l       .debug_loc     00000000 
00001cb4 l       .debug_loc     00000000 
00001d06 l       .debug_loc     00000000 
00001d4d l       .debug_loc     00000000 
00001d73 l       .debug_loc     00000000 
00001d9b l       .debug_loc     00000000 
00001dc1 l       .debug_loc     00000000 
00001ddc l       .debug_loc     00000000 
00001e39 l       .debug_loc     00000000 
00001e5f l       .debug_loc     00000000 
00001ebc l       .debug_loc     00000000 
00001ee2 l       .debug_loc     00000000 
00001f0a l       .debug_loc     00000000 
00001f62 l       .debug_loc     00000000 
00001fc4 l       .debug_loc     00000000 
00001fdf l       .debug_loc     00000000 
00001ffa l       .debug_loc     00000000 
00002015 l       .debug_loc     00000000 
00002030 l       .debug_loc     00000000 
00002063 l       .debug_loc     00000000 
000020af l       .debug_loc     00000000 
000020ca l       .debug_loc     00000000 
000020e5 l       .debug_loc     00000000 
00002100 l       .debug_loc     00000000 
0000211b l       .debug_loc     00000000 
0000214f l       .debug_loc     00000000 
0000218b l       .debug_loc     00000000 
000021a6 l       .debug_loc     00000000 
000021c1 l       .debug_loc     00000000 
000021dc l       .debug_loc     00000000 
000021f7 l       .debug_loc     00000000 
00002212 l       .debug_loc     00000000 
0000222d l       .debug_loc     00000000 
00002248 l       .debug_loc     00000000 
00002263 l       .debug_loc     00000000 
0000227e l       .debug_loc     00000000 
000022ba l       .debug_loc     00000000 
000022f0 l       .debug_loc     00000000 
00002337 l       .debug_loc     00000000 
00002352 l       .debug_loc     00000000 
000023b0 l       .debug_loc     00000000 
000023cb l       .debug_loc     00000000 
000023fd l       .debug_loc     00000000 
00002425 l       .debug_loc     00000000 
00002440 l       .debug_loc     00000000 
00002466 l       .debug_loc     00000000 
00002481 l       .debug_loc     00000000 
0000249d l       .debug_loc     00000000 
000024d9 l       .debug_loc     00000000 
0000250a l       .debug_loc     00000000 
0000253d l       .debug_loc     00000000 
00002558 l       .debug_loc     00000000 
00002573 l       .debug_loc     00000000 
000025a4 l       .debug_loc     00000000 
000025d5 l       .debug_loc     00000000 
00002606 l       .debug_loc     00000000 
0000263a l       .debug_loc     00000000 
00002660 l       .debug_loc     00000000 
0000267b l       .debug_loc     00000000 
00002696 l       .debug_loc     00000000 
000026b1 l       .debug_loc     00000000 
000026d7 l       .debug_loc     00000000 
000026f2 l       .debug_loc     00000000 
0000270d l       .debug_loc     00000000 
00002728 l       .debug_loc     00000000 
00002743 l       .debug_loc     00000000 
00002769 l       .debug_loc     00000000 
00002784 l       .debug_loc     00000000 
0000279f l       .debug_loc     00000000 
000027c5 l       .debug_loc     00000000 
000027e0 l       .debug_loc     00000000 
000027fb l       .debug_loc     00000000 
00002816 l       .debug_loc     00000000 
00002831 l       .debug_loc     00000000 
00002883 l       .debug_loc     00000000 
000028d5 l       .debug_loc     00000000 
000028fb l       .debug_loc     00000000 
00002916 l       .debug_loc     00000000 
0000293d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004650 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000420 l       .debug_ranges  00000000 
0000378f l       .debug_str     00000000 
0000475a l       .debug_str     00000000 
00004753 l       .debug_str     00000000 
00003305 l       .debug_str     00000000 
0000466a l       .debug_str     00000000 
00004683 l       .debug_str     00000000 
00004fc9 l       .debug_str     00000000 
0000471f l       .debug_str     00000000 
0000472a l       .debug_str     00000000 
0000363d l       .debug_str     00000000 
00004732 l       .debug_str     00000000 
00004744 l       .debug_str     00000000 
00004677 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00004703 l       .debug_str     00000000 
00004714 l       .debug_str     00000000 
00004692 l       .debug_str     00000000 
000046a8 l       .debug_str     00000000 
000046af l       .debug_str     00000000 
000046ba l       .debug_str     00000000 
000046c2 l       .debug_str     00000000 
0000469d l       .debug_str     00000000 
0000470e l       .debug_str     00000000 
000046ce l       .debug_str     00000000 
000046de l       .debug_str     00000000 
000046e6 l       .debug_str     00000000 
0000329f l       .debug_str     00000000 
000046ff l       .debug_str     00000000 
000046ef l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00004760 l       .debug_str     00000000 
00004772 l       .debug_str     00000000 
00004784 l       .debug_str     00000000 
0000478b l       .debug_str     00000000 
0000479d l       .debug_str     00000000 
000047b7 l       .debug_str     00000000 
000047c9 l       .debug_str     00000000 
000047e2 l       .debug_str     00000000 
000047f5 l       .debug_str     00000000 
00004807 l       .debug_str     00000000 
00004819 l       .debug_str     00000000 
0000482c l       .debug_str     00000000 
00004839 l       .debug_str     00000000 
00004856 l       .debug_str     00000000 
0000486d l       .debug_str     00000000 
000032a0 l       .debug_str     00000000 
00002ce3 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
0000487f l       .debug_str     00000000 
00004894 l       .debug_str     00000000 
000048a2 l       .debug_str     00000000 
00003630 l       .debug_str     00000000 
000048b2 l       .debug_str     00000000 
000048c7 l       .debug_str     00000000 
000048d2 l       .debug_str     00000000 
000048df l       .debug_str     00000000 
000048ef l       .debug_str     00000000 
000048f8 l       .debug_str     00000000 
000048ff l       .debug_str     00000000 
00004908 l       .debug_str     00000000 
00004913 l       .debug_str     00000000 
0000491c l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00004925 l       .debug_str     00000000 
0000493a l       .debug_str     00000000 
00004945 l       .debug_str     00000000 
0000494c l       .debug_str     00000000 
00004959 l       .debug_str     00000000 
00004966 l       .debug_str     00000000 
00004974 l       .debug_str     00000000 
0000497d l       .debug_str     00000000 
00000d14 l       .debug_str     00000000 
00003352 l       .debug_str     00000000 
000049c0 l       .debug_str     00000000 
000049b1 l       .debug_str     00000000 
00004986 l       .debug_str     00000000 
00004994 l       .debug_str     00000000 
000049a4 l       .debug_str     00000000 
000049cf l       .debug_str     00000000 
000049e2 l       .debug_str     00000000 
000049fb l       .debug_str     00000000 
000032ea l       .debug_str     00000000 
00004db8 l       .debug_str     00000000 
00004f3a l       .debug_str     00000000 
00000388 l       .debug_ranges  00000000 
000003a8 l       .debug_ranges  00000000 
00004a12 l       .debug_str     00000000 
00004a1f l       .debug_str     00000000 
00004a29 l       .debug_str     00000000 
00004a3d l       .debug_str     00000000 
00004a53 l       .debug_str     00000000 
00004b6d l       .debug_str     00000000 
00004a63 l       .debug_str     00000000 
00004a70 l       .debug_str     00000000 
00004a76 l       .debug_str     00000000 
00003319 l       .debug_str     00000000 
00004dc5 l       .debug_str     00000000 
000003c0 l       .debug_ranges  00000000 
00004a92 l       .debug_str     00000000 
00004a9f l       .debug_str     00000000 
00004b7f l       .debug_str     00000000 
0000362a l       .debug_str     00000000 
00004dd3 l       .debug_str     00000000 
00004ddf l       .debug_str     00000000 
00004ded l       .debug_str     00000000 
00004e05 l       .debug_str     00000000 
00004b98 l       .debug_str     00000000 
00004e0d l       .debug_str     00000000 
00004baa l       .debug_str     00000000 
00004e16 l       .debug_str     00000000 
00004bc3 l       .debug_str     00000000 
00004e2c l       .debug_str     00000000 
00004e3a l       .debug_str     00000000 
00004e49 l       .debug_str     00000000 
00004e5f l       .debug_str     00000000 
00004bd4 l       .debug_str     00000000 
00004e75 l       .debug_str     00000000 
000032ab l       .debug_str     00000000 
00004e84 l       .debug_str     00000000 
00004e92 l       .debug_str     00000000 
0000360c l       .debug_str     00000000 
00004aae l       .debug_str     00000000 
00004be1 l       .debug_str     00000000 
00004e9e l       .debug_str     00000000 
00004bed l       .debug_str     00000000 
00004eac l       .debug_str     00000000 
000033cd l       .debug_str     00000000 
000036cb l       .debug_str     00000000 
00004ac5 l       .debug_str     00000000 
00004c00 l       .debug_str     00000000 
00004c0c l       .debug_str     00000000 
00004ae5 l       .debug_str     00000000 
00004c1e l       .debug_str     00000000 
00004ec3 l       .debug_str     00000000 
00004ed3 l       .debug_str     00000000 
00004eda l       .debug_str     00000000 
00004c2d l       .debug_str     00000000 
00004ee8 l       .debug_str     00000000 
00004ef8 l       .debug_str     00000000 
00004f08 l       .debug_str     00000000 
000003d8 l       .debug_ranges  00000000 
000003f0 l       .debug_ranges  00000000 
00004c40 l       .debug_str     00000000 
00004f0f l       .debug_str     00000000 
00004c52 l       .debug_str     00000000 
00004c6b l       .debug_str     00000000 
00003325 l       .debug_str     00000000 
00004f16 l       .debug_str     00000000 
00004af7 l       .debug_str     00000000 
00004c82 l       .debug_str     00000000 
00004f23 l       .debug_str     00000000 
00004f31 l       .debug_str     00000000 
00004c91 l       .debug_str     00000000 
00004f39 l       .debug_str     00000000 
00004f42 l       .debug_str     00000000 
00004f4d l       .debug_str     00000000 
00004f58 l       .debug_str     00000000 
00004f62 l       .debug_str     00000000 
00004cb2 l       .debug_str     00000000 
00004f6c l       .debug_str     00000000 
00004f7c l       .debug_str     00000000 
00004cc4 l       .debug_str     00000000 
00004cd4 l       .debug_str     00000000 
00004f8b l       .debug_str     00000000 
00004fd9 l       .debug_str     00000000 
00004b07 l       .debug_str     00000000 
00004cea l       .debug_str     00000000 
00004f97 l       .debug_str     00000000 
00004fad l       .debug_str     00000000 
00004d09 l       .debug_str     00000000 
00004d28 l       .debug_str     00000000 
00004fb9 l       .debug_str     00000000 
00004d41 l       .debug_str     00000000 
00004fc8 l       .debug_str     00000000 
00000408 l       .debug_ranges  00000000 
00004d63 l       .debug_str     00000000 
00004b30 l       .debug_str     00000000 
00004b13 l       .debug_str     00000000 
00004b63 l       .debug_str     00000000 
00004b59 l       .debug_str     00000000 
00004b3a l       .debug_str     00000000 
00004b49 l       .debug_str     00000000 
00004d78 l       .debug_str     00000000 
00004fd8 l       .debug_str     00000000 
00004fe6 l       .debug_str     00000000 
00004d8d l       .debug_str     00000000 
00004d9e l       .debug_str     00000000 
00004b8d l       .debug_str     00000000 
0000337c l       .debug_str     00000000 
000032f6 l       .debug_str     00000000 
000005b8 l       .debug_frame   00000000 
f0001346 l       .text  00000000 
f0001376 l       .text  00000000 
f0001462 l       .text  00000000 
f00014c8 l       .text  00000000 
f000154a l       .text  00000000 
f000155a l       .text  00000000 
f000169e l       .text  00000000 
f00017cc l       .text  00000000 
00000000 l    df *ABS*  00000000 list.c
f00017cc l       .text  00000000 
f00017cc l       .text  00000000 
f00017cc l       .text  00000000 
f00017cc l       .text  00000000 
f00017d0 l       .text  00000000 
f00017d4 l       .text  00000000 
f00017d6 l       .text  00000000 
f00017d8 l       .text  00000000 
f00017da l       .text  00000000 
f00017de l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e4 l       .text  00000000 
f00017e6 l       .text  00000000 
f00017e6 l       .text  00000000 
f00017e6 l       .text  00000000 
f00017e6 l       .text  00000000 
f00017e6 l       .text  00000000 
f00017e6 l       .text  00000000 
f00017e8 l       .text  00000000 
f00017ea l       .text  00000000 
f00017ec l       .text  00000000 
f00017ec l       .text  00000000 
f00017ee l       .text  00000000 
f00017f0 l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f4 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017fa l       .text  00000000 
f00017fe l       .text  00000000 
f0001800 l       .text  00000000 
f0001804 l       .text  00000000 
f0001806 l       .text  00000000 
f0001808 l       .text  00000000 
f0001808 l       .text  00000000 
00002958 l       .debug_loc     00000000 
00002973 l       .debug_loc     00000000 
0000298e l       .debug_loc     00000000 
000029a9 l       .debug_loc     00000000 
000029c4 l       .debug_loc     00000000 
000029ea l       .debug_loc     00000000 
00002a05 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004ff3 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000548 l       .debug_ranges  00000000 
00004703 l       .debug_str     00000000 
00004714 l       .debug_str     00000000 
00004692 l       .debug_str     00000000 
000046a8 l       .debug_str     00000000 
000046af l       .debug_str     00000000 
000046ba l       .debug_str     00000000 
000046c2 l       .debug_str     00000000 
0000469d l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
0000470e l       .debug_str     00000000 
000046ce l       .debug_str     00000000 
000046de l       .debug_str     00000000 
000046e6 l       .debug_str     00000000 
0000329f l       .debug_str     00000000 
000046ff l       .debug_str     00000000 
000046ef l       .debug_str     00000000 
00004a53 l       .debug_str     00000000 
00004ed3 l       .debug_str     00000000 
00004a29 l       .debug_str     00000000 
0000500c l       .debug_str     00000000 
00004a9f l       .debug_str     00000000 
00005013 l       .debug_str     00000000 
00004b07 l       .debug_str     00000000 
00005021 l       .debug_str     00000000 
00005033 l       .debug_str     00000000 
00004a92 l       .debug_str     00000000 
0000503e l       .debug_str     00000000 
00004784 l       .debug_str     00000000 
000008f8 l       .debug_frame   00000000 
f00017e0 l       .text  00000000 
f00017e6 l       .text  00000000 
f0001808 l       .text  00000000 
00000000 l    df *ABS*  00000000 heap_1.c
f0001808 l       .text  00000000 
f0001808 l       .text  00000000 
f0001808 l       .text  00000000 
f000180a l       .text  00000000 
f0001812 l       .text  00000000 
f0001814 l       .text  00000000 
f0001814 l       .text  00000000 
f0001818 l       .text  00000000 
f000181c l       .text  00000000 
f0001820 l       .text  00000000 
f0001822 l       .text  00000000 
f0001824 l       .text  00000000 
f0001826 l       .text  00000000 
f0001828 l       .text  00000000 
e0002090 l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
f0001828 l       .text  00000000 
f0001832 l       .text  00000000 
f0001834 l       .text  00000000 
f0001834 l       .text  00000000 
f0001838 l       .text  00000000 
f0001838 l       .text  00000000 
f0001842 l       .text  00000000 
f0001848 l       .text  00000000 
e0002094 l     O .bss   00000004 xNextFreeByte
f000184a l       .text  00000000 
f0001856 l       .text  00000000 
f000185a l       .text  00000000 
f0001866 l       .text  00000000 
f000186a l       .text  00000000 
f000186a l       .text  00000000 
f000186c l       .text  00000000 
f000186e l       .text  00000000 
f000186e l       .text  00000000 
f0001870 l       .text  00000000 
f0001874 l       .text  00000000 
f0001876 l       .text  00000000 
f0001876 l       .text  00000000 
f0001878 l       .text  00000000 
f0001878 l       .text  00000000 
f000187c l       .text  00000000 
f000187c l       .text  00000000 
f000187e l       .text  00000000 
f0001884 l       .text  00000000 
f000188a l       .text  00000000 
f000188a l       .text  00000000 
f000188a l       .text  00000000 
f000188a l       .text  00000000 
f000188a l       .text  00000000 
f000188a l       .text  00000000 
f000188c l       .text  00000000 
f000188c l       .text  00000000 
00002a20 l       .debug_loc     00000000 
00002a5c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000504d l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000578 l       .debug_ranges  00000000 
00004a12 l       .debug_str     00000000 
00005079 l       .debug_str     00000000 
000050c1 l       .debug_str     00000000 
000050cd l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00005088 l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00004af7 l       .debug_str     00000000 
00004c1e l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
000035ef l       .debug_str     00000000 
00004a1f l       .debug_str     00000000 
000050d6 l       .debug_str     00000000 
00005096 l       .debug_str     00000000 
000050ac l       .debug_str     00000000 
0000095c l       .debug_frame   00000000 
f000188a l       .text  00000000 
f000188c l       .text  00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
f000188c l       .text  00000000 
f000188c l       .text  00000000 
f000188c l       .text  00000000 
f000188c l       .text  00000000 
f0001890 l       .text  00000000 
f0001890 l       .text  00000000 
f0001890 l       .text  00000000 
f0001890 l       .text  00000000 
f0001890 l       .text  00000000 
f0001890 l       .text  00000000 
f0001894 l       .text  00000000 
f0001894 l       .text  00000000 
00000000 l       .debug_str     00000000 
000050d9 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000005a0 l       .debug_ranges  00000000 
00003478 l       .debug_str     00000000 
00003493 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000009bc l       .debug_frame   00000000 
f0001890 l       .text  00000000 
f0001894 l       .text  00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
f0001894 l       .text  00000000 
f0001894 l       .text  00000000 
f0001894 l       .text  00000000 
f0001896 l       .text  00000000 
f000189c l       .text  00000000 
f000189e l       .text  00000000 
f00018a0 l       .text  00000000 
f00018a2 l       .text  00000000 
f00018a2 l       .text  00000000 
f00018ac l       .text  00000000 
000100f0 l     O .logs.fields   00000014 rand_testutils_init.kLogFields
f00018ae l       .text  00000000 
f00018ba l       .text  00000000 
f00018ba l       .text  00000000 
f00018bc l       .text  00000000 
f00018bc l       .text  00000000 
f00018d0 l       .text  00000000 
f00018d0 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018d8 l       .text  00000000 
f00018d8 l       .text  00000000 
f00018fa l       .text  00000000 
f00018fa l       .text  00000000 
f0001904 l       .text  00000000 
f000190c l       .text  00000000 
f0001910 l       .text  00000000 
f0001910 l       .text  00000000 
f0001914 l       .text  00000000 
f0001916 l       .text  00000000 
f000191e l       .text  00000000 
f000191e l       .text  00000000 
00010104 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
00010118 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
00002a9b l       .debug_loc     00000000 
00002ad7 l       .debug_loc     00000000 
00002b08 l       .debug_loc     00000000 
00002b44 l       .debug_loc     00000000 
00002b6a l       .debug_loc     00000000 
00002b90 l       .debug_loc     00000000 
00002bc1 l       .debug_loc     00000000 
00002bf2 l       .debug_loc     00000000 
00002c18 l       .debug_loc     00000000 
00002c40 l       .debug_loc     00000000 
00002c5b l       .debug_loc     00000000 
00002c76 l       .debug_loc     00000000 
00002c91 l       .debug_loc     00000000 
00002cac l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000510f l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000005d0 l       .debug_ranges  00000000 
000033b9 l       .debug_str     00000000 
00002f5f l       .debug_str     00000000 
00003052 l       .debug_str     00000000 
0000304a l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fe7 l       .debug_str     00000000 
00002fb4 l       .debug_str     00000000 
00002fcc l       .debug_str     00000000 
00005cb0 l       .debug_str     00000000 
00002fd6 l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
00002fbd l       .debug_str     00000000 
00002fb0 l       .debug_str     00000000 
00002f6a l       .debug_str     00000000 
00002f7b l       .debug_str     00000000 
00002f8c l       .debug_str     00000000 
00002f9e l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00005136 l       .debug_str     00000000 
00005151 l       .debug_str     00000000 
000051e0 l       .debug_str     00000000 
00005212 l       .debug_str     00000000 
00005216 l       .debug_str     00000000 
000051f5 l       .debug_str     00000000 
00003219 l       .debug_str     00000000 
0000346c l       .debug_str     00000000 
000030e9 l       .debug_str     00000000 
000030fe l       .debug_str     00000000 
00003117 l       .debug_str     00000000 
00003129 l       .debug_str     00000000 
0000313a l       .debug_str     00000000 
0000314c l       .debug_str     00000000 
000031a6 l       .debug_str     00000000 
0000315e l       .debug_str     00000000 
0000316b l       .debug_str     00000000 
0000317f l       .debug_str     00000000 
00003190 l       .debug_str     00000000 
000032be l       .debug_str     00000000 
000032d3 l       .debug_str     00000000 
00003393 l       .debug_str     00000000 
000051b5 l       .debug_str     00000000 
0000516d l       .debug_str     00000000 
0000517a l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
0000517e l       .debug_str     00000000 
000051cb l       .debug_str     00000000 
0000518a l       .debug_str     00000000 
0000304e l       .debug_str     00000000 
00002ffa l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
000051fb l       .debug_str     00000000 
0000521a l       .debug_str     00000000 
00005220 l       .debug_str     00000000 
00004078 l       .debug_str     00000000 
00005231 l       .debug_str     00000000 
00005225 l       .debug_str     00000000 
0000522a l       .debug_str     00000000 
000030a5 l       .debug_str     00000000 
000005b8 l       .debug_ranges  00000000 
00000e35 l       .debug_str     00000000 
0000523d l       .debug_str     00000000 
000051ae l       .debug_str     00000000 
000030d4 l       .debug_str     00000000 
000030c1 l       .debug_str     00000000 
00003072 l       .debug_str     00000000 
00005185 l       .debug_str     00000000 
0000308d l       .debug_str     00000000 
000030b6 l       .debug_str     00000000 
0000305f l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000009f0 l       .debug_frame   00000000 
f000191e l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
f000191e l       .text  00000000 
f000191e l       .text  00000000 
f000191e l       .text  00000000 
f000191e l       .text  00000000 
f0001920 l       .text  00000000 
f0001922 l       .text  00000000 
f0001926 l       .text  00000000 
f0001928 l       .text  00000000 
f000192a l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
00002cc7 l       .debug_loc     00000000 
00002ce2 l       .debug_loc     00000000 
00002cfd l       .debug_loc     00000000 
00002d18 l       .debug_loc     00000000 
00002d33 l       .debug_loc     00000000 
00002d62 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000523f l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000600 l       .debug_ranges  00000000 
00003215 l       .debug_str     00000000 
000031b2 l       .debug_str     00000000 
000031b9 l       .debug_str     00000000 
000031c3 l       .debug_str     00000000 
000031ce l       .debug_str     00000000 
000031d9 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
000031f8 l       .debug_str     00000000 
00003207 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000052ec l       .debug_str     00000000 
00005274 l       .debug_str     00000000 
00005292 l       .debug_str     00000000 
000052b0 l       .debug_str     00000000 
000052ce l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
000033a3 l       .debug_str     00000000 
00002ffa l       .debug_str     00000000 
00003052 l       .debug_str     00000000 
00002d90 l       .debug_str     00000000 
00002da7 l       .debug_str     00000000 
00002daa l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00002dc6 l       .debug_str     00000000 
00002db5 l       .debug_str     00000000 
00002db0 l       .debug_str     00000000 
0000420c l       .debug_str     00000000 
00002dd9 l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
00002df8 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00004183 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
00004374 l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00004197 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
00005303 l       .debug_str     00000000 
00006269 l       .debug_str     00000000 
00005339 l       .debug_str     00000000 
00005343 l       .debug_str     00000000 
00003551 l       .debug_str     00000000 
0000305f l       .debug_str     00000000 
0000304e l       .debug_str     00000000 
00005320 l       .debug_str     00000000 
00000a98 l       .debug_frame   00000000 
f000192c l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192e l       .text  00000000 
f0001930 l       .text  00000000 
f0001936 l       .text  00000000 
f000193a l       .text  00000000 
f000193e l       .text  00000000 
f0001942 l       .text  00000000 
f0001942 l       .text  00000000 
f000194c l       .text  00000000 
f000194e l       .text  00000000 
f000194e l       .text  00000000 
f0001950 l       .text  00000000 
f0001950 l       .text  00000000 
f0001956 l       .text  00000000 
f0001956 l       .text  00000000 
f0001960 l       .text  00000000 
f0001962 l       .text  00000000 
f0001962 l       .text  00000000 
f0001976 l       .text  00000000 
f0001976 l       .text  00000000 
f0001978 l       .text  00000000 
f0001978 l       .text  00000000 
f0001982 l       .text  00000000 
f0001984 l       .text  00000000 
f0001984 l       .text  00000000 
f0001998 l       .text  00000000 
f0001998 l       .text  00000000 
f000199a l       .text  00000000 
00010140 l     O .logs.fields   00000014 test_status_set.kLogFields.2
f000199a l       .text  00000000 
f00019a6 l       .text  00000000 
f00019a6 l       .text  00000000 
f00019b0 l       .text  00000000 
f00019b2 l       .text  00000000 
f00019b2 l       .text  00000000 
0001012c l     O .logs.fields   00000014 test_status_set.kLogFields
f00019ba l       .text  00000000 
f00019c6 l       .text  00000000 
f00019c6 l       .text  00000000 
f00019d0 l       .text  00000000 
f00019d2 l       .text  00000000 
f00019d2 l       .text  00000000 
f00019da l       .text  00000000 
f00019da l       .text  00000000 
f00019da l       .text  00000000 
00002d7d l       .debug_loc     00000000 
00002d9b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000059c1 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00003393 l       .debug_str     00000000 
00002f5f l       .debug_str     00000000 
0000346c l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fe7 l       .debug_str     00000000 
00002fb4 l       .debug_str     00000000 
00002fcc l       .debug_str     00000000 
00005cb0 l       .debug_str     00000000 
00002fd6 l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
00002fbd l       .debug_str     00000000 
00002fb0 l       .debug_str     00000000 
00002f6a l       .debug_str     00000000 
00002f7b l       .debug_str     00000000 
00002f8c l       .debug_str     00000000 
00002f9e l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
000030e9 l       .debug_str     00000000 
000030fe l       .debug_str     00000000 
00003117 l       .debug_str     00000000 
00003129 l       .debug_str     00000000 
0000313a l       .debug_str     00000000 
0000314c l       .debug_str     00000000 
000059ef l       .debug_str     00000000 
00005a16 l       .debug_str     00000000 
00005a08 l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
00004183 l       .debug_str     00000000 
00004374 l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00004197 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
000032d3 l       .debug_str     00000000 
000032be l       .debug_str     00000000 
000035e9 l       .debug_str     00000000 
00000acc l       .debug_frame   00000000 
f00019da l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
f00019da l       .text  00000000 
f00019da l       .text  00000000 
f00019da l       .text  00000000 
f00019da l       .text  00000000 
f00019de l       .text  00000000 
f00019de l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e0 l       .text  00000000 
00002dae l       .debug_loc     00000000 
00002dc9 l       .debug_loc     00000000 
00002df0 l       .debug_loc     00000000 
00002e17 l       .debug_loc     00000000 
00002e33 l       .debug_loc     00000000 
00002e60 l       .debug_loc     00000000 
00002e87 l       .debug_loc     00000000 
00002eae l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005a2e l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000618 l       .debug_ranges  00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
00005a4b l       .debug_str     00000000 
00005a5c l       .debug_str     00000000 
00005a66 l       .debug_str     00000000 
00005a71 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00005a9f l       .debug_str     00000000 
00003088 l       .debug_str     00000000 
000040f7 l       .debug_str     00000000 
00005a85 l       .debug_str     00000000 
00005a7e l       .debug_str     00000000 
00005a8c l       .debug_str     00000000 
000035e9 l       .debug_str     00000000 
00005ab0 l       .debug_str     00000000 
00000af8 l       .debug_frame   00000000 
f00019e0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ibex.c
f00019e0 l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e4 l       .text  00000000 
f00019e4 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019ea l       .text  00000000 
f00019ea l       .text  00000000 
f00019ec l       .text  00000000 
f00019ec l       .text  00000000 
f00019ec l       .text  00000000 
f00019ec l       .text  00000000 
f00019ec l       .text  00000000 
f00019ec l       .text  00000000 
f00019f0 l       .text  00000000 
f00019f0 l       .text  00000000 
f00019f2 l       .text  00000000 
f00019f2 l       .text  00000000 
00002eca l       .debug_loc     00000000 
00002ee5 l       .debug_loc     00000000 
00002f00 l       .debug_loc     00000000 
00002f1b l       .debug_loc     00000000 
00002f42 l       .debug_loc     00000000 
00002f69 l       .debug_loc     00000000 
00002f85 l       .debug_loc     00000000 
00002fa0 l       .debug_loc     00000000 
00002fbc l       .debug_loc     00000000 
00002fe3 l       .debug_loc     00000000 
0000300a l       .debug_loc     00000000 
00003030 l       .debug_loc     00000000 
00003057 l       .debug_loc     00000000 
0000307e l       .debug_loc     00000000 
0000309a l       .debug_loc     00000000 
000030b5 l       .debug_loc     00000000 
000030dc l       .debug_loc     00000000 
00003103 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005ac2 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000670 l       .debug_ranges  00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
00003dff l       .debug_str     00000000 
00003f09 l       .debug_str     00000000 
00003def l       .debug_str     00000000 
00003de0 l       .debug_str     00000000 
00003f04 l       .debug_str     00000000 
00005aeb l       .debug_str     00000000 
00005a4b l       .debug_str     00000000 
00005a71 l       .debug_str     00000000 
00005a66 l       .debug_str     00000000 
00005a5c l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00005afb l       .debug_str     00000000 
00003080 l       .debug_str     00000000 
00005adf l       .debug_str     00000000 
00005b29 l       .debug_str     00000000 
00005b12 l       .debug_str     00000000 
00000640 l       .debug_ranges  00000000 
00005b3c l       .debug_str     00000000 
00000658 l       .debug_ranges  00000000 
00005b1a l       .debug_str     00000000 
00005b0d l       .debug_str     00000000 
00005a85 l       .debug_str     00000000 
000040f7 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00000b58 l       .debug_frame   00000000 
f00019e6 l       .text  00000000 
f00019ec l       .text  00000000 
f00019f2 l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
f00019f2 l       .text  00000000 
f00019f2 l       .text  00000000 
f00019f2 l       .text  00000000 
f00019f4 l       .text  00000000 
f00019fa l       .text  00000000 
f00019fc l       .text  00000000 
f0001a0a l       .text  00000000 
f0001a14 l       .text  00000000 
f0001a1a l       .text  00000000 
f0001a1a l       .text  00000000 
f0001a1c l       .text  00000000 
f0001a20 l       .text  00000000 
f0001a20 l       .text  00000000 
f0001a2a l       .text  00000000 
f0001a2a l       .text  00000000 
f0001a2c l       .text  00000000 
f0001a30 l       .text  00000000 
f0001a30 l       .text  00000000 
f0001a32 l       .text  00000000 
f0001a32 l       .text  00000000 
f0001a34 l       .text  00000000 
f0001a34 l       .text  00000000 
f0001a38 l       .text  00000000 
f0001a38 l       .text  00000000 
f0001a3e l       .text  00000000 
f0001a4c l       .text  00000000 
f0001a4c l       .text  00000000 
e0002098 l     O .bss   00000002 base_log_internal_core.global_log_counter
f0001a54 l       .text  00000000 
f0001a60 l       .text  00000000 
f0001a62 l       .text  00000000 
f0001a6c l       .text  00000000 
f0001a6c l       .text  00000000 
f0001a78 l       .text  00000000 
f0001a78 l       .text  00000000 
f0001a7a l       .text  00000000 
f0001a7c l       .text  00000000 
f0001a80 l       .text  00000000 
f0001a80 l       .text  00000000 
f0001a8a l       .text  00000000 
f0001a8a l       .text  00000000 
f0001a94 l       .text  00000000 
f0001a94 l       .text  00000000 
f0001a94 l       .text  00000000 
f0001a94 l       .text  00000000 
f0001a94 l       .text  00000000 
f0001a96 l       .text  00000000 
f0001a9c l       .text  00000000 
f0001a9c l       .text  00000000 
f0001aa6 l       .text  00000000 
f0001aa6 l       .text  00000000 
f0001aac l       .text  00000000 
f0001aac l       .text  00000000 
f0001ab0 l       .text  00000000 
f0001ab0 l       .text  00000000 
f0001ab2 l       .text  00000000 
f0001ab2 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001ab6 l       .text  00000000 
f0001aba l       .text  00000000 
f0001abe l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac4 l       .text  00000000 
f0001ac4 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001ac8 l       .text  00000000 
0000311f l       .debug_loc     00000000 
00003147 l       .debug_loc     00000000 
00003162 l       .debug_loc     00000000 
0000319e l       .debug_loc     00000000 
000031ba l       .debug_loc     00000000 
000031d5 l       .debug_loc     00000000 
000031f0 l       .debug_loc     00000000 
0000320b l       .debug_loc     00000000 
00003249 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005b51 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000006b8 l       .debug_ranges  00000000 
000032d3 l       .debug_str     00000000 
00005b6d l       .debug_str     00000000 
00005bbb l       .debug_str     00000000 
00005bbf l       .debug_str     00000000 
00005bcd l       .debug_str     00000000 
00002fd7 l       .debug_str     00000000 
0000337c l       .debug_str     00000000 
000032f6 l       .debug_str     00000000 
00002fb0 l       .debug_str     00000000 
00002f6a l       .debug_str     00000000 
00002f7b l       .debug_str     00000000 
00002f8c l       .debug_str     00000000 
00002f9e l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00003754 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00005b80 l       .debug_str     00000000 
00002fb4 l       .debug_str     00000000 
00002fbd l       .debug_str     00000000 
00005b93 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
00005b9a l       .debug_str     00000000 
00005ba2 l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00005bae l       .debug_str     00000000 
00004183 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
00004374 l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00004197 l       .debug_str     00000000 
000032be l       .debug_str     00000000 
00002fd6 l       .debug_str     00000000 
00005bd7 l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00002fe7 l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fcc l       .debug_str     00000000 
00005cb0 l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
000005f7 l       .debug_str     00000000 
000005ed l       .debug_str     00000000 
00000bf4 l       .debug_frame   00000000 
f0001a94 l       .text  00000000 
f0001ac8 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
f0001ac8 l     F .text  00000004 base_dev_null
e000209c l     O .bss   00000008 base_stdout
f0001ac8 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001aca l       .text  00000000 
f0001aca l       .text  00000000 
f0001acc l       .text  00000000 
f0001acc l       .text  00000000 
f0001acc l       .text  00000000 
f0001acc l       .text  00000000 
f0001acc l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad6 l       .text  00000000 
f0001ae2 l     F .text  00000040 base_dev_uart
f0001ade l       .text  00000000 
f0001ae0 l       .text  00000000 
f0001ae0 l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001ae4 l       .text  00000000 
f0001ae4 l       .text  00000000 
f0001aee l       .text  00000000 
f0001aee l       .text  00000000 
f0001aee l       .text  00000000 
f0001af0 l       .text  00000000 
f0001af2 l       .text  00000000 
f0001af4 l       .text  00000000 
f0001af6 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b08 l       .text  00000000 
f0001b0c l       .text  00000000 
f0001b0c l       .text  00000000 
f0001b0e l       .text  00000000 
f0001b10 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b24 l       .text  00000000 
f0001b26 l       .text  00000000 
f0001b34 l       .text  00000000 
f0001b3c l       .text  00000000 
f0001b3c l       .text  00000000 
f0001b42 l       .text  00000000 
f0001b42 l       .text  00000000 
f0001b44 l       .text  00000000 
f0001b44 l       .text  00000000 
f0001b46 l       .text  00000000 
f0001b46 l       .text  00000000 
f0001b4a l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b4e l       .text  00000000 
f0001b4e l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b5c l       .text  00000000 
f0001b62 l       .text  00000000 
f0001b62 l       .text  00000000 
f0001b64 l       .text  00000000 
f0001b64 l       .text  00000000 
f0001b6a l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b70 l       .text  00000000 
f0001b8a l       .text  00000000 
f0001b8c l       .text  00000000 
f0001b8e l       .text  00000000 
f0001b90 l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b94 l       .text  00000000 
f0001b96 l       .text  00000000 
f0001b9e l       .text  00000000 
f0001b9e l       .text  00000000 
f0001ba0 l       .text  00000000 
f0001ba0 l       .text  00000000 
f0001ba4 l       .text  00000000 
f0001ba8 l       .text  00000000 
f0001bbc l       .text  00000000 
f0001bbc l       .text  00000000 
f0001bc6 l       .text  00000000 
f0001bca l       .text  00000000 
f0001bce l       .text  00000000 
f0001bd0 l       .text  00000000 
f0001bd2 l       .text  00000000 
f0001bd2 l       .text  00000000 
f0001bd4 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001bdc l       .text  00000000 
f0001bdc l       .text  00000000 
f0001bde l       .text  00000000 
f0001bde l       .text  00000000 
f0001be2 l       .text  00000000 
f0001be2 l       .text  00000000 
f0001bee l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bfe l       .text  00000000 
f0001bfe l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c0a l       .text  00000000 
f0001c0a l       .text  00000000 
f0001c18 l       .text  00000000 
f0001c18 l       .text  00000000 
f0001c1c l       .text  00000000 
f0001c24 l       .text  00000000 
f0001c28 l       .text  00000000 
f0001c28 l       .text  00000000 
f0001c2c l       .text  00000000 
f0001c32 l       .text  00000000 
f0001c36 l       .text  00000000 
f0001c38 l       .text  00000000 
f0001c3c l       .text  00000000 
f0001c3c l       .text  00000000 
f0001c40 l       .text  00000000 
f0001c46 l       .text  00000000 
f0001c46 l       .text  00000000 
f0001c4a l       .text  00000000 
f0001c5e l       .text  00000000 
f0001c5e l       .text  00000000 
f0001c60 l       .text  00000000 
f0001c66 l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c6e l       .text  00000000 
f0001c6e l       .text  00000000 
f0001c76 l       .text  00000000 
f0001c78 l       .text  00000000 
f0001c86 l       .text  00000000 
f0001c86 l       .text  00000000 
f0001c8a l       .text  00000000 
f0001c96 l       .text  00000000 
f0001c96 l       .text  00000000 
f0001c9a l       .text  00000000 
f0001c9a l       .text  00000000 
f0001ca8 l       .text  00000000 
f0001ca8 l       .text  00000000 
f0001caa l       .text  00000000 
f0001cae l       .text  00000000 
f0001cae l       .text  00000000 
f0001cb2 l       .text  00000000 
f00031ee l     O .rodata        00000010 kDigitsLow
f0001cc4 l       .text  00000000 
f0001cc4 l       .text  00000000 
f0001ccc l       .text  00000000 
f0001cd4 l       .text  00000000 
f0001cd4 l       .text  00000000 
f0001cde l       .text  00000000 
f0001cde l       .text  00000000 
f0001ce2 l       .text  00000000 
f0001ce2 l       .text  00000000 
f0001cec l       .text  00000000 
f0001cec l       .text  00000000 
f0001cf4 l       .text  00000000 
f0001cf4 l       .text  00000000 
f0001cf8 l       .text  00000000 
f000321b l     O .rodata        00000010 kDigitsHigh
f0001d02 l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d0c l       .text  00000000 
f0001d0c l       .text  00000000 
f0001d10 l       .text  00000000 
f0001d1a l       .text  00000000 
f0001d1a l       .text  00000000 
f0001d1e l       .text  00000000 
f0001d28 l       .text  00000000 
f0001d28 l       .text  00000000 
f0001d30 l       .text  00000000 
f0001d30 l       .text  00000000 
f0001d34 l       .text  00000000 
f0001d3e l       .text  00000000 
f0001d3e l       .text  00000000 
f0001d48 l       .text  00000000 
f0001d4c l       .text  00000000 
f0001d50 l       .text  00000000 
f0001d50 l       .text  00000000 
f0001d5c l       .text  00000000 
f0001d5c l       .text  00000000 
f0001d60 l       .text  00000000 
f0001d6a l       .text  00000000 
f0001d6e l       .text  00000000 
f0001d6e l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d74 l       .text  00000000 
f0001d74 l       .text  00000000 
f0001d78 l       .text  00000000 
f0001d82 l       .text  00000000 
f0001d82 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d92 l       .text  00000000 
f0001d92 l       .text  00000000 
f0001d96 l       .text  00000000 
f0001d96 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001dae l       .text  00000000 
f0001dae l       .text  00000000 
f0001db2 l       .text  00000000 
f0001db2 l       .text  00000000 
f00020e0 l     F .text  0000007e write_digits
f0001dc8 l       .text  00000000 
f0001dc8 l       .text  00000000 
f0001dce l       .text  00000000 
f0001dce l       .text  00000000 
f0001dd8 l       .text  00000000 
f0001dd8 l       .text  00000000 
f0001dda l       .text  00000000 
f0001de4 l       .text  00000000 
f0001de4 l       .text  00000000 
f0001dee l       .text  00000000 
f0001dee l       .text  00000000 
f0001df0 l       .text  00000000 
f0001df0 l       .text  00000000 
f0001df2 l       .text  00000000 
f0001df2 l       .text  00000000 
f0001df6 l       .text  00000000 
f0001df6 l       .text  00000000 
f0001dfa l       .text  00000000 
f0001dfc l       .text  00000000 
f0001e00 l       .text  00000000 
f0001e00 l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e10 l       .text  00000000 
f0001e10 l       .text  00000000 
f0001e12 l       .text  00000000 
f0001e12 l       .text  00000000 
f0001e14 l       .text  00000000 
f0001e14 l       .text  00000000 
f0001e1c l       .text  00000000 
f0001e1c l       .text  00000000 
f0001e20 l       .text  00000000 
f0001e20 l       .text  00000000 
f0001e2e l       .text  00000000 
f0001e2e l       .text  00000000 
f0001e30 l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e42 l       .text  00000000 
f0001e42 l       .text  00000000 
f0001e46 l       .text  00000000 
f0001e46 l       .text  00000000 
f0001e54 l       .text  00000000 
f0001e54 l       .text  00000000 
f0001e58 l       .text  00000000 
f0001e58 l       .text  00000000 
f0001e60 l       .text  00000000 
f0001e60 l       .text  00000000 
f0001e62 l       .text  00000000 
f0001e62 l       .text  00000000 
f0001e64 l       .text  00000000 
f0001e64 l       .text  00000000 
f0001e78 l       .text  00000000 
f0001e78 l       .text  00000000 
f0001e7a l       .text  00000000 
f0001e88 l       .text  00000000 
f0001e88 l       .text  00000000 
f0001e8a l       .text  00000000 
f0001e8a l       .text  00000000 
f0001e8c l       .text  00000000 
f0001e94 l       .text  00000000 
f0001e98 l       .text  00000000 
f0001e9a l       .text  00000000 
f0001ea4 l       .text  00000000 
f0001ea4 l       .text  00000000 
f0001ea8 l       .text  00000000 
f0001eb2 l       .text  00000000 
f0001eb2 l       .text  00000000 
f0001eb6 l       .text  00000000 
f0001ec2 l       .text  00000000 
f0001ec2 l       .text  00000000 
f0001ec6 l       .text  00000000 
f0001ec6 l       .text  00000000 
f0001ed0 l       .text  00000000 
f0001ed0 l       .text  00000000 
f0001ed8 l       .text  00000000 
f0001ed8 l       .text  00000000 
f0001edc l       .text  00000000 
f0001ee4 l       .text  00000000 
f0001ee4 l       .text  00000000 
f0001eee l       .text  00000000 
f0001eee l       .text  00000000 
f0001ef8 l       .text  00000000 
f0001ef8 l       .text  00000000 
f0001efc l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f0e l       .text  00000000 
f0001f10 l       .text  00000000 
f0001f10 l       .text  00000000 
f0001f14 l       .text  00000000 
f0001f1e l       .text  00000000 
f0001f1e l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f2a l       .text  00000000 
f0001f32 l       .text  00000000 
f0001f32 l       .text  00000000 
f0001ffc l     F .text  000000e4 hex_dump
f0001f3c l       .text  00000000 
f0001f3e l       .text  00000000 
f000322b l     O .rodata        0000000f kUnknownSpec
f0001f3e l       .text  00000000 
f0001f48 l       .text  00000000 
f0001f48 l       .text  00000000 
f0001f4c l       .text  00000000 
f0001f4e l       .text  00000000 
f0001f4e l       .text  00000000 
f0001f52 l       .text  00000000 
f0001f58 l       .text  00000000 
f0001f58 l       .text  00000000 
f0001f5c l       .text  00000000 
f0001f68 l       .text  00000000 
f0001f68 l       .text  00000000 
f0001f6a l       .text  00000000 
f0001f6a l       .text  00000000 
f0001f7e l       .text  00000000 
f0001f7e l       .text  00000000 
f0001f82 l       .text  00000000 
f0001f90 l       .text  00000000 
f0001f90 l       .text  00000000 
f0001f94 l       .text  00000000 
f0001f94 l       .text  00000000 
f0001f9a l       .text  00000000 
f0001f9a l       .text  00000000 
f0001f9c l       .text  00000000 
f0001f9c l       .text  00000000 
f0001f9e l       .text  00000000 
f0001f9e l       .text  00000000 
f0001fa6 l       .text  00000000 
f0001fa8 l       .text  00000000 
f0001faa l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fbc l       .text  00000000 
f00031fe l     O .rodata        00000011 kErrorNul
f0001fbc l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fca l       .text  00000000 
f0001fce l       .text  00000000 
f0001fd0 l       .text  00000000 
f0001fd0 l       .text  00000000 
f0001fe0 l       .text  00000000 
f0001fe4 l       .text  00000000 
f0001ff0 l       .text  00000000 
f000320f l     O .rodata        0000000c kErrorTooWide
f0001ff0 l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffe l       .text  00000000 
f0002016 l       .text  00000000 
f0002018 l       .text  00000000 
f000201a l       .text  00000000 
f000201c l       .text  00000000 
f000201e l       .text  00000000 
f0002022 l       .text  00000000 
f0002022 l       .text  00000000 
f0002026 l       .text  00000000 
f000202a l       .text  00000000 
f000202a l       .text  00000000 
f0002034 l       .text  00000000 
f0002034 l       .text  00000000 
f0002036 l       .text  00000000 
f0002038 l       .text  00000000 
f000203e l       .text  00000000 
f000203e l       .text  00000000 
f0002042 l       .text  00000000 
f0002046 l       .text  00000000 
f0002046 l       .text  00000000 
f000204e l       .text  00000000 
f000204e l       .text  00000000 
f0002050 l       .text  00000000 
f0002052 l       .text  00000000 
f0002052 l       .text  00000000 
f0002054 l       .text  00000000 
f0002054 l       .text  00000000 
f000205a l       .text  00000000 
f000205a l       .text  00000000 
f000205c l       .text  00000000 
f000205c l       .text  00000000 
f0002060 l       .text  00000000 
f0002064 l       .text  00000000 
f000206a l       .text  00000000 
f000206a l       .text  00000000 
f0002070 l       .text  00000000 
f0002078 l       .text  00000000 
f0002078 l       .text  00000000 
f000207a l       .text  00000000 
f000207e l       .text  00000000 
f0002082 l       .text  00000000 
f0002088 l       .text  00000000 
f000208c l       .text  00000000 
f0002090 l       .text  00000000 
f0002092 l       .text  00000000 
f0002098 l       .text  00000000 
f000209a l       .text  00000000 
f00020a2 l       .text  00000000 
f00020a8 l       .text  00000000 
f00020ac l       .text  00000000 
f00020ac l       .text  00000000 
f00020ae l       .text  00000000 
f00020b0 l       .text  00000000 
f00020b0 l       .text  00000000 
f00020b2 l       .text  00000000 
f00020b4 l       .text  00000000 
f00020b8 l       .text  00000000 
f00020b8 l       .text  00000000 
f00020ba l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c2 l       .text  00000000 
f00020ca l       .text  00000000 
f00020cc l       .text  00000000 
f00020d0 l       .text  00000000 
f00020d2 l       .text  00000000 
f00020d4 l       .text  00000000 
f00020d6 l       .text  00000000 
f00020e0 l       .text  00000000 
f00020e0 l       .text  00000000 
f00020e0 l       .text  00000000 
f00020e0 l       .text  00000000 
f00020e0 l       .text  00000000 
f00020e2 l       .text  00000000 
f00020e4 l       .text  00000000 
f00020e6 l       .text  00000000 
f00020e6 l       .text  00000000 
f00020e8 l       .text  00000000 
f00020ea l       .text  00000000 
f00020ee l       .text  00000000 
f00020ee l       .text  00000000 
f00020f0 l       .text  00000000 
f00020f0 l       .text  00000000 
f00020fc l       .text  00000000 
f00020fc l       .text  00000000 
f00020fe l       .text  00000000 
f0002102 l       .text  00000000 
f000210a l       .text  00000000 
f000210a l       .text  00000000 
f000210c l       .text  00000000 
f0002110 l       .text  00000000 
f0002114 l       .text  00000000 
f0002114 l       .text  00000000 
f0002116 l       .text  00000000 
f0002116 l       .text  00000000 
f000211a l       .text  00000000 
f0002120 l       .text  00000000 
f0002120 l       .text  00000000 
f0002122 l       .text  00000000 
f0002124 l       .text  00000000 
f0002126 l       .text  00000000 
f000212a l       .text  00000000 
f000212e l       .text  00000000 
f0002132 l       .text  00000000 
f0002132 l       .text  00000000 
f000213c l       .text  00000000 
f0002140 l       .text  00000000 
f0002142 l       .text  00000000 
f0002146 l       .text  00000000 
f000214a l       .text  00000000 
f000214c l       .text  00000000 
f000214e l       .text  00000000 
f0002150 l       .text  00000000 
f0002150 l       .text  00000000 
f0002156 l       .text  00000000 
f0002158 l       .text  00000000 
f0002158 l       .text  00000000 
f000215e l       .text  00000000 
f000215e l       .text  00000000 
00003266 l       .debug_loc     00000000 
00003292 l       .debug_loc     00000000 
000032ad l       .debug_loc     00000000 
000032d3 l       .debug_loc     00000000 
000032ff l       .debug_loc     00000000 
00003330 l       .debug_loc     00000000 
00003361 l       .debug_loc     00000000 
0000339d l       .debug_loc     00000000 
000033ce l       .debug_loc     00000000 
000033f5 l       .debug_loc     00000000 
00003426 l       .debug_loc     00000000 
00003441 l       .debug_loc     00000000 
0000345d l       .debug_loc     00000000 
00003478 l       .debug_loc     00000000 
0000349e l       .debug_loc     00000000 
000034c4 l       .debug_loc     00000000 
00003500 l       .debug_loc     00000000 
0000360b l       .debug_loc     00000000 
00003765 l       .debug_loc     00000000 
00003865 l       .debug_loc     00000000 
00003970 l       .debug_loc     00000000 
00003990 l       .debug_loc     00000000 
000039b6 l       .debug_loc     00000000 
000039e6 l       .debug_loc     00000000 
00003c1e l       .debug_loc     00000000 
00003c3a l       .debug_loc     00000000 
00003c55 l       .debug_loc     00000000 
00003dca l       .debug_loc     00000000 
00003f1a l       .debug_loc     00000000 
0000402e l       .debug_loc     00000000 
00004054 l       .debug_loc     00000000 
0000406f l       .debug_loc     00000000 
0000408a l       .debug_loc     00000000 
000040a5 l       .debug_loc     00000000 
000040c0 l       .debug_loc     00000000 
000040db l       .debug_loc     00000000 
000040f7 l       .debug_loc     00000000 
00004112 l       .debug_loc     00000000 
0000412d l       .debug_loc     00000000 
00004148 l       .debug_loc     00000000 
00004163 l       .debug_loc     00000000 
00004195 l       .debug_loc     00000000 
000041c8 l       .debug_loc     00000000 
000041e3 l       .debug_loc     00000000 
00004236 l       .debug_loc     00000000 
00004269 l       .debug_loc     00000000 
00004284 l       .debug_loc     00000000 
0000429f l       .debug_loc     00000000 
000042ba l       .debug_loc     00000000 
000042d5 l       .debug_loc     00000000 
000042f0 l       .debug_loc     00000000 
0000430b l       .debug_loc     00000000 
00004326 l       .debug_loc     00000000 
00004341 l       .debug_loc     00000000 
0000435c l       .debug_loc     00000000 
00004377 l       .debug_loc     00000000 
00004392 l       .debug_loc     00000000 
000043ae l       .debug_loc     00000000 
000043cd l       .debug_loc     00000000 
000043e8 l       .debug_loc     00000000 
00004419 l       .debug_loc     00000000 
0000443f l       .debug_loc     00000000 
00004470 l       .debug_loc     00000000 
000044a1 l       .debug_loc     00000000 
000044bc l       .debug_loc     00000000 
000044d7 l       .debug_loc     00000000 
000044f2 l       .debug_loc     00000000 
00004523 l       .debug_loc     00000000 
0000453e l       .debug_loc     00000000 
00004559 l       .debug_loc     00000000 
00004575 l       .debug_loc     00000000 
0000459b l       .debug_loc     00000000 
000045cc l       .debug_loc     00000000 
000045e7 l       .debug_loc     00000000 
00004602 l       .debug_loc     00000000 
00004628 l       .debug_loc     00000000 
0000464e l       .debug_loc     00000000 
00004669 l       .debug_loc     00000000 
00004684 l       .debug_loc     00000000 
0000469f l       .debug_loc     00000000 
000046ba l       .debug_loc     00000000 
000046d9 l       .debug_loc     00000000 
000046f4 l       .debug_loc     00000000 
0000470f l       .debug_loc     00000000 
0000472b l       .debug_loc     00000000 
00004746 l       .debug_loc     00000000 
00004761 l       .debug_loc     00000000 
00004780 l       .debug_loc     00000000 
000047a6 l       .debug_loc     00000000 
000047d7 l       .debug_loc     00000000 
0000482f l       .debug_loc     00000000 
00004879 l       .debug_loc     00000000 
000048cb l       .debug_loc     00000000 
00004908 l       .debug_loc     00000000 
00004944 l       .debug_loc     00000000 
000049ae l       .debug_loc     00000000 
000049f7 l       .debug_loc     00000000 
00004a61 l       .debug_loc     00000000 
00004a87 l       .debug_loc     00000000 
00004aa2 l       .debug_loc     00000000 
00004abd l       .debug_loc     00000000 
00004ae4 l       .debug_loc     00000000 
00004b2c l       .debug_loc     00000000 
00004b52 l       .debug_loc     00000000 
00004b78 l       .debug_loc     00000000 
00004b9e l       .debug_loc     00000000 
00004bb9 l       .debug_loc     00000000 
00004be9 l       .debug_loc     00000000 
00004c0f l       .debug_loc     00000000 
00004c41 l       .debug_loc     00000000 
00004c7f l       .debug_loc     00000000 
00004cae l       .debug_loc     00000000 
00004cc9 l       .debug_loc     00000000 
00004cfc l       .debug_loc     00000000 
00004d17 l       .debug_loc     00000000 
00004d53 l       .debug_loc     00000000 
00004d79 l       .debug_loc     00000000 
00004d94 l       .debug_loc     00000000 
00004daf l       .debug_loc     00000000 
00004dca l       .debug_loc     00000000 
00004e20 l       .debug_loc     00000000 
00004e4f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005be2 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000808 l       .debug_ranges  00000000 
00005c00 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00005c1f l       .debug_str     00000000 
00005c37 l       .debug_str     00000000 
00005c2b l       .debug_str     00000000 
000051a9 l       .debug_str     00000000 
00005f20 l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00005c45 l       .debug_str     00000000 
00005c4f l       .debug_str     00000000 
00005f78 l       .debug_str     00000000 
00005c5d l       .debug_str     00000000 
00006829 l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
000067a2 l       .debug_str     00000000 
00005e35 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
00005ffa l       .debug_str     00000000 
00003f8c l       .debug_str     00000000 
00005e5f l       .debug_str     00000000 
0000600a l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
00005c67 l       .debug_str     00000000 
00005c73 l       .debug_str     00000000 
00005c80 l       .debug_str     00000000 
00005ccf l       .debug_str     00000000 
00005cbe l       .debug_str     00000000 
00005c97 l       .debug_str     00000000 
00005ca6 l       .debug_str     00000000 
00005cb5 l       .debug_str     00000000 
00005ce2 l       .debug_str     00000000 
00003215 l       .debug_str     00000000 
000031b2 l       .debug_str     00000000 
000031b9 l       .debug_str     00000000 
000031c3 l       .debug_str     00000000 
000031ce l       .debug_str     00000000 
000031d9 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
000031f8 l       .debug_str     00000000 
00003207 l       .debug_str     00000000 
00005ced l       .debug_str     00000000 
00005cf6 l       .debug_str     00000000 
00005d01 l       .debug_str     00000000 
00005d09 l       .debug_str     00000000 
00005d15 l       .debug_str     00000000 
00005d21 l       .debug_str     00000000 
00005d2e l       .debug_str     00000000 
00005d3e l       .debug_str     00000000 
00005d4f l       .debug_str     00000000 
00005d5c l       .debug_str     00000000 
00005d65 l       .debug_str     00000000 
00005d6f l       .debug_str     00000000 
00005d79 l       .debug_str     00000000 
00005d84 l       .debug_str     00000000 
00005d8e l       .debug_str     00000000 
00005d99 l       .debug_str     00000000 
00005da7 l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
0000302c l       .debug_str     00000000 
00003023 l       .debug_str     00000000 
00002ffa l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00005dbf l       .debug_str     00000000 
00005db0 l       .debug_str     00000000 
00005db4 l       .debug_str     00000000 
00002ce3 l       .debug_str     00000000 
00005edf l       .debug_str     00000000 
00005dd3 l       .debug_str     00000000 
00003454 l       .debug_str     00000000 
00003027 l       .debug_str     00000000 
00005eed l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00005de3 l       .debug_str     00000000 
00005bae l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
00002fd7 l       .debug_str     00000000 
000005f7 l       .debug_str     00000000 
000005ed l       .debug_str     00000000 
00005ba2 l       .debug_str     00000000 
000006d0 l       .debug_ranges  00000000 
00005efb l       .debug_str     00000000 
00005f85 l       .debug_str     00000000 
00005fc0 l       .debug_str     00000000 
000007b0 l       .debug_ranges  00000000 
00005e79 l       .debug_str     00000000 
000006e8 l       .debug_ranges  00000000 
00000710 l       .debug_ranges  00000000 
00000730 l       .debug_ranges  00000000 
00000748 l       .debug_ranges  00000000 
00000780 l       .debug_ranges  00000000 
00000768 l       .debug_ranges  00000000 
00000798 l       .debug_ranges  00000000 
00005dfd l       .debug_str     00000000 
00005e13 l       .debug_str     00000000 
00005077 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00005e1c l       .debug_str     00000000 
00005e5a l       .debug_str     00000000 
00005e47 l       .debug_str     00000000 
00005e24 l       .debug_str     00000000 
000031ad l       .debug_str     00000000 
00005e3d l       .debug_str     00000000 
00005e63 l       .debug_str     00000000 
00005e75 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00003754 l       .debug_str     00000000 
00006180 l       .debug_str     00000000 
00005e84 l       .debug_str     00000000 
00005e7e l       .debug_str     00000000 
00005e8b l       .debug_str     00000000 
00005e93 l       .debug_str     00000000 
000040f7 l       .debug_str     00000000 
00005e97 l       .debug_str     00000000 
00004102 l       .debug_str     00000000 
00006199 l       .debug_str     00000000 
00005e9b l       .debug_str     00000000 
00005f6f l       .debug_str     00000000 
00006884 l       .debug_str     00000000 
00005fef l       .debug_str     00000000 
00005fe6 l       .debug_str     00000000 
00006001 l       .debug_str     00000000 
0000533f l       .debug_str     00000000 
00005f09 l       .debug_str     00000000 
00005f17 l       .debug_str     00000000 
00005f8f l       .debug_str     00000000 
000051ae l       .debug_str     00000000 
00005f25 l       .debug_str     00000000 
00005eaa l       .debug_str     00000000 
00005ccb l       .debug_str     00000000 
00005f32 l       .debug_str     00000000 
00005f5c l       .debug_str     00000000 
00005fac l       .debug_str     00000000 
00005cb0 l       .debug_str     00000000 
000007f0 l       .debug_ranges  00000000 
00005f9f l       .debug_str     00000000 
00005fbb l       .debug_str     00000000 
00005fce l       .debug_str     00000000 
00005ca1 l       .debug_str     00000000 
000007d0 l       .debug_ranges  00000000 
00005f98 l       .debug_str     00000000 
00005fdd l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00005ebc l       .debug_str     00000000 
00005ed0 l       .debug_str     00000000 
00005f3f l       .debug_str     00000000 
00005f4e l       .debug_str     00000000 
00005ed8 l       .debug_str     00000000 
00000c38 l       .debug_frame   00000000 
f0001acc l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b6e l       .text  00000000 
f0001ffc l       .text  00000000 
f00020e0 l       .text  00000000 
f000215e l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f000215e l       .text  00000000 
f000215e l       .text  00000000 
f000215e l       .text  00000000 
f000215e l       .text  00000000 
f0002162 l       .text  00000000 
f000216a l       .text  00000000 
f000216a l       .text  00000000 
f000216e l       .text  00000000 
f000216e l       .text  00000000 
f000217a l       .text  00000000 
f000217c l       .text  00000000 
f000217c l       .text  00000000 
f0002180 l       .text  00000000 
f000218c l       .text  00000000 
f000218e l       .text  00000000 
f0002192 l       .text  00000000 
f0002194 l       .text  00000000 
f0002194 l       .text  00000000 
f0002198 l       .text  00000000 
f0002198 l       .text  00000000 
f000219c l       .text  00000000 
f000219c l       .text  00000000 
f000219e l       .text  00000000 
f000219e l       .text  00000000 
f00021a2 l       .text  00000000 
f00021a2 l       .text  00000000 
f00021a4 l       .text  00000000 
f00021a8 l       .text  00000000 
f00021a8 l       .text  00000000 
f00021ac l       .text  00000000 
f00021b0 l       .text  00000000 
f00021b6 l       .text  00000000 
f00021b6 l       .text  00000000 
f00021ba l       .text  00000000 
f00021bc l       .text  00000000 
f00021bc l       .text  00000000 
f00021c2 l       .text  00000000 
f00021c2 l       .text  00000000 
f00021c8 l       .text  00000000 
f00021c8 l       .text  00000000 
f00021ca l       .text  00000000 
f00021ca l       .text  00000000 
f00021d0 l       .text  00000000 
f00021d0 l       .text  00000000 
00004e6a l       .debug_loc     00000000 
00004e85 l       .debug_loc     00000000 
00004eb6 l       .debug_loc     00000000 
00004edc l       .debug_loc     00000000 
00004f02 l       .debug_loc     00000000 
00004f1d l       .debug_loc     00000000 
00004f3f l       .debug_loc     00000000 
00004f66 l       .debug_loc     00000000 
00004f8d l       .debug_loc     00000000 
00004fb1 l       .debug_loc     00000000 
00004fe2 l       .debug_loc     00000000 
00004ffd l       .debug_loc     00000000 
0000502e l       .debug_loc     00000000 
00005088 l       .debug_loc     00000000 
000050c4 l       .debug_loc     00000000 
000050e8 l       .debug_loc     00000000 
0000510d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006010 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000008b8 l       .debug_ranges  00000000 
0000602c l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
0000603c l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
0000616a l       .debug_str     00000000 
00006049 l       .debug_str     00000000 
0000604d l       .debug_str     00000000 
00006058 l       .debug_str     00000000 
00006061 l       .debug_str     00000000 
00006072 l       .debug_str     00000000 
00006084 l       .debug_str     00000000 
0000608e l       .debug_str     00000000 
0000609d l       .debug_str     00000000 
000060af l       .debug_str     00000000 
000060c2 l       .debug_str     00000000 
000060d6 l       .debug_str     00000000 
000060df l       .debug_str     00000000 
000060eb l       .debug_str     00000000 
000060fa l       .debug_str     00000000 
00006104 l       .debug_str     00000000 
00006111 l       .debug_str     00000000 
0000611b l       .debug_str     00000000 
0000612c l       .debug_str     00000000 
00002ce3 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00005da7 l       .debug_str     00000000 
0000617b l       .debug_str     00000000 
00006189 l       .debug_str     00000000 
000000f9 l       .debug_str     00000000 
00003508 l       .debug_str     00000000 
00002d90 l       .debug_str     00000000 
00002da7 l       .debug_str     00000000 
00002daa l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00002dc6 l       .debug_str     00000000 
00002db5 l       .debug_str     00000000 
00002db0 l       .debug_str     00000000 
0000420c l       .debug_str     00000000 
000061b3 l       .debug_str     00000000 
00006176 l       .debug_str     00000000 
000061c1 l       .debug_str     00000000 
00005e97 l       .debug_str     00000000 
000008a0 l       .debug_ranges  00000000 
00006192 l       .debug_str     00000000 
00001ac5 l       .debug_str     00000000 
00006180 l       .debug_str     00000000 
00005e84 l       .debug_str     00000000 
0000619d l       .debug_str     00000000 
00005e9b l       .debug_str     00000000 
000061cb l       .debug_str     00000000 
00006199 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00000e2c l       .debug_frame   00000000 
f00021d0 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
f00021d0 l       .text  00000000 
f00021d0 l       .text  00000000 
f00021d0 l       .text  00000000 
f00021d0 l       .text  00000000 
f00021d2 l       .text  00000000 
f00021d4 l       .text  00000000 
f00021d8 l       .text  00000000 
f00021da l       .text  00000000 
f00021dc l       .text  00000000 
f00021de l       .text  00000000 
f00021de l       .text  00000000 
0000512f l       .debug_loc     00000000 
0000514a l       .debug_loc     00000000 
00005165 l       .debug_loc     00000000 
00005180 l       .debug_loc     00000000 
0000519c l       .debug_loc     00000000 
000051b8 l       .debug_loc     00000000 
000051d3 l       .debug_loc     00000000 
000051ee l       .debug_loc     00000000 
00005209 l       .debug_loc     00000000 
00005224 l       .debug_loc     00000000 
0000523f l       .debug_loc     00000000 
0000525a l       .debug_loc     00000000 
00005275 l       .debug_loc     00000000 
00005290 l       .debug_loc     00000000 
000052b6 l       .debug_loc     00000000 
000052d1 l       .debug_loc     00000000 
000052ec l       .debug_loc     00000000 
0000530a l       .debug_loc     00000000 
00005331 l       .debug_loc     00000000 
0000534c l       .debug_loc     00000000 
00005367 l       .debug_loc     00000000 
00005382 l       .debug_loc     00000000 
000053a0 l       .debug_loc     00000000 
000053c7 l       .debug_loc     00000000 
000053e2 l       .debug_loc     00000000 
000053fd l       .debug_loc     00000000 
00005418 l       .debug_loc     00000000 
00005433 l       .debug_loc     00000000 
00005459 l       .debug_loc     00000000 
00005474 l       .debug_loc     00000000 
0000548f l       .debug_loc     00000000 
000054b5 l       .debug_loc     00000000 
000054d5 l       .debug_loc     00000000 
000054fb l       .debug_loc     00000000 
00005519 l       .debug_loc     00000000 
00005534 l       .debug_loc     00000000 
0000555a l       .debug_loc     00000000 
00005580 l       .debug_loc     00000000 
0000559b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000061d2 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000008d0 l       .debug_ranges  00000000 
000061ff l       .debug_str     00000000 
00006239 l       .debug_str     00000000 
0000622c l       .debug_str     00000000 
00006209 l       .debug_str     00000000 
0000621a l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00003215 l       .debug_str     00000000 
000031b2 l       .debug_str     00000000 
000031b9 l       .debug_str     00000000 
000031c3 l       .debug_str     00000000 
000031ce l       .debug_str     00000000 
000031d9 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
000031f8 l       .debug_str     00000000 
00003207 l       .debug_str     00000000 
00006260 l       .debug_str     00000000 
00006248 l       .debug_str     00000000 
0000631e l       .debug_str     00000000 
0000626f l       .debug_str     00000000 
00006286 l       .debug_str     00000000 
0000629d l       .debug_str     00000000 
000062b0 l       .debug_str     00000000 
000062c6 l       .debug_str     00000000 
000062dc l       .debug_str     00000000 
000062f2 l       .debug_str     00000000 
00006307 l       .debug_str     00000000 
0000325f l       .debug_str     00000000 
0000323a l       .debug_str     00000000 
0000324d l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
000033e1 l       .debug_str     00000000 
00002ffa l       .debug_str     00000000 
00003027 l       .debug_str     00000000 
00004183 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
00004374 l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00004197 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
0000632b l       .debug_str     00000000 
00006269 l       .debug_str     00000000 
00005339 l       .debug_str     00000000 
00005343 l       .debug_str     00000000 
00006340 l       .debug_str     00000000 
00003d9e l       .debug_str     00000000 
000031ad l       .debug_str     00000000 
00004212 l       .debug_str     00000000 
00006356 l       .debug_str     00000000 
00006452 l       .debug_str     00000000 
00002e2c l       .debug_str     00000000 
00002da7 l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00002df8 l       .debug_str     00000000 
0000636d l       .debug_str     00000000 
000042d7 l       .debug_str     00000000 
00006479 l       .debug_str     00000000 
0000420c l       .debug_str     00000000 
00006385 l       .debug_str     00000000 
00002d90 l       .debug_str     00000000 
00002daa l       .debug_str     00000000 
00002dc6 l       .debug_str     00000000 
00002db5 l       .debug_str     00000000 
00002db0 l       .debug_str     00000000 
00002dd9 l       .debug_str     00000000 
000063a2 l       .debug_str     00000000 
000063bb l       .debug_str     00000000 
00003f0b l       .debug_str     00000000 
00006488 l       .debug_str     00000000 
000063ce l       .debug_str     00000000 
00004013 l       .debug_str     00000000 
00006496 l       .debug_str     00000000 
0000435a l       .debug_str     00000000 
000063e7 l       .debug_str     00000000 
000064a6 l       .debug_str     00000000 
00006400 l       .debug_str     00000000 
00006419 l       .debug_str     00000000 
00003551 l       .debug_str     00000000 
0000302c l       .debug_str     00000000 
00003023 l       .debug_str     00000000 
00006432 l       .debug_str     00000000 
00006443 l       .debug_str     00000000 
0000645b l       .debug_str     00000000 
00003425 l       .debug_str     00000000 
000064b1 l       .debug_str     00000000 
00000e60 l       .debug_frame   00000000 
f00021de l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
f00021de l       .text  00000000 
f00021de l       .text  00000000 
f00021de l       .text  00000000 
f00021e0 l       .text  00000000 
f00021ea l       .text  00000000 
f00021ec l       .text  00000000 
f00021ee l       .text  00000000 
f00021f0 l       .text  00000000 
f00021f0 l       .text  00000000 
f00021f2 l       .text  00000000 
f00021f4 l       .text  00000000 
f00021f8 l       .text  00000000 
f00021fa l       .text  00000000 
f00021fc l       .text  00000000 
f0002204 l       .text  00000000 
f0002210 l       .text  00000000 
f0002220 l       .text  00000000 
f0002228 l       .text  00000000 
f000222e l       .text  00000000 
f000222e l       .text  00000000 
f0002232 l       .text  00000000 
f0002232 l       .text  00000000 
f0002234 l       .text  00000000 
f0002236 l       .text  00000000 
f0002238 l       .text  00000000 
f0002238 l       .text  00000000 
f000223a l       .text  00000000 
f000223a l       .text  00000000 
f000223e l       .text  00000000 
f000223e l       .text  00000000 
f0002240 l       .text  00000000 
f0002242 l       .text  00000000 
f0002242 l       .text  00000000 
f0002244 l       .text  00000000 
f0002244 l       .text  00000000 
f0002246 l       .text  00000000 
f0002246 l       .text  00000000 
f000224a l       .text  00000000 
f000224a l       .text  00000000 
f000224c l       .text  00000000 
f000224c l       .text  00000000 
f0002250 l       .text  00000000 
f0002250 l       .text  00000000 
f0002252 l       .text  00000000 
f0002252 l       .text  00000000 
f0002256 l       .text  00000000 
f0002256 l       .text  00000000 
f0002258 l       .text  00000000 
f000225a l       .text  00000000 
f000225a l       .text  00000000 
f000225c l       .text  00000000 
f000225c l       .text  00000000 
f0002260 l       .text  00000000 
f0002260 l       .text  00000000 
f0002264 l       .text  00000000 
f0002264 l       .text  00000000 
f0002266 l       .text  00000000 
f000226a l       .text  00000000 
f000226a l       .text  00000000 
f000226e l       .text  00000000 
f000226e l       .text  00000000 
f0002270 l       .text  00000000 
f0002274 l       .text  00000000 
f0002276 l       .text  00000000 
f0002276 l       .text  00000000 
f0002278 l       .text  00000000 
f000227c l       .text  00000000 
f000227e l       .text  00000000 
f000227e l       .text  00000000 
f0002280 l       .text  00000000 
f0002280 l       .text  00000000 
f0002282 l       .text  00000000 
f0002282 l       .text  00000000 
f0002284 l       .text  00000000 
f0002284 l       .text  00000000 
f0002288 l       .text  00000000 
f0002288 l       .text  00000000 
f0002298 l       .text  00000000 
f0002298 l       .text  00000000 
f0002298 l       .text  00000000 
f0002298 l       .text  00000000 
f0002298 l       .text  00000000 
f0002298 l       .text  00000000 
f000229a l       .text  00000000 
f000229c l       .text  00000000 
f000229c l       .text  00000000 
f000229e l       .text  00000000 
f000229e l       .text  00000000 
f00022a0 l       .text  00000000 
f00022a0 l       .text  00000000 
f00022a2 l       .text  00000000 
f00022a2 l       .text  00000000 
f00022a4 l       .text  00000000 
f00022a4 l       .text  00000000 
f00022a6 l       .text  00000000 
f00022a6 l       .text  00000000 
f00022a8 l       .text  00000000 
f00022a8 l       .text  00000000 
f00022aa l       .text  00000000 
f00022ac l       .text  00000000 
f00022ac l       .text  00000000 
f00022ae l       .text  00000000 
f00022ae l       .text  00000000 
f00022b0 l       .text  00000000 
f00022b0 l       .text  00000000 
f00022b2 l       .text  00000000 
f00022b4 l       .text  00000000 
f00022b6 l       .text  00000000 
f00022b6 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022ba l       .text  00000000 
f00022ba l       .text  00000000 
000055b6 l       .debug_loc     00000000 
000055dc l       .debug_loc     00000000 
00005604 l       .debug_loc     00000000 
00005633 l       .debug_loc     00000000 
0000564e l       .debug_loc     00000000 
0000566a l       .debug_loc     00000000 
000056a0 l       .debug_loc     00000000 
000056bb l       .debug_loc     00000000 
000056e2 l       .debug_loc     00000000 
00005707 l       .debug_loc     00000000 
0000572d l       .debug_loc     00000000 
00005753 l       .debug_loc     00000000 
00005779 l       .debug_loc     00000000 
00005794 l       .debug_loc     00000000 
000057b6 l       .debug_loc     00000000 
000057dc l       .debug_loc     00000000 
00005802 l       .debug_loc     00000000 
00005828 l       .debug_loc     00000000 
0000584e l       .debug_loc     00000000 
00005869 l       .debug_loc     00000000 
0000588b l       .debug_loc     00000000 
000058b1 l       .debug_loc     00000000 
000058cc l       .debug_loc     00000000 
000058f3 l       .debug_loc     00000000 
0000590e l       .debug_loc     00000000 
00005929 l       .debug_loc     00000000 
00005944 l       .debug_loc     00000000 
0000596b l       .debug_loc     00000000 
00005986 l       .debug_loc     00000000 
000059a1 l       .debug_loc     00000000 
000059c7 l       .debug_loc     00000000 
000059e2 l       .debug_loc     00000000 
000059fd l       .debug_loc     00000000 
00005a18 l       .debug_loc     00000000 
00005a3e l       .debug_loc     00000000 
00005a59 l       .debug_loc     00000000 
00005a74 l       .debug_loc     00000000 
00005a8f l       .debug_loc     00000000 
00005aaa l       .debug_loc     00000000 
00005ac5 l       .debug_loc     00000000 
00005ae0 l       .debug_loc     00000000 
00005afb l       .debug_loc     00000000 
00005b1e l       .debug_loc     00000000 
00005b39 l       .debug_loc     00000000 
00005b54 l       .debug_loc     00000000 
00005b6f l       .debug_loc     00000000 
00005b8a l       .debug_loc     00000000 
00005bad l       .debug_loc     00000000 
00005bc8 l       .debug_loc     00000000 
00005be3 l       .debug_loc     00000000 
00005c09 l       .debug_loc     00000000 
00005c2f l       .debug_loc     00000000 
00005c55 l       .debug_loc     00000000 
00005c7b l       .debug_loc     00000000 
00005ca1 l       .debug_loc     00000000 
00005cc7 l       .debug_loc     00000000 
00005ce2 l       .debug_loc     00000000 
00005d08 l       .debug_loc     00000000 
00005d37 l       .debug_loc     00000000 
00005d5d l       .debug_loc     00000000 
00005d78 l       .debug_loc     00000000 
00005d93 l       .debug_loc     00000000 
00005db3 l       .debug_loc     00000000 
00005dce l       .debug_loc     00000000 
00005de9 l       .debug_loc     00000000 
00005e1a l       .debug_loc     00000000 
00005e4b l       .debug_loc     00000000 
00005e71 l       .debug_loc     00000000 
00005e97 l       .debug_loc     00000000 
00005eb3 l       .debug_loc     00000000 
00005ece l       .debug_loc     00000000 
00005ee9 l       .debug_loc     00000000 
00005f04 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000064d0 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000968 l       .debug_ranges  00000000 
000064ed l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00003215 l       .debug_str     00000000 
000031b2 l       .debug_str     00000000 
000031b9 l       .debug_str     00000000 
000031c3 l       .debug_str     00000000 
000031ce l       .debug_str     00000000 
000031d9 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
000031f8 l       .debug_str     00000000 
00003207 l       .debug_str     00000000 
0000325f l       .debug_str     00000000 
0000323a l       .debug_str     00000000 
0000324d l       .debug_str     00000000 
0000328f l       .debug_str     00000000 
0000326a l       .debug_str     00000000 
0000327c l       .debug_str     00000000 
00006578 l       .debug_str     00000000 
00006503 l       .debug_str     00000000 
0000651a l       .debug_str     00000000 
00006531 l       .debug_str     00000000 
00006548 l       .debug_str     00000000 
00006560 l       .debug_str     00000000 
000065c8 l       .debug_str     00000000 
0000658b l       .debug_str     00000000 
0000659f l       .debug_str     00000000 
000065b3 l       .debug_str     00000000 
00006608 l       .debug_str     00000000 
000065dc l       .debug_str     00000000 
000065f3 l       .debug_str     00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00002d85 l       .debug_str     00000000 
00003027 l       .debug_str     00000000 
000064a2 l       .debug_str     00000000 
0000302c l       .debug_str     00000000 
00003023 l       .debug_str     00000000 
00002ffa l       .debug_str     00000000 
00003015 l       .debug_str     00000000 
00003009 l       .debug_str     00000000 
00003004 l       .debug_str     00000000 
00004183 l       .debug_str     00000000 
00004374 l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
00004197 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
00002d90 l       .debug_str     00000000 
00002da7 l       .debug_str     00000000 
00002daa l       .debug_str     00000000 
00002dc6 l       .debug_str     00000000 
00002db5 l       .debug_str     00000000 
00002db0 l       .debug_str     00000000 
0000420c l       .debug_str     00000000 
000033ef l       .debug_str     00000000 
0000344d l       .debug_str     00000000 
00002e7b l       .debug_str     00000000 
00006793 l       .debug_str     00000000 
0000679e l       .debug_str     00000000 
00005adf l       .debug_str     00000000 
00004212 l       .debug_str     00000000 
00006668 l       .debug_str     00000000 
00006581 l       .debug_str     00000000 
00006682 l       .debug_str     00000000 
000066a0 l       .debug_str     00000000 
000051a9 l       .debug_str     00000000 
0000661a l       .debug_str     00000000 
00005fc0 l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00002e1f l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00002e2c l       .debug_str     00000000 
00002dee l       .debug_str     00000000 
00002df8 l       .debug_str     00000000 
0000662a l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
0000669c l       .debug_str     00000000 
00005f94 l       .debug_str     00000000 
000066b4 l       .debug_str     00000000 
0000663d l       .debug_str     00000000 
00006648 l       .debug_str     00000000 
00006656 l       .debug_str     00000000 
000066b0 l       .debug_str     00000000 
00002e40 l       .debug_str     00000000 
00005de3 l       .debug_str     00000000 
000066c7 l       .debug_str     00000000 
0000619d l       .debug_str     00000000 
000066e4 l       .debug_str     00000000 
000067bd l       .debug_str     00000000 
00006700 l       .debug_str     00000000 
000067c7 l       .debug_str     00000000 
0000424b l       .debug_str     00000000 
00002dd9 l       .debug_str     00000000 
0000671c l       .debug_str     00000000 
00006611 l       .debug_str     00000000 
0000341e l       .debug_str     00000000 
00000938 l       .debug_ranges  00000000 
00000950 l       .debug_ranges  00000000 
00006732 l       .debug_str     00000000 
000067fc l       .debug_str     00000000 
0000674d l       .debug_str     00000000 
00006769 l       .debug_str     00000000 
00005e84 l       .debug_str     00000000 
00003551 l       .debug_str     00000000 
00006781 l       .debug_str     00000000 
00003444 l       .debug_str     00000000 
00003402 l       .debug_str     00000000 
0000340b l       .debug_str     00000000 
00003417 l       .debug_str     00000000 
00003298 l       .debug_str     00000000 
00003425 l       .debug_str     00000000 
00003432 l       .debug_str     00000000 
000067a8 l       .debug_str     00000000 
000067d2 l       .debug_str     00000000 
000067e8 l       .debug_str     00000000 
00000f34 l       .debug_frame   00000000 
f0002298 l       .text  00000000 
f00022ba l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
f00022ba l       .text  00000000 
f00022ba l       .text  00000000 
f00022ba l       .text  00000000 
f00022bc l       .text  00000000 
f00022c2 l       .text  00000000 
f00022ce l       .text  00000000 
f00022d6 l       .text  00000000 
f00022d6 l       .text  00000000 
f00022de l       .text  00000000 
f0002300 l       .text  00000000 
f0002304 l       .text  00000000 
f0002304 l       .text  00000000 
f0002308 l       .text  00000000 
f000230c l       .text  00000000 
f000230c l       .text  00000000 
f0002310 l       .text  00000000 
f0002322 l       .text  00000000 
f0002326 l       .text  00000000 
f0002336 l       .text  00000000 
f0002338 l       .text  00000000 
f0002338 l       .text  00000000 
f0002348 l       .text  00000000 
f000234a l       .text  00000000 
f000234a l       .text  00000000 
f000234e l       .text  00000000 
f000234e l       .text  00000000 
f0002352 l       .text  00000000 
f0002352 l       .text  00000000 
f0002354 l       .text  00000000 
f000235c l       .text  00000000 
f000235e l       .text  00000000 
f0002360 l       .text  00000000 
f000236a l       .text  00000000 
f000236a l       .text  00000000 
00005f2a l       .debug_loc     00000000 
00005f42 l       .debug_loc     00000000 
00005f69 l       .debug_loc     00000000 
00005f9a l       .debug_loc     00000000 
00005fed l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000680b l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00005adf l       .debug_str     00000000 
000025cf l       .debug_str     00000000 
0000285f l       .debug_str     00000000 
00006825 l       .debug_str     00000000 
00003fb3 l       .debug_str     00000000 
0000682d l       .debug_str     00000000 
00006831 l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00001038 l       .debug_frame   00000000 
f000236a l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
f000236a l       .text  00000000 
f000236a l       .text  00000000 
f000236a l       .text  00000000 
f000236a l       .text  00000000 
f0002372 l       .text  00000000 
f0002376 l       .text  00000000 
f0002376 l       .text  00000000 
f000237a l       .text  00000000 
f000237a l       .text  00000000 
f000237e l       .text  00000000 
f000237e l       .text  00000000 
f000238a l       .text  00000000 
f000238c l       .text  00000000 
f000238c l       .text  00000000 
f0002392 l       .text  00000000 
f0002392 l       .text  00000000 
f0002396 l       .text  00000000 
f0002398 l       .text  00000000 
f000239c l       .text  00000000 
f000239c l       .text  00000000 
f000239e l       .text  00000000 
f000239e l       .text  00000000 
f00023a0 l       .text  00000000 
f00023a0 l       .text  00000000 
f00023a8 l       .text  00000000 
f00023ac l       .text  00000000 
f00023ae l       .text  00000000 
f00023b2 l       .text  00000000 
f00023b6 l       .text  00000000 
f00023b6 l       .text  00000000 
f00023ba l       .text  00000000 
f00023ba l       .text  00000000 
f00023be l       .text  00000000 
f00023c0 l       .text  00000000 
f00023c0 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c6 l       .text  00000000 
f00023c6 l       .text  00000000 
f00023c8 l       .text  00000000 
f00023c8 l       .text  00000000 
f00023cc l       .text  00000000 
f00023cc l       .text  00000000 
f00023d0 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d8 l       .text  00000000 
f00023d8 l       .text  00000000 
f00023dc l       .text  00000000 
f00023e0 l       .text  00000000 
f00023e8 l       .text  00000000 
f00023e8 l       .text  00000000 
f00023ea l       .text  00000000 
f00023ea l       .text  00000000 
f00023ec l       .text  00000000 
f00023ec l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f2 l       .text  00000000 
f00023f6 l       .text  00000000 
f00023f6 l       .text  00000000 
f00023fa l       .text  00000000 
f00023fa l       .text  00000000 
f0002402 l       .text  00000000 
f0002402 l       .text  00000000 
f0002406 l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240c l       .text  00000000 
f000240c l       .text  00000000 
f0002410 l       .text  00000000 
f0002410 l       .text  00000000 
f0002414 l       .text  00000000 
f0002414 l       .text  00000000 
f0002416 l       .text  00000000 
f0002418 l       .text  00000000 
f000241a l       .text  00000000 
f000241a l       .text  00000000 
f000241e l       .text  00000000 
f0002422 l       .text  00000000 
f0002432 l       .text  00000000 
f0002432 l       .text  00000000 
f0002436 l       .text  00000000 
f0002436 l       .text  00000000 
f0002438 l       .text  00000000 
f0002438 l       .text  00000000 
f000243a l       .text  00000000 
f000243a l       .text  00000000 
f000243e l       .text  00000000 
f000243e l       .text  00000000 
f0002444 l       .text  00000000 
f0002448 l       .text  00000000 
f0002448 l       .text  00000000 
f000244c l       .text  00000000 
f0002450 l       .text  00000000 
f0002452 l       .text  00000000 
f0002454 l       .text  00000000 
f0002454 l       .text  00000000 
f0002454 l       .text  00000000 
f0002454 l       .text  00000000 
f0002454 l       .text  00000000 
f0002458 l       .text  00000000 
f0002458 l       .text  00000000 
f000245c l       .text  00000000 
f000245c l       .text  00000000 
f0002464 l       .text  00000000 
f0002468 l       .text  00000000 
f000246c l       .text  00000000 
f000246e l       .text  00000000 
f0002470 l       .text  00000000 
f0002470 l       .text  00000000 
f0002474 l       .text  00000000 
f0002478 l       .text  00000000 
f0002478 l       .text  00000000 
f000247a l       .text  00000000 
f000247c l       .text  00000000 
f000247e l       .text  00000000 
f0002484 l       .text  00000000 
f0002484 l       .text  00000000 
f0002486 l       .text  00000000 
f000248a l       .text  00000000 
f0002496 l       .text  00000000 
f00024a4 l       .text  00000000 
f00024a4 l       .text  00000000 
f00024a8 l       .text  00000000 
f00024aa l       .text  00000000 
f00024aa l       .text  00000000 
f00024ae l       .text  00000000 
f00024b2 l       .text  00000000 
f00024b2 l       .text  00000000 
f00024b6 l       .text  00000000 
f00024ba l       .text  00000000 
f00024be l       .text  00000000 
f00024c2 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024ca l       .text  00000000 
f00024ce l       .text  00000000 
f00024d0 l       .text  00000000 
f00024d0 l       .text  00000000 
f00024d2 l       .text  00000000 
f00024d6 l       .text  00000000 
f00024d6 l       .text  00000000 
f00024de l       .text  00000000 
f00024e2 l       .text  00000000 
f00024e2 l       .text  00000000 
f00024e6 l       .text  00000000 
f00024ea l       .text  00000000 
f00024ee l       .text  00000000 
f00024f0 l       .text  00000000 
f00024f4 l       .text  00000000 
f00024f4 l       .text  00000000 
f00024f8 l       .text  00000000 
f00024f8 l       .text  00000000 
f00024fc l       .text  00000000 
f00024fe l       .text  00000000 
f00024fe l       .text  00000000 
f0002502 l       .text  00000000 
f0002502 l       .text  00000000 
f0002502 l       .text  00000000 
f0002502 l       .text  00000000 
f0002502 l       .text  00000000 
f0002506 l       .text  00000000 
f0002506 l       .text  00000000 
f000250a l       .text  00000000 
f000250a l       .text  00000000 
f0002512 l       .text  00000000 
f0002512 l       .text  00000000 
f0002516 l       .text  00000000 
f0002518 l       .text  00000000 
f000251c l       .text  00000000 
f000251c l       .text  00000000 
f000251e l       .text  00000000 
f000251e l       .text  00000000 
f0002522 l       .text  00000000 
f0002522 l       .text  00000000 
f0002528 l       .text  00000000 
f0002528 l       .text  00000000 
f000252c l       .text  00000000 
f000252c l       .text  00000000 
f0002534 l       .text  00000000 
f0002538 l       .text  00000000 
f0002538 l       .text  00000000 
f000253a l       .text  00000000 
f000253e l       .text  00000000 
f000253e l       .text  00000000 
f0002540 l       .text  00000000 
f0002542 l       .text  00000000 
f0002542 l       .text  00000000 
f000254a l       .text  00000000 
f000254a l       .text  00000000 
f000254e l       .text  00000000 
f000254e l       .text  00000000 
f0002558 l       .text  00000000 
f000255c l       .text  00000000 
f000255c l       .text  00000000 
f0002560 l       .text  00000000 
f0002560 l       .text  00000000 
f0002564 l       .text  00000000 
f0002568 l       .text  00000000 
f0002568 l       .text  00000000 
f000256c l       .text  00000000 
f0002570 l       .text  00000000 
f0002570 l       .text  00000000 
f0002572 l       .text  00000000 
f0002576 l       .text  00000000 
f0002576 l       .text  00000000 
f000257a l       .text  00000000 
f000257e l       .text  00000000 
f0002582 l       .text  00000000 
f0002586 l       .text  00000000 
f000258a l       .text  00000000 
f000258c l       .text  00000000 
f000258c l       .text  00000000 
f0002590 l       .text  00000000 
f0002590 l       .text  00000000 
f0002592 l       .text  00000000 
f0002594 l       .text  00000000 
f0002594 l       .text  00000000 
f000259c l       .text  00000000 
f00025a0 l       .text  00000000 
f00025a0 l       .text  00000000 
f00025a2 l       .text  00000000 
f00025a6 l       .text  00000000 
f00025a6 l       .text  00000000 
f00025a8 l       .text  00000000 
f00025aa l       .text  00000000 
f00025aa l       .text  00000000 
f00025ac l       .text  00000000 
f00025ac l       .text  00000000 
f00025b0 l       .text  00000000 
f00025b0 l       .text  00000000 
f00025b2 l       .text  00000000 
f00025b2 l       .text  00000000 
f00025b6 l       .text  00000000 
f00025b6 l       .text  00000000 
f00025b8 l       .text  00000000 
f00025b8 l       .text  00000000 
f00025bc l       .text  00000000 
f00025bc l       .text  00000000 
f00025be l       .text  00000000 
f00025be l       .text  00000000 
f00025c0 l       .text  00000000 
f00025c0 l       .text  00000000 
f00025c2 l       .text  00000000 
f00025c2 l       .text  00000000 
00006020 l       .debug_loc     00000000 
00006046 l       .debug_loc     00000000 
0000606c l       .debug_loc     00000000 
00006092 l       .debug_loc     00000000 
000060b8 l       .debug_loc     00000000 
000060d7 l       .debug_loc     00000000 
000060f6 l       .debug_loc     00000000 
0000611c l       .debug_loc     00000000 
00006137 l       .debug_loc     00000000 
00006180 l       .debug_loc     00000000 
000061a6 l       .debug_loc     00000000 
000061c8 l       .debug_loc     00000000 
000061e3 l       .debug_loc     00000000 
000061fe l       .debug_loc     00000000 
00006219 l       .debug_loc     00000000 
00006234 l       .debug_loc     00000000 
0000624f l       .debug_loc     00000000 
0000626a l       .debug_loc     00000000 
000062ba l       .debug_loc     00000000 
000062d5 l       .debug_loc     00000000 
000062f0 l       .debug_loc     00000000 
00006312 l       .debug_loc     00000000 
0000632d l       .debug_loc     00000000 
00006348 l       .debug_loc     00000000 
00006363 l       .debug_loc     00000000 
0000637e l       .debug_loc     00000000 
00006399 l       .debug_loc     00000000 
000063b8 l       .debug_loc     00000000 
000063d7 l       .debug_loc     00000000 
000063fd l       .debug_loc     00000000 
00006418 l       .debug_loc     00000000 
00006461 l       .debug_loc     00000000 
00006487 l       .debug_loc     00000000 
000064a2 l       .debug_loc     00000000 
000064bd l       .debug_loc     00000000 
000064d8 l       .debug_loc     00000000 
000064f3 l       .debug_loc     00000000 
0000650e l       .debug_loc     00000000 
00006529 l       .debug_loc     00000000 
00006544 l       .debug_loc     00000000 
00006563 l       .debug_loc     00000000 
00006582 l       .debug_loc     00000000 
0000659d l       .debug_loc     00000000 
000065e4 l       .debug_loc     00000000 
000065ff l       .debug_loc     00000000 
0000661a l       .debug_loc     00000000 
00006640 l       .debug_loc     00000000 
0000665b l       .debug_loc     00000000 
00006676 l       .debug_loc     00000000 
00006691 l       .debug_loc     00000000 
000066ac l       .debug_loc     00000000 
000066c7 l       .debug_loc     00000000 
000066ed l       .debug_loc     00000000 
00006708 l       .debug_loc     00000000 
0000672e l       .debug_loc     00000000 
00006754 l       .debug_loc     00000000 
00006771 l       .debug_loc     00000000 
000067cc l       .debug_loc     00000000 
000067e7 l       .debug_loc     00000000 
0000680d l       .debug_loc     00000000 
00006833 l       .debug_loc     00000000 
0000684e l       .debug_loc     00000000 
00006874 l       .debug_loc     00000000 
000068d1 l       .debug_loc     00000000 
000068ec l       .debug_loc     00000000 
00006907 l       .debug_loc     00000000 
00006964 l       .debug_loc     00000000 
00006981 l       .debug_loc     00000000 
0000699c l       .debug_loc     00000000 
000069e3 l       .debug_loc     00000000 
000069fe l       .debug_loc     00000000 
00006a19 l       .debug_loc     00000000 
00006a34 l       .debug_loc     00000000 
00006a4f l       .debug_loc     00000000 
00006a6a l       .debug_loc     00000000 
00006a90 l       .debug_loc     00000000 
00006aab l       .debug_loc     00000000 
00006ac6 l       .debug_loc     00000000 
00006ae1 l       .debug_loc     00000000 
00006afc l       .debug_loc     00000000 
00006b29 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006836 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000a68 l       .debug_ranges  00000000 
00006852 l       .debug_str     00000000 
0000685c l       .debug_str     00000000 
00006866 l       .debug_str     00000000 
00002eea l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
00003754 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00006870 l       .debug_str     00000000 
00006967 l       .debug_str     00000000 
00006971 l       .debug_str     00000000 
00005e5f l       .debug_str     00000000 
0000688a l       .debug_str     00000000 
00006895 l       .debug_str     00000000 
00005da9 l       .debug_str     00000000 
00005da7 l       .debug_str     00000000 
000068a1 l       .debug_str     00000000 
000068b3 l       .debug_str     00000000 
000068c3 l       .debug_str     00000000 
00006878 l       .debug_str     00000000 
00002f24 l       .debug_str     00000000 
000068d3 l       .debug_str     00000000 
000068db l       .debug_str     00000000 
00003f0b l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
000068df l       .debug_str     00000000 
00004635 l       .debug_str     00000000 
000051ae l       .debug_str     00000000 
0000692d l       .debug_str     00000000 
00006932 l       .debug_str     00000000 
00006936 l       .debug_str     00000000 
0000693c l       .debug_str     00000000 
000068b7 l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
000068c7 l       .debug_str     00000000 
000009f8 l       .debug_ranges  00000000 
00005ca1 l       .debug_str     00000000 
000009e0 l       .debug_ranges  00000000 
00005ed8 l       .debug_str     00000000 
00006941 l       .debug_str     00000000 
00006948 l       .debug_str     00000000 
00000a10 l       .debug_ranges  00000000 
000068fb l       .debug_str     00000000 
00006950 l       .debug_str     00000000 
00006954 l       .debug_str     00000000 
00006958 l       .debug_str     00000000 
0000695d l       .debug_str     00000000 
00006962 l       .debug_str     00000000 
0000696c l       .debug_str     00000000 
00006902 l       .debug_str     00000000 
00004102 l       .debug_str     00000000 
00005b93 l       .debug_str     00000000 
00006977 l       .debug_str     00000000 
00000a28 l       .debug_ranges  00000000 
0000697c l       .debug_str     00000000 
000068e8 l       .debug_str     00000000 
00002e4d l       .debug_str     00000000 
00005b9a l       .debug_str     00000000 
00000a40 l       .debug_ranges  00000000 
0000690a l       .debug_str     00000000 
00005a29 l       .debug_str     00000000 
0000691c l       .debug_str     00000000 
00006924 l       .debug_str     00000000 
00004197 l       .debug_str     00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
00001068 l       .debug_frame   00000000 
f00023f2 l       .text  00000000 
f0002454 l       .text  00000000 
f0002502 l       .text  00000000 
f00025c2 l       .text  00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
00005352 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
0000537c l       .debug_str     00000000 
00003dad l       .debug_str     00000000 
00003d45 l       .debug_str     00000000 
000038ec l       .debug_str     00000000 
0000390e l       .debug_str     00000000 
0000392e l       .debug_str     00000000 
0000394e l       .debug_str     00000000 
0000396e l       .debug_str     00000000 
0000398e l       .debug_str     00000000 
000039ad l       .debug_str     00000000 
000039d1 l       .debug_str     00000000 
000039f0 l       .debug_str     00000000 
00003a0f l       .debug_str     00000000 
00003a2e l       .debug_str     00000000 
00003a50 l       .debug_str     00000000 
00003a72 l       .debug_str     00000000 
00003a94 l       .debug_str     00000000 
00003abb l       .debug_str     00000000 
00003ade l       .debug_str     00000000 
00003b01 l       .debug_str     00000000 
00003b22 l       .debug_str     00000000 
00003b46 l       .debug_str     00000000 
00003b6e l       .debug_str     00000000 
00003b93 l       .debug_str     00000000 
00003bb9 l       .debug_str     00000000 
00003bde l       .debug_str     00000000 
00003c01 l       .debug_str     00000000 
00003c25 l       .debug_str     00000000 
00003c44 l       .debug_str     00000000 
00003c63 l       .debug_str     00000000 
00003c82 l       .debug_str     00000000 
00003ca3 l       .debug_str     00000000 
00003cc3 l       .debug_str     00000000 
00003ce8 l       .debug_str     00000000 
00003d07 l       .debug_str     00000000 
00003d26 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000053a7 l       .debug_str     00000000 
000059a1 l       .debug_str     00000000 
00005983 l       .debug_str     00000000 
000053c9 l       .debug_str     00000000 
000053ea l       .debug_str     00000000 
0000540b l       .debug_str     00000000 
0000542c l       .debug_str     00000000 
0000544d l       .debug_str     00000000 
0000546d l       .debug_str     00000000 
00005492 l       .debug_str     00000000 
000054b2 l       .debug_str     00000000 
000054d2 l       .debug_str     00000000 
000054f2 l       .debug_str     00000000 
00005515 l       .debug_str     00000000 
00005538 l       .debug_str     00000000 
0000555b l       .debug_str     00000000 
0000557d l       .debug_str     00000000 
000055a1 l       .debug_str     00000000 
000055c5 l       .debug_str     00000000 
000055e7 l       .debug_str     00000000 
0000560c l       .debug_str     00000000 
00005631 l       .debug_str     00000000 
00005656 l       .debug_str     00000000 
0000567f l       .debug_str     00000000 
000056a5 l       .debug_str     00000000 
000056c7 l       .debug_str     00000000 
000056ec l       .debug_str     00000000 
00005713 l       .debug_str     00000000 
00005739 l       .debug_str     00000000 
00005763 l       .debug_str     00000000 
00005788 l       .debug_str     00000000 
000057a8 l       .debug_str     00000000 
000057ca l       .debug_str     00000000 
000057e9 l       .debug_str     00000000 
00005809 l       .debug_str     00000000 
00005829 l       .debug_str     00000000 
00005849 l       .debug_str     00000000 
0000586b l       .debug_str     00000000 
0000588c l       .debug_str     00000000 
000058b2 l       .debug_str     00000000 
000058d2 l       .debug_str     00000000 
000058f2 l       .debug_str     00000000 
0000591a l       .debug_str     00000000 
0000593d l       .debug_str     00000000 
00005963 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00006b49 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006984 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00000ac8 l       .debug_ranges  00000000 
000069ae l       .debug_str     00000000 
000069ba l       .debug_str     00000000 
000031a6 l       .debug_str     00000000 
0000315e l       .debug_str     00000000 
0000316b l       .debug_str     00000000 
0000317f l       .debug_str     00000000 
00003190 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000069c8 l       .debug_str     00000000 
00002eee l       .debug_str     00000000 
00002ed7 l       .debug_str     00000000 
000069d8 l       .debug_str     00000000 
000069f6 l       .debug_str     00000000 
00006a0d l       .debug_str     00000000 
00006a1d l       .debug_str     00000000 
00006a2d l       .debug_str     00000000 
00006a3b l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00006a49 l       .debug_str     00000000 
00006a5e l       .debug_str     00000000 
00006a75 l       .debug_str     00000000 
00003754 l       .debug_str     00000000 
00006a8e l       .debug_str     00000000 
00006aaa l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
00005a7e l       .debug_str     00000000 
00003088 l       .debug_str     00000000 
00006ab9 l       .debug_str     00000000 
0000112c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
000043c2 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00004409 l       .debug_str     00000000 
00004423 l       .debug_str     00000000 
0000441b l       .debug_str     00000000 
000040cb l       .debug_str     00000000 
000040b6 l       .debug_str     00000000 
000051a9 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00004437 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
00004477 l       .debug_str     00000000 
00004499 l       .debug_str     00000000 
00004482 l       .debug_str     00000000 
00004489 l       .debug_str     00000000 
00004491 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
000044a6 l       .debug_str     00000000 
000000b0 l       .debug_str     00000000 
000044e4 l       .debug_str     00000000 
00004517 l       .debug_str     00000000 
000044f1 l       .debug_str     00000000 
00004505 l       .debug_str     00000000 
000044fc l       .debug_str     00000000 
00004644 l       .debug_str     00000000 
000045f9 l       .debug_str     00000000 
00004511 l       .debug_str     00000000 
00002ce2 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
f0001894 g     F .text  0000008a rand_testutils_init
f0001082 g     F .text  00000046 sec_mmio_read32
f003b000 g       *ABS*  00000000 _non_volatile_scratch_start
f0039800 g       *ABS*  00000000 _non_volatile_counter_3_end
f0039000 g       *ABS*  00000000 _non_volatile_counter_3_start
f0000e60  w    F .text  00000020 ottf_instr_misaligned_fault_handler
f0000f90  w    F .text  00000018 ottf_external_nmi_handler
e00027c4 g       .data  00000000 __global_pointer$
e0002050 g     O .bss   00000004 ottf_plic
e0000000 g     O .static_critical       00000020 boot_measurements
f0000e60  w    F .text  00000020 ottf_instr_access_fault_handler
f0002502 g     F .text  000000c0 memrchr
f0002298 g     F .text  00000022 dif_uart_byte_send_polled
f0000e60  w    F .text  00000020 ottf_user_ecall_handler
f00025c4 g       .shutdown      00000000 _text_end
f0000d5c g     F .text  0000001a irq_external_ctrl
f0000d9e g     F .text  00000076 ottf_generic_fault_print
d0010000 g       .manifest      00000000 _chip_info_end
e0002054 g     O .bss   00000004 pxCurrentTCB
f0000fa8  w    F .text  00000038 ottf_internal_isr
f000191e g     F .text  0000000e dif_rv_core_ibex_init
f0002dcc g     O .rodata        000002e8 top_earlgrey_plic_interrupt_for_peripheral
f00033d0 g     O .rodata        00000008 kClockFreqPeripheralHz
f0001008 g     F .text  00000020 dif_rv_plic_irq_complete
f0000d2e g     F .text  0000001c xPortStartScheduler
f000236a g     F .text  00000088 memcpy
f0000eb4  w    F .text  000000dc ottf_external_isr
f0000e60  w    F .text  00000020 ottf_illegal_instr_fault_handler
f000188a g     F .text  00000002 vPortFree
f0001890  w    F .text  00000004 manufacturer_post_test_hook
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
e0002048 g       .bss   00000000 _bss_start
f0000d76 g     F .text  00000016 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
00000000 g       *ABS*  00000000 __DYNAMIC
f00019ec g     F .text  00000006 ibex_mepc_read
f003b000 g       *ABS*  00000000 _non_volatile_counter_0_end
f0000400 g       .vectors       00000000 _text_start
f0000e60  w    F .text  00000020 ottf_load_store_fault_handler
f00017e0 g     F .text  00000006 vListInitialiseItem
e0002184 g     O .freertos.heap 00008000 ucHeap
000025c4 g       *ABS*  00000000 _manifest_code_end
f0000400 g     F .vectors       00000080 _ottf_interrupt_vector
f0000548 g       .init_array    00000000 _init_array_end
f0001a94 g     F .text  00000034 base_log_internal_dv
f0003470 g       *ABS*  00000000 _data_init_end
f00021de g     F .text  000000ba dif_uart_configure
f00019da g     F .text  00000006 abort
e0000020 g     O .static_critical       00000054 epmp_state
f0001808 g     F .text  00000082 pvPortMalloc
f00017cc g     F .text  00000014 vListInitialise
e0002184 g       .bss   00000000 _bss_end
f000188c  w    F .text  00000004 manufacturer_pre_test_hook
f00009be g     F .text  00000052 ottf_machine_ecall_handler
f00033ec g       *ABS*  00000000 _data_init_start
f0000d4a g     F .text  00000012 irq_global_ctrl
f0000cb2 g     F .text  0000003e vApplicationMallocFailedHook
f0000480 g     F .crt   00000068 _ottf_start
f00009b4 g     F .text  0000000a otp_read32
e0001fc4 g     O .data  00000084 status_codes
00001fc4 g       *ABS*  00000000 _static_critical_size
f0000d8c g     F .text  00000012 irq_software_ctrl
f000050c g     F .crt   0000003a crt_section_copy
f00033d8 g     O .rodata        00000008 kUartBaudrate
f000096a g     F .text  0000002e uart_init
f0001028 g     F .text  0000005a sec_mmio_init
f0002454 g     F .text  000000ae memchr
f0000cb0 g     F .text  00000002 test_coverage_send_buffer
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00040000 g       *ABS*  00000000 _ottf_size
f0000e98  w    F .text  00000018 ottf_timer_isr
f000154a g     F .text  00000010 vTaskSuspendAll
e0001fc4 g       .data  00000000 _data_start
f003a800 g       *ABS*  00000000 _non_volatile_counter_0_start
f00017e6 g     F .text  00000022 uxListRemove
f0040000 g       .freertos.heap 00000000 _non_volatile_scratch_end
f003a000 g       *ABS*  00000000 _non_volatile_counter_2_end
f0000f90  w    F .text  00000018 ottf_load_integrity_error_handler
f0039800 g       *ABS*  00000000 _non_volatile_counter_2_start
f0001376 g     F .text  000000ec vTaskSwitchContext
f0000e60  w    F .text  00000020 ottf_breakpoint_handler
00004000 g       *ABS*  00000000 _stack_size
f0000608 g     F .text  00000050 handler_exception
f0001b6e g     F .text  0000048e base_vfprintf
e0002048 g       .data  00000000 _data_end
f0000cf0 g     F .text  0000003e vApplicationStackOverflowHook
f0001acc g     F .text  00000016 base_uart_stdout
f0000754 g     F .text  00000052 handler_irq_internal
f0001b54 g     F .text  0000001a base_vprintf
f0000e80  w    F .text  00000018 ottf_software_isr
e0000074 g     O .static_critical       00001f50 sec_mmio_ctx
f00023f2 g     F .text  00000062 memset
f00019e0 g     F .text  00000006 ibex_mcause_read
f00006ac g     F .text  00000052 handler_irq_timer
e0020000 g       .manifest      00000000 _stack_end
f00033e0 g     O .rodata        00000004 kUartNCOValue
e00020a4 g     O .bss   00000018 rand_testutils_rng_ctx
e0002184 g       .freertos.heap 00000000 _freertos_heap_start
f0000eb0  w    F .text  00000004 ottf_flow_control_isr
e001c000 g       *ABS*  00000000 _stack_start
f00004e8 g     F .crt   00000024 crt_section_clear
f000155a g     F .text  00000144 xTaskResumeAll
f0000658 g     F .text  00000052 handler_irq_software
f0002d24 g     O .rodata        00000004 uxTopUsedPriority
f0001462 g     F .text  00000066 vTaskStartScheduler
00010000 g       *ABS*  00000000 _dv_log_offset
f0000548 g     F .text  00000052 xPortStartFirstTask
f0000e14  w    F .text  0000004c ottf_exception_handler
d000ff80 g       *ABS*  00000000 _chip_info_start
f0000810 g     F .text  00000034 test_main
f000169e g     F .text  0000012e xTaskIncrementTick
f00033e4 g     O .rodata        00000004 kDeviceTestStatusAddress
f000261c g     O .rodata        00000008 kOttfTestConfig
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
f00022ba g     F .text  000000b0 udiv64_slow
f0001b22 g     F .text  00000032 base_printf
f0000fe0 g     F .text  00000028 dif_rv_plic_irq_claim
f00033e8 g     O .rodata        00000004 kDeviceLogBypassUartAddress
f0001136 g     F .text  00000210 xTaskCreate
f00033cc g     O .rodata        00000004 kDeviceType
f00019e6 g     F .text  00000006 ibex_mtval_read
f003a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
f0000a10 g     F .text  00000134 _ottf_main
00000080 g       *ABS*  00000000 _chip_info_size
f0000844 g     F .text  000000c8 rom_printf
f0001346 g     F .text  00000030 vTaskExitCritical
f000059c g     F .text  00000024 pxPortInitialiseStack
f000215e g     F .text  00000072 status_extract
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
f00021d0 g     F .text  0000000e dif_uart_init
f003a000 g       *ABS*  00000000 _non_volatile_counter_1_start
f0000000 g       .manifest      00000000 _ottf_start_address
f0000548 g       .init_array    00000000 _init_array_start
f000192c g     F .text  000000ae test_status_set
f000090c g     F .text  0000005e pinmux_init
f00019f2 g     F .text  000000a2 base_log_internal_core
f0000998 g     F .text  0000001c uart_putchar
f00007a8 g     F .text  00000068 ottf_isr_exit
f0000700 g     F .text  00000052 handler_irq_external



Disassembly of section .vectors:

f0000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
f0000400:       2080006f                j       f0000608 <handler_exception>
f0000404:       c0001073                unimp
f0000408:       c0001073                unimp
f000040c:       24c0006f                j       f0000658 <handler_irq_software>
f0000410:       c0001073                unimp
f0000414:       c0001073                unimp
f0000418:       c0001073                unimp
f000041c:       2900006f                j       f00006ac <handler_irq_timer>
f0000420:       c0001073                unimp
f0000424:       c0001073                unimp
f0000428:       c0001073                unimp
f000042c:       2d40006f                j       f0000700 <handler_irq_external>
f0000430:       c0001073                unimp
f0000434:       c0001073                unimp
f0000438:       c0001073                unimp
f000043c:       c0001073                unimp
f0000440:       c0001073                unimp
f0000444:       c0001073                unimp
f0000448:       c0001073                unimp
f000044c:       c0001073                unimp
f0000450:       c0001073                unimp
f0000454:       c0001073                unimp
f0000458:       c0001073                unimp
f000045c:       c0001073                unimp
f0000460:       c0001073                unimp
f0000464:       c0001073                unimp
f0000468:       c0001073                unimp
f000046c:       c0001073                unimp
f0000470:       c0001073                unimp
f0000474:       c0001073                unimp
f0000478:       c0001073                unimp
f000047c:       2d80006f                j       f0000754 <handler_irq_internal>

Disassembly of section .crt:

f0000480 <_ottf_start>:
_ottf_start():
f0000480:       f0002197                auipc   gp,0xf0002
f0000484:       34418193                addi    gp,gp,836 # e00027c4 <__global_pointer$>
f0000488:       f0020117                auipc   sp,0xf0020
f000048c:       b6810113                addi    sp,sp,-1176 # e001fff0 <_stack_start+0x3ff0>
f0000490:       00000297                auipc   t0,0x0
f0000494:       f7128293                addi    t0,t0,-143 # f0000401 <_ottf_interrupt_vector+0x1>
f0000498:       30529073                csrw    mtvec,t0
f000049c:       f0002517                auipc   a0,0xf0002
f00004a0:       b2850513                addi    a0,a0,-1240 # e0001fc4 <status_codes>
f00004a4:       88418593                addi    a1,gp,-1916 # e0002048 <uart0>
f00004a8:       00003617                auipc   a2,0x3
f00004ac:       f4460613                addi    a2,a2,-188 # f00033ec <_data_init_start>
f00004b0:       28b1                    jal     f000050c <crt_section_copy>
f00004b2:       f0002517                auipc   a0,0xf0002
f00004b6:       b9650513                addi    a0,a0,-1130 # e0002048 <uart0>
f00004ba:       f0002597                auipc   a1,0xf0002
f00004be:       cca58593                addi    a1,a1,-822 # e0002184 <ucHeap>
f00004c2:       201d                    jal     f00004e8 <crt_section_clear>
f00004c4:       00000417                auipc   s0,0x0
f00004c8:       08440413                addi    s0,s0,132 # f0000548 <xPortStartFirstTask>
f00004cc:       00000497                auipc   s1,0x0
f00004d0:       07c48493                addi    s1,s1,124 # f0000548 <xPortStartFirstTask>
f00004d4:       00947863                bgeu    s0,s1,f00004e4 <init_array_loop_end>

f00004d8 <init_array_loop>:
f00004d8:       /-> 00042283            lw      t0,0(s0)
f00004dc:       |   9282                        jalr    t0
f00004de:       |   0411                        addi    s0,s0,4
f00004e0:       \-- fe946ce3            bltu    s0,s1,f00004d8 <init_array_loop>

f00004e4 <init_array_loop_end>:
f00004e4:       52c0006f                j       f0000a10 <_ottf_main>

f00004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
f00004e8:       /-------- 00b57e63              bgeu    a0,a1,f0000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
f00004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
f00004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
f00004f4:       |  /----- 00029b63              bnez    t0,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
f00004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
f00004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
f00004fe:       |  |  \-- feb56de3              bltu    a0,a1,f00004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
f0000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
f0000504:       \--+----X 00b51363              bne     a0,a1,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
f0000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
f000050a:          \----> 0000                  unimp

f000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
f000050c:       /-------- 02b57963              bgeu    a0,a1,f000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
f0000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
f0000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
f0000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
f000051c:       |  /----- 02029463              bnez    t0,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
f0000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
f0000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
f0000528:       |  +----- 0062ee63              bltu    t0,t1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
f000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
f0000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
f0000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
f0000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
f0000538:       |  |  \-- feb56ae3              bltu    a0,a1,f000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
f000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
f000053e:       \--+----X 00b51363              bne     a0,a1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
f0000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
f0000544:          \----> 0000                  unimp

Disassembly of section .text:

f0000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
f0000548:       f0002117                auipc   sp,0xf0002
f000054c:       b0c12103                lw      sp,-1268(sp) # e0002054 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
f0000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
f0000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
f000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
f0000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
f000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
f000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
f0000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
f0000598:       8082                    ret
f000059a:       0001                    nop

f000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
f000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
f00005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
f00005a4:       6309                    lui     t1,0x2
f00005a6:       88030313                addi    t1,t1,-1920 # 1880 <_epmp_reset_rx_size+0x1080>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
f00005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
f00005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
f00005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
f00005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
f00005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
f00005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
f00005be:       8082                    ret

f00005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
f00005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
f00005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
f00005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
f00005ca:       /-- 00731363            bne     t1,t2,f00005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
f00005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
f00005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
f00005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
f00005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
f00005da:       /-- 006e0463            beq     t3,t1,f00005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
f00005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
f00005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
f00005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
f00005e4:           8082                        ret
f00005e6:           0001                        nop

f00005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
f00005e8:           00002297            auipc   t0,0x2
f00005ec:           03428293            addi    t0,t0,52 # f000261c <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
f00005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
f00005f4:       /-- 00030863            beqz    t1,f0000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
f00005f8:       |   f0002397            auipc   t2,0xf0002
f00005fc:       |   a5c3a383            lw      t2,-1444(t2) # e0002054 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
f0000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
f0000604:       \-> 8082                        ret
f0000606:           0001                        nop

f0000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
f000064a:       3f9d                    jal     f00005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
f000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000064e:       3f69                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  jal ottf_exception_handler
f0000650:       7c4000ef                jal     ra,f0000e14 <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:127

  // Return from ISR.
  j ottf_isr_exit
f0000654:       1540006f                j       f00007a8 <ottf_isr_exit>

f0000658 <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:140
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000658:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000065c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000065e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000660:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000662:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000664:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000666:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000668:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000066a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000066c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000066e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000670:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000672:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000674:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000676:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000678:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000067a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000067c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000067e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000680:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000682:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000684:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000686:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000688:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000068a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000068c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000068e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000690:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000692:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:171

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000694:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000698:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:176

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000069a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177
  sw t0, 0(sp)
f000069e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:181

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006a0:       37a1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:184

  // Jump to the software ISR.
  jal ottf_software_isr
f00006a2:       7de000ef                jal     ra,f0000e80 <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:187

  // Return from ISR.
  j ottf_isr_exit
f00006a6:       1020006f                j       f00007a8 <ottf_isr_exit>
f00006aa:       0001                    nop

f00006ac <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:200
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f00006ac:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:201
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f00006b0:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f00006b2:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f00006b4:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f00006b6:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f00006b8:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f00006ba:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f00006bc:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f00006be:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f00006c0:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f00006c2:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f00006c4:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f00006c6:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f00006c8:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f00006ca:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f00006cc:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f00006ce:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f00006d0:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f00006d2:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f00006d4:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f00006d6:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f00006d8:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f00006da:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f00006dc:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f00006de:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f00006e0:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f00006e2:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f00006e4:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f00006e6:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:231

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f00006e8:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:232
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f00006ec:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:236

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f00006ee:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:237
  sw t0, 0(sp)
f00006f2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:241

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006f4:       3dd5                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:244

  // Jump to timer ISR.
  jal ottf_timer_isr
f00006f6:       7a2000ef                jal     ra,f0000e98 <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247

  // Return from ISR.
  j ottf_isr_exit
f00006fa:       0ae0006f                j       f00007a8 <ottf_isr_exit>
f00006fe:       0001                    nop

f0000700 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:260
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000700:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:261
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000704:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:262
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f0000706:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000708:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000070a:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f000070c:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f000070e:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000710:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000712:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000714:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000716:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000718:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000071a:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f000071c:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f000071e:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000720:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000722:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000724:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000726:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000728:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000072a:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f000072c:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f000072e:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000730:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000732:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000734:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000736:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000738:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000073a:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f000073c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:292
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000740:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:296

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000742:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:297
  sw t0, 0(sp)
f0000746:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:301

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f0000748:       3545                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Jump to external ISR.
  jal ottf_external_isr
f000074a:       76a000ef                jal     ra,f0000eb4 <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Return from ISR.
  j ottf_isr_exit
f000074e:       05a0006f                j       f00007a8 <ottf_isr_exit>
f0000752:       0001                    nop

f0000754 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:320
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000754:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:321
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000758:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:322
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000075a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:323
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f000075c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000075e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000760:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000762:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000764:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000766:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000768:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000076a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f000076c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000076e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000770:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000772:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000774:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000776:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000778:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000077a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f000077c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000077e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000780:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000782:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000784:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000786:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000788:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000078a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f000078c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000078e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000790:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000794:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000796:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:357
  sw t0, 0(sp)
f000079a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000079c:       35b1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:364

  // Jump to the internal ISR.
  jal ottf_internal_isr
f000079e:       00b000ef                jal     ra,f0000fa8 <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:367

  // Return from ISR.
  j ottf_isr_exit
f00007a2:       0060006f                j       f00007a8 <ottf_isr_exit>
f00007a6:       0001                    nop

f00007a8 <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:384
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
f00007a8:           00002297            auipc   t0,0x2
f00007ac:           e7428293            addi    t0,t0,-396 # f000261c <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:385
  lb t1, 0(t0)
f00007b0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:386
  beqz t1, .L_skip_sp_restore
f00007b4:       /-- 00030863            beqz    t1,f00007c4 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:387
  lw  t2, pxCurrentTCB
f00007b8:       |   f0002397            auipc   t2,0xf0002
f00007bc:       |   89c3a383            lw      t2,-1892(t2) # e0002054 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:388
  lw  sp, 0(t2)
f00007c0:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
f00007c4:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  csrw mepc, t0
f00007c6:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:396

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
f00007ca:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
  csrw mstatus, t0
f00007cc:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:400

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
f00007d0:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
f00007d2:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f00007d4:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:403
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f00007d6:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:404
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f00007d8:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f00007da:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
f00007dc:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f00007de:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f00007e0:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f00007e2:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f00007e4:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f00007e6:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f00007e8:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f00007ea:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f00007ec:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f00007ee:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f00007f0:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f00007f2:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f00007f4:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f00007f6:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f00007f8:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f00007fa:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f00007fc:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f00007fe:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000800:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000802:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000804:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000806:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000808:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
f000080c:           30200073            mret

f0000810 <test_main>:
test_main():
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:61
#define S_1  0x03000004
#define S_2  0x03000008

OTTF_DEFINE_TEST_CONFIG();

bool test_main(void) {
f0000810:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:63

  sec_mmio_init();
f0000812:           c606                        sw      ra,12(sp)
f0000814:           015000ef            jal     ra,f0001028 <sec_mmio_init>
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:64
  pinmux_init();
f0000818:           28d5                        jal     f000090c <pinmux_init>
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:65
  uart_init(kUartNCOValue);
f000081a:           00003517            auipc   a0,0x3
f000081e:           bc650513            addi    a0,a0,-1082 # f00033e0 <kUartNCOValue>
f0000822:           4108                        lw      a0,0(a0)
f0000824:           2299                        jal     f000096a <uart_init>
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:67

  rom_printf("[SECD] Booting CVA6!\n\r");
f0000826:           00002517            auipc   a0,0x2
f000082a:           dde50513            addi    a0,a0,-546 # f0002604 <_text_end+0x40>
f000082e:           2819                        jal     f0000844 <rom_printf>
f0000830:           03000537            lui     a0,0x3000
f0000834:           780005b7            lui     a1,0x78000
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:74

  pointer = (int *) S_1;
  pointer = 0x00000000;

  pointer = (int *) S_0;
  *pointer = 0x78000000;
f0000838:           c10c                        sw      a1,0(a0)
f000083a:           4589                        li      a1,2
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:77

  pointer = (int *) S_2;
  *pointer = 2;
f000083c:           c50c                        sw      a1,8(a0)
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:80

  while(1)
    asm volatile ("wfi");
f000083e:       /-> 10500073            wfi
/proc/self/cwd/sw/tests/carfield/flash_carfield_boot/flash_carfield_boot.c:79
  while(1)
f0000842:       \-- bff5                        j       f000083e <test_main+0x2e>

f0000844 <rom_printf>:
rom_printf():
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:13
#include <stdarg.h>
#include <stdint.h>

#include "sw/device/silicon_creator/lib/drivers/uart.h"

rom_error_t rom_printf(const char *format, ...) {
f0000844:                          715d                 addi    sp,sp,-80
f0000846:                          d606                 sw      ra,44(sp)
f0000848:                          d422                 sw      s0,40(sp)
f000084a:                          d226                 sw      s1,36(sp)
f000084c:                          d04a                 sw      s2,32(sp)
f000084e:                          ce4e                 sw      s3,28(sp)
f0000850:                          cc52                 sw      s4,24(sp)
f0000852:                          ca56                 sw      s5,20(sp)
f0000854:                          c85a                 sw      s6,16(sp)
f0000856:                          c65e                 sw      s7,12(sp)
f0000858:                          84aa                 mv      s1,a0
f000085a:                          c6c6                 sw      a7,76(sp)
f000085c:                          c4c2                 sw      a6,72(sp)
f000085e:                          c2be                 sw      a5,68(sp)
f0000860:                          c0ba                 sw      a4,64(sp)
f0000862:                          de36                 sw      a3,60(sp)
f0000864:                          dc32                 sw      a2,56(sp)
f0000866:                          da2e                 sw      a1,52(sp)
f0000868:                          1848                 addi    a0,sp,52
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:15
  va_list args;
  va_start(args, format);
f000086a:                          c42a                 sw      a0,8(sp)
f000086c:                          02500a13             li      s4,37
f0000870:                          014c4537             lui     a0,0x14c4
f0000874:                          70d50913             addi    s2,a0,1805 # 14c470d <_ottf_size+0x148470d>
f0000878:                          07800993             li      s3,120
f000087c:                          00002b97             auipc   s7,0x2
f0000880:                          da8b8b93             addi    s7,s7,-600 # f0002624 <rom_printf.kHexTable>
f0000884:                          07300a93             li      s5,115
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:17

  while (*format != '\0') {
f0000888:       /----------------> 0004c503             lbu     a0,0(s1)
f000088c:       |              /-- 01450663             beq     a0,s4,f0000898 <rom_printf+0x54>
f0000890:       |  /-----------|-- c125                 beqz    a0,f00008f0 <rom_printf+0xac>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:19
    if (*format != '%') {
      uart_putchar(*format++);
f0000892:       |  |           |   0485                 addi    s1,s1,1
f0000894:       |  |           |   2211                 jal     f0000998 <uart_putchar>
f0000896:       +--|-----------|-- bfcd                 j       f0000888 <rom_printf+0x44>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:24
      continue;
    }

    ++format;  // Skip over the '%'.
    switch (*format++) {
f0000898:       |  |           \-> 0014c503             lbu     a0,1(s1)
f000089c:       |  |               00248b13             addi    s6,s1,2
f00008a0:       |  |     /-------- 03350763             beq     a0,s3,f00008ce <rom_printf+0x8a>
f00008a4:       |  |  /--|-------- 05551863             bne     a0,s5,f00008f4 <rom_printf+0xb0>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:27
      case 's': {
        // Print a null-terminated string.
        const char *str = va_arg(args, const char *);
f00008a8:       |  |  |  |         4522                 lw      a0,8(sp)
f00008aa:       |  |  |  |         00450593             addi    a1,a0,4
f00008ae:       |  |  |  |         c42e                 sw      a1,8(sp)
f00008b0:       |  |  |  |         410c                 lw      a1,0(a0)
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:28
        while (*str != '\0') {
f00008b2:       |  |  |  |         0005c503             lbu     a0,0(a1)
f00008b6:       |  |  |  |         84da                 mv      s1,s6
f00008b8:       +--|--|--|-------- d961                 beqz    a0,f0000888 <rom_printf+0x44>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:17
  while (*format != '\0') {
f00008ba:       |  |  |  |         00158413             addi    s0,a1,1
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:29
          uart_putchar(*str++);
f00008be:       |  |  |  |     /-> 0ff57513             andi    a0,a0,255
f00008c2:       |  |  |  |     |   28d9                 jal     f0000998 <uart_putchar>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:28
        while (*str != '\0') {
f00008c4:       |  |  |  |     |   00044503             lbu     a0,0(s0)
f00008c8:       |  |  |  |     |   0405                 addi    s0,s0,1
f00008ca:       |  |  |  |     \-- f975                 bnez    a0,f00008be <rom_printf+0x7a>
f00008cc:       |  |  |  |  /----- a005                 j       f00008ec <rom_printf+0xa8>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:36
        break;
      }
      case 'x': {
        // Print an `unsigned int` in hexadecimal.
        static const char kHexTable[16] = "0123456789abcdef";
        unsigned int v = va_arg(args, unsigned int);
f00008ce:       |  |  |  \--|----> 4522                 lw      a0,8(sp)
f00008d0:       |  |  |     |      00450593             addi    a1,a0,4
f00008d4:       |  |  |     |      c42e                 sw      a1,8(sp)
f00008d6:       |  |  |     |      4104                 lw      s1,0(a0)
f00008d8:       |  |  |     |      4421                 li      s0,8
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:39
        for (int i = 0; i < sizeof(v) * 2; ++i) {
          int shift = sizeof(v) * 8 - 4;
          uart_putchar(kHexTable[v >> shift]);
f00008da:       |  |  |     |  /-> 01c4d513             srli    a0,s1,0x1c
f00008de:       |  |  |     |  |   955e                 add     a0,a0,s7
f00008e0:       |  |  |     |  |   00054503             lbu     a0,0(a0)
f00008e4:       |  |  |     |  |   2855                 jal     f0000998 <uart_putchar>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:37
        for (int i = 0; i < sizeof(v) * 2; ++i) {
f00008e6:       |  |  |     |  |   147d                 addi    s0,s0,-1
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:40
          v <<= 4;
f00008e8:       |  |  |     |  |   0492                 slli    s1,s1,0x4
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:37
        for (int i = 0; i < sizeof(v) * 2; ++i) {
f00008ea:       |  |  |     |  \-- f865                 bnez    s0,f00008da <rom_printf+0x96>
f00008ec:       |  |  |     \----> 84da                 mv      s1,s6
f00008ee:       \--|--|----------- bf69                 j       f0000888 <rom_printf+0x44>
f00008f0:          \--|----------> 73900913             li      s2,1849
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:52
    }
  }

  va_end(args);
  return kErrorOk;
}
f00008f4:             \----------> 854a                 mv      a0,s2
f00008f6:                          4bb2                 lw      s7,12(sp)
f00008f8:                          4b42                 lw      s6,16(sp)
f00008fa:                          4ad2                 lw      s5,20(sp)
f00008fc:                          4a62                 lw      s4,24(sp)
f00008fe:                          49f2                 lw      s3,28(sp)
f0000900:                          5902                 lw      s2,32(sp)
f0000902:                          5492                 lw      s1,36(sp)
f0000904:                          5422                 lw      s0,40(sp)
f0000906:                          50b2                 lw      ra,44(sp)
f0000908:                          6161                 addi    sp,sp,80
f000090a:                          8082                 ret

f000090c <pinmux_init>:
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:127
  abs_mmio_write32(
      kBase + PINMUX_MIO_OUTSEL_0_REG_OFFSET + output.mio * sizeof(uint32_t),
      output.outsel);
}

void pinmux_init(void) {
f000090c:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:129
  uint32_t bootstrap_en =
      otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_BOOTSTRAP_EN_OFFSET);
f000090e:              c606                     sw      ra,12(sp)
f0000910:              36400513                 li      a0,868
f0000914:              2045                     jal     f00009b4 <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
  // > of statements.

  // The +r constraint tells the compiler that this is an "inout" parameter: it
  // means that not only does the black box depend on `val`, but it also mutates
  // it in an unspecified way.
  asm volatile("" : "+r"(val));
f0000916:              862a                     mv      a2,a0
f0000918:              73900593                 li      a1,1849
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:130
  if (launder32(bootstrap_en) == kHardenedBoolTrue) {
f000091c:       /----- 02b61b63                 bne     a2,a1,f0000952 <pinmux_init+0x46>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:131
    HARDENED_CHECK_EQ(bootstrap_en, kHardenedBoolTrue);
f0000920:       |  /-- 00b50663                 beq     a0,a1,f000092c <pinmux_init+0x20>
f0000924:       |  |   0000                     unimp
f0000926:       |  |   0000                     unimp
f0000928:       |  |   0000                     unimp
f000092a:       |  |   0000                     unimp
f000092c:       |  \-> c0460537                 lui     a0,0xc0460
f0000930:       |      4591                     li      a1,4
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
 *
 * @param addr the address to write to.
 * @param value the value to write.
 */
inline void abs_mmio_write32(uint32_t addr, uint32_t value) {
  *((volatile uint32_t *)addr) = value;
f0000932:       |      44b52c23                 sw      a1,1112(a0) # c0460458 <_non_volatile_scratch_end+0xd0420458>
f0000936:       |      44b52e23                 sw      a1,1116(a0)
f000093a:       |      46b52023                 sw      a1,1120(a0)
f000093e:       |      45e1                     li      a1,24
f0000940:       |      14b52023                 sw      a1,320(a0)
f0000944:       |      45e5                     li      a1,25
f0000946:       |      14b52223                 sw      a1,324(a0)
f000094a:       |      14850513                 addi    a0,a0,328
f000094e:       |      45e9                     li      a1,26
f0000950:       |      c10c                     sw      a1,0(a0)
f0000952:       \----> c0460537                 lui     a0,0xc0460
f0000956:              45ed                     li      a1,27
f0000958:              18b52823                 sw      a1,400(a0) # c0460190 <_non_volatile_scratch_end+0xd0420190>
f000095c:              02d00593                 li      a1,45
f0000960:              2eb52823                 sw      a1,752(a0)
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:144
    configure_input(kInputSwStrap2);
  }

  configure_input(kInputUart0);
  configure_output(kOutputUart0);
}
f0000964:              40b2                     lw      ra,12(sp)
f0000966:              0141                     addi    sp,sp,16
f0000968:              8082                     ret

f000096a <uart_init>:
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:37
                   0u);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_STATE_REG_OFFSET,
                   UINT32_MAX);
}

rom_error_t uart_init(uint32_t precalculated_nco) {
f000096a:       c00005b7                lui     a1,0xc0000
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
f000096e:       0005a823                sw      zero,16(a1) # c0000010 <_non_volatile_scratch_end+0xcffc0010>
f0000972:       460d                    li      a2,3
f0000974:       d190                    sw      a2,32(a1)
f0000976:       0205a423                sw      zero,40(a1)
f000097a:       0205a823                sw      zero,48(a1)
f000097e:       0005a223                sw      zero,4(a1)
f0000982:       567d                    li      a2,-1
f0000984:       c190                    sw      a2,0(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
  bitfield |= (value & field.mask) << field.index;
f0000986:       0542                    slli    a0,a0,0x10
f0000988:       00156513                ori     a0,a0,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
f000098c:       c988                    sw      a0,16(a1)
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:51
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_CTRL_REG_OFFSET, reg);

  // Disable interrupts.
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_ENABLE_REG_OFFSET,
                   0u);
  return kErrorOk;
f000098e:       73900513                li      a0,1849
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
f0000992:       0005a223                sw      zero,4(a1)
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:51
f0000996:       8082                    ret

f0000998 <uart_putchar>:
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:66
  uint32_t reg =
      abs_mmio_read32(TOP_EARLGREY_UART0_BASE_ADDR + UART_STATUS_REG_OFFSET);
  return bitfield_bit32_read(reg, UART_STATUS_TXIDLE_BIT);
}

void uart_putchar(uint8_t byte) {
f0000998:           c00005b7            lui     a1,0xc0000
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
f000099c:       /-> 49d0                        lw      a2,20(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f000099e:       |   8a05                        andi    a2,a2,1
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:68
  // If the transmit FIFO is full, wait.
  while (uart_tx_full()) {
f00009a0:       \-- fe75                        bnez    a2,f000099c <uart_putchar+0x4>
f00009a2:           c00005b7            lui     a1,0xc0000
f00009a6:           01c58613            addi    a2,a1,28 # c000001c <_non_volatile_scratch_end+0xcffc001c>
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
f00009aa:           c208                        sw      a0,0(a2)
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
f00009ac:       /-> 49c8                        lw      a0,20(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00009ae:       |   8921                        andi    a0,a0,8
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:74
  }
  uint32_t reg = bitfield_field32_write(0, UART_WDATA_WDATA_FIELD, byte);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_WDATA_REG_OFFSET, reg);

  // If the transmitter is active, wait.
  while (!uart_tx_idle()) {
f00009b0:       \-- dd75                        beqz    a0,f00009ac <uart_putchar+0x14>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:76
  }
}
f00009b2:           8082                        ret

f00009b4 <otp_read32>:
otp_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:18
#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"
#include "otp_ctrl_regs.h"  // Generated.

enum { kBase = TOP_EARLGREY_OTP_CTRL_CORE_BASE_ADDR };

uint32_t otp_read32(uint32_t address) {
f00009b4:       c01315b7                lui     a1,0xc0131
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:19
  return sec_mmio_read32(kBase + OTP_CTRL_SW_CFG_WINDOW_REG_OFFSET + address);
f00009b8:       952e                    add     a0,a0,a1
f00009ba:       6c80006f                j       f0001082 <sec_mmio_read32>

f00009be <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:49
// A global random number generator testutil handle.
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(void) {
f00009be:           1101                        addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:50
  if (pxCurrentTCB != NULL) {
f00009c0:           ce06                        sw      ra,28(sp)
f00009c2:           f0001517            auipc   a0,0xf0001
f00009c6:           69250513            addi    a0,a0,1682 # e0002054 <pxCurrentTCB>
f00009ca:           4108                        lw      a0,0(a0)
f00009cc:       /-- c509                        beqz    a0,f00009d6 <ottf_machine_ecall_handler+0x18>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:54
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
f00009ce:       |   40f2                        lw      ra,28(sp)
f00009d0:       |   6105                        addi    sp,sp,32
f00009d2:       |   1a50006f            j       f0001376 <vTaskSwitchContext>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:57
    return;
  }
  LOG_ERROR(
f00009d6:       \-> 00003517            auipc   a0,0x3
f00009da:           a1250513            addi    a0,a0,-1518 # f00033e8 <kDeviceLogBypassUartAddress>
f00009de:           4108                        lw      a0,0(a0)
f00009e0:       /-- c911                        beqz    a0,f00009f4 <ottf_machine_ecall_handler+0x36>
f00009e2:       |   1000f517            auipc   a0,0x1000f
f00009e6:       |   61e50513            addi    a0,a0,1566 # 10000 <_non_volatile_scratch_end+0xffd0000>
f00009ea:       |   4581                        li      a1,0
f00009ec:       |   40f2                        lw      ra,28(sp)
f00009ee:       |   6105                        addi    sp,sp,32
f00009f0:       |   0a40106f            j       f0001a94 <base_log_internal_dv>
f00009f4:       \-> 00002597            auipc   a1,0x2
f00009f8:           ea458593            addi    a1,a1,-348 # f0002898 <rom_printf.kHexTable+0x274>
f00009fc:           0028                        addi    a0,sp,8
f00009fe:           4651                        li      a2,20
f0000a00:           16b010ef            jal     ra,f000236a <memcpy>
f0000a04:           0028                        addi    a0,sp,8
f0000a06:           7ed000ef            jal     ra,f00019f2 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:60
      "OTTF currently only supports use of machine-mode ecall for FreeRTOS "
      "context switching.");
}
f0000a0a:           40f2                        lw      ra,28(sp)
f0000a0c:           6105                        addi    sp,sp,32
f0000a0e:           8082                        ret

f0000a10 <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:120
  report_test_status(result);
}

dif_uart_t *ottf_console(void) { return &uart0; }

void _ottf_main(void) {
f0000a10:                 7179                  addi    sp,sp,-48
f0000a12:                 d606                  sw      ra,44(sp)
f0000a14:                 d422                  sw      s0,40(sp)
f0000a16:                 d226                  sw      s1,36(sp)
f0000a18:                 d04a                  sw      s2,32(sp)
f0000a1a:                 6511                  lui     a0,0x4
f0000a1c:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x354>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:121
  test_status_set(kTestStatusInTest);
f0000a20:                 70d000ef              jal     ra,f000192c <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:124

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
f0000a24:                 00003517              auipc   a0,0x3
f0000a28:                 9a850513              addi    a0,a0,-1624 # f00033cc <kDeviceType>
f0000a2c:                 4108                  lw      a0,0(a0)
f0000a2e:                 00003917              auipc   s2,0x3
f0000a32:                 9ba90913              addi    s2,s2,-1606 # f00033e8 <kDeviceLogBypassUartAddress>
f0000a36:                 00002497              auipc   s1,0x2
f0000a3a:                 be648493              addi    s1,s1,-1050 # f000261c <kOttfTestConfig>
f0000a3e:          /----- c91d                  beqz    a0,f0000a74 <_ottf_main+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    init_uart();
f0000a40:          |      2211                  jal     f0000b44 <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:126
    LOG_INFO("Running %s", kOttfTestConfig.file);
f0000a42:          |      00092503              lw      a0,0(s2)
f0000a46:          |      40c0                  lw      s0,4(s1)
f0000a48:          |  /-- c911                  beqz    a0,f0000a5c <_ottf_main+0x4c>
f0000a4a:          |  |   1000f517              auipc   a0,0x1000f
f0000a4e:          |  |   5ca50513              addi    a0,a0,1482 # 10014 <_non_volatile_scratch_end+0xffd0014>
f0000a52:          |  |   4585                  li      a1,1
f0000a54:          |  |   8622                  mv      a2,s0
f0000a56:          |  |   03e010ef              jal     ra,f0001a94 <base_log_internal_dv>
f0000a5a:          +--|-- a829                  j       f0000a74 <_ottf_main+0x64>
f0000a5c:          |  \-> 00002597              auipc   a1,0x2
f0000a60:          |      e5058593              addi    a1,a1,-432 # f00028ac <rom_printf.kHexTable+0x288>
f0000a64:          |      850a                  mv      a0,sp
f0000a66:          |      4651                  li      a2,20
f0000a68:          |      103010ef              jal     ra,f000236a <memcpy>
f0000a6c:          |      850a                  mv      a0,sp
f0000a6e:          |      85a2                  mv      a1,s0
f0000a70:          |      783000ef              jal     ra,f00019f2 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:132
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
f0000a74:          \----> c11f0537              lui     a0,0xc11f0
f0000a78:                 082c                  addi    a1,sp,24
f0000a7a:                 6a5000ef              jal     ra,f000191e <dif_rv_core_ibex_init>
f0000a7e:       /-------- cd1d                  beqz    a0,f0000abc <_ottf_main+0xac>
f0000a80:       |         842a                  mv      s0,a0
f0000a82:       |         00092503              lw      a0,0(s2)
f0000a86:       |     /-- c911                  beqz    a0,f0000a9a <_ottf_main+0x8a>
f0000a88:       |     |   1000f517              auipc   a0,0x1000f
f0000a8c:       |     |   5a050513              addi    a0,a0,1440 # 10028 <_non_volatile_scratch_end+0xffd0028>
f0000a90:       |     |   4585                  li      a1,1
f0000a92:       |     |   8622                  mv      a2,s0
f0000a94:       |     |   000010ef              jal     ra,f0001a94 <base_log_internal_dv>
f0000a98:       |  /--|-- a829                  j       f0000ab2 <_ottf_main+0xa2>
f0000a9a:       |  |  \-> 00002597              auipc   a1,0x2
f0000a9e:       |  |      e2658593              addi    a1,a1,-474 # f00028c0 <rom_printf.kHexTable+0x29c>
f0000aa2:       |  |      850a                  mv      a0,sp
f0000aa4:       |  |      4651                  li      a2,20
f0000aa6:       |  |      0c5010ef              jal     ra,f000236a <memcpy>
f0000aaa:       |  |      850a                  mv      a0,sp
f0000aac:       |  |      85a2                  mv      a1,s0
f0000aae:       |  |      745000ef              jal     ra,f00019f2 <base_log_internal_core>
f0000ab2:       |  \----> 6531                  lui     a0,0xc
f0000ab4:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000ab8:       |         675000ef              jal     ra,f000192c <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:135
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
f0000abc:       \-------> 850a                  mv      a0,sp
f0000abe:                 082c                  addi    a1,sp,24
f0000ac0:                 5d5000ef              jal     ra,f0001894 <rand_testutils_init>
f0000ac4:                 f0001517              auipc   a0,0xf0001
f0000ac8:                 5e050513              addi    a0,a0,1504 # e00020a4 <rand_testutils_rng_ctx>
f0000acc:                 858a                  mv      a1,sp
f0000ace:                 4661                  li      a2,24
f0000ad0:                 09b010ef              jal     ra,f000236a <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:138

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
f0000ad4:                 0004c503              lbu     a0,0(s1)
f0000ad8:          /----- c11d                  beqz    a0,f0000afe <_ottf_main+0xee>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:65
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
f0000ada:          |      00000517              auipc   a0,0x0
f0000ade:          |      14450513              addi    a0,a0,324 # f0000c1e <test_wrapper>
f0000ae2:          |      00002597              auipc   a1,0x2
f0000ae6:          |      c6058593              addi    a1,a1,-928 # f0002742 <rom_printf.kHexTable+0x11e>
f0000aea:          |      10000613              li      a2,256
f0000aee:          |      4705                  li      a4,1
f0000af0:          |      4681                  li      a3,0
f0000af2:          |      4781                  li      a5,0
f0000af4:          |      642000ef              jal     ra,f0001136 <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", kOttfFreeRtosMinStackSize, 0);
    vTaskStartScheduler();
f0000af8:          |      16b000ef              jal     ra,f0001462 <vTaskStartScheduler>
f0000afc:          |  /-- a019                  j       f0000b02 <_ottf_main+0xf2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:146
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
f0000afe:          \--|-> 4501                  li      a0,0
f0000b00:             |   2a39                  jal     f0000c1e <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:150
  }

  // Unreachable.
  CHECK(false);
f0000b02:             \-> 00092503              lw      a0,0(s2)
f0000b06:             /-- c909                  beqz    a0,f0000b18 <_ottf_main+0x108>
f0000b08:             |   1000f517              auipc   a0,0x1000f
f0000b0c:             |   53450513              addi    a0,a0,1332 # 1003c <_non_volatile_scratch_end+0xffd003c>
f0000b10:             |   4581                  li      a1,0
f0000b12:             |   783000ef              jal     ra,f0001a94 <base_log_internal_dv>
f0000b16:          /--|-- a821                  j       f0000b2e <_ottf_main+0x11e>
f0000b18:          |  \-> 00002597              auipc   a1,0x2
f0000b1c:          |      dbc58593              addi    a1,a1,-580 # f00028d4 <rom_printf.kHexTable+0x2b0>
f0000b20:          |      850a                  mv      a0,sp
f0000b22:          |      4651                  li      a2,20
f0000b24:          |      047010ef              jal     ra,f000236a <memcpy>
f0000b28:          |      850a                  mv      a0,sp
f0000b2a:          |      6c9000ef              jal     ra,f00019f2 <base_log_internal_core>
f0000b2e:          \----> 6531                  lui     a0,0xc
f0000b30:                 aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000b34:                 5f9000ef              jal     ra,f000192c <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:151
}
f0000b38:                 5902                  lw      s2,32(sp)
f0000b3a:                 5492                  lw      s1,36(sp)
f0000b3c:                 5422                  lw      s0,40(sp)
f0000b3e:                 50b2                  lw      ra,44(sp)
f0000b40:                 6145                  addi    sp,sp,48
f0000b42:                 8082                  ret

f0000b44 <init_uart>:
init_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:81
static void init_uart(void) {
f0000b44:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:82
  CHECK_DIF_OK(dif_uart_init(
f0000b46:                 ce06                  sw      ra,28(sp)
f0000b48:                 cc22                  sw      s0,24(sp)
f0000b4a:                 ca26                  sw      s1,20(sp)
f0000b4c:                 f0001597              auipc   a1,0xf0001
f0000b50:                 4fc58593              addi    a1,a1,1276 # e0002048 <uart0>
f0000b54:                 c0000537              lui     a0,0xc0000
f0000b58:                 678010ef              jal     ra,f00021d0 <dif_uart_init>
f0000b5c:                 00003497              auipc   s1,0x3
f0000b60:                 88c48493              addi    s1,s1,-1908 # f00033e8 <kDeviceLogBypassUartAddress>
f0000b64:       /-------- cd15                  beqz    a0,f0000ba0 <init_uart+0x5c>
f0000b66:       |         842a                  mv      s0,a0
f0000b68:       |         4088                  lw      a0,0(s1)
f0000b6a:       |     /-- c911                  beqz    a0,f0000b7e <init_uart+0x3a>
f0000b6c:       |     |   1000f517              auipc   a0,0x1000f
f0000b70:       |     |   4e450513              addi    a0,a0,1252 # 10050 <_non_volatile_scratch_end+0xffd0050>
f0000b74:       |     |   4585                  li      a1,1
f0000b76:       |     |   8622                  mv      a2,s0
f0000b78:       |     |   71d000ef              jal     ra,f0001a94 <base_log_internal_dv>
f0000b7c:       |  /--|-- a829                  j       f0000b96 <init_uart+0x52>
f0000b7e:       |  |  \-> 00002597              auipc   a1,0x2
f0000b82:       |  |      d6a58593              addi    a1,a1,-662 # f00028e8 <rom_printf.kHexTable+0x2c4>
f0000b86:       |  |      850a                  mv      a0,sp
f0000b88:       |  |      4651                  li      a2,20
f0000b8a:       |  |      7e0010ef              jal     ra,f000236a <memcpy>
f0000b8e:       |  |      850a                  mv      a0,sp
f0000b90:       |  |      85a2                  mv      a1,s0
f0000b92:       |  |      661000ef              jal     ra,f00019f2 <base_log_internal_core>
f0000b96:       |  \----> 6531                  lui     a0,0xc
f0000b98:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000b9c:       |         591000ef              jal     ra,f000192c <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:84
  CHECK_DIF_OK(
f0000ba0:       \-------> 00003517              auipc   a0,0x3
f0000ba4:                 83850513              addi    a0,a0,-1992 # f00033d8 <kUartBaudrate>
f0000ba8:                 4108                  lw      a0,0(a0)
f0000baa:                 00003597              auipc   a1,0x3
f0000bae:                 82658593              addi    a1,a1,-2010 # f00033d0 <kClockFreqPeripheralHz>
f0000bb2:                 418c                  lw      a1,0(a1)
f0000bb4:                 c02a                  sw      a0,0(sp)
f0000bb6:                 c22e                  sw      a1,4(sp)
f0000bb8:                 c402                  sw      zero,8(sp)
f0000bba:                 4505                  li      a0,1
f0000bbc:                 c62a                  sw      a0,12(sp)
f0000bbe:                 f0001517              auipc   a0,0xf0001
f0000bc2:                 48a50513              addi    a0,a0,1162 # e0002048 <uart0>
f0000bc6:                 858a                  mv      a1,sp
f0000bc8:                 616010ef              jal     ra,f00021de <dif_uart_configure>
f0000bcc:       /-------- cd15                  beqz    a0,f0000c08 <init_uart+0xc4>
f0000bce:       |         842a                  mv      s0,a0
f0000bd0:       |         4088                  lw      a0,0(s1)
f0000bd2:       |     /-- c911                  beqz    a0,f0000be6 <init_uart+0xa2>
f0000bd4:       |     |   1000f517              auipc   a0,0x1000f
f0000bd8:       |     |   49050513              addi    a0,a0,1168 # 10064 <_non_volatile_scratch_end+0xffd0064>
f0000bdc:       |     |   4585                  li      a1,1
f0000bde:       |     |   8622                  mv      a2,s0
f0000be0:       |     |   6b5000ef              jal     ra,f0001a94 <base_log_internal_dv>
f0000be4:       |  /--|-- a829                  j       f0000bfe <init_uart+0xba>
f0000be6:       |  |  \-> 00002597              auipc   a1,0x2
f0000bea:       |  |      d1658593              addi    a1,a1,-746 # f00028fc <rom_printf.kHexTable+0x2d8>
f0000bee:       |  |      850a                  mv      a0,sp
f0000bf0:       |  |      4651                  li      a2,20
f0000bf2:       |  |      778010ef              jal     ra,f000236a <memcpy>
f0000bf6:       |  |      850a                  mv      a0,sp
f0000bf8:       |  |      85a2                  mv      a1,s0
f0000bfa:       |  |      5f9000ef              jal     ra,f00019f2 <base_log_internal_core>
f0000bfe:       |  \----> 6531                  lui     a0,0xc
f0000c00:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000c04:       |         529000ef              jal     ra,f000192c <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:91
  base_uart_stdout(&uart0);
f0000c08:       \-------> f0001517              auipc   a0,0xf0001
f0000c0c:                 44050513              addi    a0,a0,1088 # e0002048 <uart0>
f0000c10:                 6bd000ef              jal     ra,f0001acc <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:92
}
f0000c14:                 44d2                  lw      s1,20(sp)
f0000c16:                 4462                  lw      s0,24(sp)
f0000c18:                 40f2                  lw      ra,28(sp)
f0000c1a:                 6105                  addi    sp,sp,32
f0000c1c:                 8082                  ret

f0000c1e <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:110
static void test_wrapper(void *task_parameters) {
f0000c1e:                 1101                  addi    sp,sp,-32
f0000c20:                 ce06                  sw      ra,28(sp)
f0000c22:                 cc22                  sw      s0,24(sp)
f0000c24:                 ca26                  sw      s1,20(sp)
f0000c26:                 6531                  lui     a0,0xc
f0000c28:                 aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:112
  bool result = manufacturer_pre_test_hook();
f0000c2c:                 461000ef              jal     ra,f000188c <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:113
  result = result && test_main();
f0000c30:          /----- cd09                  beqz    a0,f0000c4a <test_wrapper+0x2c>
f0000c32:          |      3ef9                  jal     f0000810 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  result = result && manufacturer_post_test_hook();
f0000c34:          +----- c919                  beqz    a0,f0000c4a <test_wrapper+0x2c>
f0000c36:          |      45b000ef              jal     ra,f0001890 <manufacturer_post_test_hook>
f0000c3a:          |  /-- e509                  bnez    a0,f0000c44 <test_wrapper+0x26>
f0000c3c:          |  |   6531                  lui     a0,0xc
f0000c3e:          |  |   aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000c42:          +--|-- a021                  j       f0000c4a <test_wrapper+0x2c>
f0000c44:          |  \-> 6525                  lui     a0,0x9
f0000c46:          |      00d50413              addi    s0,a0,13 # 900d <_non_volatile_scratch_size+0x400d>
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:96
  if (kDeviceType != kDeviceSimDV) {
f0000c4a:          \----> 00002517              auipc   a0,0x2
f0000c4e:                 78250513              addi    a0,a0,1922 # f00033cc <kDeviceType>
f0000c52:                 4108                  lw      a0,0(a0)
f0000c54:       /-------- c531                  beqz    a0,f0000ca0 <test_wrapper+0x82>
f0000c56:       |         00002497              auipc   s1,0x2
f0000c5a:       |         9c648493              addi    s1,s1,-1594 # f000261c <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:97
    if (kOttfTestConfig.can_clobber_uart) {
f0000c5e:       |         0014c503              lbu     a0,1(s1)
f0000c62:       |     /-- c111                  beqz    a0,f0000c66 <test_wrapper+0x48>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:98
      init_uart();
f0000c64:       |     |   35c5                  jal     f0000b44 <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f0000c66:       |     \-> 00002517              auipc   a0,0x2
f0000c6a:       |         78250513              addi    a0,a0,1922 # f00033e8 <kDeviceLogBypassUartAddress>
f0000c6e:       |         4108                  lw      a0,0(a0)
f0000c70:       |         40c4                  lw      s1,4(s1)
f0000c72:       |     /-- c911                  beqz    a0,f0000c86 <test_wrapper+0x68>
f0000c74:       |     |   1000f517              auipc   a0,0x1000f
f0000c78:       |     |   40450513              addi    a0,a0,1028 # 10078 <_non_volatile_scratch_end+0xffd0078>
f0000c7c:       |     |   4585                  li      a1,1
f0000c7e:       |     |   8626                  mv      a2,s1
f0000c80:       |     |   615000ef              jal     ra,f0001a94 <base_log_internal_dv>
f0000c84:       |  /--|-- a829                  j       f0000c9e <test_wrapper+0x80>
f0000c86:       |  |  \-> 00002597              auipc   a1,0x2
f0000c8a:       |  |      c8a58593              addi    a1,a1,-886 # f0002910 <rom_printf.kHexTable+0x2ec>
f0000c8e:       |  |      850a                  mv      a0,sp
f0000c90:       |  |      4651                  li      a2,20
f0000c92:       |  |      6d8010ef              jal     ra,f000236a <memcpy>
f0000c96:       |  |      850a                  mv      a0,sp
f0000c98:       |  |      85a6                  mv      a1,s1
f0000c9a:       |  |      559000ef              jal     ra,f00019f2 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
    test_coverage_send_buffer();
f0000c9e:       |  \----> 2809                  jal     f0000cb0 <test_coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:104
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
f0000ca0:       \-------> 8522                  mv      a0,s0
f0000ca2:                 48b000ef              jal     ra,f000192c <test_status_set>
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:116
}
f0000ca6:                 44d2                  lw      s1,20(sp)
f0000ca8:                 4462                  lw      s0,24(sp)
f0000caa:                 40f2                  lw      ra,28(sp)
f0000cac:                 6105                  addi    sp,sp,32
f0000cae:                 8082                  ret

f0000cb0 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
f0000cb0:       8082                    ret

f0000cb2 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
f0000cb2:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
f0000cb4:              ce06                     sw      ra,28(sp)
f0000cb6:              00002517                 auipc   a0,0x2
f0000cba:              73250513                 addi    a0,a0,1842 # f00033e8 <kDeviceLogBypassUartAddress>
f0000cbe:              4108                     lw      a0,0(a0)
f0000cc0:       /----- ed09                     bnez    a0,f0000cda <vApplicationMallocFailedHook+0x28>
f0000cc2:       |      00002597                 auipc   a1,0x2
f0000cc6:       |      d1258593                 addi    a1,a1,-750 # f00029d4 <rom_printf.kHexTable+0x3b0>
f0000cca:       |      0028                     addi    a0,sp,8
f0000ccc:       |      4651                     li      a2,20
f0000cce:       |      69c010ef                 jal     ra,f000236a <memcpy>
f0000cd2:       |      0028                     addi    a0,sp,8
f0000cd4:       |      51f000ef                 jal     ra,f00019f2 <base_log_internal_core>
f0000cd8:       |  /-- a801                     j       f0000ce8 <vApplicationMallocFailedHook+0x36>
f0000cda:       \--|-> 1000f517                 auipc   a0,0x1000f
f0000cde:          |   3b250513                 addi    a0,a0,946 # 1008c <_non_volatile_scratch_end+0xffd008c>
f0000ce2:          |   4581                     li      a1,0
f0000ce4:          |   5b1000ef                 jal     ra,f0001a94 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:20
  irq_global_ctrl(false);
f0000ce8:          \-> 4501                     li      a0,0
f0000cea:              2085                     jal     f0000d4a <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
  abort();
f0000cec:              4ef000ef                 jal     ra,f00019da <abort>

f0000cf0 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:28

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
f0000cf0:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s");
f0000cf2:              ce06                     sw      ra,28(sp)
f0000cf4:              00002517                 auipc   a0,0x2
f0000cf8:              6f450513                 addi    a0,a0,1780 # f00033e8 <kDeviceLogBypassUartAddress>
f0000cfc:              4108                     lw      a0,0(a0)
f0000cfe:       /----- ed09                     bnez    a0,f0000d18 <vApplicationStackOverflowHook+0x28>
f0000d00:       |      00002597                 auipc   a1,0x2
f0000d04:       |      ce858593                 addi    a1,a1,-792 # f00029e8 <rom_printf.kHexTable+0x3c4>
f0000d08:       |      0028                     addi    a0,sp,8
f0000d0a:       |      4651                     li      a2,20
f0000d0c:       |      65e010ef                 jal     ra,f000236a <memcpy>
f0000d10:       |      0028                     addi    a0,sp,8
f0000d12:       |      4e1000ef                 jal     ra,f00019f2 <base_log_internal_core>
f0000d16:       |  /-- a801                     j       f0000d26 <vApplicationStackOverflowHook+0x36>
f0000d18:       \--|-> 1000f517                 auipc   a0,0x1000f
f0000d1c:          |   38850513                 addi    a0,a0,904 # 100a0 <_non_volatile_scratch_end+0xffd00a0>
f0000d20:          |   4581                     li      a1,0
f0000d22:          |   573000ef                 jal     ra,f0001a94 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  irq_global_ctrl(false);
f0000d26:          \-> 4501                     li      a0,0
f0000d28:              200d                     jal     f0000d4a <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:31
  abort();
f0000d2a:              4b1000ef                 jal     ra,f00019da <abort>

f0000d2e <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
f0000d2e:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
f0000d30:       c606                    sw      ra,12(sp)
f0000d32:       4505                    li      a0,1
f0000d34:       2089                    jal     f0000d76 <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
f0000d36:       4505                    li      a0,1
f0000d38:       2015                    jal     f0000d5c <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
f0000d3a:       4505                    li      a0,1
f0000d3c:       2881                    jal     f0000d8c <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
f0000d3e:       80bff0ef                jal     ra,f0000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
f0000d42:       4501                    li      a0,0
f0000d44:       40b2                    lw      ra,12(sp)
f0000d46:       0141                    addi    sp,sp,16
f0000d48:       8082                    ret

f0000d4a <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
f0000d4a:       /-- c509                        beqz    a0,f0000d54 <irq_global_ctrl+0xa>
f0000d4c:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
f0000d4e:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
f0000d52:       |   8082                        ret
f0000d54:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
f0000d56:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
f0000d5a:           8082                        ret

f0000d5c <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
f0000d5c:       /-- c519                        beqz    a0,f0000d6a <irq_external_ctrl+0xe>
f0000d5e:       |   6505                        lui     a0,0x1
f0000d60:       |   80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0000d64:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0000d68:       |   8082                        ret
f0000d6a:       \-> 6505                        lui     a0,0x1
f0000d6c:           80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0000d70:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
f0000d74:           8082                        ret

f0000d76 <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
f0000d76:       /-- c511                        beqz    a0,f0000d82 <irq_timer_ctrl+0xc>
f0000d78:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0000d7c:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0000d80:       |   8082                        ret
f0000d82:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0000d86:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
f0000d8a:           8082                        ret

f0000d8c <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
f0000d8c:       /-- c509                        beqz    a0,f0000d96 <irq_software_ctrl+0xa>
f0000d8e:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0000d90:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0000d94:       |   8082                        ret
f0000d96:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0000d98:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
f0000d9c:           8082                        ret

f0000d9e <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:56
    "Reserved",
    "Reserved",
    "Reserved",
};

void ottf_generic_fault_print(const char *reason, uint32_t mcause) {
f0000d9e:           7179                        addi    sp,sp,-48
f0000da0:           d606                        sw      ra,44(sp)
f0000da2:           d422                        sw      s0,40(sp)
f0000da4:           d226                        sw      s1,36(sp)
f0000da6:           d04a                        sw      s2,32(sp)
f0000da8:           ce4e                        sw      s3,28(sp)
f0000daa:           892e                        mv      s2,a1
f0000dac:           89aa                        mv      s3,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:57
  uint32_t mepc = ibex_mepc_read();
f0000dae:           43f000ef            jal     ra,f00019ec <ibex_mepc_read>
f0000db2:           84aa                        mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f0000db4:           433000ef            jal     ra,f00019e6 <ibex_mtval_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f0000db8:           00002597            auipc   a1,0x2
f0000dbc:           63058593            addi    a1,a1,1584 # f00033e8 <kDeviceLogBypassUartAddress>
f0000dc0:           418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f0000dc2:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f0000dc4:       /-- c195                        beqz    a1,f0000de8 <ottf_generic_fault_print+0x4a>
f0000dc6:       |   1000f517            auipc   a0,0x1000f
f0000dca:       |   2ee50513            addi    a0,a0,750 # 100b4 <_non_volatile_scratch_end+0xffd00b4>
f0000dce:       |   4591                        li      a1,4
f0000dd0:       |   864e                        mv      a2,s3
f0000dd2:       |   86ca                        mv      a3,s2
f0000dd4:       |   8726                        mv      a4,s1
f0000dd6:       |   87a2                        mv      a5,s0
f0000dd8:       |   49f2                        lw      s3,28(sp)
f0000dda:       |   5902                        lw      s2,32(sp)
f0000ddc:       |   5492                        lw      s1,36(sp)
f0000dde:       |   5422                        lw      s0,40(sp)
f0000de0:       |   50b2                        lw      ra,44(sp)
f0000de2:       |   6145                        addi    sp,sp,48
f0000de4:       |   4b10006f            j       f0001a94 <base_log_internal_dv>
f0000de8:       \-> 00002597            auipc   a1,0x2
f0000dec:           e8058593            addi    a1,a1,-384 # f0002c68 <rom_printf.kHexTable+0x644>
f0000df0:           0028                        addi    a0,sp,8
f0000df2:           4651                        li      a2,20
f0000df4:           576010ef            jal     ra,f000236a <memcpy>
f0000df8:           0028                        addi    a0,sp,8
f0000dfa:           85ce                        mv      a1,s3
f0000dfc:           864a                        mv      a2,s2
f0000dfe:           86a6                        mv      a3,s1
f0000e00:           8722                        mv      a4,s0
f0000e02:           3f1000ef            jal     ra,f00019f2 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:61
            mtval);
}
f0000e06:           49f2                        lw      s3,28(sp)
f0000e08:           5902                        lw      s2,32(sp)
f0000e0a:           5492                        lw      s1,36(sp)
f0000e0c:           5422                        lw      s0,40(sp)
f0000e0e:           50b2                        lw      ra,44(sp)
f0000e10:           6145                        addi    sp,sp,48
f0000e12:           8082                        ret

f0000e14 <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:79
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(void) {
f0000e14:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
  uint32_t mcause = ibex_mcause_read();
f0000e16:           c606                        sw      ra,12(sp)
f0000e18:           3c9000ef            jal     ra,f00019e0 <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:82

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
f0000e1c:           897d                        andi    a0,a0,31
f0000e1e:           45ad                        li      a1,11
f0000e20:       /-- 02a5ef63            bltu    a1,a0,f0000e5e <ottf_exception_handler+0x4a>
f0000e24:       |   050a                        slli    a0,a0,0x2
f0000e26:       |   00002597            auipc   a1,0x2
f0000e2a:       |   bd658593            addi    a1,a1,-1066 # f00029fc <rom_printf.kHexTable+0x3d8>
f0000e2e:       |   952e                        add     a0,a0,a1
f0000e30:       |   4108                        lw      a0,0(a0)
f0000e32:       |   8502                        jr      a0
f0000e34:       |   40b2                        lw      ra,12(sp)
f0000e36:       |   0141                        addi    sp,sp,16
f0000e38:       |   a025                        j       f0000e60 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:84
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler();
f0000e3a:       |   40b2                        lw      ra,12(sp)
f0000e3c:       |   0141                        addi    sp,sp,16
f0000e3e:       |   a00d                        j       f0000e60 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:87
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler();
f0000e40:       |   40b2                        lw      ra,12(sp)
f0000e42:       |   0141                        addi    sp,sp,16
f0000e44:       |   a831                        j       f0000e60 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler();
f0000e46:       |   40b2                        lw      ra,12(sp)
f0000e48:       |   0141                        addi    sp,sp,16
f0000e4a:       |   a819                        j       f0000e60 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler();
f0000e4c:       |   40b2                        lw      ra,12(sp)
f0000e4e:       |   0141                        addi    sp,sp,16
f0000e50:       |   a801                        j       f0000e60 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:105
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler();
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler();
f0000e52:       |   40b2                        lw      ra,12(sp)
f0000e54:       |   0141                        addi    sp,sp,16
f0000e56:       |   a029                        j       f0000e60 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
      ottf_machine_ecall_handler();
f0000e58:       |   40b2                        lw      ra,12(sp)
f0000e5a:       |   0141                        addi    sp,sp,16
f0000e5c:       |   b68d                        j       f00009be <ottf_machine_ecall_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:108
      break;
    default:
      generic_fault_handler();
f0000e5e:       \-> 2009                        jal     f0000e60 <ottf_breakpoint_handler>

f0000e60 <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:63
static void generic_fault_handler(void) {
f0000e60:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:64
  uint32_t mcause = ibex_mcause_read();
f0000e62:       c606                    sw      ra,12(sp)
f0000e64:       37d000ef                jal     ra,f00019e0 <ibex_mcause_read>
f0000e68:       85aa                    mv      a1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
  ottf_generic_fault_print(exception_reason[mcause & kIbexExcMax], mcause);
f0000e6a:       897d                    andi    a0,a0,31
f0000e6c:       050a                    slli    a0,a0,0x2
f0000e6e:       00002617                auipc   a2,0x2
f0000e72:       e3660613                addi    a2,a2,-458 # f0002ca4 <exception_reason>
f0000e76:       9532                    add     a0,a0,a2
f0000e78:       4108                    lw      a0,0(a0)
f0000e7a:       3715                    jal     f0000d9e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:66
  abort();
f0000e7c:       35f000ef                jal     ra,f00019da <abort>

f0000e80 <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:141
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(void);

OT_WEAK
void ottf_software_isr(void) {
f0000e80:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
  ottf_generic_fault_print("Software IRQ", ibex_mcause_read());
f0000e82:       c606                    sw      ra,12(sp)
f0000e84:       35d000ef                jal     ra,f00019e0 <ibex_mcause_read>
f0000e88:       85aa                    mv      a1,a0
f0000e8a:       00002517                auipc   a0,0x2
f0000e8e:       bff50513                addi    a0,a0,-1025 # f0002a89 <rom_printf.kHexTable+0x465>
f0000e92:       3731                    jal     f0000d9e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:143
  abort();
f0000e94:       347000ef                jal     ra,f00019da <abort>

f0000e98 <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:147
}

OT_WEAK
void ottf_timer_isr(void) {
f0000e98:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
  ottf_generic_fault_print("Timer IRQ", ibex_mcause_read());
f0000e9a:       c606                    sw      ra,12(sp)
f0000e9c:       345000ef                jal     ra,f00019e0 <ibex_mcause_read>
f0000ea0:       85aa                    mv      a1,a0
f0000ea2:       00002517                auipc   a0,0x2
f0000ea6:       bf450513                addi    a0,a0,-1036 # f0002a96 <rom_printf.kHexTable+0x472>
f0000eaa:       3dd5                    jal     f0000d9e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:149
  abort();
f0000eac:       32f000ef                jal     ra,f00019da <abort>

f0000eb0 <ottf_flow_control_isr>:
ottf_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:153
}

OT_WEAK
bool ottf_flow_control_isr(void) { return false; }
f0000eb0:       4501                    li      a0,0
f0000eb2:       8082                    ret

f0000eb4 <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:156

OT_WEAK
void ottf_external_isr(void) {
f0000eb4:                    7179                       addi    sp,sp,-48
f0000eb6:                    d606                       sw      ra,44(sp)
f0000eb8:                    d422                       sw      s0,40(sp)
f0000eba:                    d226                       sw      s1,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:159
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
f0000ebc:                    f0001517           auipc   a0,0xf0001
f0000ec0:                    19450513           addi    a0,a0,404 # e0002050 <ottf_plic>
f0000ec4:                    1010                       addi    a2,sp,32
f0000ec6:                    4581                       li      a1,0
f0000ec8:                    2a21                       jal     f0000fe0 <dif_rv_plic_irq_claim>
f0000eca:                    00002497           auipc   s1,0x2
f0000ece:                    51e48493           addi    s1,s1,1310 # f00033e8 <kDeviceLogBypassUartAddress>
f0000ed2:          /-------- cd15                       beqz    a0,f0000f0e <ottf_external_isr+0x5a>
f0000ed4:          |         842a                       mv      s0,a0
f0000ed6:          |         4088                       lw      a0,0(s1)
f0000ed8:          |     /-- c911                       beqz    a0,f0000eec <ottf_external_isr+0x38>
f0000eda:          |     |   1000f517           auipc   a0,0x1000f
f0000ede:          |     |   1ee50513           addi    a0,a0,494 # 100c8 <_non_volatile_scratch_end+0xffd00c8>
f0000ee2:          |     |   4585                       li      a1,1
f0000ee4:          |     |   8622                       mv      a2,s0
f0000ee6:          |     |   3af000ef           jal     ra,f0001a94 <base_log_internal_dv>
f0000eea:          |  /--|-- a829                       j       f0000f04 <ottf_external_isr+0x50>
f0000eec:          |  |  \-> 00002597           auipc   a1,0x2
f0000ef0:          |  |      d9058593           addi    a1,a1,-624 # f0002c7c <rom_printf.kHexTable+0x658>
f0000ef4:          |  |      0028                       addi    a0,sp,8
f0000ef6:          |  |      4651                       li      a2,20
f0000ef8:          |  |      472010ef           jal     ra,f000236a <memcpy>
f0000efc:          |  |      0028                       addi    a0,sp,8
f0000efe:          |  |      85a2                       mv      a1,s0
f0000f00:          |  |      2f3000ef           jal     ra,f00019f2 <base_log_internal_core>
f0000f04:          |  \----> 6531                       lui     a0,0xc
f0000f06:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000f0a:          |         223000ef           jal     ra,f000192c <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:162

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
f0000f0e:          \-------> 5502                       lw      a0,32(sp)
f0000f10:                    050a                       slli    a0,a0,0x2
f0000f12:                    00002597           auipc   a1,0x2
f0000f16:                    eba58593           addi    a1,a1,-326 # f0002dcc <top_earlgrey_plic_interrupt_for_peripheral>
f0000f1a:                    952e                       add     a0,a0,a1
f0000f1c:                    4108                       lw      a0,0(a0)
f0000f1e:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f0000f20:       /----------- 04b51e63           bne     a0,a1,f0000f7c <ottf_external_isr+0xc8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:165
      ottf_flow_control_isr()) {
f0000f24:       |            3771                       jal     f0000eb0 <ottf_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f0000f26:       +----------- c939                       beqz    a0,f0000f7c <ottf_external_isr+0xc8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:167
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
f0000f28:       |            5602                       lw      a2,32(sp)
f0000f2a:       |            f0001517           auipc   a0,0xf0001
f0000f2e:       |            12650513           addi    a0,a0,294 # e0002050 <ottf_plic>
f0000f32:       |            4581                       li      a1,0
f0000f34:       |            28d1                       jal     f0001008 <dif_rv_plic_irq_complete>
f0000f36:       |  /-------- cd15                       beqz    a0,f0000f72 <ottf_external_isr+0xbe>
f0000f38:       |  |         842a                       mv      s0,a0
f0000f3a:       |  |         4088                       lw      a0,0(s1)
f0000f3c:       |  |     /-- c911                       beqz    a0,f0000f50 <ottf_external_isr+0x9c>
f0000f3e:       |  |     |   1000f517           auipc   a0,0x1000f
f0000f42:       |  |     |   19e50513           addi    a0,a0,414 # 100dc <_non_volatile_scratch_end+0xffd00dc>
f0000f46:       |  |     |   4585                       li      a1,1
f0000f48:       |  |     |   8622                       mv      a2,s0
f0000f4a:       |  |     |   34b000ef           jal     ra,f0001a94 <base_log_internal_dv>
f0000f4e:       |  |  /--|-- a829                       j       f0000f68 <ottf_external_isr+0xb4>
f0000f50:       |  |  |  \-> 00002597           auipc   a1,0x2
f0000f54:       |  |  |      d4058593           addi    a1,a1,-704 # f0002c90 <rom_printf.kHexTable+0x66c>
f0000f58:       |  |  |      0028                       addi    a0,sp,8
f0000f5a:       |  |  |      4651                       li      a2,20
f0000f5c:       |  |  |      40e010ef           jal     ra,f000236a <memcpy>
f0000f60:       |  |  |      0028                       addi    a0,sp,8
f0000f62:       |  |  |      85a2                       mv      a1,s0
f0000f64:       |  |  |      28f000ef           jal     ra,f00019f2 <base_log_internal_core>
f0000f68:       |  |  \----> 6531                       lui     a0,0xc
f0000f6a:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000f6e:       |  |         1bf000ef           jal     ra,f000192c <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:174
    return;
  }

  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
  abort();
}
f0000f72:       |  \-------> 5492                       lw      s1,36(sp)
f0000f74:       |            5422                       lw      s0,40(sp)
f0000f76:       |            50b2                       lw      ra,44(sp)
f0000f78:       |            6145                       addi    sp,sp,48
f0000f7a:       |            8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:172
  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
f0000f7c:       \----------> 265000ef           jal     ra,f00019e0 <ibex_mcause_read>
f0000f80:                    85aa                       mv      a1,a0
f0000f82:                    00002517           auipc   a0,0x2
f0000f86:                    bc450513           addi    a0,a0,-1084 # f0002b46 <rom_printf.kHexTable+0x522>
f0000f8a:                    3d11                       jal     f0000d9e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:173
  abort();
f0000f8c:                    24f000ef           jal     ra,f00019da <abort>

f0000f90 <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:176

static void generic_internal_irq_handler(void) {
f0000f90:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f0000f92:       c606                    sw      ra,12(sp)
f0000f94:       24d000ef                jal     ra,f00019e0 <ibex_mcause_read>
f0000f98:       85aa                    mv      a1,a0
f0000f9a:       00002517                auipc   a0,0x2
f0000f9e:       cc050513                addi    a0,a0,-832 # f0002c5a <rom_printf.kHexTable+0x636>
f0000fa2:       3bf5                    jal     f0000d9e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f0000fa4:       237000ef                jal     ra,f00019da <abort>

f0000fa8 <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:190
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(void);

OT_WEAK
void ottf_internal_isr(void) {
f0000fa8:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:191
  uint32_t mcause = ibex_mcause_read();
f0000faa:              c606                     sw      ra,12(sp)
f0000fac:              235000ef                 jal     ra,f00019e0 <ibex_mcause_read>
f0000fb0:              800005b7                 lui     a1,0x80000
f0000fb4:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:192
  switch ((ibex_internal_irq_t)(mcause)) {
f0000fb6:          /-- 00b50863                 beq     a0,a1,f0000fc6 <ottf_internal_isr+0x1e>
f0000fba:          |   5581                     li      a1,-32
f0000fbc:       /--|-- 00b51863                 bne     a0,a1,f0000fcc <ottf_internal_isr+0x24>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:194
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler();
f0000fc0:       |  |   40b2                     lw      ra,12(sp)
f0000fc2:       |  |   0141                     addi    sp,sp,16
f0000fc4:       |  |   b7f1                     j       f0000f90 <ottf_external_nmi_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:197
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler();
f0000fc6:       |  \-> 40b2                     lw      ra,12(sp)
f0000fc8:       |      0141                     addi    sp,sp,16
f0000fca:       |      b7d9                     j       f0000f90 <ottf_external_nmi_handler>
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f0000fcc:       \----> 215000ef                 jal     ra,f00019e0 <ibex_mcause_read>
f0000fd0:              85aa                     mv      a1,a0
f0000fd2:              00002517                 auipc   a0,0x2
f0000fd6:              c8850513                 addi    a0,a0,-888 # f0002c5a <rom_printf.kHexTable+0x636>
f0000fda:              33d1                     jal     f0000d9e <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f0000fdc:              1ff000ef                 jal     ra,f00019da <abort>

f0000fe0 <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f0000fe0:           00153693            seqz    a3,a0
f0000fe4:           00b035b3            snez    a1,a1
f0000fe8:           8dd5                        or      a1,a1,a3
f0000fea:           00163693            seqz    a3,a2
f0000fee:           8ecd                        or      a3,a3,a1
f0000ff0:           458d                        li      a1,3
f0000ff2:       /-- ea89                        bnez    a3,f0001004 <dif_rv_plic_irq_claim+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
f0000ff4:       |   4108                        lw      a0,0(a0)
f0000ff6:       |   002005b7            lui     a1,0x200
f0000ffa:       |   0591                        addi    a1,a1,4
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000ffc:       |   952e                        add     a0,a0,a1
f0000ffe:       |   4108                        lw      a0,0(a0)
f0001000:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
f0001002:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
f0001004:       \-> 852e                        mv      a0,a1
f0001006:           8082                        ret

f0001008 <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
f0001008:           00153693            seqz    a3,a0
f000100c:           00b035b3            snez    a1,a1
f0001010:           8ecd                        or      a3,a3,a1
f0001012:           458d                        li      a1,3
f0001014:       /-- ea81                        bnez    a3,f0001024 <dif_rv_plic_irq_complete+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
f0001016:       |   4108                        lw      a0,0(a0)
f0001018:       |   4581                        li      a1,0
f000101a:       |   002006b7            lui     a3,0x200
f000101e:       |   0691                        addi    a3,a3,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0001020:       |   9536                        add     a0,a0,a3
f0001022:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
f0001024:       \-> 852e                        mv      a0,a1
f0001026:           8082                        ret

f0001028 <sec_mmio_init>:
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f0001028:           4601                        li      a2,0
f000102a:           4681                        li      a3,0
f000102c:           4701                        li      a4,0
f000102e:           4501                        li      a0,0
f0001030:           effff597            auipc   a1,0xeffff
f0001034:           04458593            addi    a1,a1,68 # e0000074 <sec_mmio_ctx>
sec_mmio_init():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:53
  // mechanism.
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
}

void sec_mmio_init(void) {
  sec_mmio_ctx.last_index = launder32(0);
f0001038:           c190                        sw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:54
  sec_mmio_ctx.write_count = launder32(0);
f000103a:           c1d4                        sw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:55
  sec_mmio_ctx.check_count = launder32(0);
f000103c:           c5d8                        sw      a4,12(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:56
  sec_mmio_ctx.expected_write_count = launder32(0);
f000103e:           c588                        sw      a0,8(a1)
f0001040:           3e800613            li      a2,1000
f0001044:           56fd                        li      a3,-1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:58
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
    sec_mmio_ctx.addrs[i] = UINT32_MAX;
f0001046:       /-> 7d858713            addi    a4,a1,2008
f000104a:       |   7cd72c23            sw      a3,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:59
    sec_mmio_ctx.values[i] = UINT32_MAX;
f000104e:       |   c994                        sw      a3,16(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:57
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
f0001050:       |   167d                        addi    a2,a2,-1
f0001052:       |   0591                        addi    a1,a1,4
f0001054:       \-- fa6d                        bnez    a2,f0001046 <sec_mmio_init+0x1e>
f0001056:           effff597            auipc   a1,0xeffff
f000105a:           01e58593            addi    a1,a1,30 # e0000074 <sec_mmio_ctx>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:61
  }
  uint32_t check = kSecMmioValZero ^ sec_mmio_ctx.last_index;
f000105e:           4190                        lw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:62
  check ^= sec_mmio_ctx.write_count;
f0001060:           41d4                        lw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:63
  check ^= sec_mmio_ctx.check_count;
f0001062:           45cc                        lw      a1,12(a1)
f0001064:           8e35                        xor     a2,a2,a3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:64
  check ^= sec_mmio_ctx.expected_write_count;
f0001066:           8db1                        xor     a1,a1,a2
f0001068:           8d2d                        xor     a0,a0,a1
f000106a:           3ca595b7            lui     a1,0x3ca59
f000106e:           65a58593            addi    a1,a1,1626 # 3ca5965a <_ottf_size+0x3ca1965a>
f0001072:           8d2d                        xor     a0,a0,a1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:65
  HARDENED_CHECK_EQ(check, kSecMmioValZero);
f0001074:       /-- 00b50663            beq     a0,a1,f0001080 <sec_mmio_init+0x58>
f0001078:       |   0000                        unimp
f000107a:       |   0000                        unimp
f000107c:       |   0000                        unimp
f000107e:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:66
}
f0001080:       \-> 8082                        ret

f0001082 <sec_mmio_read32>:
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:78
    sec_mmio_ctx.values[i] = UINT32_MAX;
  }
  HARDENED_CHECK_EQ(sec_mmio_ctx.check_count, 0);
}

uint32_t sec_mmio_read32(uint32_t addr) {
f0001082:           1101                        addi    sp,sp,-32
f0001084:           ce06                        sw      ra,28(sp)
f0001086:           cc22                        sw      s0,24(sp)
f0001088:           ca26                        sw      s1,20(sp)
f000108a:           c84a                        sw      s2,16(sp)
f000108c:           c64e                        sw      s3,12(sp)
f000108e:           842a                        mv      s0,a0
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
f0001090:           00052903            lw      s2,0(a0)
f0001094:           21692537            lui     a0,0x21692
f0001098:           43650993            addi    s3,a0,1078 # 21692436 <_ottf_size+0x21652436>
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:80
  uint32_t value = abs_mmio_read32(addr);
  uint32_t masked_value = value ^ kSecMmioMaskVal;
f000109c:           013944b3            xor     s1,s2,s3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:82
  barrier32(masked_value);
  upsert_register(addr, masked_value);
f00010a0:           8522                        mv      a0,s0
f00010a2:           85a6                        mv      a1,s1
f00010a4:           2015                        jal     f00010c8 <upsert_register>
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
f00010a6:           4008                        lw      a0,0(s0)
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:83
  HARDENED_CHECK_EQ((abs_mmio_read32(addr) ^ kSecMmioMaskVal), masked_value);
f00010a8:           01354533            xor     a0,a0,s3
f00010ac:       /-- 00950663            beq     a0,s1,f00010b8 <sec_mmio_read32+0x36>
f00010b0:       |   0000                        unimp
f00010b2:       |   0000                        unimp
f00010b4:       |   0000                        unimp
f00010b6:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:85

  return value;
f00010b8:       \-> 854a                        mv      a0,s2
f00010ba:           49b2                        lw      s3,12(sp)
f00010bc:           4942                        lw      s2,16(sp)
f00010be:           44d2                        lw      s1,20(sp)
f00010c0:           4462                        lw      s0,24(sp)
f00010c2:           40f2                        lw      ra,28(sp)
f00010c4:           6105                        addi    sp,sp,32
f00010c6:           8082                        ret

f00010c8 <upsert_register>:
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:34
  const size_t last_index = sec_mmio_ctx.last_index;
f00010c8:                 effff817              auipc   a6,0xeffff
f00010cc:                 fac80813              addi    a6,a6,-84 # e0000074 <sec_mmio_ctx>
f00010d0:                 00082703              lw      a4,0(a6)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f00010d4:                 4781                  li      a5,0
f00010d6:                 4681                  li      a3,0
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
f00010d8:       /-------- 02e7f163              bgeu    a5,a4,f00010fa <upsert_register+0x32>
f00010dc:       |         4681                  li      a3,0
f00010de:       |         87c2                  mv      a5,a6
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:37
    if (sec_mmio_ctx.addrs[i] == addr) {
f00010e0:       |  /----> 7d878613              addi    a2,a5,2008
f00010e4:       |  |      7d862603              lw      a2,2008(a2)
f00010e8:       |  |  /-- 00a60863              beq     a2,a0,f00010f8 <upsert_register+0x30>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
f00010ec:       |  |  |   0685                  addi    a3,a3,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f00010ee:       |  |  |   8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
f00010f0:       |  |  |   0791                  addi    a5,a5,4
f00010f2:       |  \--|-- fee667e3              bltu    a2,a4,f00010e0 <upsert_register+0x18>
f00010f6:       +-----|-- a011                  j       f00010fa <upsert_register+0x32>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:38
      sec_mmio_ctx.values[i] = value;
f00010f8:       |     \-> cb8c                  sw      a1,16(a5)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f00010fa:       \-------> 8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
  if (launder32(i) == last_index && launder32(i) < kSecMmioRegFileSize) {
f00010fc:             /-- 02e61463              bne     a2,a4,f0001124 <upsert_register+0x5c>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
f0001100:             |   8636                  mv      a2,a3
f0001102:             |   3e700713              li      a4,999
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
f0001106:             +-- 00c76f63              bltu    a4,a2,f0001124 <upsert_register+0x5c>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:43
    sec_mmio_ctx.addrs[i] = addr;
f000110a:             |   00269613              slli    a2,a3,0x2
f000110e:             |   9642                  add     a2,a2,a6
f0001110:             |   7d860713              addi    a4,a2,2008
f0001114:             |   7ca72c23              sw      a0,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:44
    sec_mmio_ctx.values[i] = value;
f0001118:             |   ca0c                  sw      a1,16(a2)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:45
    ++sec_mmio_ctx.last_index;
f000111a:             |   00082503              lw      a0,0(a6)
f000111e:             |   0505                  addi    a0,a0,1
f0001120:             |   00a82023              sw      a0,0(a6)
f0001124:             \-> 3e800513              li      a0,1000
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:49
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
f0001128:             /-- 00a6e663              bltu    a3,a0,f0001134 <upsert_register+0x6c>
f000112c:             |   0000                  unimp
f000112e:             |   0000                  unimp
f0001130:             |   0000                  unimp
f0001132:             |   0000                  unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:50
}
f0001134:             \-> 8082                  ret

f0001136 <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
f0001136:                    7179                       addi    sp,sp,-48
f0001138:                    d606                       sw      ra,44(sp)
f000113a:                    d422                       sw      s0,40(sp)
f000113c:                    d226                       sw      s1,36(sp)
f000113e:                    d04a                       sw      s2,32(sp)
f0001140:                    ce4e                       sw      s3,28(sp)
f0001142:                    cc52                       sw      s4,24(sp)
f0001144:                    ca56                       sw      s5,20(sp)
f0001146:                    c85a                       sw      s6,16(sp)
f0001148:                    c65e                       sw      s7,12(sp)
f000114a:                    c462                       sw      s8,8(sp)
f000114c:                    c266                       sw      s9,4(sp)
f000114e:                    8abe                       mv      s5,a5
f0001150:                    8b3a                       mv      s6,a4
f0001152:                    89b6                       mv      s3,a3
f0001154:                    84ae                       mv      s1,a1
f0001156:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
f0001158:                    00261913           slli    s2,a2,0x2
f000115c:                    854a                       mv      a0,s2
f000115e:                    256d                       jal     f0001808 <pvPortMalloc>
f0001160:                    5bfd                       li      s7,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
f0001162:       /----------- 1c050463           beqz    a0,f000132a <xTaskCreate+0x1f4>
f0001166:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
f0001168:       |            04c00513           li      a0,76
f000116c:       |            2d71                       jal     f0001808 <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
f000116e:       |  /-------- c121                       beqz    a0,f00011ae <xTaskCreate+0x78>
f0001170:       |  |         8c2a                       mv      s8,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
f0001172:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
f0001174:       |  |         00890533           add     a0,s2,s0
f0001178:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
f000117a:       |  |  /----- cc8d                       beqz    s1,f00011b4 <xTaskCreate+0x7e>
f000117c:       |  |  |      4601                       li      a2,0
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
f000117e:       |  |  |      034c0593           addi    a1,s8,52
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
f0001182:       |  |  |  /-> 00c486b3           add     a3,s1,a2
f0001186:       |  |  |  |   00068703           lb      a4,0(a3)
f000118a:       |  |  |  |   00c587b3           add     a5,a1,a2
f000118e:       |  |  |  |   00e78023           sb      a4,0(a5)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
f0001192:       |  |  |  |   0006c683           lbu     a3,0(a3)
f0001196:       |  |  |  |   0016b693           seqz    a3,a3
f000119a:       |  |  |  |   ff160713           addi    a4,a2,-15
f000119e:       |  |  |  |   0605                       addi    a2,a2,1
f00011a0:       |  |  |  |   00173713           seqz    a4,a4
f00011a4:       |  |  |  |   8ed9                       or      a3,a3,a4
f00011a6:       |  |  |  \-- def1                       beqz    a3,f0001182 <xTaskCreate+0x4c>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
f00011a8:       |  |  |      040c01a3           sb      zero,67(s8)
f00011ac:       |  |  |  /-- a031                       j       f00011b8 <xTaskCreate+0x82>
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
f00011ae:       |  \--|--|-> 8522                       mv      a0,s0
f00011b0:       |     |  |   2de9                       jal     f000188a <vPortFree>
f00011b2:       +-----|--|-- aaa5                       j       f000132a <xTaskCreate+0x1f4>
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
f00011b4:       |     \--|-> 020c0a23           sb      zero,52(s8)
f00011b8:       |        \-> 4591                       li      a1,4
f00011ba:       |            ff057493           andi    s1,a0,-16
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
f00011be:       |        /-- 00bb6363           bltu    s6,a1,f00011c4 <xTaskCreate+0x8e>
f00011c2:       |        |   4b11                       li      s6,4
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
f00011c4:       |        \-> 036c2623           sw      s6,44(s8)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
f00011c8:       |            004c0913           addi    s2,s8,4
f00011cc:       |            854a                       mv      a0,s2
f00011ce:       |            2d09                       jal     f00017e0 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
f00011d0:       |            018c0513           addi    a0,s8,24
f00011d4:       |            2531                       jal     f00017e0 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
f00011d6:       |            018c2823           sw      s8,16(s8)
f00011da:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f00011dc:       |            41650533           sub     a0,a0,s6
f00011e0:       |            00ac2c23           sw      a0,24(s8)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
f00011e4:       |            038c2223           sw      s8,36(s8)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
f00011e8:       |            040c2223           sw      zero,68(s8)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
f00011ec:       |            040c0423           sb      zero,72(s8)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
f00011f0:       |            8526                       mv      a0,s1
f00011f2:       |            85d2                       mv      a1,s4
f00011f4:       |            864e                       mv      a2,s3
f00011f6:       |            ba6ff0ef           jal     ra,f000059c <pxPortInitialiseStack>
f00011fa:       |            00ac2023           sw      a0,0(s8)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
f00011fe:       |        /-- 000a8463           beqz    s5,f0001206 <xTaskCreate+0xd0>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
f0001202:       |        |   018aa023           sw      s8,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
f0001206:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
f000120a:       |            f0001a97           auipc   s5,0xf0001
f000120e:       |            e5ea8a93           addi    s5,s5,-418 # e0002068 <xSchedulerRunning>
f0001212:       |            000aa503           lw      a0,0(s5)
f0001216:       |            f0001b17           auipc   s6,0xf0001
f000121a:       |            e3eb0b13           addi    s6,s6,-450 # e0002054 <pxCurrentTCB>
f000121e:       |        /-- c901                       beqz    a0,f000122e <xTaskCreate+0xf8>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
f0001220:       |        |   000b2503           lw      a0,0(s6)
f0001224:       |        |   416c                       lw      a1,68(a0)
f0001226:       |        |   0585                       addi    a1,a1,1
f0001228:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f000122a:       |        |   000b2503           lw      a0,0(s6)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
f000122e:       |        \-> f0001517           auipc   a0,0xf0001
f0001232:       |            e3650513           addi    a0,a0,-458 # e0002064 <uxCurrentNumberOfTasks>
f0001236:       |            410c                       lw      a1,0(a0)
f0001238:       |            0585                       addi    a1,a1,1
f000123a:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
f000123c:       |            000b2583           lw      a1,0(s6)
f0001240:       |            f0001c97           auipc   s9,0xf0001
f0001244:       |            e7cc8c93           addi    s9,s9,-388 # e00020bc <pxReadyTasksLists>
f0001248:       |        /-- cd91                       beqz    a1,f0001264 <xTaskCreate+0x12e>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
f000124a:       |        |   000aa503           lw      a0,0(s5)
f000124e:       |     /--|-- e149                       bnez    a0,f00012d0 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
f0001250:       |     |  |   000b2503           lw      a0,0(s6)
f0001254:       |     |  |   5548                       lw      a0,44(a0)
f0001256:       |     |  |   02cc2583           lw      a1,44(s8)
f000125a:       |     +--|-- 06a5eb63           bltu    a1,a0,f00012d0 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
f000125e:       |     |  |   018b2023           sw      s8,0(s6)
f0001262:       |     +--|-- a0bd                       j       f00012d0 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
f0001264:       |     |  \-> 018b2023           sw      s8,0(s6)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
f0001268:       |     |      4108                       lw      a0,0(a0)
f000126a:       |     |      4585                       li      a1,1
f000126c:       |     +----- 06b51263           bne     a0,a1,f00012d0 <xTaskCreate+0x19a>
f0001270:       |     |      4401                       li      s0,0
f0001272:       |     |      06400493           li      s1,100
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
f0001276:       |     |  /-> 01940533           add     a0,s0,s9
f000127a:       |     |  |   2b89                       jal     f00017cc <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
f000127c:       |     |  |   0451                       addi    s0,s0,20
f000127e:       |     |  \-- fe941ce3           bne     s0,s1,f0001276 <xTaskCreate+0x140>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
f0001282:       |     |      f0001997           auipc   s3,0xf0001
f0001286:       |     |      eda98993           addi    s3,s3,-294 # e000215c <xDelayedTaskList1>
f000128a:       |     |      854e                       mv      a0,s3
f000128c:       |     |      2381                       jal     f00017cc <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
f000128e:       |     |      f0001a17           auipc   s4,0xf0001
f0001292:       |     |      ee2a0a13           addi    s4,s4,-286 # e0002170 <xDelayedTaskList2>
f0001296:       |     |      8552                       mv      a0,s4
f0001298:       |     |      2b15                       jal     f00017cc <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
f000129a:       |     |      f0001517           auipc   a0,0xf0001
f000129e:       |     |      eae50513           addi    a0,a0,-338 # e0002148 <xPendingReadyList>
f00012a2:       |     |      232d                       jal     f00017cc <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
f00012a4:       |     |      f0001517           auipc   a0,0xf0001
f00012a8:       |     |      e7c50513           addi    a0,a0,-388 # e0002120 <xTasksWaitingTermination>
f00012ac:       |     |      2305                       jal     f00017cc <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
f00012ae:       |     |      f0001517           auipc   a0,0xf0001
f00012b2:       |     |      e8650513           addi    a0,a0,-378 # e0002134 <xSuspendedTaskList>
f00012b6:       |     |      2b19                       jal     f00017cc <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
f00012b8:       |     |      f0001517           auipc   a0,0xf0001
f00012bc:       |     |      db450513           addi    a0,a0,-588 # e000206c <pxDelayedTaskList>
f00012c0:       |     |      01352023           sw      s3,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
f00012c4:       |     |      f0001517           auipc   a0,0xf0001
f00012c8:       |     |      dac50513           addi    a0,a0,-596 # e0002070 <pxOverflowDelayedTaskList>
f00012cc:       |     |      01452023           sw      s4,0(a0)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
f00012d0:       |     \----> f0001517           auipc   a0,0xf0001
f00012d4:       |            d8c50513           addi    a0,a0,-628 # e000205c <uxTaskNumber>
f00012d8:       |            410c                       lw      a1,0(a0)
f00012da:       |            0585                       addi    a1,a1,1
f00012dc:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
f00012de:       |            02cc2503           lw      a0,44(s8)
f00012e2:       |            f0001597           auipc   a1,0xf0001
f00012e6:       |            d7658593           addi    a1,a1,-650 # e0002058 <uxTopReadyPriority>
f00012ea:       |            4190                       lw      a2,0(a1)
f00012ec:       |            4b85                       li      s7,1
f00012ee:       |            00ab96b3           sll     a3,s7,a0
f00012f2:       |            8e55                       or      a2,a2,a3
f00012f4:       |            c190                       sw      a2,0(a1)
f00012f6:       |            45d1                       li      a1,20
f00012f8:       |            02b50533           mul     a0,a0,a1
f00012fc:       |            9566                       add     a0,a0,s9
f00012fe:       |            414c                       lw      a1,4(a0)
f0001300:       |            00bc2423           sw      a1,8(s8)
f0001304:       |            4590                       lw      a2,8(a1)
f0001306:       |            00cc2623           sw      a2,12(s8)
f000130a:       |            4590                       lw      a2,8(a1)
f000130c:       |            01262223           sw      s2,4(a2)
f0001310:       |            0125a423           sw      s2,8(a1)
f0001314:       |            00ac2a23           sw      a0,20(s8)
f0001318:       |            410c                       lw      a1,0(a0)
f000131a:       |            0585                       addi    a1,a1,1
f000131c:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
f000131e:       |            2025                       jal     f0001346 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
f0001320:       |            000aa503           lw      a0,0(s5)
f0001324:       +----------- c119                       beqz    a0,f000132a <xTaskCreate+0x1f4>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
f0001326:       |            000b2503           lw      a0,0(s6)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
f000132a:       \----------> 855e                       mv      a0,s7
f000132c:                    4c92                       lw      s9,4(sp)
f000132e:                    4c22                       lw      s8,8(sp)
f0001330:                    4bb2                       lw      s7,12(sp)
f0001332:                    4b42                       lw      s6,16(sp)
f0001334:                    4ad2                       lw      s5,20(sp)
f0001336:                    4a62                       lw      s4,24(sp)
f0001338:                    49f2                       lw      s3,28(sp)
f000133a:                    5902                       lw      s2,32(sp)
f000133c:                    5492                       lw      s1,36(sp)
f000133e:                    5422                       lw      s0,40(sp)
f0001340:                    50b2                       lw      ra,44(sp)
f0001342:                    6145                       addi    sp,sp,48
f0001344:                    8082                       ret

f0001346 <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
f0001346:              f0001517                 auipc   a0,0xf0001
f000134a:              d2250513                 addi    a0,a0,-734 # e0002068 <xSchedulerRunning>
f000134e:              4108                     lw      a0,0(a0)
f0001350:       /----- cd19                     beqz    a0,f000136e <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
f0001352:       |      f0001517                 auipc   a0,0xf0001
f0001356:       |      d0250513                 addi    a0,a0,-766 # e0002054 <pxCurrentTCB>
f000135a:       |      410c                     lw      a1,0(a0)
f000135c:       |      41ec                     lw      a1,68(a1)
f000135e:       +----- c981                     beqz    a1,f000136e <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
f0001360:       |      410c                     lw      a1,0(a0)
f0001362:       |      41f0                     lw      a2,68(a1)
f0001364:       |      167d                     addi    a2,a2,-1
f0001366:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
f0001368:       |      4108                     lw      a0,0(a0)
f000136a:       |      4168                     lw      a0,68(a0)
f000136c:       |  /-- c111                     beqz    a0,f0001370 <vTaskExitCritical+0x2a>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
f000136e:       \--|-> 8082                     ret
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
f0001370:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
f0001374:              8082                     ret

f0001376 <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
f0001376:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
f0001378:              c606                     sw      ra,12(sp)
f000137a:              c422                     sw      s0,8(sp)
f000137c:              f0001517                 auipc   a0,0xf0001
f0001380:              cf850513                 addi    a0,a0,-776 # e0002074 <uxSchedulerSuspended>
f0001384:              4108                     lw      a0,0(a0)
f0001386:          /-- c901                     beqz    a0,f0001396 <vTaskSwitchContext+0x20>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
f0001388:          |   f0001517                 auipc   a0,0xf0001
f000138c:          |   cf050513                 addi    a0,a0,-784 # e0002078 <xYieldPending>
f0001390:          |   4585                     li      a1,1
f0001392:          |   c10c                     sw      a1,0(a0)
f0001394:       /--|-- a0d9                     j       f000145a <vTaskSwitchContext+0xe4>
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
f0001396:       |  \-> f0001517                 auipc   a0,0xf0001
f000139a:       |      ce250513                 addi    a0,a0,-798 # e0002078 <xYieldPending>
f000139e:       |      00052023                 sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
f00013a2:       |      f0001417                 auipc   s0,0xf0001
f00013a6:       |      cb240413                 addi    s0,s0,-846 # e0002054 <pxCurrentTCB>
f00013aa:       |      4008                     lw      a0,0(s0)
f00013ac:       |      4108                     lw      a0,0(a0)
f00013ae:       |      400c                     lw      a1,0(s0)
f00013b0:       |      598c                     lw      a1,48(a1)
f00013b2:       |  /-- 00a5e863                 bltu    a1,a0,f00013c2 <vTaskSwitchContext+0x4c>
f00013b6:       |  |   4008                     lw      a0,0(s0)
f00013b8:       |  |   400c                     lw      a1,0(s0)
f00013ba:       |  |   03458593                 addi    a1,a1,52
f00013be:       |  |   933ff0ef                 jal     ra,f0000cf0 <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00013c2:       |  \-> f0001517                 auipc   a0,0xf0001
f00013c6:       |      c9650513                 addi    a0,a0,-874 # e0002058 <uxTopReadyPriority>
f00013ca:       |      4108                     lw      a0,0(a0)
f00013cc:       |      00155593                 srli    a1,a0,0x1
f00013d0:       |      8d4d                     or      a0,a0,a1
f00013d2:       |      00255593                 srli    a1,a0,0x2
f00013d6:       |      8d4d                     or      a0,a0,a1
f00013d8:       |      00455593                 srli    a1,a0,0x4
f00013dc:       |      8d4d                     or      a0,a0,a1
f00013de:       |      00855593                 srli    a1,a0,0x8
f00013e2:       |      8d4d                     or      a0,a0,a1
f00013e4:       |      01055593                 srli    a1,a0,0x10
f00013e8:       |      8d4d                     or      a0,a0,a1
f00013ea:       |      fff54513                 not     a0,a0
f00013ee:       |      00155593                 srli    a1,a0,0x1
f00013f2:       |      55555637                 lui     a2,0x55555
f00013f6:       |      55560613                 addi    a2,a2,1365 # 55555555 <_ottf_size+0x55515555>
f00013fa:       |      8df1                     and     a1,a1,a2
f00013fc:       |      8d0d                     sub     a0,a0,a1
f00013fe:       |      333335b7                 lui     a1,0x33333
f0001402:       |      33358593                 addi    a1,a1,819 # 33333333 <_ottf_size+0x332f3333>
f0001406:       |      00b57633                 and     a2,a0,a1
f000140a:       |      8109                     srli    a0,a0,0x2
f000140c:       |      8d6d                     and     a0,a0,a1
f000140e:       |      9532                     add     a0,a0,a2
f0001410:       |      00455593                 srli    a1,a0,0x4
f0001414:       |      952e                     add     a0,a0,a1
f0001416:       |      0f0f15b7                 lui     a1,0xf0f1
f000141a:       |      f0f58593                 addi    a1,a1,-241 # f0f0f0f <_ottf_size+0xf0b0f0f>
f000141e:       |      8d6d                     and     a0,a0,a1
f0001420:       |      010105b7                 lui     a1,0x1010
f0001424:       |      10158593                 addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
f0001428:       |      02b50533                 mul     a0,a0,a1
f000142c:       |      8161                     srli    a0,a0,0x18
f000142e:       |      01f54513                 xori    a0,a0,31
f0001432:       |      45d1                     li      a1,20
f0001434:       |      02b50533                 mul     a0,a0,a1
f0001438:       |      f0001597                 auipc   a1,0xf0001
f000143c:       |      c8458593                 addi    a1,a1,-892 # e00020bc <pxReadyTasksLists>
f0001440:       |      95aa                     add     a1,a1,a0
f0001442:       |      41c8                     lw      a0,4(a1)
f0001444:       |      4148                     lw      a0,4(a0)
f0001446:       |      00858613                 addi    a2,a1,8
f000144a:       |      c1c8                     sw      a0,4(a1)
f000144c:       |  /-- 00c51563                 bne     a0,a2,f0001456 <vTaskSwitchContext+0xe0>
f0001450:       |  |   4148                     lw      a0,4(a0)
f0001452:       |  |   0591                     addi    a1,a1,4
f0001454:       |  |   c188                     sw      a0,0(a1)
f0001456:       |  \-> 4548                     lw      a0,12(a0)
f0001458:       |      c008                     sw      a0,0(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
f000145a:       \----> 4422                     lw      s0,8(sp)
f000145c:              40b2                     lw      ra,12(sp)
f000145e:              0141                     addi    sp,sp,16
f0001460:              8082                     ret

f0001462 <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
f0001462:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
f0001464:           c606                        sw      ra,12(sp)
f0001466:           00000517            auipc   a0,0x0
f000146a:           06250513            addi    a0,a0,98 # f00014c8 <prvIdleTask>
f000146e:           00002597            auipc   a1,0x2
f0001472:           8ba58593            addi    a1,a1,-1862 # f0002d28 <uxTopUsedPriority+0x4>
f0001476:           f0001797            auipc   a5,0xf0001
f000147a:           c0678793            addi    a5,a5,-1018 # e000207c <xIdleTaskHandle>
f000147e:           10000613            li      a2,256
f0001482:           4681                        li      a3,0
f0001484:           4701                        li      a4,0
f0001486:           3945                        jal     f0001136 <xTaskCreate>
f0001488:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
f000148a:       /-- 02b51763            bne     a0,a1,f00014b8 <vTaskStartScheduler+0x56>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
f000148e:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
f0001492:       |   f0001517            auipc   a0,0xf0001
f0001496:       |   bee50513            addi    a0,a0,-1042 # e0002080 <xNextTaskUnblockTime>
f000149a:       |   567d                        li      a2,-1
f000149c:       |   c110                        sw      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
f000149e:       |   f0001517            auipc   a0,0xf0001
f00014a2:       |   bca50513            addi    a0,a0,-1078 # e0002068 <xSchedulerRunning>
f00014a6:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
f00014a8:       |   f0001517            auipc   a0,0xf0001
f00014ac:       |   bdc50513            addi    a0,a0,-1060 # e0002084 <xTickCount>
f00014b0:       |   00052023            sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
f00014b4:       |   87bff0ef            jal     ra,f0000d2e <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
f00014b8:       \-> 00002517            auipc   a0,0x2
f00014bc:           86c50513            addi    a0,a0,-1940 # f0002d24 <uxTopUsedPriority>
f00014c0:           4108                        lw      a0,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2115
}
f00014c2:           40b2                        lw      ra,12(sp)
f00014c4:           0141                        addi    sp,sp,16
f00014c6:           8082                        ret

f00014c8 <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
f00014c8:                 1101                  addi    sp,sp,-32
f00014ca:                 ce06                  sw      ra,28(sp)
f00014cc:                 cc22                  sw      s0,24(sp)
f00014ce:                 ca26                  sw      s1,20(sp)
f00014d0:                 c84a                  sw      s2,16(sp)
f00014d2:                 c64e                  sw      s3,12(sp)
f00014d4:                 c452                  sw      s4,8(sp)
f00014d6:                 c256                  sw      s5,4(sp)
f00014d8:                 f0001497              auipc   s1,0xf0001
f00014dc:                 b8848493              addi    s1,s1,-1144 # e0002060 <uxDeletedTasksWaitingCleanUp>
f00014e0:                 f0001917              auipc   s2,0xf0001
f00014e4:                 b8890913              addi    s2,s2,-1144 # e0002068 <xSchedulerRunning>
f00014e8:                 f0001997              auipc   s3,0xf0001
f00014ec:                 c3898993              addi    s3,s3,-968 # e0002120 <xTasksWaitingTermination>
f00014f0:                 f0001a17              auipc   s4,0xf0001
f00014f4:                 b74a0a13              addi    s4,s4,-1164 # e0002064 <uxCurrentNumberOfTasks>
f00014f8:                 f0001a97              auipc   s5,0xf0001
f00014fc:                 b5ca8a93              addi    s5,s5,-1188 # e0002054 <pxCurrentTCB>
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
f0001500:       /-------> 4088                  lw      a0,0(s1)
f0001502:       |  /----- c129                  beqz    a0,f0001544 <prvIdleTask+0x7c>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0001504:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f0001508:       |  |      00092503              lw      a0,0(s2)
f000150c:       |  |  /-- c901                  beqz    a0,f000151c <prvIdleTask+0x54>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f000150e:       |  |  |   000aa503              lw      a0,0(s5)
f0001512:       |  |  |   416c                  lw      a1,68(a0)
f0001514:       |  |  |   0585                  addi    a1,a1,1
f0001516:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0001518:       |  |  |   000aa503              lw      a0,0(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f000151c:       |  |  \-> 00c9a503              lw      a0,12(s3)
f0001520:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
f0001522:       |  |      00440513              addi    a0,s0,4
f0001526:       |  |      24c1                  jal     f00017e6 <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
f0001528:       |  |      000a2503              lw      a0,0(s4)
f000152c:       |  |      157d                  addi    a0,a0,-1
f000152e:       |  |      00aa2023              sw      a0,0(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
f0001532:       |  |      4088                  lw      a0,0(s1)
f0001534:       |  |      157d                  addi    a0,a0,-1
f0001536:       |  |      c088                  sw      a0,0(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
f0001538:       |  |      3539                  jal     f0001346 <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
f000153a:       |  |      5808                  lw      a0,48(s0)
f000153c:       |  |      26b9                  jal     f000188a <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
f000153e:       |  |      8522                  mv      a0,s0
f0001540:       |  |      26a9                  jal     f000188a <vPortFree>
f0001542:       +--|----- bf7d                  j       f0001500 <prvIdleTask+0x38>
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
f0001544:       |  \----> 00000073              ecall
f0001548:       \-------- bf65                  j       f0001500 <prvIdleTask+0x38>

f000154a <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
f000154a:       f0001517                auipc   a0,0xf0001
f000154e:       b2a50513                addi    a0,a0,-1238 # e0002074 <uxSchedulerSuspended>
f0001552:       410c                    lw      a1,0(a0)
f0001554:       0585                    addi    a1,a1,1
f0001556:       c10c                    sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
f0001558:       8082                    ret

f000155a <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
f000155a:                    1141                       addi    sp,sp,-16
f000155c:                    c606                       sw      ra,12(sp)
f000155e:                    c422                       sw      s0,8(sp)
f0001560:                    c226                       sw      s1,4(sp)
f0001562:                    c04a                       sw      s2,0(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0001564:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f0001568:                    f0001517           auipc   a0,0xf0001
f000156c:                    b0050513           addi    a0,a0,-1280 # e0002068 <xSchedulerRunning>
f0001570:                    4108                       lw      a0,0(a0)
f0001572:                /-- c911                       beqz    a0,f0001586 <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0001574:                |   f0001517           auipc   a0,0xf0001
f0001578:                |   ae050513           addi    a0,a0,-1312 # e0002054 <pxCurrentTCB>
f000157c:                |   410c                       lw      a1,0(a0)
f000157e:                |   41f0                       lw      a2,68(a1)
f0001580:                |   0605                       addi    a2,a2,1
f0001582:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0001584:                |   4108                       lw      a0,0(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
f0001586:                \-> f0001517           auipc   a0,0xf0001
f000158a:                    aee50513           addi    a0,a0,-1298 # e0002074 <uxSchedulerSuspended>
f000158e:                    410c                       lw      a1,0(a0)
f0001590:                    15fd                       addi    a1,a1,-1
f0001592:                    c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f0001594:                    4108                       lw      a0,0(a0)
f0001596:       /----------- ed65                       bnez    a0,f000168e <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
f0001598:       |            f0001517           auipc   a0,0xf0001
f000159c:       |            acc50513           addi    a0,a0,-1332 # e0002064 <uxCurrentNumberOfTasks>
f00015a0:       |            4108                       lw      a0,0(a0)
f00015a2:       +----------- c575                       beqz    a0,f000168e <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f00015a4:       |            f0001517           auipc   a0,0xf0001
f00015a8:       |            ba450513           addi    a0,a0,-1116 # e0002148 <xPendingReadyList>
f00015ac:       |            410c                       lw      a1,0(a0)
f00015ae:       |            f0001917           auipc   s2,0xf0001
f00015b2:       |            aca90913           addi    s2,s2,-1334 # e0002078 <xYieldPending>
f00015b6:       |  /-------- cddd                       beqz    a1,f0001674 <xTaskResumeAll+0x11a>
f00015b8:       |  |         4885                       li      a7,1
f00015ba:       |  |         f0001617           auipc   a2,0xf0001
f00015be:       |  |         a9e60613           addi    a2,a2,-1378 # e0002058 <uxTopReadyPriority>
f00015c2:       |  |         4851                       li      a6,20
f00015c4:       |  |         f0001297           auipc   t0,0xf0001
f00015c8:       |  |         af828293           addi    t0,t0,-1288 # e00020bc <pxReadyTasksLists>
f00015cc:       |  |         f0001317           auipc   t1,0xf0001
f00015d0:       |  |         a8830313           addi    t1,t1,-1400 # e0002054 <pxCurrentTCB>
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00015d4:       |  |  /----> 454c                       lw      a1,12(a0)
f00015d6:       |  |  |      45c0                       lw      s0,12(a1)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00015d8:       |  |  |      500c                       lw      a1,32(s0)
f00015da:       |  |  |      4c58                       lw      a4,28(s0)
f00015dc:       |  |  |      5404                       lw      s1,40(s0)
f00015de:       |  |  |      c70c                       sw      a1,8(a4)
f00015e0:       |  |  |      5014                       lw      a3,32(s0)
f00015e2:       |  |  |      c2d8                       sw      a4,4(a3)
f00015e4:       |  |  |      40cc                       lw      a1,4(s1)
f00015e6:       |  |  |      01840713           addi    a4,s0,24
f00015ea:       |  |  |  /-- 00e59363           bne     a1,a4,f00015f0 <xTaskResumeAll+0x96>
f00015ee:       |  |  |  |   c0d4                       sw      a3,4(s1)
f00015f0:       |  |  |  \-> 02042423           sw      zero,40(s0)
f00015f4:       |  |  |      408c                       lw      a1,0(s1)
f00015f6:       |  |  |      15fd                       addi    a1,a1,-1
f00015f8:       |  |  |      c08c                       sw      a1,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f00015fa:       |  |  |      444c                       lw      a1,12(s0)
f00015fc:       |  |  |      4418                       lw      a4,8(s0)
f00015fe:       |  |  |      4854                       lw      a3,20(s0)
f0001600:       |  |  |      c70c                       sw      a1,8(a4)
f0001602:       |  |  |      444c                       lw      a1,12(s0)
f0001604:       |  |  |      c1d8                       sw      a4,4(a1)
f0001606:       |  |  |      42d8                       lw      a4,4(a3)
f0001608:       |  |  |      00440493           addi    s1,s0,4
f000160c:       |  |  |  /-- 00971363           bne     a4,s1,f0001612 <xTaskResumeAll+0xb8>
f0001610:       |  |  |  |   c2cc                       sw      a1,4(a3)
f0001612:       |  |  |  \-> 428c                       lw      a1,0(a3)
f0001614:       |  |  |      15fd                       addi    a1,a1,-1
f0001616:       |  |  |      c28c                       sw      a1,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
f0001618:       |  |  |      544c                       lw      a1,44(s0)
f000161a:       |  |  |      4214                       lw      a3,0(a2)
f000161c:       |  |  |      00b89733           sll     a4,a7,a1
f0001620:       |  |  |      8ed9                       or      a3,a3,a4
f0001622:       |  |  |      c214                       sw      a3,0(a2)
f0001624:       |  |  |      030586b3           mul     a3,a1,a6
f0001628:       |  |  |      9696                       add     a3,a3,t0
f000162a:       |  |  |      42d8                       lw      a4,4(a3)
f000162c:       |  |  |      c418                       sw      a4,8(s0)
f000162e:       |  |  |      471c                       lw      a5,8(a4)
f0001630:       |  |  |      c45c                       sw      a5,12(s0)
f0001632:       |  |  |      471c                       lw      a5,8(a4)
f0001634:       |  |  |      c3c4                       sw      s1,4(a5)
f0001636:       |  |  |      c704                       sw      s1,8(a4)
f0001638:       |  |  |      c854                       sw      a3,20(s0)
f000163a:       |  |  |      4298                       lw      a4,0(a3)
f000163c:       |  |  |      0705                       addi    a4,a4,1
f000163e:       |  |  |      c298                       sw      a4,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
f0001640:       |  |  |      00032683           lw      a3,0(t1)
f0001644:       |  |  |      56d4                       lw      a3,44(a3)
f0001646:       |  |  |  /-- 00d5e463           bltu    a1,a3,f000164e <xTaskResumeAll+0xf4>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
f000164a:       |  |  |  |   01192023           sw      a7,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f000164e:       |  |  |  \-> 410c                       lw      a1,0(a0)
f0001650:       |  |  \----- f1d1                       bnez    a1,f00015d4 <xTaskResumeAll+0x7a>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0001652:       |  |         f0001517           auipc   a0,0xf0001
f0001656:       |  |         a1a50513           addi    a0,a0,-1510 # e000206c <pxDelayedTaskList>
f000165a:       |  |         410c                       lw      a1,0(a0)
f000165c:       |  |         418c                       lw      a1,0(a1)
f000165e:       |  |  /----- c589                       beqz    a1,f0001668 <xTaskResumeAll+0x10e>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0001660:       |  |  |      4108                       lw      a0,0(a0)
f0001662:       |  |  |      4548                       lw      a0,12(a0)
f0001664:       |  |  |      4108                       lw      a0,0(a0)
f0001666:       |  |  |  /-- a011                       j       f000166a <xTaskResumeAll+0x110>
f0001668:       |  |  \--|-> 557d                       li      a0,-1
f000166a:       |  |     \-> f0001597           auipc   a1,0xf0001
f000166e:       |  |         a1658593           addi    a1,a1,-1514 # e0002080 <xNextTaskUnblockTime>
f0001672:       |  |         c188                       sw      a0,0(a1)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
f0001674:       |  \-------> f0001417           auipc   s0,0xf0001
f0001678:       |            a1440413           addi    s0,s0,-1516 # e0002088 <xPendedTicks>
f000167c:       |            4004                       lw      s1,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
f000167e:       |     /----- c491                       beqz    s1,f000168a <xTaskResumeAll+0x130>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
f0001680:       |     |  /-> 2839                       jal     f000169e <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
f0001682:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
f0001684:       |     |  \-- fcf5                       bnez    s1,f0001680 <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
f0001686:       |     |      00042023           sw      zero,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
f000168a:       |     \----> 00092503           lw      a0,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
f000168e:       \----------> 3965                       jal     f0001346 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
f0001690:                    4501                       li      a0,0
f0001692:                    4902                       lw      s2,0(sp)
f0001694:                    4492                       lw      s1,4(sp)
f0001696:                    4422                       lw      s0,8(sp)
f0001698:                    40b2                       lw      ra,12(sp)
f000169a:                    0141                       addi    sp,sp,16
f000169c:                    8082                       ret

f000169e <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f000169e:                          f0001517             auipc   a0,0xf0001
f00016a2:                          9d650513             addi    a0,a0,-1578 # e0002074 <uxSchedulerSuspended>
f00016a6:                          4108                 lw      a0,0(a0)
f00016a8:                      /-- c909                 beqz    a0,f00016ba <xTaskIncrementTick+0x1c>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
f00016aa:                      |   f0001517             auipc   a0,0xf0001
f00016ae:                      |   9de50513             addi    a0,a0,-1570 # e0002088 <xPendedTicks>
f00016b2:                      |   410c                 lw      a1,0(a0)
f00016b4:                      |   0585                 addi    a1,a1,1
f00016b6:                      |   c10c                 sw      a1,0(a0)
f00016b8:       /--------------|-- aa01                 j       f00017c8 <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
f00016ba:       |              \-> f0001517             auipc   a0,0xf0001
f00016be:       |                  9ca50513             addi    a0,a0,-1590 # e0002084 <xTickCount>
f00016c2:       |                  410c                 lw      a1,0(a0)
f00016c4:       |                  00158393             addi    t2,a1,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
f00016c8:       |                  00752023             sw      t2,0(a0)
f00016cc:       |                  f0001e17             auipc   t3,0xf0001
f00016d0:       |                  9a0e0e13             addi    t3,t3,-1632 # e000206c <pxDelayedTaskList>
f00016d4:       |                  f0001817             auipc   a6,0xf0001
f00016d8:       |                  9ac80813             addi    a6,a6,-1620 # e0002080 <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
f00016dc:       |        /-------- 02b3ff63             bgeu    t2,a1,f000171a <xTaskIncrementTick+0x7c>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
f00016e0:       |        |         000e2503             lw      a0,0(t3)
f00016e4:       |        |         f0001597             auipc   a1,0xf0001
f00016e8:       |        |         98c58593             addi    a1,a1,-1652 # e0002070 <pxOverflowDelayedTaskList>
f00016ec:       |        |         4194                 lw      a3,0(a1)
f00016ee:       |        |         00de2023             sw      a3,0(t3)
f00016f2:       |        |         c188                 sw      a0,0(a1)
f00016f4:       |        |         f0001517             auipc   a0,0xf0001
f00016f8:       |        |         99850513             addi    a0,a0,-1640 # e000208c <xNumOfOverflows>
f00016fc:       |        |         410c                 lw      a1,0(a0)
f00016fe:       |        |         0585                 addi    a1,a1,1
f0001700:       |        |         c10c                 sw      a1,0(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0001702:       |        |         000e2503             lw      a0,0(t3)
f0001706:       |        |         4108                 lw      a0,0(a0)
f0001708:       |        |  /----- c511                 beqz    a0,f0001714 <xTaskIncrementTick+0x76>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f000170a:       |        |  |      000e2503             lw      a0,0(t3)
f000170e:       |        |  |      4548                 lw      a0,12(a0)
f0001710:       |        |  |      4108                 lw      a0,0(a0)
f0001712:       |        |  |  /-- a011                 j       f0001716 <xTaskIncrementTick+0x78>
f0001714:       |        |  \--|-> 557d                 li      a0,-1
f0001716:       |        |     \-> 00a82023             sw      a0,0(a6)
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
f000171a:       |        \-------> 00082503             lw      a0,0(a6)
f000171e:       +----------------- 0aa3e563             bltu    t2,a0,f00017c8 <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0001722:       |                  000e2503             lw      a0,0(t3)
f0001726:       |                  4108                 lw      a0,0(a0)
f0001728:       |  /-------------- cd49                 beqz    a0,f00017c2 <xTaskIncrementTick+0x124>
f000172a:       |  |               4885                 li      a7,1
f000172c:       |  |               f0001e97             auipc   t4,0xf0001
f0001730:       |  |               92ce8e93             addi    t4,t4,-1748 # e0002058 <uxTopReadyPriority>
f0001734:       |  |               42d1                 li      t0,20
f0001736:       |  |               f0001317             auipc   t1,0xf0001
f000173a:       |  |               98630313             addi    t1,t1,-1658 # e00020bc <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f000173e:       |  |  /----------> 000e2503             lw      a0,0(t3)
f0001742:       |  |  |            4548                 lw      a0,12(a0)
f0001744:       |  |  |            4554                 lw      a3,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
f0001746:       |  |  |            42c8                 lw      a0,4(a3)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
f0001748:       |  |  |  /-------- 06a3ee63             bltu    t2,a0,f00017c4 <xTaskIncrementTick+0x126>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f000174c:       |  |  |  |         46cc                 lw      a1,12(a3)
f000174e:       |  |  |  |         469c                 lw      a5,8(a3)
f0001750:       |  |  |  |         4ac8                 lw      a0,20(a3)
f0001752:       |  |  |  |         c78c                 sw      a1,8(a5)
f0001754:       |  |  |  |         46cc                 lw      a1,12(a3)
f0001756:       |  |  |  |         c1dc                 sw      a5,4(a1)
f0001758:       |  |  |  |         4150                 lw      a2,4(a0)
f000175a:       |  |  |  |         00468793             addi    a5,a3,4
f000175e:       |  |  |  |     /-- 00f61363             bne     a2,a5,f0001764 <xTaskIncrementTick+0xc6>
f0001762:       |  |  |  |     |   c14c                 sw      a1,4(a0)
f0001764:       |  |  |  |     \-> 410c                 lw      a1,0(a0)
f0001766:       |  |  |  |         15fd                 addi    a1,a1,-1
f0001768:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f000176a:       |  |  |  |         5688                 lw      a0,40(a3)
f000176c:       |  |  |  |  /----- c10d                 beqz    a0,f000178e <xTaskIncrementTick+0xf0>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f000176e:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0001770:       |  |  |  |  |      4ed0                 lw      a2,28(a3)
f0001772:       |  |  |  |  |      c60c                 sw      a1,8(a2)
f0001774:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0001776:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
f0001778:       |  |  |  |  |      4150                 lw      a2,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f000177a:       |  |  |  |  |      01868713             addi    a4,a3,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f000177e:       |  |  |  |  |  /-- 00e61363             bne     a2,a4,f0001784 <xTaskIncrementTick+0xe6>
f0001782:       |  |  |  |  |  |   c14c                 sw      a1,4(a0)
f0001784:       |  |  |  |  |  \-> 0206a423             sw      zero,40(a3)
f0001788:       |  |  |  |  |      410c                 lw      a1,0(a0)
f000178a:       |  |  |  |  |      15fd                 addi    a1,a1,-1
f000178c:       |  |  |  |  |      c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
f000178e:       |  |  |  |  \----> 56c8                 lw      a0,44(a3)
f0001790:       |  |  |  |         000ea583             lw      a1,0(t4)
f0001794:       |  |  |  |         00a89633             sll     a2,a7,a0
f0001798:       |  |  |  |         8dd1                 or      a1,a1,a2
f000179a:       |  |  |  |         00bea023             sw      a1,0(t4)
f000179e:       |  |  |  |         02550533             mul     a0,a0,t0
f00017a2:       |  |  |  |         951a                 add     a0,a0,t1
f00017a4:       |  |  |  |         414c                 lw      a1,4(a0)
f00017a6:       |  |  |  |         c68c                 sw      a1,8(a3)
f00017a8:       |  |  |  |         4590                 lw      a2,8(a1)
f00017aa:       |  |  |  |         c6d0                 sw      a2,12(a3)
f00017ac:       |  |  |  |         4590                 lw      a2,8(a1)
f00017ae:       |  |  |  |         c25c                 sw      a5,4(a2)
f00017b0:       |  |  |  |         c59c                 sw      a5,8(a1)
f00017b2:       |  |  |  |         cac8                 sw      a0,20(a3)
f00017b4:       |  |  |  |         410c                 lw      a1,0(a0)
f00017b6:       |  |  |  |         0585                 addi    a1,a1,1
f00017b8:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f00017ba:       |  |  |  |         000e2503             lw      a0,0(t3)
f00017be:       |  |  |  |         4108                 lw      a0,0(a0)
f00017c0:       |  |  \--|-------- fd3d                 bnez    a0,f000173e <xTaskIncrementTick+0xa0>
f00017c2:       |  \-----|-------> 557d                 li      a0,-1
f00017c4:       |        \-------> 00a82023             sw      a0,0(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
f00017c8:       \----------------> 4501                 li      a0,0
f00017ca:                          8082                 ret

f00017cc <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f00017cc:       00850593                addi    a1,a0,8
f00017d0:       c14c                    sw      a1,4(a0)
f00017d2:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
f00017d4:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f00017d6:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f00017d8:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
f00017da:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
f00017de:       8082                    ret

f00017e0 <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
f00017e0:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
f00017e4:       8082                    ret

f00017e6 <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f00017e6:           4510                        lw      a2,8(a0)
f00017e8:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
f00017ea:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f00017ec:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
f00017ee:           4510                        lw      a2,8(a0)
f00017f0:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
f00017f2:           41d4                        lw      a3,4(a1)
f00017f4:       /-- 00a69363            bne     a3,a0,f00017fa <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
f00017f8:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
f00017fa:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
f00017fe:           4188                        lw      a0,0(a1)
f0001800:           157d                        addi    a0,a0,-1
f0001802:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
f0001804:           4188                        lw      a0,0(a1)
f0001806:           8082                        ret

f0001808 <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
f0001808:                 1141                  addi    sp,sp,-16
f000180a:                 c606                  sw      ra,12(sp)
f000180c:                 c422                  sw      s0,8(sp)
f000180e:                 c226                  sw      s1,4(sp)
f0001810:                 c04a                  sw      s2,0(sp)
f0001812:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
f0001814:                 9941                  andi    a0,a0,-16
f0001816:                 0541                  addi    a0,a0,16
f0001818:                 00f47593              andi    a1,s0,15
f000181c:          /----- 00a46363              bltu    s0,a0,f0001822 <pvPortMalloc+0x1a>
f0001820:          |      4501                  li      a0,0
f0001822:          \--/-X c191                  beqz    a1,f0001826 <pvPortMalloc+0x1e>
f0001824:             |   842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
f0001826:             \-> 3315                  jal     f000154a <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
f0001828:                 f0001517              auipc   a0,0xf0001
f000182c:                 86850513              addi    a0,a0,-1944 # e0002090 <pvPortMalloc.pucAlignedHeap>
f0001830:                 4104                  lw      s1,0(a0)
f0001832:             /-- c099                  beqz    s1,f0001838 <pvPortMalloc+0x30>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
f0001834:          /--|-- e819                  bnez    s0,f000184a <pvPortMalloc+0x42>
f0001836:       /--|--|-- a081                  j       f0001876 <pvPortMalloc+0x6e>
f0001838:       |  |  \-> f0001597              auipc   a1,0xf0001
f000183c:       |  |      94c58593              addi    a1,a1,-1716 # e0002184 <ucHeap>
f0001840:       |  |      05c1                  addi    a1,a1,16
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
f0001842:       |  |      ff05f493              andi    s1,a1,-16
f0001846:       |  |      c104                  sw      s1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
f0001848:       +--|----- c41d                  beqz    s0,f0001876 <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
f000184a:       |  \----> f0001517              auipc   a0,0xf0001
f000184e:       |         84a50513              addi    a0,a0,-1974 # e0002094 <xNextFreeByte>
f0001852:       |         00052903              lw      s2,0(a0)
f0001856:       |         008905b3              add     a1,s2,s0
f000185a:       |         0045d613              srli    a2,a1,0x4
f000185e:       |         7ff63613              sltiu   a2,a2,2047
f0001862:       |         00b936b3              sltu    a3,s2,a1
f0001866:       |         8e75                  and     a2,a2,a3
f0001868:       +-------- c619                  beqz    a2,f0001876 <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
f000186a:       |         c10c                  sw      a1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
f000186c:       |         31fd                  jal     f000155a <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
f000186e:       |     /-- c489                  beqz    s1,f0001878 <pvPortMalloc+0x70>
f0001870:       |     |   01248533              add     a0,s1,s2
f0001874:       |  /--|-- a029                  j       f000187e <pvPortMalloc+0x76>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
f0001876:       \--|--|-> 31d5                  jal     f000155a <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
f0001878:          |  \-> c3aff0ef              jal     ra,f0000cb2 <vApplicationMallocFailedHook>
f000187c:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
f000187e:          \----> 4902                  lw      s2,0(sp)
f0001880:                 4492                  lw      s1,4(sp)
f0001882:                 4422                  lw      s0,8(sp)
f0001884:                 40b2                  lw      ra,12(sp)
f0001886:                 0141                  addi    sp,sp,16
f0001888:                 8082                  ret

f000188a <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
f000188a:       8082                    ret

f000188c <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
f000188c:       4505                    li      a0,1
f000188e:       8082                    ret

f0001890 <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
f0001890:       4505                    li      a0,1
f0001892:       8082                    ret

f0001894 <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
f0001894:                 1101                  addi    sp,sp,-32
f0001896:                 ce06                  sw      ra,28(sp)
f0001898:                 cc22                  sw      s0,24(sp)
f000189a:                 ca26                  sw      s1,20(sp)
f000189c:                 84ae                  mv      s1,a1
f000189e:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
f00018a0:       /-------- ed85                  bnez    a1,f00018d8 <rand_testutils_init+0x44>
f00018a2:       |         00002517              auipc   a0,0x2
f00018a6:       |         b4650513              addi    a0,a0,-1210 # f00033e8 <kDeviceLogBypassUartAddress>
f00018aa:       |         4108                  lw      a0,0(a0)
f00018ac:       |     /-- c901                  beqz    a0,f00018bc <rand_testutils_init+0x28>
f00018ae:       |     |   1000f517              auipc   a0,0x1000f
f00018b2:       |     |   84250513              addi    a0,a0,-1982 # 100f0 <_non_volatile_scratch_end+0xffd00f0>
f00018b6:       |     |   4581                  li      a1,0
f00018b8:       |     |   2af1                  jal     f0001a94 <base_log_internal_dv>
f00018ba:       |  /--|-- a819                  j       f00018d0 <rand_testutils_init+0x3c>
f00018bc:       |  |  \-> 00001597              auipc   a1,0x1
f00018c0:       |  |      4fc58593              addi    a1,a1,1276 # f0002db8 <uxTopUsedPriority+0x94>
f00018c4:       |  |      850a                  mv      a0,sp
f00018c6:       |  |      4651                  li      a2,20
f00018c8:       |  |      2a3000ef              jal     ra,f000236a <memcpy>
f00018cc:       |  |      850a                  mv      a0,sp
f00018ce:       |  |      2215                  jal     f00019f2 <base_log_internal_core>
f00018d0:       |  \----> 6531                  lui     a0,0xc
f00018d2:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00018d6:       |         2899                  jal     f000192c <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f00018d8:       \-------> c004                  sw      s1,0(s0)
f00018da:                 6561                  lui     a0,0x18
f00018dc:                 6a050513              addi    a0,a0,1696 # 186a0 <test_status_set.kLogFields.2+0x8560>
f00018e0:                 c048                  sw      a0,4(s0)
f00018e2:                 deadc537              lui     a0,0xdeadc
f00018e6:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xeea9beef>
f00018ea:                 c408                  sw      a0,8(s0)
f00018ec:                 80000537              lui     a0,0x80000
f00018f0:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x8ffc0057>
f00018f4:                 c448                  sw      a0,12(s0)
f00018f6:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f00018fa:                 00002597              auipc   a1,0x2
f00018fe:                 ad258593              addi    a1,a1,-1326 # f00033cc <kDeviceType>
f0001902:                 418c                  lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0001904:                 c808                  sw      a0,16(s0)
f0001906:                 557d                  li      a0,-1
f0001908:                 4609                  li      a2,2
f000190a:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f000190c:             /-- 00c5e463              bltu    a1,a2,f0001914 <rand_testutils_init+0x80>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
f0001910:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
f0001914:             \-> 44d2                  lw      s1,20(sp)
f0001916:                 4462                  lw      s0,24(sp)
f0001918:                 40f2                  lw      ra,28(sp)
f000191a:                 6105                  addi    sp,sp,32
f000191c:                 8082                  ret

f000191e <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
f000191e:       /----- c581                     beqz    a1,f0001926 <dif_rv_core_ibex_init+0x8>
f0001920:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
f0001922:       |      c188                     sw      a0,0(a1)
f0001924:       |  /-- a011                     j       f0001928 <dif_rv_core_ibex_init+0xa>
f0001926:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
f0001928:          \-> 8532                     mv      a0,a2
f000192a:              8082                     ret

f000192c <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
f000192c:                    1101                       addi    sp,sp,-32
f000192e:                    ce06                       sw      ra,28(sp)
f0001930:                    65b1                       lui     a1,0xc
f0001932:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
f0001936:             /----- 02b50063           beq     a0,a1,f0001956 <test_status_set+0x2a>
f000193a:             |      65a5                       lui     a1,0x9
f000193c:             |      05b5                       addi    a1,a1,13
f000193e:          /--|----- 02b50d63           beq     a0,a1,f0001978 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001942:          |  |      00002597           auipc   a1,0x2
f0001946:          |  |      aa258593           addi    a1,a1,-1374 # f00033e4 <kDeviceTestStatusAddress>
f000194a:          |  |      418c                       lw      a1,0(a1)
f000194c:          |  |  /-- c191                       beqz    a1,f0001950 <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000194e:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
f0001950:          |  |  \-> 40f2                       lw      ra,28(sp)
f0001952:          |  |      6105                       addi    sp,sp,32
f0001954:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001956:          |  \----> 00002517           auipc   a0,0x2
f000195a:          |         a9250513           addi    a0,a0,-1390 # f00033e8 <kDeviceLogBypassUartAddress>
f000195e:          |         4108                       lw      a0,0(a0)
f0001960:          |  /----- ed0d                       bnez    a0,f000199a <test_status_set+0x6e>
f0001962:          |  |      00001597           auipc   a1,0x1
f0001966:          |  |      7a258593           addi    a1,a1,1954 # f0003104 <top_earlgrey_plic_interrupt_for_peripheral+0x338>
f000196a:          |  |      0028                       addi    a0,sp,8
f000196c:          |  |      4651                       li      a2,20
f000196e:          |  |      1fd000ef           jal     ra,f000236a <memcpy>
f0001972:          |  |      0028                       addi    a0,sp,8
f0001974:          |  |      28bd                       jal     f00019f2 <base_log_internal_core>
f0001976:          |  |  /-- a805                       j       f00019a6 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001978:          \--|--|-> 00002517           auipc   a0,0x2
f000197c:             |  |   a7050513           addi    a0,a0,-1424 # f00033e8 <kDeviceLogBypassUartAddress>
f0001980:             |  |   4108                       lw      a0,0(a0)
f0001982:       /-----|--|-- ed05                       bnez    a0,f00019ba <test_status_set+0x8e>
f0001984:       |     |  |   00001597           auipc   a1,0x1
f0001988:       |     |  |   76c58593           addi    a1,a1,1900 # f00030f0 <top_earlgrey_plic_interrupt_for_peripheral+0x324>
f000198c:       |     |  |   0028                       addi    a0,sp,8
f000198e:       |     |  |   4651                       li      a2,20
f0001990:       |     |  |   1db000ef           jal     ra,f000236a <memcpy>
f0001994:       |     |  |   0028                       addi    a0,sp,8
f0001996:       |     |  |   28b1                       jal     f00019f2 <base_log_internal_core>
f0001998:       |  /--|--|-- a03d                       j       f00019c6 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f000199a:       |  |  \--|-> 1000e517           auipc   a0,0x1000e
f000199e:       |  |     |   7a650513           addi    a0,a0,1958 # 10140 <_non_volatile_scratch_end+0xffd0140>
f00019a2:       |  |     |   4581                       li      a1,0
f00019a4:       |  |     |   28c5                       jal     f0001a94 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f00019a6:       |  |     \-> 00002517           auipc   a0,0x2
f00019aa:       |  |         a3e50513           addi    a0,a0,-1474 # f00033e4 <kDeviceTestStatusAddress>
f00019ae:       |  |         4108                       lw      a0,0(a0)
f00019b0:       |  |  /----- c505                       beqz    a0,f00019d8 <test_status_set+0xac>
f00019b2:       |  |  |      65b1                       lui     a1,0xc
f00019b4:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00019b8:       |  |  |  /-- a839                       j       f00019d6 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f00019ba:       \--|--|--|-> 1000e517           auipc   a0,0x1000e
f00019be:          |  |  |   77250513           addi    a0,a0,1906 # 1012c <_non_volatile_scratch_end+0xffd012c>
f00019c2:          |  |  |   4581                       li      a1,0
f00019c4:          |  |  |   28c1                       jal     f0001a94 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f00019c6:          \--|--|-> 00002517           auipc   a0,0x2
f00019ca:             |  |   a1e50513           addi    a0,a0,-1506 # f00033e4 <kDeviceTestStatusAddress>
f00019ce:             |  |   4108                       lw      a0,0(a0)
f00019d0:             +--|-- c501                       beqz    a0,f00019d8 <test_status_set+0xac>
f00019d2:             |  |   65a5                       lui     a1,0x9
f00019d4:             |  |   05b5                       addi    a1,a1,13
f00019d6:             |  \-> c10c                       sw      a1,0(a0)
f00019d8:             \----> 2009                       jal     f00019da <abort>

f00019da <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
f00019da:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
f00019de:       \-- bff5                        j       f00019da <abort>

f00019e0 <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
f00019e0:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
f00019e4:       8082                    ret

f00019e6 <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
f00019e6:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
f00019ea:       8082                    ret

f00019ec <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
f00019ec:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
f00019f0:       8082                    ret

f00019f2 <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
f00019f2:              7179                     addi    sp,sp,-48
f00019f4:              c606                     sw      ra,12(sp)
f00019f6:              c422                     sw      s0,8(sp)
f00019f8:              c226                     sw      s1,4(sp)
f00019fa:              842a                     mv      s0,a0
f00019fc:              d646                     sw      a7,44(sp)
f00019fe:              d442                     sw      a6,40(sp)
f0001a00:              d23e                     sw      a5,36(sp)
f0001a02:              d03a                     sw      a4,32(sp)
f0001a04:              ce36                     sw      a3,28(sp)
f0001a06:              cc32                     sw      a2,24(sp)
f0001a08:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
f0001a0a:              4148                     lw      a0,4(a0)
f0001a0c:              800005b7                 lui     a1,0x80000
f0001a10:              fff58613                 addi    a2,a1,-1 # 7fffffff <_non_volatile_scratch_end+0x8ffbffff>
f0001a14:              4581                     li      a1,0
f0001a16:              23f000ef                 jal     ra,f0002454 <memchr>
f0001a1a:              4054                     lw      a3,4(s0)
f0001a1c:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
f0001a20:              02f00593                 li      a1,47
f0001a24:              8536                     mv      a0,a3
f0001a26:              2dd000ef                 jal     ra,f0002502 <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
f0001a2a:       /----- c501                     beqz    a0,f0001a32 <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
f0001a2c:       |      00150693                 addi    a3,a0,1
f0001a30:       |  /-- a011                     j       f0001a34 <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
f0001a32:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001a34:          \-> 4008                     lw      a0,0(s0)
f0001a36:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
f0001a38:       /----- 00a5ea63                 bltu    a1,a0,f0001a4c <base_log_internal_core+0x5a>
f0001a3c:       |      050a                     slli    a0,a0,0x2
f0001a3e:       |      00001597                 auipc   a1,0x1
f0001a42:       |      6f658593                 addi    a1,a1,1782 # f0003134 <top_earlgrey_plic_interrupt_for_peripheral+0x368>
f0001a46:       |      952e                     add     a0,a0,a1
f0001a48:       |      410c                     lw      a1,0(a0)
f0001a4a:       |  /-- a029                     j       f0001a54 <base_log_internal_core+0x62>
f0001a4c:       \--|-> 00001597                 auipc   a1,0x1
f0001a50:          |   6e458593                 addi    a1,a1,1764 # f0003130 <top_earlgrey_plic_interrupt_for_peripheral+0x364>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
f0001a54:          \-> f0000497                 auipc   s1,0xf0000
f0001a58:              64448493                 addi    s1,s1,1604 # e0002098 <base_log_internal_core.global_log_counter>
f0001a5c:              0004d603                 lhu     a2,0(s1)
f0001a60:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001a62:              00001517                 auipc   a0,0x1
f0001a66:              6b650513                 addi    a0,a0,1718 # f0003118 <top_earlgrey_plic_interrupt_for_peripheral+0x34c>
f0001a6a:              2865                     jal     f0001b22 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
f0001a6c:              00049503                 lh      a0,0(s1)
f0001a70:              0505                     addi    a0,a0,1
f0001a72:              00a49023                 sh      a0,0(s1)
f0001a76:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
f0001a78:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
f0001a7a:              4808                     lw      a0,16(s0)
f0001a7c:              084c                     addi    a1,sp,20
f0001a7e:              28d9                     jal     f0001b54 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
f0001a80:              00001517                 auipc   a0,0x1
f0001a84:              6a750513                 addi    a0,a0,1703 # f0003127 <top_earlgrey_plic_interrupt_for_peripheral+0x35b>
f0001a88:              2869                     jal     f0001b22 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
f0001a8a:              4492                     lw      s1,4(sp)
f0001a8c:              4422                     lw      s0,8(sp)
f0001a8e:              40b2                     lw      ra,12(sp)
f0001a90:              6145                     addi    sp,sp,48
f0001a92:              8082                     ret

f0001a94 <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
f0001a94:              1101                     addi    sp,sp,-32
f0001a96:              ce46                     sw      a7,28(sp)
f0001a98:              cc42                     sw      a6,24(sp)
f0001a9a:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
f0001a9c:              00002797                 auipc   a5,0x2
f0001aa0:              94c78793                 addi    a5,a5,-1716 # f00033e8 <kDeviceLogBypassUartAddress>
f0001aa4:              439c                     lw      a5,0(a5)
f0001aa6:              c83a                     sw      a4,16(sp)
f0001aa8:              c636                     sw      a3,12(sp)
f0001aaa:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001aac:              c388                     sw      a0,0(a5)
f0001aae:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
f0001ab0:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001ab2:       /----- c989                     beqz    a1,f0001ac4 <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
f0001ab4:       |  /-> 4512                     lw      a0,4(sp)
f0001ab6:       |  |   00450613                 addi    a2,a0,4
f0001aba:       |  |   c232                     sw      a2,4(sp)
f0001abc:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001abe:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001ac0:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
f0001ac2:       |  \-- f9ed                     bnez    a1,f0001ab4 <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
f0001ac4:       \----> 6105                     addi    sp,sp,32
f0001ac6:              8082                     ret

f0001ac8 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
f0001ac8:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
f0001aca:       8082                    ret

f0001acc <base_uart_stdout>:
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:79
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
f0001acc:       f0000597                auipc   a1,0xf0000
f0001ad0:       5d058593                addi    a1,a1,1488 # e000209c <base_stdout>
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:66
  base_stdout = out;
f0001ad4:       c188                    sw      a0,0(a1)
f0001ad6:       00000517                auipc   a0,0x0
f0001ada:       00c50513                addi    a0,a0,12 # f0001ae2 <base_dev_uart>
f0001ade:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:82
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
f0001ae0:       8082                    ret

f0001ae2 <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:69
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
f0001ae2:                 1101                  addi    sp,sp,-32
f0001ae4:                 ce06                  sw      ra,28(sp)
f0001ae6:                 cc22                  sw      s0,24(sp)
f0001ae8:                 ca26                  sw      s1,20(sp)
f0001aea:                 c84a                  sw      s2,16(sp)
f0001aec:                 c64e                  sw      s3,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001aee:       /-------- c20d                  beqz    a2,f0001b10 <base_dev_uart+0x2e>
f0001af0:       |         8432                  mv      s0,a2
f0001af2:       |         892e                  mv      s2,a1
f0001af4:       |         89aa                  mv      s3,a0
f0001af6:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:72
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
f0001af8:       |  /----> 00990533              add     a0,s2,s1
f0001afc:       |  |      00054583              lbu     a1,0(a0)
f0001b00:       |  |      854e                  mv      a0,s3
f0001b02:       |  |      2f59                  jal     f0002298 <dif_uart_byte_send_polled>
f0001b04:       |  |  /-- e519                  bnez    a0,f0001b12 <base_dev_uart+0x30>
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001b06:       |  |  |   0485                  addi    s1,s1,1
f0001b08:       |  \--|-- fe9418e3              bne     s0,s1,f0001af8 <base_dev_uart+0x16>
f0001b0c:       |     |   84a2                  mv      s1,s0
f0001b0e:       |     +-- a011                  j       f0001b12 <base_dev_uart+0x30>
f0001b10:       \-----|-> 4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:77
}
f0001b12:             \-> 8526                  mv      a0,s1
f0001b14:                 49b2                  lw      s3,12(sp)
f0001b16:                 4942                  lw      s2,16(sp)
f0001b18:                 44d2                  lw      s1,20(sp)
f0001b1a:                 4462                  lw      s0,24(sp)
f0001b1c:                 40f2                  lw      ra,28(sp)
f0001b1e:                 6105                  addi    sp,sp,32
f0001b20:                 8082                  ret

f0001b22 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84

size_t base_printf(const char *format, ...) {
f0001b22:       7179                    addi    sp,sp,-48
f0001b24:       c606                    sw      ra,12(sp)
f0001b26:       d646                    sw      a7,44(sp)
f0001b28:       d442                    sw      a6,40(sp)
f0001b2a:       d23e                    sw      a5,36(sp)
f0001b2c:       d03a                    sw      a4,32(sp)
f0001b2e:       ce36                    sw      a3,28(sp)
f0001b30:       cc32                    sw      a2,24(sp)
f0001b32:       ca2e                    sw      a1,20(sp)
f0001b34:       f0000597                auipc   a1,0xf0000
f0001b38:       56858593                addi    a1,a1,1384 # e000209c <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
f0001b3c:       4190                    lw      a2,0(a1)
f0001b3e:       41cc                    lw      a1,4(a1)
f0001b40:       872a                    mv      a4,a0
f0001b42:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
f0001b44:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001b46:       0854                    addi    a3,sp,20
f0001b48:       8532                    mv      a0,a2
f0001b4a:       863a                    mv      a2,a4
f0001b4c:       200d                    jal     f0001b6e <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
f0001b4e:       40b2                    lw      ra,12(sp)
f0001b50:       6145                    addi    sp,sp,48
f0001b52:       8082                    ret

f0001b54 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
f0001b54:       f0000697                auipc   a3,0xf0000
f0001b58:       54868693                addi    a3,a3,1352 # e000209c <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001b5c:       4290                    lw      a2,0(a3)
f0001b5e:       42d4                    lw      a3,4(a3)
f0001b60:       872e                    mv      a4,a1
f0001b62:       87aa                    mv      a5,a0
f0001b64:       8532                    mv      a0,a2
f0001b66:       85b6                    mv      a1,a3
f0001b68:       863e                    mv      a2,a5
f0001b6a:       86ba                    mv      a3,a4
f0001b6c:       a009                    j       f0001b6e <base_vfprintf>

f0001b6e <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
f0001b6e:                                                                    715d                       addi    sp,sp,-80
f0001b70:                                                                    c686                       sw      ra,76(sp)
f0001b72:                                                                    c4a2                       sw      s0,72(sp)
f0001b74:                                                                    c2a6                       sw      s1,68(sp)
f0001b76:                                                                    c0ca                       sw      s2,64(sp)
f0001b78:                                                                    de4e                       sw      s3,60(sp)
f0001b7a:                                                                    dc52                       sw      s4,56(sp)
f0001b7c:                                                                    da56                       sw      s5,52(sp)
f0001b7e:                                                                    d85a                       sw      s6,48(sp)
f0001b80:                                                                    d65e                       sw      s7,44(sp)
f0001b82:                                                                    d462                       sw      s8,40(sp)
f0001b84:                                                                    d266                       sw      s9,36(sp)
f0001b86:                                                                    d06a                       sw      s10,32(sp)
f0001b88:                                                                    ce6e                       sw      s11,28(sp)
f0001b8a:                                                                    8cb2                       mv      s9,a2
f0001b8c:                                                                    892a                       mv      s2,a0
f0001b8e:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
f0001b90:                                                                /-- c199                       beqz    a1,f0001b96 <base_vfprintf+0x28>
f0001b92:                                                                |   89ae                       mv      s3,a1
f0001b94:                                                             /--|-- a029                       j       f0001b9e <base_vfprintf+0x30>
f0001b96:                                                             |  \-> 00000997           auipc   s3,0x0
f0001b9a:                                                             |      f3298993           addi    s3,s3,-206 # f0001ac8 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
f0001b9e:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
f0001ba0:                                                                    000cc503           lbu     a0,0(s9)
f0001ba4:       /----------------------------------------------------------- 42050563           beqz    a0,f0001fce <base_vfprintf+0x460>
f0001ba8:       |                                                            4a81                       li      s5,0
f0001baa:       |                                                            02500c13           li      s8,37
f0001bae:       |                                                            4d25                       li      s10,9
f0001bb0:       |                                                            4a29                       li      s4,10
f0001bb2:       |                                                            658d                       lui     a1,0x3
f0001bb4:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_manifest_code_end+0x65e>
f0001bb8:       |                                                            c02e                       sw      a1,0(sp)
f0001bba:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
f0001bbc:       |        |                                               /-> 0ff57413           andi    s0,a0,255
f0001bc0:       |        |                                            /--|-- 01840963           beq     s0,s8,f0001bd2 <base_vfprintf+0x64>
f0001bc4:       |        |                                            +--|-- c419                       beqz    s0,f0001bd2 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
f0001bc6:       |        |                                            |  |   009c8533           add     a0,s9,s1
f0001bca:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
f0001bce:       |        |                                            |  |   0485                       addi    s1,s1,1
f0001bd0:       |        |                                            |  \-- b7f5                       j       f0001bbc <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
f0001bd2:       |        |                                            \--/-X c491                       beqz    s1,f0001bde <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
f0001bd4:       |        |                                               |   854a                       mv      a0,s2
f0001bd6:       |        |                                               |   85e6                       mv      a1,s9
f0001bd8:       |        |                                               |   8626                       mv      a2,s1
f0001bda:       |        |                                               |   9982                       jalr    s3
f0001bdc:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
f0001bde:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,f0001fd0 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
f0001be2:       |  |     |                                                   009c8533           add     a0,s9,s1
f0001be6:       |  |     |                                                   00154603           lbu     a2,1(a0)
f0001bea:       |  |     |                                                   02100713           li      a4,33
f0001bee:       |  |     |                                            /----- 00e61863           bne     a2,a4,f0001bfe <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001bf2:       |  |     |                                            |      00254583           lbu     a1,2(a0)
f0001bf6:       |  |     |                                            |      00250693           addi    a3,a0,2
f0001bfa:       |  |     |                                            |      4b05                       li      s6,1
f0001bfc:       |  |     |                                            |  /-- a029                       j       f0001c06 <base_vfprintf+0x98>
f0001bfe:       |  |     |                                            \--|-> 4b01                       li      s6,0
f0001c00:       |  |     |                                               |   00150693           addi    a3,a0,1
f0001c04:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001c06:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,f0001fbc <base_vfprintf+0x44e>
f0001c0a:       |  |  |  |                                                   4481                       li      s1,0
f0001c0c:       |  |  |  |                                                   4b81                       li      s7,0
f0001c0e:       |  |  |  |                                                   4501                       li      a0,0
f0001c10:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
f0001c14:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
f0001c18:       |  |  |  |                                                   00168c93           addi    s9,a3,1
f0001c1c:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
f0001c20:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001c24:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
f0001c28:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,f0001c5e <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
f0001c2c:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
f0001c30:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,f0001c46 <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
f0001c32:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
f0001c36:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
f0001c38:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001c3c:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001c40:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
f0001c42:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,f0001c1c <base_vfprintf+0xae>
f0001c44:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       f0001fbc <base_vfprintf+0x44e>
f0001c46:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
f0001c4a:       |  |  |  |                                   |     |  |      03000613           li      a2,48
f0001c4e:       |  |  |  |                                   |     |  |      02000513           li      a0,32
f0001c52:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,f0001c32 <base_vfprintf+0xc4>
f0001c56:       |  |  |  |                                   |     |         03000513           li      a0,48
f0001c5a:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
f0001c5c:       |  |  |  |                                   |     \-------- b7c5                       j       f0001c3c <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
f0001c5e:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,f0001c66 <base_vfprintf+0xf8>
f0001c60:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,f0001c6e <base_vfprintf+0x100>
f0001c64:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       f0001ff0 <base_vfprintf+0x482>
f0001c66:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
f0001c6a:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,f0001ff0 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001c6e:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
f0001c72:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,f0001cc4 <base_vfprintf+0x156>
f0001c76:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
f0001c78:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
f0001c7c:       |  |  |  |  |                                         |      4cc58593           addi    a1,a1,1228 # f0003144 <top_earlgrey_plic_interrupt_for_peripheral+0x378>
f0001c80:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
f0001c82:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
f0001c84:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
f0001c86:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,f0001f3e <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
f0001c8a:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
f0001c8c:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
f0001c90:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
f0001c92:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
f0001c96:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,f0001cae <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
f0001c9a:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
f0001c9e:       |  |  |  |  |  |                                      |  |   54158593           addi    a1,a1,1345 # f00031db <top_earlgrey_plic_interrupt_for_peripheral+0x40f>
f0001ca2:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
f0001ca4:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
f0001ca6:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
f0001ca8:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
f0001caa:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001cae:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
f0001cb2:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
f0001cb6:       |  |  |  |  |  |                                      |      53c80813           addi    a6,a6,1340 # f00031ee <kDigitsLow>
f0001cba:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
f0001cbc:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
f0001cbe:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
f0001cc0:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
f0001cc2:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       f0001f0a <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001cc4:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
f0001cc8:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,f0001d02 <base_vfprintf+0x194>
f0001ccc:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,f0001f3e <base_vfprintf+0x3d0>
f0001cd0:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,f0001f3e <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
f0001cd4:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
f0001cd8:       |  |  |  |  |  |        |                                |   50558593           addi    a1,a1,1285 # f00031d9 <top_earlgrey_plic_interrupt_for_peripheral+0x40d>
f0001cdc:       |  |  |  |  |  |        |                             /--|-- a851                       j       f0001d70 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
f0001cde:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,f0001d02 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
f0001ce2:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
f0001ce4:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
f0001ce8:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001cea:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
f0001cec:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
f0001cf0:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001cf2:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001cf4:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
f0001cf8:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
f0001cfc:       |  |  |  |  |  |        |                             |  |   52388893           addi    a7,a7,1315 # f000321b <kDigitsHigh>
f0001d00:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       f0001ee4 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
f0001d02:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
f0001d04:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
f0001d08:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
f0001d0a:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
f0001d0c:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
f0001d10:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
f0001d14:       |  |  |  |  |  |        |           |                 |      50b80813           addi    a6,a6,1291 # f000321b <kDigitsHigh>
f0001d18:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       f0001f04 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
f0001d1a:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,f0001f3e <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
f0001d1e:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
f0001d20:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
f0001d24:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001d26:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
f0001d28:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
f0001d2c:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001d2e:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001d30:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
f0001d34:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
f0001d38:       |  |  |  |  |  |        |        |  |                 |      4e788893           addi    a7,a7,1255 # f000321b <kDigitsHigh>
f0001d3c:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       f0001f32 <base_vfprintf+0x3c4>
f0001d3e:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
f0001d40:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
f0001d44:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
f0001d46:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
f0001d48:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,f0001f58 <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
f0001d4c:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,f0001fb0 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
f0001d50:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
f0001d54:       |  |  |  |  |  |  |     |  |  |  |  |                 |      49058593           addi    a1,a1,1168 # f00031e0 <top_earlgrey_plic_interrupt_for_peripheral+0x414>
f0001d58:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
f0001d5a:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       f0001f48 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
f0001d5c:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,f0001f3e <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
f0001d60:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
f0001d62:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
f0001d66:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
f0001d68:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
f0001d6a:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
f0001d6e:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
f0001d70:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
f0001d72:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       f0001f48 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
f0001d74:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,f0001f3e <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
f0001d78:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
f0001d7a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
f0001d7e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
f0001d80:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
f0001d82:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
f0001d86:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
f0001d8a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        46880813           addi    a6,a6,1128 # f00031ee <kDigitsLow>
f0001d8e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
f0001d90:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       f0001f06 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
f0001d92:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,f0001f3e <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001d96:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
f0001d9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     44758593           addi    a1,a1,1095 # f00031dd <top_earlgrey_plic_interrupt_for_peripheral+0x411>
f0001d9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
f0001da0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001da2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
f0001da4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
f0001da6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
f0001daa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
f0001dac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001dae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
f0001db2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
f0001db6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     43c80813           addi    a6,a6,1084 # f00031ee <kDigitsLow>
f0001dba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
f0001dbc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
f0001dc0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
f0001dc2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001dc4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
f0001dc6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     f00020e0 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
f0001dc8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
f0001dcc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       f0001f4e <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
f0001dce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
f0001dd0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
f0001dd4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
f0001dd6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
f0001dd8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
f0001dda:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
f0001dde:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
f0001de2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001de4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
f0001de6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
f0001de8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
f0001dec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     f000215e <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
f0001dee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001df0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001df2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
f0001df6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
f0001dfa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001dfc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
f0001dfe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,f0001df6 <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001e00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
f0001e04:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f0001e08:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3e158593           addi    a1,a1,993 # f00031e5 <top_earlgrey_plic_interrupt_for_peripheral+0x419>
f0001e0c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001e0e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001e10:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001e12:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001e14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
f0001e18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001e1a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001e1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f0001e20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f0001e24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3c658593           addi    a1,a1,966 # f00031e6 <top_earlgrey_plic_interrupt_for_peripheral+0x41a>
f0001e28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001e2a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
f0001e2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001e2e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
f0001e30:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
f0001e34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  3a058593           addi    a1,a1,928 # f00031d0 <top_earlgrey_plic_interrupt_for_peripheral+0x404>
f0001e38:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
f0001e3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001e3c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001e3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
f0001e42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,f0001f68 <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
f0001e46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
f0001e4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               3a258593           addi    a1,a1,930 # f00031e8 <top_earlgrey_plic_interrupt_for_peripheral+0x41c>
f0001e4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001e50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001e52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001e54:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001e58:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
f0001e5a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
f0001e5c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001e5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001e60:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001e62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001e64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
f0001e68:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               38a80813           addi    a6,a6,906 # f00031ee <kDigitsLow>
f0001e6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
f0001e6e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001e70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
f0001e72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
f0001e74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
f0001e76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     f00020e0 <write_digits>
f0001e78:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
f0001e7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
f0001e7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               37058593           addi    a1,a1,880 # f00031ea <top_earlgrey_plic_interrupt_for_peripheral+0x41e>
f0001e82:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001e84:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001e86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001e88:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
f0001e8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       f0001f82 <base_vfprintf+0x414>
f0001e8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
f0001e8e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
f0001e92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
f0001e94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,f0001f9a <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
f0001e98:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001e9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
f0001e9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001ea0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
f0001ea2:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       f0001f48 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
f0001ea4:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,f0001f3e <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
f0001ea8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
f0001eaa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
f0001eae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001eb0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001eb2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
f0001eb6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
f0001eba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         33880813           addi    a6,a6,824 # f00031ee <kDigitsLow>
f0001ebe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
f0001ec0:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       f0001f06 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
f0001ec2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,f0001eee <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
f0001ec6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
f0001ec8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
f0001ecc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001ece:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
f0001ed0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
f0001ed4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001ed6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001ed8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
f0001edc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
f0001ee0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   31288893           addi    a7,a7,786 # f00031ee <kDigitsLow>
f0001ee4:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
f0001ee6:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
f0001ee8:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
f0001eea:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
f0001eec:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       f0001f3a <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
f0001eee:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
f0001ef0:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
f0001ef4:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
f0001ef6:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
f0001ef8:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
f0001efc:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
f0001f00:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      2f280813           addi    a6,a6,754 # f00031ee <kDigitsLow>
f0001f04:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
f0001f06:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
f0001f08:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
f0001f0a:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
f0001f0c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     f00020e0 <write_digits>
f0001f0e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       f0001f4c <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
f0001f10:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,f0001f3e <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
f0001f14:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
f0001f16:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
f0001f1a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0001f1c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
f0001f1e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
f0001f22:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0001f24:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001f26:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
f0001f2a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
f0001f2e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   2c488893           addi    a7,a7,708 # f00031ee <kDigitsLow>
f0001f32:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
f0001f34:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
f0001f36:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
f0001f38:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
f0001f3a:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     f0001ffc <hex_dump>
f0001f3c:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       f0001f4c <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
f0001f3e:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
f0001f42:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   2ed58593           addi    a1,a1,749 # f000322b <kUnknownSpec>
f0001f46:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
f0001f48:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
f0001f4a:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
f0001f4c:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
f0001f4e:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
f0001f52:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,f0001bba <base_vfprintf+0x4c>
f0001f56:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       f0001fd0 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
f0001f58:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
f0001f5c:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
f0001f60:       |  |  |     |     |  |                 |  |  |  |  |         29280813           addi    a6,a6,658 # f00031ee <kDigitsLow>
f0001f64:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
f0001f66:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       f0001f06 <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001f68:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
f0001f6a:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
f0001f6e:       |  |  |     |     |  |                    |     |  |         28480813           addi    a6,a6,644 # f00031ee <kDigitsLow>
f0001f72:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
f0001f74:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
f0001f76:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
f0001f78:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
f0001f7a:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
f0001f7c:       |  |  |     |     |  |                    |     |  |         2295                       jal     f00020e0 <write_digits>
f0001f7e:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
f0001f82:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
f0001f86:       |  |  |     |     |  |                    |     |            26a58593           addi    a1,a1,618 # f00031ec <top_earlgrey_plic_interrupt_for_peripheral+0x420>
f0001f8a:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
f0001f8c:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
f0001f8e:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
f0001f90:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
f0001f94:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
f0001f98:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       f0001f4e <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001f9a:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
f0001f9c:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0001f9e:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
f0001fa2:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
f0001fa6:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0001fa8:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,f0001f9e <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
f0001faa:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
f0001fae:       |  |  |     |     |  +-------------------------------------- bf69                       j       f0001f48 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
f0001fb0:       |  |  |     |     \--|-------------------------------------> 00000597           auipc   a1,0x0
f0001fb4:       |  |  |     |        |                                       7a858593           addi    a1,a1,1960 # f0002758 <rom_printf.kHexTable+0x134>
f0001fb8:       |  |  |     |        |                                       4615                       li      a2,5
f0001fba:       |  |  |     |        \-------------------------------------- b779                       j       f0001f48 <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
f0001fbc:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
f0001fc0:       |  |        |                                                24258593           addi    a1,a1,578 # f00031fe <kErrorNul>
f0001fc4:       |  |        |                                                4645                       li      a2,17
f0001fc6:       |  |        |                                            /-> 854a                       mv      a0,s2
f0001fc8:       |  |        |                                            |   9982                       jalr    s3
f0001fca:       |  |        |                                            |   9aaa                       add     s5,s5,a0
f0001fcc:       |  +--------|--------------------------------------------|-- a011                       j       f0001fd0 <base_vfprintf+0x462>
f0001fce:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
f0001fd0:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
f0001fd2:                   |                                            |   4df2                       lw      s11,28(sp)
f0001fd4:                   |                                            |   5d02                       lw      s10,32(sp)
f0001fd6:                   |                                            |   5c92                       lw      s9,36(sp)
f0001fd8:                   |                                            |   5c22                       lw      s8,40(sp)
f0001fda:                   |                                            |   5bb2                       lw      s7,44(sp)
f0001fdc:                   |                                            |   5b42                       lw      s6,48(sp)
f0001fde:                   |                                            |   5ad2                       lw      s5,52(sp)
f0001fe0:                   |                                            |   5a62                       lw      s4,56(sp)
f0001fe2:                   |                                            |   59f2                       lw      s3,60(sp)
f0001fe4:                   |                                            |   4906                       lw      s2,64(sp)
f0001fe6:                   |                                            |   4496                       lw      s1,68(sp)
f0001fe8:                   |                                            |   4426                       lw      s0,72(sp)
f0001fea:                   |                                            |   40b6                       lw      ra,76(sp)
f0001fec:                   |                                            |   6161                       addi    sp,sp,80
f0001fee:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
f0001ff0:                   \--------------------------------------------|-> 00001597           auipc   a1,0x1
f0001ff4:                                                                |   21f58593           addi    a1,a1,543 # f000320f <kErrorTooWide>
f0001ff8:                                                                |   4631                       li      a2,12
f0001ffa:                                                                \-- b7f1                       j       f0001fc6 <base_vfprintf+0x458>

f0001ffc <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
f0001ffc:                    715d                       addi    sp,sp,-80
f0001ffe:                    c686                       sw      ra,76(sp)
f0002000:                    c4a2                       sw      s0,72(sp)
f0002002:                    c2a6                       sw      s1,68(sp)
f0002004:                    c0ca                       sw      s2,64(sp)
f0002006:                    de4e                       sw      s3,60(sp)
f0002008:                    dc52                       sw      s4,56(sp)
f000200a:                    da56                       sw      s5,52(sp)
f000200c:                    d85a                       sw      s6,48(sp)
f000200e:                    d65e                       sw      s7,44(sp)
f0002010:                    d462                       sw      s8,40(sp)
f0002012:                    d266                       sw      s9,36(sp)
f0002014:                    d06a                       sw      s10,32(sp)
f0002016:                    8bc6                       mv      s7,a7
f0002018:                    8a42                       mv      s4,a6
f000201a:                    8b36                       mv      s6,a3
f000201c:                    8ab2                       mv      s5,a2
f000201e:                    892e                       mv      s2,a1
f0002020:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
f0002022:          /-------- 02e6fc63           bgeu    a3,a4,f000205a <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
f0002026:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
f000202a:          |         850a                       mv      a0,sp
f000202c:          |         02000613           li      a2,32
f0002030:          |         85be                       mv      a1,a5
f0002032:          |         26c1                       jal     f00023f2 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0002034:          +-------- c09d                       beqz    s1,f000205a <hex_dump+0x5e>
f0002036:          |         4c01                       li      s8,0
f0002038:          |  /----> 02000513           li      a0,32
f000203c:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
f000203e:          |  |  /-- 00a4e463           bltu    s1,a0,f0002046 <hex_dump+0x4a>
f0002042:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0002046:          |  |  \-> 858a                       mv      a1,sp
f0002048:          |  |      854e                       mv      a0,s3
f000204a:          |  |      8622                       mv      a2,s0
f000204c:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
f000204e:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0002050:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0002052:          |  \----- f0fd                       bnez    s1,f0002038 <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0002054:          |     /-- 000b1663           bnez    s6,f0002060 <hex_dump+0x64>
f0002058:       /--|-----|-- a0ad                       j       f00020c2 <hex_dump+0xc6>
f000205a:       |  \-----|-> 4c01                       li      s8,0
f000205c:       +--------|-- 060b0363           beqz    s6,f00020c2 <hex_dump+0xc6>
f0002060:       |        \-> 4401                       li      s0,0
f0002062:       |            4601                       li      a2,0
f0002064:       |            fffb0493           addi    s1,s6,-1
f0002068:       |            8b0a                       mv      s6,sp
f000206a:       |            02000c93           li      s9,32
f000206e:       |            5d7d                       li      s10,-1
f0002070:       |     /----> 8526                       mv      a0,s1
f0002072:       |     |  /-- 000a1363           bnez    s4,f0002078 <hex_dump+0x7c>
f0002076:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
f0002078:       |     |  \-> 9556                       add     a0,a0,s5
f000207a:       |     |      00054503           lbu     a0,0(a0)
f000207e:       |     |      00455593           srli    a1,a0,0x4
f0002082:       |     |      95de                       add     a1,a1,s7
f0002084:       |     |      00058583           lb      a1,0(a1)
f0002088:       |     |      00cb06b3           add     a3,s6,a2
f000208c:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0002090:       |     |      893d                       andi    a0,a0,15
f0002092:       |     |      955e                       add     a0,a0,s7
f0002094:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
f0002098:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f000209a:       |     |      00a680a3           sb      a0,1(a3)
f000209e:       |     |  /-- 01961963           bne     a2,s9,f00020b0 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
f00020a2:       |     |  |   858a                       mv      a1,sp
f00020a4:       |     |  |   02000613           li      a2,32
f00020a8:       |     |  |   854e                       mv      a0,s3
f00020aa:       |     |  |   9902                       jalr    s2
f00020ac:       |     |  |   4601                       li      a2,0
f00020ae:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f00020b0:       |     |  \-> 14fd                       addi    s1,s1,-1
f00020b2:       |     |      0405                       addi    s0,s0,1
f00020b4:       |     \----- fba49ee3           bne     s1,s10,f0002070 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
f00020b8:       +----------- c609                       beqz    a2,f00020c2 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
f00020ba:       |            858a                       mv      a1,sp
f00020bc:       |            854e                       mv      a0,s3
f00020be:       |            9902                       jalr    s2
f00020c0:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
f00020c2:       \----------> 8562                       mv      a0,s8
f00020c4:                    5d02                       lw      s10,32(sp)
f00020c6:                    5c92                       lw      s9,36(sp)
f00020c8:                    5c22                       lw      s8,40(sp)
f00020ca:                    5bb2                       lw      s7,44(sp)
f00020cc:                    5b42                       lw      s6,48(sp)
f00020ce:                    5ad2                       lw      s5,52(sp)
f00020d0:                    5a62                       lw      s4,56(sp)
f00020d2:                    59f2                       lw      s3,60(sp)
f00020d4:                    4906                       lw      s2,64(sp)
f00020d6:                    4496                       lw      s1,68(sp)
f00020d8:                    4426                       lw      s0,72(sp)
f00020da:                    40b6                       lw      ra,76(sp)
f00020dc:                    6161                       addi    sp,sp,80
f00020de:                    8082                       ret

f00020e0 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
f00020e0:              7179                     addi    sp,sp,-48
f00020e2:              d606                     sw      ra,44(sp)
f00020e4:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
f00020e6:       /----- ca05                     beqz    a2,f0002116 <write_digits+0x36>
f00020e8:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f00020ea:       |      02b10293                 addi    t0,sp,43
f00020ee:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
f00020f0:       |  |   02f65633                 divu    a2,a2,a5
f00020f4:       |  |   02f605b3                 mul     a1,a2,a5
f00020f8:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
f00020fc:       |  |   95c2                     add     a1,a1,a6
f00020fe:       |  |   00058e03                 lb      t3,0(a1)
f0002102:       |  |   007285b3                 add     a1,t0,t2
f0002106:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f000210a:       |  |   13fd                     addi    t2,t2,-1
f000210c:       |  \-- fef371e3                 bgeu    t1,a5,f00020ee <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0002110:       |      40700633                 neg     a2,t2
f0002114:       |  /-- a031                     j       f0002120 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
f0002116:       \--|-> 00080583                 lb      a1,0(a6)
f000211a:          |   02b105a3                 sb      a1,43(sp)
f000211e:          |   4605                     li      a2,1
f0002120:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0002122:          /-- c291                     beqz    a3,f0002126 <write_digits+0x46>
f0002124:          |   85b6                     mv      a1,a3
f0002126:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
f000212a:          /-- 00d5e463                 bltu    a1,a3,f0002132 <write_digits+0x52>
f000212e:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0002132:       /--\-X 00b67e63                 bgeu    a2,a1,f000214e <write_digits+0x6e>
f0002136:       |      40c586b3                 sub     a3,a1,a2
f000213a:       |      007c                     addi    a5,sp,12
f000213c:       |      40c78633                 sub     a2,a5,a2
f0002140:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
f0002142:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0002146:       |  |   16fd                     addi    a3,a3,-1
f0002148:       |  |   167d                     addi    a2,a2,-1
f000214a:       |  \-- fee5                     bnez    a3,f0002142 <write_digits+0x62>
f000214c:       |      862e                     mv      a2,a1
f000214e:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
f0002150:              8d91                     sub     a1,a1,a2
f0002152:              02058593                 addi    a1,a1,32
f0002156:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
f0002158:              50b2                     lw      ra,44(sp)
f000215a:              6145                     addi    sp,sp,48
f000215c:              8082                     ret

f000215e <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
f000215e:              00052813                 slti    a6,a0,0
f0002162:              41f55793                 srai    a5,a0,0x1f
f0002166:              8fe9                     and     a5,a5,a0
f0002168:              8bfd                     andi    a5,a5,31
f000216a:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
f000216e:              00e87833                 and     a6,a6,a4
f0002172:              02000713                 li      a4,32
f0002176:          /-- 00081363                 bnez    a6,f000217c <status_extract+0x1e>
f000217a:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
f000217c:          \-> 00271813                 slli    a6,a4,0x2
f0002180:              f0000797                 auipc   a5,0xf0000
f0002184:              e4478793                 addi    a5,a5,-444 # e0001fc4 <status_codes>
f0002188:              97c2                     add     a5,a5,a6
f000218a:              439c                     lw      a5,0(a5)
f000218c:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f000218e:              00173593                 seqz    a1,a4
f0002192:       /----- cb1d                     beqz    a4,f00021c8 <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f0002194:       |      00555713                 srli    a4,a0,0x5
f0002198:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
f000219c:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f000219e:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
f00021a2:       |      8a7d                     andi    a2,a2,31
f00021a4:       |      04066613                 ori     a2,a2,64
f00021a8:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
f00021ac:       |      01555613                 srli    a2,a0,0x15
f00021b0:       |      8a7d                     andi    a2,a2,31
f00021b2:       |      04066613                 ori     a2,a2,64
f00021b6:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
f00021ba:       |      8169                     srli    a0,a0,0x1a
f00021bc:       |      897d                     andi    a0,a0,31
f00021be:       |      04056513                 ori     a0,a0,64
f00021c2:       |      00a68123                 sb      a0,2(a3)
f00021c6:       |  /-- a011                     j       f00021ca <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
f00021c8:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
f00021ca:          \-> 0015c513                 xori    a0,a1,1
f00021ce:              8082                     ret

f00021d0 <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
f00021d0:       /----- c581                     beqz    a1,f00021d8 <dif_uart_init+0x8>
f00021d2:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
f00021d4:       |      c188                     sw      a0,0(a1)
f00021d6:       |  /-- a011                     j       f00021da <dif_uart_init+0xa>
f00021d8:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
f00021da:          \-> 8532                     mv      a0,a2
f00021dc:              8082                     ret

f00021de <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:91

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
f00021de:              1101                     addi    sp,sp,-32
f00021e0:              ce06                     sw      ra,28(sp)
f00021e2:              cc22                     sw      s0,24(sp)
f00021e4:              ca26                     sw      s1,20(sp)
f00021e6:              c84a                     sw      s2,16(sp)
f00021e8:              c64e                     sw      s3,12(sp)
f00021ea:              448d                     li      s1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL) {
f00021ec:       /----- cd51                     beqz    a0,f0002288 <dif_uart_configure+0xaa>
f00021ee:       |      892e                     mv      s2,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:96
    return kDifBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
f00021f0:       |      4194                     lw      a3,0(a1)
f00021f2:       +----- cad9                     beqz    a3,f0002288 <dif_uart_configure+0xaa>
f00021f4:       |      00492603                 lw      a2,4(s2)
f00021f8:       +----- ca41                     beqz    a2,f0002288 <dif_uart_configure+0xaa>
f00021fa:       |      842a                     mv      s0,a0
f00021fc:       |      0016e537                 lui     a0,0x16e
f0002200:       |      36050513                 addi    a0,a0,864 # 16e360 <_ottf_size+0x12e360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:118
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
f0002204:       |      8d35                     xor     a0,a0,a3
f0002206:       |      016e35b7                 lui     a1,0x16e3
f000220a:       |      60058593                 addi    a1,a1,1536 # 16e3600 <_ottf_size+0x16a3600>
f000220e:       |      8db1                     xor     a1,a1,a2
f0002210:       |      00b56733                 or      a4,a0,a1
f0002214:       |      6541                     lui     a0,0x10
f0002216:       |      fff50993                 addi    s3,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
f000221a:       |      4581                     li      a1,0
f000221c:       |      854e                     mv      a0,s3
f000221e:       |  /-- cb01                     beqz    a4,f000222e <dif_uart_configure+0x50>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:120
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
f0002220:       |  |   01469513                 slli    a0,a3,0x14
f0002224:       |  |   00c6d593                 srli    a1,a3,0xc
f0002228:       |  |   4681                     li      a3,0
f000222a:       |  |   4701                     li      a4,0
f000222c:       |  |   2079                     jal     f00022ba <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:122
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
f000222e:       |  \-> 01357633                 and     a2,a0,s3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:125

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
f0002232:       |      8d31                     xor     a0,a0,a2
f0002234:       |      8d4d                     or      a0,a0,a1
f0002236:       +----- e929                     bnez    a0,f0002288 <dif_uart_configure+0xaa>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:47
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
f0002238:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000223a:       |      00052823                 sw      zero,16(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:53
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
f000223e:       |      4008                     lw      a0,0(s0)
f0002240:       |      458d                     li      a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002242:       |      d10c                     sw      a1,32(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:55
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
f0002244:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002246:       |      02052423                 sw      zero,40(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
f000224a:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000224c:       |      02052823                 sw      zero,48(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f0002250:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002252:       |      00052223                 sw      zero,4(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
f0002256:       |      4008                     lw      a0,0(s0)
f0002258:       |      55fd                     li      a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000225a:       |      c10c                     sw      a1,0(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifToggleEnabled) {
f000225c:       |      00892683                 lw      a3,8(s2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0002260:       |      01061513                 slli    a0,a2,0x10
f0002264:       |      4605                     li      a2,1
f0002266:       |      04300593                 li      a1,67
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
f000226a:       |  /-- 00c68363                 beq     a3,a2,f0002270 <dif_uart_configure+0x92>
f000226e:       |  |   458d                     li      a1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
f0002270:       |  \-> 00c92603                 lw      a2,12(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  if (config.parity_enable == kDifToggleEnabled) {
f0002274:       |      8d4d                     or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
  if (config.parity == kDifUartParityOdd) {
f0002276:       |  /-- e219                     bnez    a2,f000227c <dif_uart_configure+0x9e>
f0002278:       |  |   08056513                 ori     a0,a0,128
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:143
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
f000227c:       |  \-> 400c                     lw      a1,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000227e:       |      c988                     sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:146

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f0002280:       |      4008                     lw      a0,0(s0)
f0002282:       |      4481                     li      s1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002284:       |      00052223                 sw      zero,4(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:149

  return kDifOk;
}
f0002288:       \----> 8526                     mv      a0,s1
f000228a:              49b2                     lw      s3,12(sp)
f000228c:              4942                     lw      s2,16(sp)
f000228e:              44d2                     lw      s1,20(sp)
f0002290:              4462                     lw      s0,24(sp)
f0002292:              40f2                     lw      ra,28(sp)
f0002294:              6105                     addi    sp,sp,32
f0002296:              8082                     ret

f0002298 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:256

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
f0002298:       /----- cd19                     beqz    a0,f00022b6 <dif_uart_byte_send_polled+0x1e>
f000229a:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f000229c:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f000229e:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:261
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
f00022a0:       |  \-- fef5                     bnez    a3,f000229c <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00022a2:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00022a4:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f00022a6:       |  /-- e299                     bnez    a3,f00022ac <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00022a8:       |  |   ce4c                     sw      a1,28(a2)
f00022aa:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00022ac:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00022ae:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:268

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
f00022b0:       |  \-- dd75                     beqz    a0,f00022ac <dif_uart_byte_send_polled+0x14>
f00022b2:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:272
  }

  return kDifOk;
}
f00022b4:       |      8082                     ret
f00022b6:       \----> 450d                     li      a0,3
f00022b8:              8082                     ret

f00022ba <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
f00022ba:                 1141                  addi    sp,sp,-16
f00022bc:                 c622                  sw      s0,12(sp)
f00022be:                 c426                  sw      s1,8(sp)
f00022c0:                 c24a                  sw      s2,4(sp)
f00022c2:                 4881                  li      a7,0
f00022c4:                 4801                  li      a6,0
f00022c6:                 4e01                  li      t3,0
f00022c8:                 4e81                  li      t4,0
f00022ca:                 03f00793              li      a5,63
f00022ce:                 42fd                  li      t0,31
f00022d0:                 00159313              slli    t1,a1,0x1
f00022d4:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
f00022d6:       /-------> fe078493              addi    s1,a5,-32
f00022da:       |     /-- 0004c563              bltz    s1,f00022e4 <udiv64_slow+0x2a>
f00022de:       |     |   0095df33              srl     t5,a1,s1
f00022e2:       |  /--|-- a809                  j       f00022f4 <udiv64_slow+0x3a>
f00022e4:       |  |  \-> 00f554b3              srl     s1,a0,a5
f00022e8:       |  |      40f28433              sub     s0,t0,a5
f00022ec:       |  |      00831433              sll     s0,t1,s0
f00022f0:       |  |      0084ef33              or      t5,s1,s0
f00022f4:       |  \----> 01fe5493              srli    s1,t3,0x1f
f00022f8:       |         001e9413              slli    s0,t4,0x1
f00022fc:       |         00946eb3              or      t4,s0,s1
f0002300:       |         001e1493              slli    s1,t3,0x1
f0002304:       |         001f7413              andi    s0,t5,1
f0002308:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
f000230c:       |  /----- 00de8563              beq     t4,a3,f0002316 <udiv64_slow+0x5c>
f0002310:       |  |      00debe33              sltu    t3,t4,a3
f0002314:       |  |  /-- a019                  j       f000231a <udiv64_slow+0x60>
f0002316:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
f000231a:       |     \-> 001e4f93              xori    t6,t3,1
f000231e:       |         4901                  li      s2,0
f0002320:       |         4481                  li      s1,0
f0002322:       |     /-- 000e1463              bnez    t3,f000232a <udiv64_slow+0x70>
f0002326:       |     |   8936                  mv      s2,a3
f0002328:       |     |   84b2                  mv      s1,a2
f000232a:       |     \-> 01f8de13              srli    t3,a7,0x1f
f000232e:       |         00181413              slli    s0,a6,0x1
f0002332:       |         01c46833              or      a6,s0,t3
f0002336:       |         0886                  slli    a7,a7,0x1
f0002338:       |         409f0e33              sub     t3,t5,s1
f000233c:       |         009f34b3              sltu    s1,t5,s1
f0002340:       |         412e8433              sub     s0,t4,s2
f0002344:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f0002348:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
f000234a:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f000234e:       \-------- f87794e3              bne     a5,t2,f00022d6 <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
f0002352:             /-- c709                  beqz    a4,f000235c <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
f0002354:             |   01c72023              sw      t3,0(a4)
f0002358:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
f000235c:             \-> 8546                  mv      a0,a7
f000235e:                 85c2                  mv      a1,a6
f0002360:                 4912                  lw      s2,4(sp)
f0002362:                 44a2                  lw      s1,8(sp)
f0002364:                 4432                  lw      s0,12(sp)
f0002366:                 0141                  addi    sp,sp,16
f0002368:                 8082                  ret

f000236a <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
f000236a:                       00153693                seqz    a3,a0
f000236e:                       0015b713                seqz    a4,a1
f0002372:                       8ed9                    or      a3,a3,a4
f0002374:       /-------------- eab5                    bnez    a3,f00023e8 <memcpy+0x7e>
f0002376:       |               4711                    li      a4,4
f0002378:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f000237a:       |        /----- 00e66c63                bltu    a2,a4,f0002392 <memcpy+0x28>
f000237e:       |        |      00a5c6b3                xor     a3,a1,a0
f0002382:       |        |      0036f793                andi    a5,a3,3
f0002386:       |        |      8832                    mv      a6,a2
f0002388:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
f000238a:       |        |  /-- eb91                    bnez    a5,f000239e <memcpy+0x34>
f000238c:       |        |  |   40a006b3                neg     a3,a0
f0002390:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002392:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002396:       |           |   9b71                    andi    a4,a4,-4
f0002398:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f000239c:       |  /--------|-- c6b9                    beqz    a3,f00023ea <memcpy+0x80>
f000239e:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f00023a0:       |  |        /-> 00f58733                add     a4,a1,a5
f00023a4:       |  |        |   00070883                lb      a7,0(a4)
f00023a8:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f00023ac:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f00023ae:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f00023b2:       |  |        \-- fef697e3                bne     a3,a5,f00023a0 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00023b6:       |  |  /-------- 0106fb63                bgeu    a3,a6,f00023cc <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  // the pointer points to four bytes of four-byte-aligned memory.
  //
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00023ba:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00023be:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00023c0:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f00023c4:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f00023c6:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f00023c8:       |  |  |  +----- ff06e9e3                bltu    a3,a6,f00023ba <memcpy+0x50>
f00023cc:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,f00023e8 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
f00023d0:       |  |  |  |      8e15                    sub     a2,a2,a3
f00023d2:       |  |  |  |      00d50733                add     a4,a0,a3
f00023d6:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
f00023d8:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
f00023dc:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
f00023e0:       |  |  |  |  |   167d                    addi    a2,a2,-1
f00023e2:       |  |  |  |  |   0705                    addi    a4,a4,1
f00023e4:       |  |  |  |  |   0585                    addi    a1,a1,1
f00023e6:       |  |  |  |  \-- fa6d                    bnez    a2,f00023d8 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
f00023e8:       \--|--|--|----> 8082                    ret
f00023ea:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00023ec:             |  \----- fd06e7e3                bltu    a3,a6,f00023ba <memcpy+0x50>
f00023f0:             \-------- bff1                    j       f00023cc <memcpy+0x62>

f00023f2 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
f00023f2:                 4691                  li      a3,4
f00023f4:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00023f6:             /-- 00d66663              bltu    a2,a3,f0002402 <memset+0x10>
f00023fa:             |   40a006b3              neg     a3,a0
f00023fe:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002402:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002406:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f000240a:          /----- cb01                  beqz    a4,f000241a <memset+0x28>
f000240c:          |      87aa                  mv      a5,a0
f000240e:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
f0002410:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
f0002414:          |  |   16fd                  addi    a3,a3,-1
f0002416:          |  |   0785                  addi    a5,a5,1
f0002418:          |  \-- fee5                  bnez    a3,f0002410 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f000241a:       /--\----X 02080263              beqz    a6,f000243e <memset+0x4c>
f000241e:       |         00e808b3              add     a7,a6,a4
f0002422:       |         0ff5f813              andi    a6,a1,255
f0002426:       |         010107b7              lui     a5,0x1010
f000242a:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xfd0101>
f000242e:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002432:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f0002436:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f0002438:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f000243a:       |     \-- ff176ce3              bltu    a4,a7,f0002432 <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
f000243e:       \--/----X 00c77a63              bgeu    a4,a2,f0002452 <memset+0x60>
f0002442:          |      8e19                  sub     a2,a2,a4
f0002444:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
f0002448:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
f000244c:          |  |   167d                  addi    a2,a2,-1
f000244e:          |  |   0685                  addi    a3,a3,1
f0002450:          |  \-- fe65                  bnez    a2,f0002448 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
f0002452:          \----> 8082                  ret

f0002454 <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
f0002454:                             4691                      li      a3,4
f0002456:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002458:                         /-- 00d66663                  bltu    a2,a3,f0002464 <memchr+0x10>
f000245c:                         |   40a006b3                  neg     a3,a0
f0002460:                         |   0036fe93                  andi    t4,a3,3
f0002464:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002468:                      /----- 000e8b63                  beqz    t4,f000247e <memchr+0x2a>
f000246c:                      |      85aa                      mv      a1,a0
f000246e:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
f0002470:                      |  /-> 0005c683                  lbu     a3,0(a1)
f0002474:       /--------------|--|-- 09c68563                  beq     a3,t3,f00024fe <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
f0002478:       |              |  |   17fd                      addi    a5,a5,-1
f000247a:       |              |  |   0585                      addi    a1,a1,1
f000247c:       |              |  \-- fbf5                      bnez    a5,f0002470 <memchr+0x1c>
f000247e:       |              \----> 41d605b3                  sub     a1,a2,t4
f0002482:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002484:       |  /----------------- c9a9                      beqz    a1,f00024d6 <memchr+0x82>
f0002486:       |  |                  01d58833                  add     a6,a1,t4
f000248a:       |  |                  010105b7                  lui     a1,0x1010
f000248e:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
f0002492:       |  |                  02be02b3                  mul     t0,t3,a1
f0002496:       |  |                  0ff00893                  li      a7,255
f000249a:       |  |                  65c1                      lui     a1,0x10
f000249c:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f00024a0:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00024a4:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00024a8:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
f00024aa:       |  |              |   0056c7b3                  xor     a5,a3,t0
f00024ae:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f00024b2:       |  |              |   0ff6f713                  andi    a4,a3,255
f00024b6:       +--|--------------|-- 05170463                  beq     a4,a7,f00024fe <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f00024ba:       |  |              |   0076f733                  and     a4,a3,t2
f00024be:       |  |  /-----------|-- 02770b63                  beq     a4,t2,f00024f4 <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f00024c2:       |  |  |           |   0066f6b3                  and     a3,a3,t1
f00024c6:       |  |  |  /--------|-- 02668963                  beq     a3,t1,f00024f8 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f00024ca:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
f00024ce:       |  |  |  |  /-----|-- c69d                      beqz    a3,f00024fc <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00024d0:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
f00024d2:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,f00024a4 <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
f00024d6:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,f00024f0 <memchr+0x9c>
f00024da:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
f00024de:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
f00024e2:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
f00024e6:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,f00024fe <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
f00024ea:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
f00024ec:       |     |  |  |  |  |   0585                      addi    a1,a1,1
f00024ee:       |     |  |  |  |  \-- fa75                      bnez    a2,f00024e2 <memchr+0x8e>
f00024f0:       |     |  |  |  \----> 4581                      li      a1,0
f00024f2:       +-----|--|--|-------- a031                      j       f00024fe <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
f00024f4:       |     \--|--|-------> 0585                      addi    a1,a1,1
f00024f6:       +--------|--|-------- a021                      j       f00024fe <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
f00024f8:       |        \--|-------> 0589                      addi    a1,a1,2
f00024fa:       +-----------|-------- a011                      j       f00024fe <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
f00024fc:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f00024fe:       \-------------------> 852e                      mv      a0,a1
f0002500:                             8082                      ret

f0002502 <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
f0002502:                          4691                 li      a3,4
f0002504:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002506:                      /-- 00d66663             bltu    a2,a3,f0002512 <memrchr+0x10>
f000250a:                      |   40a006b3             neg     a3,a0
f000250e:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002512:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002516:                          9af1                 andi    a3,a3,-4
f0002518:                          006687b3             add     a5,a3,t1
f000251c:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
f000251e:                      /-- 00f66363             bltu    a2,a5,f0002524 <memrchr+0x22>
f0002522:                      |   86be                 mv      a3,a5
f0002524:                      \-> 0ff5f393             andi    t2,a1,255
f0002528:                   /--/-X 00c7fd63             bgeu    a5,a2,f0002542 <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
f000252c:                   |  |   00c50733             add     a4,a0,a2
f0002530:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
f0002534:                   |  |   fff60713             addi    a4,a2,-1
f0002538:                   |  |   863a                 mv      a2,a4
f000253a:                   |  \-- fe7597e3             bne     a1,t2,f0002528 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f000253e:                   |      953a                 add     a0,a0,a4
f0002540:                   |      8082                 ret
f0002542:                   \----> 010105b7             lui     a1,0x1010
f0002546:                          10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
f000254a:                          02b382b3             mul     t0,t2,a1
f000254e:                          00ff0837             lui     a6,0xff0
f0002552:                          65c1                 lui     a1,0x10
f0002554:                          f0058793             addi    a5,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f0002558:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
f000255c:       /--------------/-X 04d37563             bgeu    t1,a3,f00025a6 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002560:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0002564:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
f0002568:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f000256c:       |              |   01875593             srli    a1,a4,0x18
f0002570:       |  /-----------|-- cd95                 beqz    a1,f00025ac <memrchr+0xaa>
f0002572:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f0002576:       |  |           |   010775b3             and     a1,a4,a6
f000257a:       |  |  /--------|-- 03058c63             beq     a1,a6,f00025b2 <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f000257e:       |  |  |        |   00f775b3             and     a1,a4,a5
f0002582:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,f00025b8 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f0002586:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
f000258a:       |  |  |  |     |   16f1                 addi    a3,a3,-4
f000258c:       |  |  |  |     \-- fd1598e3             bne     a1,a7,f000255c <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002590:       |  |  |  |         9536                 add     a0,a0,a3
f0002592:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
f0002594:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
f0002598:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
f000259c:       |  |  |  |     |   fff68613             addi    a2,a3,-1
f00025a0:       |  |  |  |     |   86b2                 mv      a3,a2
f00025a2:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,f00025be <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
f00025a6:       \--|--|--|--|--\-X f6fd                 bnez    a3,f0002594 <memrchr+0x92>
f00025a8:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00025aa:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
f00025ac:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00025b0:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
f00025b2:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00025b6:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
f00025b8:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00025bc:                   |      8082                 ret
f00025be:                   \----> 9532                 add     a0,a0,a2
f00025c0:                          8082                 ret
f00025c2:                          0000                 unimp
