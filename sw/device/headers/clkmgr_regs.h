// Generated register defines for CLKMGR

// Copyright information found in source file:
// Copyright lowRISC contributors.Copyright lowRISC contributors.

// Licensing information found in source file:
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#ifndef _CLKMGR_REG_DEFS_
#define _CLKMGR_REG_DEFS_

#ifdef __cplusplus
extern "C" {
#endif
// Number of clock groups
#define CLKMGR_PARAM_NUM_GROUPS 7

// Number of SW gateable clocks
#define CLKMGR_PARAM_NUM_SW_GATEABLE_CLOCKS 4

// Number of hintable clocks
#define CLKMGR_PARAM_NUM_HINTABLE_CLOCKS 4

// Number of alerts
#define CLKMGR_PARAM_NUM_ALERTS 2

// Register width
#define CLKMGR_PARAM_REG_WIDTH 32

// Alert Test Register
#define CLKMGR_ALERT_TEST_REG_OFFSET 0x0
#define CLKMGR_ALERT_TEST_REG_RESVAL 0x0
#define CLKMGR_ALERT_TEST_RECOV_FAULT_BIT 0
#define CLKMGR_ALERT_TEST_FATAL_FAULT_BIT 1

// External clock control write enable
#define CLKMGR_EXTCLK_CTRL_REGWEN_REG_OFFSET 0x4
#define CLKMGR_EXTCLK_CTRL_REGWEN_REG_RESVAL 0x1
#define CLKMGR_EXTCLK_CTRL_REGWEN_EN_BIT 0

// Select external clock
#define CLKMGR_EXTCLK_CTRL_REG_OFFSET 0x8
#define CLKMGR_EXTCLK_CTRL_REG_RESVAL 0x99
#define CLKMGR_EXTCLK_CTRL_SEL_MASK 0xf
#define CLKMGR_EXTCLK_CTRL_SEL_OFFSET 0
#define CLKMGR_EXTCLK_CTRL_SEL_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_EXTCLK_CTRL_SEL_MASK, .index = CLKMGR_EXTCLK_CTRL_SEL_OFFSET })
#define CLKMGR_EXTCLK_CTRL_HI_SPEED_SEL_MASK 0xf
#define CLKMGR_EXTCLK_CTRL_HI_SPEED_SEL_OFFSET 4
#define CLKMGR_EXTCLK_CTRL_HI_SPEED_SEL_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_EXTCLK_CTRL_HI_SPEED_SEL_MASK, .index = CLKMGR_EXTCLK_CTRL_HI_SPEED_SEL_OFFSET })

// Status of requested external clock switch
#define CLKMGR_EXTCLK_STATUS_REG_OFFSET 0xc
#define CLKMGR_EXTCLK_STATUS_REG_RESVAL 0x9
#define CLKMGR_EXTCLK_STATUS_ACK_MASK 0xf
#define CLKMGR_EXTCLK_STATUS_ACK_OFFSET 0
#define CLKMGR_EXTCLK_STATUS_ACK_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_EXTCLK_STATUS_ACK_MASK, .index = CLKMGR_EXTCLK_STATUS_ACK_OFFSET })

// Jitter write enable
#define CLKMGR_JITTER_REGWEN_REG_OFFSET 0x10
#define CLKMGR_JITTER_REGWEN_REG_RESVAL 0x1
#define CLKMGR_JITTER_REGWEN_EN_BIT 0

// Enable jittery clock
#define CLKMGR_JITTER_ENABLE_REG_OFFSET 0x14
#define CLKMGR_JITTER_ENABLE_REG_RESVAL 0x9
#define CLKMGR_JITTER_ENABLE_VAL_MASK 0xf
#define CLKMGR_JITTER_ENABLE_VAL_OFFSET 0
#define CLKMGR_JITTER_ENABLE_VAL_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_JITTER_ENABLE_VAL_MASK, .index = CLKMGR_JITTER_ENABLE_VAL_OFFSET })

// Clock enable for software gateable clocks.
#define CLKMGR_CLK_ENABLES_REG_OFFSET 0x18
#define CLKMGR_CLK_ENABLES_REG_RESVAL 0xf
#define CLKMGR_CLK_ENABLES_CLK_IO_DIV4_PERI_EN_BIT 0
#define CLKMGR_CLK_ENABLES_CLK_IO_PERI_EN_BIT 1
#define CLKMGR_CLK_ENABLES_CLK_IO_DIV2_PERI_EN_BIT 2
#define CLKMGR_CLK_ENABLES_CLK_USB_PERI_EN_BIT 3

// Clock hint for software gateable transactional clocks during active mode.
#define CLKMGR_CLK_HINTS_REG_OFFSET 0x1c
#define CLKMGR_CLK_HINTS_REG_RESVAL 0xf
#define CLKMGR_CLK_HINTS_CLK_MAIN_AES_HINT_BIT 0
#define CLKMGR_CLK_HINTS_CLK_MAIN_HMAC_HINT_BIT 1
#define CLKMGR_CLK_HINTS_CLK_MAIN_KMAC_HINT_BIT 2
#define CLKMGR_CLK_HINTS_CLK_MAIN_OTBN_HINT_BIT 3

// Since the final state of !!CLK_HINTS is not always determined by software,
#define CLKMGR_CLK_HINTS_STATUS_REG_OFFSET 0x20
#define CLKMGR_CLK_HINTS_STATUS_REG_RESVAL 0xf
#define CLKMGR_CLK_HINTS_STATUS_CLK_MAIN_AES_VAL_BIT 0
#define CLKMGR_CLK_HINTS_STATUS_CLK_MAIN_HMAC_VAL_BIT 1
#define CLKMGR_CLK_HINTS_STATUS_CLK_MAIN_KMAC_VAL_BIT 2
#define CLKMGR_CLK_HINTS_STATUS_CLK_MAIN_OTBN_VAL_BIT 3

// Measurement control write enable
#define CLKMGR_MEASURE_CTRL_REGWEN_REG_OFFSET 0x24
#define CLKMGR_MEASURE_CTRL_REGWEN_REG_RESVAL 0x1
#define CLKMGR_MEASURE_CTRL_REGWEN_EN_BIT 0

// Enable for measurement control
#define CLKMGR_IO_MEAS_CTRL_EN_REG_OFFSET 0x28
#define CLKMGR_IO_MEAS_CTRL_EN_REG_RESVAL 0x9
#define CLKMGR_IO_MEAS_CTRL_EN_EN_MASK 0xf
#define CLKMGR_IO_MEAS_CTRL_EN_EN_OFFSET 0
#define CLKMGR_IO_MEAS_CTRL_EN_EN_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_MEAS_CTRL_EN_EN_MASK, .index = CLKMGR_IO_MEAS_CTRL_EN_EN_OFFSET })

// Configuration controls for io measurement.
#define CLKMGR_IO_MEAS_CTRL_SHADOWED_REG_OFFSET 0x2c
#define CLKMGR_IO_MEAS_CTRL_SHADOWED_REG_RESVAL 0x759ea
#define CLKMGR_IO_MEAS_CTRL_SHADOWED_HI_MASK 0x3ff
#define CLKMGR_IO_MEAS_CTRL_SHADOWED_HI_OFFSET 0
#define CLKMGR_IO_MEAS_CTRL_SHADOWED_HI_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_MEAS_CTRL_SHADOWED_HI_MASK, .index = CLKMGR_IO_MEAS_CTRL_SHADOWED_HI_OFFSET })
#define CLKMGR_IO_MEAS_CTRL_SHADOWED_LO_MASK 0x3ff
#define CLKMGR_IO_MEAS_CTRL_SHADOWED_LO_OFFSET 10
#define CLKMGR_IO_MEAS_CTRL_SHADOWED_LO_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_MEAS_CTRL_SHADOWED_LO_MASK, .index = CLKMGR_IO_MEAS_CTRL_SHADOWED_LO_OFFSET })

// Enable for measurement control
#define CLKMGR_IO_DIV2_MEAS_CTRL_EN_REG_OFFSET 0x30
#define CLKMGR_IO_DIV2_MEAS_CTRL_EN_REG_RESVAL 0x9
#define CLKMGR_IO_DIV2_MEAS_CTRL_EN_EN_MASK 0xf
#define CLKMGR_IO_DIV2_MEAS_CTRL_EN_EN_OFFSET 0
#define CLKMGR_IO_DIV2_MEAS_CTRL_EN_EN_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_DIV2_MEAS_CTRL_EN_EN_MASK, .index = CLKMGR_IO_DIV2_MEAS_CTRL_EN_EN_OFFSET })

// Configuration controls for io_div2 measurement.
#define CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_REG_OFFSET 0x34
#define CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_REG_RESVAL 0x1ccfa
#define CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_HI_MASK 0x1ff
#define CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_HI_OFFSET 0
#define CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_HI_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_HI_MASK, .index = CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_HI_OFFSET })
#define CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_LO_MASK 0x1ff
#define CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_LO_OFFSET 9
#define CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_LO_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_LO_MASK, .index = CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_LO_OFFSET })

// Enable for measurement control
#define CLKMGR_IO_DIV4_MEAS_CTRL_EN_REG_OFFSET 0x38
#define CLKMGR_IO_DIV4_MEAS_CTRL_EN_REG_RESVAL 0x9
#define CLKMGR_IO_DIV4_MEAS_CTRL_EN_EN_MASK 0xf
#define CLKMGR_IO_DIV4_MEAS_CTRL_EN_EN_OFFSET 0
#define CLKMGR_IO_DIV4_MEAS_CTRL_EN_EN_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_DIV4_MEAS_CTRL_EN_EN_MASK, .index = CLKMGR_IO_DIV4_MEAS_CTRL_EN_EN_OFFSET })

// Configuration controls for io_div4 measurement.
#define CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_REG_OFFSET 0x3c
#define CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_REG_RESVAL 0x6e82
#define CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_HI_MASK 0xff
#define CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_HI_OFFSET 0
#define CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_HI_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_HI_MASK, .index = CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_HI_OFFSET })
#define CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_LO_MASK 0xff
#define CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_LO_OFFSET 8
#define CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_LO_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_LO_MASK, .index = CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_LO_OFFSET })

// Enable for measurement control
#define CLKMGR_MAIN_MEAS_CTRL_EN_REG_OFFSET 0x40
#define CLKMGR_MAIN_MEAS_CTRL_EN_REG_RESVAL 0x9
#define CLKMGR_MAIN_MEAS_CTRL_EN_EN_MASK 0xf
#define CLKMGR_MAIN_MEAS_CTRL_EN_EN_OFFSET 0
#define CLKMGR_MAIN_MEAS_CTRL_EN_EN_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_MAIN_MEAS_CTRL_EN_EN_MASK, .index = CLKMGR_MAIN_MEAS_CTRL_EN_EN_OFFSET })

// Configuration controls for main measurement.
#define CLKMGR_MAIN_MEAS_CTRL_SHADOWED_REG_OFFSET 0x44
#define CLKMGR_MAIN_MEAS_CTRL_SHADOWED_REG_RESVAL 0x7a9fe
#define CLKMGR_MAIN_MEAS_CTRL_SHADOWED_HI_MASK 0x3ff
#define CLKMGR_MAIN_MEAS_CTRL_SHADOWED_HI_OFFSET 0
#define CLKMGR_MAIN_MEAS_CTRL_SHADOWED_HI_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_MAIN_MEAS_CTRL_SHADOWED_HI_MASK, .index = CLKMGR_MAIN_MEAS_CTRL_SHADOWED_HI_OFFSET })
#define CLKMGR_MAIN_MEAS_CTRL_SHADOWED_LO_MASK 0x3ff
#define CLKMGR_MAIN_MEAS_CTRL_SHADOWED_LO_OFFSET 10
#define CLKMGR_MAIN_MEAS_CTRL_SHADOWED_LO_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_MAIN_MEAS_CTRL_SHADOWED_LO_MASK, .index = CLKMGR_MAIN_MEAS_CTRL_SHADOWED_LO_OFFSET })

// Enable for measurement control
#define CLKMGR_USB_MEAS_CTRL_EN_REG_OFFSET 0x48
#define CLKMGR_USB_MEAS_CTRL_EN_REG_RESVAL 0x9
#define CLKMGR_USB_MEAS_CTRL_EN_EN_MASK 0xf
#define CLKMGR_USB_MEAS_CTRL_EN_EN_OFFSET 0
#define CLKMGR_USB_MEAS_CTRL_EN_EN_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_USB_MEAS_CTRL_EN_EN_MASK, .index = CLKMGR_USB_MEAS_CTRL_EN_EN_OFFSET })

// Configuration controls for usb measurement.
#define CLKMGR_USB_MEAS_CTRL_SHADOWED_REG_OFFSET 0x4c
#define CLKMGR_USB_MEAS_CTRL_SHADOWED_REG_RESVAL 0x1ccfa
#define CLKMGR_USB_MEAS_CTRL_SHADOWED_HI_MASK 0x1ff
#define CLKMGR_USB_MEAS_CTRL_SHADOWED_HI_OFFSET 0
#define CLKMGR_USB_MEAS_CTRL_SHADOWED_HI_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_USB_MEAS_CTRL_SHADOWED_HI_MASK, .index = CLKMGR_USB_MEAS_CTRL_SHADOWED_HI_OFFSET })
#define CLKMGR_USB_MEAS_CTRL_SHADOWED_LO_MASK 0x1ff
#define CLKMGR_USB_MEAS_CTRL_SHADOWED_LO_OFFSET 9
#define CLKMGR_USB_MEAS_CTRL_SHADOWED_LO_FIELD \
  ((bitfield_field32_t) { .mask = CLKMGR_USB_MEAS_CTRL_SHADOWED_LO_MASK, .index = CLKMGR_USB_MEAS_CTRL_SHADOWED_LO_OFFSET })

// Recoverable Error code
#define CLKMGR_RECOV_ERR_CODE_REG_OFFSET 0x50
#define CLKMGR_RECOV_ERR_CODE_REG_RESVAL 0x0
#define CLKMGR_RECOV_ERR_CODE_SHADOW_UPDATE_ERR_BIT 0
#define CLKMGR_RECOV_ERR_CODE_IO_MEASURE_ERR_BIT 1
#define CLKMGR_RECOV_ERR_CODE_IO_DIV2_MEASURE_ERR_BIT 2
#define CLKMGR_RECOV_ERR_CODE_IO_DIV4_MEASURE_ERR_BIT 3
#define CLKMGR_RECOV_ERR_CODE_MAIN_MEASURE_ERR_BIT 4
#define CLKMGR_RECOV_ERR_CODE_USB_MEASURE_ERR_BIT 5
#define CLKMGR_RECOV_ERR_CODE_IO_TIMEOUT_ERR_BIT 6
#define CLKMGR_RECOV_ERR_CODE_IO_DIV2_TIMEOUT_ERR_BIT 7
#define CLKMGR_RECOV_ERR_CODE_IO_DIV4_TIMEOUT_ERR_BIT 8
#define CLKMGR_RECOV_ERR_CODE_MAIN_TIMEOUT_ERR_BIT 9
#define CLKMGR_RECOV_ERR_CODE_USB_TIMEOUT_ERR_BIT 10

// Error code
#define CLKMGR_FATAL_ERR_CODE_REG_OFFSET 0x54
#define CLKMGR_FATAL_ERR_CODE_REG_RESVAL 0x0
#define CLKMGR_FATAL_ERR_CODE_REG_INTG_BIT 0
#define CLKMGR_FATAL_ERR_CODE_IDLE_CNT_BIT 1
#define CLKMGR_FATAL_ERR_CODE_SHADOW_STORAGE_ERR_BIT 2

#ifdef __cplusplus
}  // extern "C"
#endif
#endif  // _CLKMGR_REG_DEFS_
// End generated register defines for CLKMGR