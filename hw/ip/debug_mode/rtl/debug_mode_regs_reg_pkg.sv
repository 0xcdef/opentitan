// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package debug_mode_regs_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } debug_mode_regs_reg2hw_payload_1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } debug_mode_regs_reg2hw_payload_2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } debug_mode_regs_reg2hw_payload_3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } debug_mode_regs_reg2hw_address_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic [30:0] q;
    } field1;
  } debug_mode_regs_reg2hw_start_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } debug_mode;
    struct packed {
      logic [30:0] q;
    } field1;
  } debug_mode_regs_reg2hw_debug_mode_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } start;
    struct packed {
      logic [30:0] d;
      logic        de;
    } field1;
  } debug_mode_regs_hw2reg_start_reg_t;

  // Register -> HW type
  typedef struct packed {
    debug_mode_regs_reg2hw_payload_1_reg_t payload_1; // [191:160]
    debug_mode_regs_reg2hw_payload_2_reg_t payload_2; // [159:128]
    debug_mode_regs_reg2hw_payload_3_reg_t payload_3; // [127:96]
    debug_mode_regs_reg2hw_address_reg_t address; // [95:64]
    debug_mode_regs_reg2hw_start_reg_t start; // [63:32]
    debug_mode_regs_reg2hw_debug_mode_reg_t debug_mode; // [31:0]
  } debug_mode_regs_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    debug_mode_regs_hw2reg_start_reg_t start; // [33:0]
  } debug_mode_regs_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] DEBUG_MODE_REGS_PAYLOAD_1_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] DEBUG_MODE_REGS_PAYLOAD_2_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] DEBUG_MODE_REGS_PAYLOAD_3_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] DEBUG_MODE_REGS_ADDRESS_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] DEBUG_MODE_REGS_START_OFFSET = 5'h 10;
  parameter logic [BlockAw-1:0] DEBUG_MODE_REGS_DEBUG_MODE_OFFSET = 5'h 14;

  // Register index
  typedef enum int {
    DEBUG_MODE_REGS_PAYLOAD_1,
    DEBUG_MODE_REGS_PAYLOAD_2,
    DEBUG_MODE_REGS_PAYLOAD_3,
    DEBUG_MODE_REGS_ADDRESS,
    DEBUG_MODE_REGS_START,
    DEBUG_MODE_REGS_DEBUG_MODE
  } debug_mode_regs_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] DEBUG_MODE_REGS_PERMIT [6] = '{
    4'b 1111, // index[0] DEBUG_MODE_REGS_PAYLOAD_1
    4'b 1111, // index[1] DEBUG_MODE_REGS_PAYLOAD_2
    4'b 1111, // index[2] DEBUG_MODE_REGS_PAYLOAD_3
    4'b 1111, // index[3] DEBUG_MODE_REGS_ADDRESS
    4'b 1111, // index[4] DEBUG_MODE_REGS_START
    4'b 1111  // index[5] DEBUG_MODE_REGS_DEBUG_MODE
  };

endpackage
